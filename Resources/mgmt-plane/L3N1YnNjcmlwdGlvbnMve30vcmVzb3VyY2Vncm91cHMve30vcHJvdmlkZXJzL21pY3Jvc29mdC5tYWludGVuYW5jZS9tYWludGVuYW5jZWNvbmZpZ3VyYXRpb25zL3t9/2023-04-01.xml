<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.maintenance/maintenanceconfigurations/{}" version="2023-04-01" swagger="mgmt-plane/maintenance/ResourceProviders/Microsoft.Maintenance/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZWdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTWFpbnRlbmFuY2UvbWFpbnRlbmFuY2VDb25maWd1cmF0aW9ucy97cmVzb3VyY2VOYW1lfQ==/V/MjAyMy0wNC0wMQ=="/>
  <commandGroup name="maintenance configuration">
    <command name="show" version="2023-04-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.maintenance/maintenanceconfigurations/{}" version="2023-04-01" swagger="mgmt-plane/maintenance/ResourceProviders/Microsoft.Maintenance/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZWdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTWFpbnRlbmFuY2UvbWFpbnRlbmFuY2VDb25maWd1cmF0aW9ucy97cmVzb3VyY2VOYW1lfQ==/V/MjAyMy0wNC0wMQ=="/>
      <argGroup name="">
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.resourceName" options="resource-name name n" required="True" idPart="name">
          <help short="Maintenance Configuration Name"/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="MaintenanceConfigurations_Get">
        <http path="/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}">
          <request method="get">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="resourceName" arg="$Path.resourceName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-04-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id"/>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="extensionProperties">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop type="object" name="installPatches">
                      <prop type="object" name="linuxParameters">
                        <prop type="array<string>" name="classificationsToInclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="packageNameMasksToExclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="packageNameMasksToInclude">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="string" name="rebootSetting">
                        <default value="&quot;IfRequired&quot;"/>
                        <enum>
                          <item value="&quot;Always&quot;"/>
                          <item value="&quot;IfRequired&quot;"/>
                          <item value="&quot;Never&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="windowsParameters">
                        <prop type="array<string>" name="classificationsToInclude">
                          <item type="string"/>
                        </prop>
                        <prop type="boolean" name="excludeKbsRequiringReboot"/>
                        <prop type="array<string>" name="kbNumbersToExclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="kbNumbersToInclude">
                          <item type="string"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="string" name="maintenanceScope">
                      <enum>
                        <item value="&quot;Extension&quot;"/>
                        <item value="&quot;Host&quot;"/>
                        <item value="&quot;InGuestPatch&quot;"/>
                        <item value="&quot;OSImage&quot;"/>
                        <item value="&quot;Resource&quot;"/>
                        <item value="&quot;SQLDB&quot;"/>
                        <item value="&quot;SQLManagedInstance&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="maintenanceWindow" clientFlatten="True">
                      <prop type="string" name="duration"/>
                      <prop type="string" name="expirationDateTime"/>
                      <prop type="string" name="recurEvery"/>
                      <prop type="string" name="startDateTime"/>
                      <prop type="string" name="timeZone"/>
                    </prop>
                    <prop type="string" name="namespace"/>
                    <prop type="string" name="visibility">
                      <enum>
                        <item value="&quot;Custom&quot;"/>
                        <item value="&quot;Public&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2023-04-01" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.maintenance/maintenanceconfigurations/{}" version="2023-04-01" swagger="mgmt-plane/maintenance/ResourceProviders/Microsoft.Maintenance/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZWdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTWFpbnRlbmFuY2UvbWFpbnRlbmFuY2VDb25maWd1cmF0aW9ucy97cmVzb3VyY2VOYW1lfQ==/V/MjAyMy0wNC0wMQ=="/>
      <argGroup name="">
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.resourceName" options="resource-name name n" required="True" idPart="name">
          <help short="Maintenance Configuration Name"/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="MaintenanceConfigurations_Delete">
        <http path="/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}">
          <request method="delete">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="resourceName" arg="$Path.resourceName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-04-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id"/>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="extensionProperties">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop type="object" name="installPatches">
                      <prop type="object" name="linuxParameters">
                        <prop type="array<string>" name="classificationsToInclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="packageNameMasksToExclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="packageNameMasksToInclude">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="string" name="rebootSetting">
                        <default value="&quot;IfRequired&quot;"/>
                        <enum>
                          <item value="&quot;Always&quot;"/>
                          <item value="&quot;IfRequired&quot;"/>
                          <item value="&quot;Never&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="windowsParameters">
                        <prop type="array<string>" name="classificationsToInclude">
                          <item type="string"/>
                        </prop>
                        <prop type="boolean" name="excludeKbsRequiringReboot"/>
                        <prop type="array<string>" name="kbNumbersToExclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="kbNumbersToInclude">
                          <item type="string"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="string" name="maintenanceScope">
                      <enum>
                        <item value="&quot;Extension&quot;"/>
                        <item value="&quot;Host&quot;"/>
                        <item value="&quot;InGuestPatch&quot;"/>
                        <item value="&quot;OSImage&quot;"/>
                        <item value="&quot;Resource&quot;"/>
                        <item value="&quot;SQLDB&quot;"/>
                        <item value="&quot;SQLManagedInstance&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="maintenanceWindow" clientFlatten="True">
                      <prop type="string" name="duration"/>
                      <prop type="string" name="expirationDateTime"/>
                      <prop type="string" name="recurEvery"/>
                      <prop type="string" name="startDateTime"/>
                      <prop type="string" name="timeZone"/>
                    </prop>
                    <prop type="string" name="namespace"/>
                    <prop type="string" name="visibility">
                      <enum>
                        <item value="&quot;Custom&quot;"/>
                        <item value="&quot;Public&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="create" version="2023-04-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.maintenance/maintenanceconfigurations/{}" version="2023-04-01" swagger="mgmt-plane/maintenance/ResourceProviders/Microsoft.Maintenance/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZWdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTWFpbnRlbmFuY2UvbWFpbnRlbmFuY2VDb25maWd1cmF0aW9ucy97cmVzb3VyY2VOYW1lfQ==/V/MjAyMy0wNC0wMQ=="/>
      <argGroup name="">
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.resourceName" options="resource-name name n" required="True" idPart="name">
          <help short="Maintenance Configuration Name"/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Configuration">
        <arg type="ResourceLocation" var="$configuration.location" options="location l" group="Configuration">
          <help short="Gets or sets location of the resource"/>
        </arg>
        <arg type="object" var="$configuration.tags" options="tags" group="Configuration">
          <help short="Gets or sets tags of the resource"/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="InstallPatches">
        <arg type="object" var="$configuration.properties.installPatches.linuxParameters" options="install-patches-linux-parameters linux-parameters" group="InstallPatches">
          <help short="Input parameters specific to patching Linux machine. For Windows machines, do not pass this property."/>
          <arg type="array<string>" var="$configuration.properties.installPatches.linuxParameters.classificationsToInclude" options="classifications-to-include-list" group="" singularOptions="classifications-to-include">
            <help short="Classification category of patches to be patched"/>
            <item type="string"/>
          </arg>
          <arg type="array<string>" var="$configuration.properties.installPatches.linuxParameters.packageNameMasksToExclude" options="package-name-masks-to-exclude-list" group="" singularOptions="package-name-masks-to-exclude">
            <help short="Package names to be excluded for patching."/>
            <item type="string"/>
          </arg>
          <arg type="array<string>" var="$configuration.properties.installPatches.linuxParameters.packageNameMasksToInclude" options="package-name-masks-to-include-list" group="" singularOptions="package-name-masks-to-include">
            <help short="Package names to be included for patching."/>
            <item type="string"/>
          </arg>
        </arg>
        <arg type="string" var="$configuration.properties.installPatches.rebootSetting" options="reboot-setting" group="InstallPatches">
          <help short="Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed."/>
          <enum>
            <item name="Always" value="&quot;Always&quot;"/>
            <item name="IfRequired" value="&quot;IfRequired&quot;"/>
            <item name="Never" value="&quot;Never&quot;"/>
          </enum>
        </arg>
        <arg type="object" var="$configuration.properties.installPatches.windowsParameters" options="install-patches-windows-parameters windows-parameters" group="InstallPatches">
          <help short="Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property."/>
          <arg type="array<string>" var="$configuration.properties.installPatches.windowsParameters.classificationsToInclude" options="classifications-to-include-list" group="" singularOptions="classifications-to-include">
            <help short="Classification category of patches to be patched"/>
            <item type="string"/>
          </arg>
          <arg type="boolean" var="$configuration.properties.installPatches.windowsParameters.excludeKbsRequiringReboot" options="exclude-kbs-requiring-reboot">
            <help short="Exclude patches which need reboot"/>
          </arg>
          <arg type="array<string>" var="$configuration.properties.installPatches.windowsParameters.kbNumbersToExclude" options="kb-numbers-to-exclude-list" group="" singularOptions="kb-numbers-to-exclude">
            <help short="Windows KBID to be excluded for patching."/>
            <item type="string"/>
          </arg>
          <arg type="array<string>" var="$configuration.properties.installPatches.windowsParameters.kbNumbersToInclude" options="kb-numbers-to-include-list" group="" singularOptions="kb-numbers-to-exclude">
            <help short="Windows KBID to be included for patching."/>
            <item type="string"/>
          </arg>
        </arg>
      </argGroup>
      <argGroup name="MaintenanceWindow">
        <arg type="string" var="$configuration.properties.maintenanceWindow.duration" options="maintenance-window-duration duration" group="MaintenanceWindow">
          <help short="Duration of the maintenance window in HH:mm format. If not provided, default value will be used based on maintenance scope provided. Example: 05:00."/>
        </arg>
        <arg type="string" var="$configuration.properties.maintenanceWindow.expirationDateTime" options="maintenance-window-expiration-date-time expiration-date-time" group="MaintenanceWindow">
          <help short="Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone. Expiration date must be set to a future date. If not provided, it will be set to the maximum datetime 9999-12-31 23:59:59."/>
        </arg>
        <arg type="string" var="$configuration.properties.maintenanceWindow.recurEvery" options="maintenance-window-recur-every recur-every" group="MaintenanceWindow">
          <help short="Rate at which a Maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules. Daily schedule are formatted as recurEvery: [Frequency as integer]['Day(s)']. If no frequency is provided, the default frequency is 1. Daily schedule examples are recurEvery: Day, recurEvery: 3Days.  Weekly schedule are formatted as recurEvery: [Frequency as integer]['Week(s)'] [Optional comma separated list of weekdays Monday-Sunday]. Weekly schedule examples are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are formatted as [Frequency as integer]['Month(s)'] [Comma separated list of month days] or [Frequency as integer]['Month(s)'] [Week of Month (First, Second, Third, Fourth, Last)] [Weekday Monday-Sunday] [Optional Offset(No. of days)]. Offset value must be between -6 to 6 inclusive. Monthly schedule examples are recurEvery: Month, recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery: Month Last Sunday, recurEvery: Month Fourth Monday, recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third Sunday Offset6."/>
        </arg>
        <arg type="string" var="$configuration.properties.maintenanceWindow.startDateTime" options="maintenance-window-start-date-time start-date-time" group="MaintenanceWindow">
          <help short="Effective start date of the maintenance window in YYYY-MM-DD hh:mm format. The start date can be set to either the current date or future date. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone."/>
        </arg>
        <arg type="string" var="$configuration.properties.maintenanceWindow.timeZone" options="maintenance-window-time-zone time-zone" group="MaintenanceWindow">
          <help short="Name of the timezone. List of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. Example: Pacific Standard Time, UTC, W. Europe Standard Time, Korea Standard Time, Cen. Australia Standard Time."/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="object" var="$configuration.properties.extensionProperties" options="extension-properties" group="Properties">
          <help short="Gets or sets extensionProperties of the maintenanceConfiguration"/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
        <arg type="string" var="$configuration.properties.maintenanceScope" options="maintenance-scope" group="Properties">
          <help short="Gets or sets maintenanceScope of the configuration"/>
          <enum>
            <item name="Extension" value="&quot;Extension&quot;"/>
            <item name="Host" value="&quot;Host&quot;"/>
            <item name="InGuestPatch" value="&quot;InGuestPatch&quot;"/>
            <item name="OSImage" value="&quot;OSImage&quot;"/>
            <item name="Resource" value="&quot;Resource&quot;"/>
            <item name="SQLDB" value="&quot;SQLDB&quot;"/>
            <item name="SQLManagedInstance" value="&quot;SQLManagedInstance&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$configuration.properties.namespace" options="namespace" group="Properties">
          <help short="Gets or sets namespace of the resource"/>
        </arg>
        <arg type="string" var="$configuration.properties.visibility" options="visibility" group="Properties">
          <help short="Gets or sets the visibility of the configuration. The default value is 'Custom'"/>
          <enum>
            <item name="Custom" value="&quot;Custom&quot;"/>
            <item name="Public" value="&quot;Public&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <operation operationId="MaintenanceConfigurations_CreateOrUpdate">
        <http path="/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}">
          <request method="put">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="resourceName" arg="$Path.resourceName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-04-01&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="configuration" required="True" clientFlatten="True">
                  <prop type="ResourceLocation" name="location" arg="$configuration.location"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="extensionProperties" arg="$configuration.properties.extensionProperties">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop type="object" name="installPatches">
                      <prop type="object" name="linuxParameters" arg="$configuration.properties.installPatches.linuxParameters">
                        <prop type="array<string>" name="classificationsToInclude" arg="$configuration.properties.installPatches.linuxParameters.classificationsToInclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="packageNameMasksToExclude" arg="$configuration.properties.installPatches.linuxParameters.packageNameMasksToExclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="packageNameMasksToInclude" arg="$configuration.properties.installPatches.linuxParameters.packageNameMasksToInclude">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="string" name="rebootSetting" arg="$configuration.properties.installPatches.rebootSetting">
                        <default value="&quot;IfRequired&quot;"/>
                        <enum>
                          <item value="&quot;Always&quot;"/>
                          <item value="&quot;IfRequired&quot;"/>
                          <item value="&quot;Never&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="windowsParameters" arg="$configuration.properties.installPatches.windowsParameters">
                        <prop type="array<string>" name="classificationsToInclude" arg="$configuration.properties.installPatches.windowsParameters.classificationsToInclude">
                          <item type="string"/>
                        </prop>
                        <prop type="boolean" name="excludeKbsRequiringReboot" arg="$configuration.properties.installPatches.windowsParameters.excludeKbsRequiringReboot"/>
                        <prop type="array<string>" name="kbNumbersToExclude" arg="$configuration.properties.installPatches.windowsParameters.kbNumbersToExclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="kbNumbersToInclude" arg="$configuration.properties.installPatches.windowsParameters.kbNumbersToInclude">
                          <item type="string"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="string" name="maintenanceScope" arg="$configuration.properties.maintenanceScope">
                      <enum>
                        <item value="&quot;Extension&quot;"/>
                        <item value="&quot;Host&quot;"/>
                        <item value="&quot;InGuestPatch&quot;"/>
                        <item value="&quot;OSImage&quot;"/>
                        <item value="&quot;Resource&quot;"/>
                        <item value="&quot;SQLDB&quot;"/>
                        <item value="&quot;SQLManagedInstance&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="maintenanceWindow" clientFlatten="True">
                      <prop type="string" name="duration" arg="$configuration.properties.maintenanceWindow.duration"/>
                      <prop type="string" name="expirationDateTime" arg="$configuration.properties.maintenanceWindow.expirationDateTime"/>
                      <prop type="string" name="recurEvery" arg="$configuration.properties.maintenanceWindow.recurEvery"/>
                      <prop type="string" name="startDateTime" arg="$configuration.properties.maintenanceWindow.startDateTime"/>
                      <prop type="string" name="timeZone" arg="$configuration.properties.maintenanceWindow.timeZone"/>
                    </prop>
                    <prop type="string" name="namespace" arg="$configuration.properties.namespace"/>
                    <prop type="string" name="visibility" arg="$configuration.properties.visibility">
                      <enum>
                        <item value="&quot;Custom&quot;"/>
                        <item value="&quot;Public&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$configuration.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id"/>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="extensionProperties">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop type="object" name="installPatches">
                      <prop type="object" name="linuxParameters">
                        <prop type="array<string>" name="classificationsToInclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="packageNameMasksToExclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="packageNameMasksToInclude">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="string" name="rebootSetting">
                        <default value="&quot;IfRequired&quot;"/>
                        <enum>
                          <item value="&quot;Always&quot;"/>
                          <item value="&quot;IfRequired&quot;"/>
                          <item value="&quot;Never&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="windowsParameters">
                        <prop type="array<string>" name="classificationsToInclude">
                          <item type="string"/>
                        </prop>
                        <prop type="boolean" name="excludeKbsRequiringReboot"/>
                        <prop type="array<string>" name="kbNumbersToExclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="kbNumbersToInclude">
                          <item type="string"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="string" name="maintenanceScope">
                      <enum>
                        <item value="&quot;Extension&quot;"/>
                        <item value="&quot;Host&quot;"/>
                        <item value="&quot;InGuestPatch&quot;"/>
                        <item value="&quot;OSImage&quot;"/>
                        <item value="&quot;Resource&quot;"/>
                        <item value="&quot;SQLDB&quot;"/>
                        <item value="&quot;SQLManagedInstance&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="maintenanceWindow" clientFlatten="True">
                      <prop type="string" name="duration"/>
                      <prop type="string" name="expirationDateTime"/>
                      <prop type="string" name="recurEvery"/>
                      <prop type="string" name="startDateTime"/>
                      <prop type="string" name="timeZone"/>
                    </prop>
                    <prop type="string" name="namespace"/>
                    <prop type="string" name="visibility">
                      <enum>
                        <item value="&quot;Custom&quot;"/>
                        <item value="&quot;Public&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2023-04-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.maintenance/maintenanceconfigurations/{}" version="2023-04-01" swagger="mgmt-plane/maintenance/ResourceProviders/Microsoft.Maintenance/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZWdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTWFpbnRlbmFuY2UvbWFpbnRlbmFuY2VDb25maWd1cmF0aW9ucy97cmVzb3VyY2VOYW1lfQ==/V/MjAyMy0wNC0wMQ=="/>
      <argGroup name="">
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.resourceName" options="resource-name name n" required="True" idPart="name">
          <help short="Maintenance Configuration Name"/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Configuration">
        <arg type="ResourceLocation" var="$configuration.location" options="location l" group="Configuration">
          <help short="Gets or sets location of the resource"/>
        </arg>
        <arg type="object" var="$configuration.tags" options="tags" group="Configuration">
          <help short="Gets or sets tags of the resource"/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="InstallPatches">
        <arg type="object" var="$configuration.properties.installPatches.linuxParameters" options="install-patches-linux-parameters linux-parameters" group="InstallPatches">
          <help short="Input parameters specific to patching Linux machine. For Windows machines, do not pass this property."/>
          <arg type="array<string>" var="$configuration.properties.installPatches.linuxParameters.classificationsToInclude" options="classifications-to-include-list" group="" singularOptions="classifications-to-include">
            <help short="Classification category of patches to be patched"/>
            <item type="string"/>
          </arg>
          <arg type="array<string>" var="$configuration.properties.installPatches.linuxParameters.packageNameMasksToExclude" options="package-name-masks-to-exclude-list" group="" singularOptions="package-name-masks-to-exclude">
            <help short="Package names to be excluded for patching."/>
            <item type="string"/>
          </arg>
          <arg type="array<string>" var="$configuration.properties.installPatches.linuxParameters.packageNameMasksToInclude" options="package-name-masks-to-include-list" group="" singularOptions="package-name-masks-to-include">
            <help short="Package names to be included for patching."/>
            <item type="string"/>
          </arg>
        </arg>
        <arg type="string" var="$configuration.properties.installPatches.rebootSetting" options="reboot-setting" group="InstallPatches">
          <help short="Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed."/>
          <enum>
            <item name="Always" value="&quot;Always&quot;"/>
            <item name="IfRequired" value="&quot;IfRequired&quot;"/>
            <item name="Never" value="&quot;Never&quot;"/>
          </enum>
        </arg>
        <arg type="object" var="$configuration.properties.installPatches.windowsParameters" options="install-patches-windows-parameters windows-parameters" group="InstallPatches">
          <help short="Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property."/>
          <arg type="array<string>" var="$configuration.properties.installPatches.windowsParameters.classificationsToInclude" options="classifications-to-include-list" group="" singularOptions="classifications-to-include">
            <help short="Classification category of patches to be patched"/>
            <item type="string"/>
          </arg>
          <arg type="boolean" var="$configuration.properties.installPatches.windowsParameters.excludeKbsRequiringReboot" options="exclude-kbs-requiring-reboot">
            <help short="Exclude patches which need reboot"/>
          </arg>
          <arg type="array<string>" var="$configuration.properties.installPatches.windowsParameters.kbNumbersToExclude" options="kb-numbers-to-exclude-list" group="" singularOptions="kb-numbers-to-exclude">
            <help short="Windows KBID to be excluded for patching."/>
            <item type="string"/>
          </arg>
          <arg type="array<string>" var="$configuration.properties.installPatches.windowsParameters.kbNumbersToInclude" options="kb-numbers-to-include-list" group="" singularOptions="kb-numbers-to-exclude">
            <help short="Windows KBID to be included for patching."/>
            <item type="string"/>
          </arg>
        </arg>
      </argGroup>
      <argGroup name="MaintenanceWindow">
        <arg type="string" var="$configuration.properties.maintenanceWindow.duration" options="maintenance-window-duration duration" group="MaintenanceWindow">
          <help short="Duration of the maintenance window in HH:mm format. If not provided, default value will be used based on maintenance scope provided. Example: 05:00."/>
        </arg>
        <arg type="string" var="$configuration.properties.maintenanceWindow.expirationDateTime" options="maintenance-window-expiration-date-time expiration-date-time" group="MaintenanceWindow">
          <help short="Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone. Expiration date must be set to a future date. If not provided, it will be set to the maximum datetime 9999-12-31 23:59:59."/>
        </arg>
        <arg type="string" var="$configuration.properties.maintenanceWindow.recurEvery" options="maintenance-window-recur-every recur-every" group="MaintenanceWindow">
          <help short="Rate at which a Maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules. Daily schedule are formatted as recurEvery: [Frequency as integer]['Day(s)']. If no frequency is provided, the default frequency is 1. Daily schedule examples are recurEvery: Day, recurEvery: 3Days.  Weekly schedule are formatted as recurEvery: [Frequency as integer]['Week(s)'] [Optional comma separated list of weekdays Monday-Sunday]. Weekly schedule examples are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are formatted as [Frequency as integer]['Month(s)'] [Comma separated list of month days] or [Frequency as integer]['Month(s)'] [Week of Month (First, Second, Third, Fourth, Last)] [Weekday Monday-Sunday] [Optional Offset(No. of days)]. Offset value must be between -6 to 6 inclusive. Monthly schedule examples are recurEvery: Month, recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery: Month Last Sunday, recurEvery: Month Fourth Monday, recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third Sunday Offset6."/>
        </arg>
        <arg type="string" var="$configuration.properties.maintenanceWindow.startDateTime" options="maintenance-window-start-date-time start-date-time" group="MaintenanceWindow">
          <help short="Effective start date of the maintenance window in YYYY-MM-DD hh:mm format. The start date can be set to either the current date or future date. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone."/>
        </arg>
        <arg type="string" var="$configuration.properties.maintenanceWindow.timeZone" options="maintenance-window-time-zone time-zone" group="MaintenanceWindow">
          <help short="Name of the timezone. List of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. Example: Pacific Standard Time, UTC, W. Europe Standard Time, Korea Standard Time, Cen. Australia Standard Time."/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="object" var="$configuration.properties.extensionProperties" options="extension-properties" group="Properties">
          <help short="Gets or sets extensionProperties of the maintenanceConfiguration"/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
        <arg type="string" var="$configuration.properties.maintenanceScope" options="maintenance-scope" group="Properties">
          <help short="Gets or sets maintenanceScope of the configuration"/>
          <enum>
            <item name="Extension" value="&quot;Extension&quot;"/>
            <item name="Host" value="&quot;Host&quot;"/>
            <item name="InGuestPatch" value="&quot;InGuestPatch&quot;"/>
            <item name="OSImage" value="&quot;OSImage&quot;"/>
            <item name="Resource" value="&quot;Resource&quot;"/>
            <item name="SQLDB" value="&quot;SQLDB&quot;"/>
            <item name="SQLManagedInstance" value="&quot;SQLManagedInstance&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$configuration.properties.namespace" options="namespace" group="Properties">
          <help short="Gets or sets namespace of the resource"/>
        </arg>
        <arg type="string" var="$configuration.properties.visibility" options="visibility" group="Properties">
          <help short="Gets or sets the visibility of the configuration. The default value is 'Custom'"/>
          <enum>
            <item name="Custom" value="&quot;Custom&quot;"/>
            <item name="Public" value="&quot;Public&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <operation operationId="MaintenanceConfigurations_Update">
        <http path="/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}">
          <request method="patch">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="resourceName" arg="$Path.resourceName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-04-01&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="configuration" required="True" clientFlatten="True">
                  <prop type="ResourceLocation" name="location" arg="$configuration.location"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="extensionProperties" arg="$configuration.properties.extensionProperties">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop type="object" name="installPatches">
                      <prop type="object" name="linuxParameters" arg="$configuration.properties.installPatches.linuxParameters">
                        <prop type="array<string>" name="classificationsToInclude" arg="$configuration.properties.installPatches.linuxParameters.classificationsToInclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="packageNameMasksToExclude" arg="$configuration.properties.installPatches.linuxParameters.packageNameMasksToExclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="packageNameMasksToInclude" arg="$configuration.properties.installPatches.linuxParameters.packageNameMasksToInclude">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="string" name="rebootSetting" arg="$configuration.properties.installPatches.rebootSetting">
                        <default value="&quot;IfRequired&quot;"/>
                        <enum>
                          <item value="&quot;Always&quot;"/>
                          <item value="&quot;IfRequired&quot;"/>
                          <item value="&quot;Never&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="windowsParameters" arg="$configuration.properties.installPatches.windowsParameters">
                        <prop type="array<string>" name="classificationsToInclude" arg="$configuration.properties.installPatches.windowsParameters.classificationsToInclude">
                          <item type="string"/>
                        </prop>
                        <prop type="boolean" name="excludeKbsRequiringReboot" arg="$configuration.properties.installPatches.windowsParameters.excludeKbsRequiringReboot"/>
                        <prop type="array<string>" name="kbNumbersToExclude" arg="$configuration.properties.installPatches.windowsParameters.kbNumbersToExclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="kbNumbersToInclude" arg="$configuration.properties.installPatches.windowsParameters.kbNumbersToInclude">
                          <item type="string"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="string" name="maintenanceScope" arg="$configuration.properties.maintenanceScope">
                      <enum>
                        <item value="&quot;Extension&quot;"/>
                        <item value="&quot;Host&quot;"/>
                        <item value="&quot;InGuestPatch&quot;"/>
                        <item value="&quot;OSImage&quot;"/>
                        <item value="&quot;Resource&quot;"/>
                        <item value="&quot;SQLDB&quot;"/>
                        <item value="&quot;SQLManagedInstance&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="maintenanceWindow" clientFlatten="True">
                      <prop type="string" name="duration" arg="$configuration.properties.maintenanceWindow.duration"/>
                      <prop type="string" name="expirationDateTime" arg="$configuration.properties.maintenanceWindow.expirationDateTime"/>
                      <prop type="string" name="recurEvery" arg="$configuration.properties.maintenanceWindow.recurEvery"/>
                      <prop type="string" name="startDateTime" arg="$configuration.properties.maintenanceWindow.startDateTime"/>
                      <prop type="string" name="timeZone" arg="$configuration.properties.maintenanceWindow.timeZone"/>
                    </prop>
                    <prop type="string" name="namespace" arg="$configuration.properties.namespace"/>
                    <prop type="string" name="visibility" arg="$configuration.properties.visibility">
                      <enum>
                        <item value="&quot;Custom&quot;"/>
                        <item value="&quot;Public&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$configuration.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id"/>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="extensionProperties">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop type="object" name="installPatches">
                      <prop type="object" name="linuxParameters">
                        <prop type="array<string>" name="classificationsToInclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="packageNameMasksToExclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="packageNameMasksToInclude">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="string" name="rebootSetting">
                        <default value="&quot;IfRequired&quot;"/>
                        <enum>
                          <item value="&quot;Always&quot;"/>
                          <item value="&quot;IfRequired&quot;"/>
                          <item value="&quot;Never&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="windowsParameters">
                        <prop type="array<string>" name="classificationsToInclude">
                          <item type="string"/>
                        </prop>
                        <prop type="boolean" name="excludeKbsRequiringReboot"/>
                        <prop type="array<string>" name="kbNumbersToExclude">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="kbNumbersToInclude">
                          <item type="string"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="string" name="maintenanceScope">
                      <enum>
                        <item value="&quot;Extension&quot;"/>
                        <item value="&quot;Host&quot;"/>
                        <item value="&quot;InGuestPatch&quot;"/>
                        <item value="&quot;OSImage&quot;"/>
                        <item value="&quot;Resource&quot;"/>
                        <item value="&quot;SQLDB&quot;"/>
                        <item value="&quot;SQLManagedInstance&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="maintenanceWindow" clientFlatten="True">
                      <prop type="string" name="duration"/>
                      <prop type="string" name="expirationDateTime"/>
                      <prop type="string" name="recurEvery"/>
                      <prop type="string" name="startDateTime"/>
                      <prop type="string" name="timeZone"/>
                    </prop>
                    <prop type="string" name="namespace"/>
                    <prop type="string" name="visibility">
                      <enum>
                        <item value="&quot;Custom&quot;"/>
                        <item value="&quot;Public&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
