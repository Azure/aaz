<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/{scope}/providers/microsoft.authorization/policyassignments/{}" version="2024-05-01" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUFzc2lnbm1lbnRzL3twb2xpY3lBc3NpZ25tZW50TmFtZX0=/V/MjAyNC0wNS0wMQ=="/>
  <commandGroup name="policy assignment">
    <command name="show" version="2024-05-01" confirmation="">
      <resource id="/{scope}/providers/microsoft.authorization/policyassignments/{}" version="2024-05-01" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUFzc2lnbm1lbnRzL3twb2xpY3lBc3NpZ25tZW50TmFtZX0=/V/MjAyNC0wNS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.policyAssignmentName" options="name n" required="True" group="">
          <help short="The name of the policy assignment." lines="The name of the policy assignment is the name segment of its resource ID."/>
          <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
        </arg>
        <arg type="string" var="$Path.scope" options="scope" required="True" group="">
          <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
        </arg>
        <arg type="string" var="$Query.expand" options="expand" group="">
          <help short="Additional properties to include in output" lines="Comma-separated list of additional properties to include in the command output. Supported values are 'LatestDefinitionVersion, EffectiveDefinitionVersion'."/>
        </arg>
      </argGroup>
      <operation operationId="PolicyAssignments_Get">
        <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
          <request method="get">
            <path>
              <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
              </param>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <param type="string" name="$expand" arg="$Query.expand"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-05-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id"/>
                  <prop type="IdentityObject" name="identity">
                    <prop readOnly="True" type="string" name="principalId"/>
                    <prop readOnly="True" type="string" name="tenantId"/>
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="string" name="clientId"/>
                          <prop readOnly="True" type="string" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="string" name="assignmentType">
                      <enum>
                        <item value="&quot;Custom&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;System&quot;"/>
                        <item value="&quot;SystemHidden&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="definitionVersion"/>
                    <prop type="string" name="description"/>
                    <prop type="string" name="displayName"/>
                    <prop readOnly="True" type="string" name="effectiveDefinitionVersion"/>
                    <prop type="string" name="enforcementMode">
                      <default value="&quot;Default&quot;"/>
                      <enum>
                        <item value="&quot;Default&quot;"/>
                        <item value="&quot;DoNotEnforce&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="latestDefinitionVersion"/>
                    <prop type="object" name="metadata">
                      <additionalProp>
                        <item type="any"/>
                      </additionalProp>
                    </prop>
                    <prop type="array<object>" name="nonComplianceMessages" identifiers="policyDefinitionReferenceId message">
                      <item type="object">
                        <prop type="string" name="message" required="True"/>
                        <prop type="string" name="policyDefinitionReferenceId"/>
                      </item>
                    </prop>
                    <prop type="array<string>" name="notScopes">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="overrides">
                      <item type="object">
                        <prop type="string" name="kind">
                          <enum>
                            <item value="&quot;definitionVersion&quot;"/>
                            <item value="&quot;policyEffect&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<@Selector_read>" name="selectors">
                          <item type="@Selector_read"/>
                        </prop>
                        <prop type="string" name="value"/>
                      </item>
                    </prop>
                    <prop type="object" name="parameters">
                      <additionalProp>
                        <item type="object">
                          <prop type="any" name="value"/>
                        </item>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="policyDefinitionId"/>
                    <prop type="array<object>" name="resourceSelectors">
                      <item type="object">
                        <prop type="string" name="name"/>
                        <prop type="array<object>" name="selectors">
                          <item type="object" cls="Selector_read">
                            <prop type="array<string>" name="in">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="kind">
                              <enum>
                                <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                <item value="&quot;resourceLocation&quot;"/>
                                <item value="&quot;resourceType&quot;"/>
                                <item value="&quot;resourceWithoutLocation&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<string>" name="notIn">
                              <item type="string"/>
                            </prop>
                          </item>
                        </prop>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="scope"/>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2024-05-01" confirmation="">
      <resource id="/{scope}/providers/microsoft.authorization/policyassignments/{}" version="2024-05-01" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUFzc2lnbm1lbnRzL3twb2xpY3lBc3NpZ25tZW50TmFtZX0=/V/MjAyNC0wNS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.policyAssignmentName" options="name n" required="True" group="">
          <help short="The name of the policy assignment." lines="The name of the policy assignment is the name segment of its resource ID."/>
          <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
        </arg>
        <arg type="string" var="$Path.scope" options="scope" required="True" group="">
          <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
        </arg>
      </argGroup>
      <operation operationId="PolicyAssignments_Delete">
        <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
          <request method="delete">
            <path>
              <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
              </param>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-05-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id"/>
                  <prop type="IdentityObject" name="identity">
                    <prop readOnly="True" type="string" name="principalId"/>
                    <prop readOnly="True" type="string" name="tenantId"/>
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="string" name="clientId"/>
                          <prop readOnly="True" type="string" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="string" name="assignmentType">
                      <enum>
                        <item value="&quot;Custom&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;System&quot;"/>
                        <item value="&quot;SystemHidden&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="definitionVersion"/>
                    <prop type="string" name="description"/>
                    <prop type="string" name="displayName"/>
                    <prop readOnly="True" type="string" name="effectiveDefinitionVersion"/>
                    <prop type="string" name="enforcementMode">
                      <default value="&quot;Default&quot;"/>
                      <enum>
                        <item value="&quot;Default&quot;"/>
                        <item value="&quot;DoNotEnforce&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="latestDefinitionVersion"/>
                    <prop type="object" name="metadata">
                      <additionalProp>
                        <item type="any"/>
                      </additionalProp>
                    </prop>
                    <prop type="array<object>" name="nonComplianceMessages" identifiers="policyDefinitionReferenceId message">
                      <item type="object">
                        <prop type="string" name="message" required="True"/>
                        <prop type="string" name="policyDefinitionReferenceId"/>
                      </item>
                    </prop>
                    <prop type="array<string>" name="notScopes">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="overrides">
                      <item type="object">
                        <prop type="string" name="kind">
                          <enum>
                            <item value="&quot;definitionVersion&quot;"/>
                            <item value="&quot;policyEffect&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<@Selector_read>" name="selectors">
                          <item type="@Selector_read"/>
                        </prop>
                        <prop type="string" name="value"/>
                      </item>
                    </prop>
                    <prop type="object" name="parameters">
                      <additionalProp>
                        <item type="object">
                          <prop type="any" name="value"/>
                        </item>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="policyDefinitionId"/>
                    <prop type="array<object>" name="resourceSelectors">
                      <item type="object">
                        <prop type="string" name="name"/>
                        <prop type="array<object>" name="selectors">
                          <item type="object" cls="Selector_read">
                            <prop type="array<string>" name="in">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="kind">
                              <enum>
                                <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                <item value="&quot;resourceLocation&quot;"/>
                                <item value="&quot;resourceType&quot;"/>
                                <item value="&quot;resourceWithoutLocation&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<string>" name="notIn">
                              <item type="string"/>
                            </prop>
                          </item>
                        </prop>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="scope"/>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2024-05-01" confirmation="">
      <resource id="/{scope}/providers/microsoft.authorization/policyassignments/{}" version="2024-05-01" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUFzc2lnbm1lbnRzL3twb2xpY3lBc3NpZ25tZW50TmFtZX0=/V/MjAyNC0wNS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.policyAssignmentName" options="name n" required="True" group="">
          <help short="The name of the policy assignment." lines="The name of the policy assignment is the name segment of its resource ID."/>
          <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
        </arg>
        <arg type="string" var="$Path.scope" options="scope" required="True" group="">
          <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
        </arg>
      </argGroup>
      <argGroup name="Identity">
        <arg type="string" var="$parameters.identity.systemAssigned" options="mi-system-assigned assign-identity system-assigned" group="Identity">
          <blank value="&quot;True&quot;"/>
          <help short="Sets the system assigned managed identity." lines="Sets the system assigned managed identity of the policy assignment."/>
        </arg>
        <arg type="string" var="$parameters.identity.type" options="type" hide="True" group="Identity">
          <help short="The managed identity type." lines="The managed identity type is the only required field when adding a system or user assigned identity to a resource."/>
          <enum>
            <item name="None" value="&quot;None&quot;"/>
            <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
            <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
          </enum>
        </arg>
        <arg type="array<string>" var="$parameters.identity.userAssigned" options="mi-user-assigned user-assigned" group="Identity">
          <blank value="[]"/>
          <help short="Sets the user assigned managed identity." lines="Sets the user assigned managed identity of the policy assignment."/>
          <item type="string"/>
        </arg>
        <arg type="object" var="$parameters.identity.userAssignedIdentities" options="user-assigned-identities" hide="True" group="Identity">
          <help short="The user assigned managed identity." lines="The user assigned managed identity used by the policy assignment. The user assigned managed identity dictionary keys will be ARM resource ids (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}')."/>
          <additionalProp>
            <item type="object">
              <blank value="{}"/>
            </item>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="ResourceLocation" var="$parameters.location" options="location l" group="Parameters">
          <help short="The location of the policy assignment." lines="The location of the policy assignment is only required when utilizing managed identity."/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$parameters.properties.assignmentType" options="assignment-type" hide="True" group="Properties">
          <help short="The type of policy assignment. Possible values are NotSpecified, System, SystemHidden, and Custom. Immutable."/>
          <enum>
            <item name="Custom" value="&quot;Custom&quot;"/>
            <item name="NotSpecified" value="&quot;NotSpecified&quot;"/>
            <item name="System" value="&quot;System&quot;"/>
            <item name="SystemHidden" value="&quot;SystemHidden&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$parameters.properties.definitionVersion" options="definition-version" group="Properties">
          <help short="The policy version to assign." lines="The version of the policy definition or policy set definition to assign."/>
        </arg>
        <arg type="string" var="$parameters.properties.description" options="description" group="Properties">
          <help short="Policy assignment description." lines="Full description of the policy assignment."/>
        </arg>
        <arg type="string" var="$parameters.properties.displayName" options="display-name" group="Properties">
          <help short="The display name of the policy assignment." lines="The display name of the policy assignment is not part of its ID, allowing for longer and more flexible naming."/>
        </arg>
        <arg type="string" var="$parameters.properties.enforcementMode" options="enforcement-mode e" group="Properties">
          <help short="The policy assignment enforcement mode." lines="The policy assignment enforcement mode. Possible values are Default and DoNotEnforce."/>
          <default value="&quot;Default&quot;"/>
          <enum>
            <item name="Default" value="&quot;Default&quot;"/>
            <item name="DoNotEnforce" value="&quot;DoNotEnforce&quot;"/>
          </enum>
        </arg>
        <arg type="object" var="$parameters.properties.metadata" options="metadata" group="Properties">
          <help short="The policy assignment metadata." lines="The policy assignment metadata. Metadata is an open-ended object and is typically a collection of key value pairs."/>
          <additionalProp>
            <item type="any"/>
          </additionalProp>
        </arg>
        <arg type="array<string>" var="$parameters.properties.notScopes" options="not-scopes" group="Properties">
          <help short="The policy assignment excluded scopes." lines="The collection of scopes within the policy assignment scope that it does not apply to."/>
          <item type="string"/>
        </arg>
        <arg type="array<object>" var="$parameters.properties.overrides" options="overrides" group="Properties">
          <help short="The policy override." lines="Array of objects that specify resource selector values to use for this assignment."/>
          <item type="object">
            <arg type="string" var="$parameters.properties.overrides[].kind" options="kind">
              <help short="The override kind."/>
              <enum>
                <item name="definitionVersion" value="&quot;definitionVersion&quot;"/>
                <item name="policyEffect" value="&quot;policyEffect&quot;"/>
              </enum>
            </arg>
            <arg type="array<@Selector_create>" var="$parameters.properties.overrides[].selectors" options="selectors">
              <help short="The list of the selector expressions."/>
              <item type="@Selector_create"/>
            </arg>
            <arg type="string" var="$parameters.properties.overrides[].value" options="value">
              <help short="The value to override the policy property."/>
            </arg>
          </item>
        </arg>
        <arg type="object" var="$parameters.properties.parameters" options="params p" group="Properties">
          <help short="The parameter values for the assigned policy rule." lines="Object or file path containing the policy rule parameter values to be used when assigning the policy definition. The object keys are the parameter names."/>
          <additionalProp>
            <item type="object">
              <arg type="any" var="$parameters.properties.parameters{}.value" options="value">
                <help short="The value of the parameter."/>
              </arg>
            </item>
          </additionalProp>
        </arg>
        <arg type="string" var="$parameters.properties.policyDefinitionId" options="policy-set-definition d" group="Properties">
          <help short="The policy definition or policy set definition to assign." lines="The resource ID of the policy definition (format: /{scope}/providers/Microsoft.Authorization/policyDefinitions/{name}) or policy set definition (format: /{scope}/providers/Microsoft.Authorization/policySetDefinitions/{name}) to be assigned."/>
        </arg>
        <arg type="array<object>" var="$parameters.properties.resourceSelectors" options="resource-selectors" group="Properties">
          <help short="The resource selectors list to filter policies by resource properties." lines="The collection of resource selector expressions used to filter policy assignment applicability by certain resource property values."/>
          <item type="object">
            <arg type="string" var="$parameters.properties.resourceSelectors[].name" options="name">
              <help short="The name of the resource selector."/>
            </arg>
            <arg type="array<object>" var="$parameters.properties.resourceSelectors[].selectors" options="selectors">
              <help short="The list of the selector expressions."/>
              <item type="object" cls="Selector_create">
                <arg type="array<string>" var="@Selector_create.in" options="in">
                  <help short="The list of values to filter in."/>
                  <item type="string"/>
                </arg>
                <arg type="string" var="@Selector_create.kind" options="kind">
                  <help short="The selector kind."/>
                  <enum>
                    <item name="policyDefinitionReferenceId" value="&quot;policyDefinitionReferenceId&quot;"/>
                    <item name="resourceLocation" value="&quot;resourceLocation&quot;"/>
                    <item name="resourceType" value="&quot;resourceType&quot;"/>
                    <item name="resourceWithoutLocation" value="&quot;resourceWithoutLocation&quot;"/>
                  </enum>
                </arg>
                <arg type="array<string>" var="@Selector_create.notIn" options="not-in">
                  <help short="The list of values to filter out."/>
                  <item type="string"/>
                </arg>
              </item>
            </arg>
          </item>
        </arg>
      </argGroup>
      <argGroup name="non-compliance-message">
        <arg type="array<object>" var="$parameters.properties.nonComplianceMessages" options="non-compliance-messages m" group="non-compliance-message">
          <help short="The messages that describe why a resource is non-compliant with the policy."/>
          <item type="object">
            <arg type="string" var="$parameters.properties.nonComplianceMessages[].message" options="message m" required="True" group="">
              <help short="A custom non-compliance message." lines="A message that describes the reasons a resource was determined to be non-compliant. This will be shown in 'deny' error messages and resource non-compliance results."/>
            </arg>
            <arg type="string" var="$parameters.properties.nonComplianceMessages[].policyDefinitionReferenceId" options="policy-definition-reference-id r" group="">
              <help short="The policy definition reference ID." lines="The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If not provided, the message applies to all policy definitions assigned by this policy assignment."/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <operation operationId="PolicyAssignments_Create">
        <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
          <request method="put">
            <path>
              <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
              </param>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-05-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="IdentityObject" name="identity">
                    <prop type="string" name="type" arg="$parameters.identity.type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities" arg="$parameters.identity.userAssignedIdentities">
                      <additionalProp>
                        <item type="object"/>
                      </additionalProp>
                    </prop>
                    <userAssigned action="create" type="array<string>" name="userAssigned" arg="$parameters.identity.userAssigned">
                      <item action="create" type="string"/>
                    </userAssigned>
                    <systemAssigned action="create" type="string" name="systemAssigned" arg="$parameters.identity.systemAssigned"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" arg="$parameters.location"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="string" name="assignmentType" arg="$parameters.properties.assignmentType">
                      <enum>
                        <item value="&quot;Custom&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;System&quot;"/>
                        <item value="&quot;SystemHidden&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="definitionVersion" arg="$parameters.properties.definitionVersion"/>
                    <prop type="string" name="description" arg="$parameters.properties.description"/>
                    <prop type="string" name="displayName" arg="$parameters.properties.displayName"/>
                    <prop type="string" name="enforcementMode" arg="$parameters.properties.enforcementMode">
                      <default value="&quot;Default&quot;"/>
                      <enum>
                        <item value="&quot;Default&quot;"/>
                        <item value="&quot;DoNotEnforce&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="metadata" arg="$parameters.properties.metadata">
                      <additionalProp>
                        <item type="any"/>
                      </additionalProp>
                    </prop>
                    <prop type="array<object>" name="nonComplianceMessages" arg="$parameters.properties.nonComplianceMessages" identifiers="policyDefinitionReferenceId message">
                      <item type="object">
                        <prop type="string" name="message" arg="$parameters.properties.nonComplianceMessages[].message" required="True"/>
                        <prop type="string" name="policyDefinitionReferenceId" arg="$parameters.properties.nonComplianceMessages[].policyDefinitionReferenceId"/>
                      </item>
                    </prop>
                    <prop type="array<string>" name="notScopes" arg="$parameters.properties.notScopes">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="overrides" arg="$parameters.properties.overrides">
                      <item type="object">
                        <prop type="string" name="kind" arg="$parameters.properties.overrides[].kind">
                          <enum>
                            <item value="&quot;definitionVersion&quot;"/>
                            <item value="&quot;policyEffect&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<@Selector_create>" name="selectors" arg="$parameters.properties.overrides[].selectors">
                          <item type="@Selector_create"/>
                        </prop>
                        <prop type="string" name="value" arg="$parameters.properties.overrides[].value"/>
                      </item>
                    </prop>
                    <prop type="object" name="parameters" arg="$parameters.properties.parameters">
                      <additionalProp>
                        <item type="object">
                          <prop type="any" name="value" arg="$parameters.properties.parameters{}.value"/>
                        </item>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="policyDefinitionId" arg="$parameters.properties.policyDefinitionId"/>
                    <prop type="array<object>" name="resourceSelectors" arg="$parameters.properties.resourceSelectors">
                      <item type="object">
                        <prop type="string" name="name" arg="$parameters.properties.resourceSelectors[].name"/>
                        <prop type="array<object>" name="selectors" arg="$parameters.properties.resourceSelectors[].selectors">
                          <item type="object" cls="Selector_create">
                            <prop type="array<string>" name="in" arg="@Selector_create.in">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="kind" arg="@Selector_create.kind">
                              <enum>
                                <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                <item value="&quot;resourceLocation&quot;"/>
                                <item value="&quot;resourceType&quot;"/>
                                <item value="&quot;resourceWithoutLocation&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<string>" name="notIn" arg="@Selector_create.notIn">
                              <item type="string"/>
                            </prop>
                          </item>
                        </prop>
                      </item>
                    </prop>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id"/>
                  <prop type="IdentityObject" name="identity">
                    <prop readOnly="True" type="string" name="principalId"/>
                    <prop readOnly="True" type="string" name="tenantId"/>
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="string" name="clientId"/>
                          <prop readOnly="True" type="string" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="string" name="assignmentType">
                      <enum>
                        <item value="&quot;Custom&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;System&quot;"/>
                        <item value="&quot;SystemHidden&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="definitionVersion"/>
                    <prop type="string" name="description"/>
                    <prop type="string" name="displayName"/>
                    <prop readOnly="True" type="string" name="effectiveDefinitionVersion"/>
                    <prop type="string" name="enforcementMode">
                      <default value="&quot;Default&quot;"/>
                      <enum>
                        <item value="&quot;Default&quot;"/>
                        <item value="&quot;DoNotEnforce&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="latestDefinitionVersion"/>
                    <prop type="object" name="metadata">
                      <additionalProp>
                        <item type="any"/>
                      </additionalProp>
                    </prop>
                    <prop type="array<object>" name="nonComplianceMessages" identifiers="policyDefinitionReferenceId message">
                      <item type="object">
                        <prop type="string" name="message" required="True"/>
                        <prop type="string" name="policyDefinitionReferenceId"/>
                      </item>
                    </prop>
                    <prop type="array<string>" name="notScopes">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="overrides">
                      <item type="object">
                        <prop type="string" name="kind">
                          <enum>
                            <item value="&quot;definitionVersion&quot;"/>
                            <item value="&quot;policyEffect&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<@Selector_read>" name="selectors">
                          <item type="@Selector_read"/>
                        </prop>
                        <prop type="string" name="value"/>
                      </item>
                    </prop>
                    <prop type="object" name="parameters">
                      <additionalProp>
                        <item type="object">
                          <prop type="any" name="value"/>
                        </item>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="policyDefinitionId"/>
                    <prop type="array<object>" name="resourceSelectors">
                      <item type="object">
                        <prop type="string" name="name"/>
                        <prop type="array<object>" name="selectors">
                          <item type="object" cls="Selector_read">
                            <prop type="array<string>" name="in">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="kind">
                              <enum>
                                <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                <item value="&quot;resourceLocation&quot;"/>
                                <item value="&quot;resourceType&quot;"/>
                                <item value="&quot;resourceWithoutLocation&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<string>" name="notIn">
                              <item type="string"/>
                            </prop>
                          </item>
                        </prop>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="scope"/>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2024-05-01" confirmation="">
      <resource id="/{scope}/providers/microsoft.authorization/policyassignments/{}" version="2024-05-01" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUFzc2lnbm1lbnRzL3twb2xpY3lBc3NpZ25tZW50TmFtZX0=/V/MjAyNC0wNS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.policyAssignmentName" options="name n" required="True" group="">
          <help short="The name of the policy assignment." lines="The name of the policy assignment is the name segment of its resource ID."/>
          <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
        </arg>
        <arg type="string" var="$Path.scope" options="scope" required="True" group="">
          <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
        </arg>
      </argGroup>
      <argGroup name="Identity">
        <arg nullable="True" type="string" var="$parameters.identity.type" options="type" hide="True" group="Identity">
          <help short="The managed identity type." lines="The managed identity type is the only required field when adding a system or user assigned identity to a resource."/>
          <enum>
            <item name="None" value="&quot;None&quot;"/>
            <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
            <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="object" var="$parameters.identity.userAssignedIdentities" options="user-assigned-identities" hide="True" group="Identity">
          <help short="The user assigned managed identity." lines="The user assigned managed identity used by the policy assignment. The user assigned managed identity dictionary keys will be ARM resource ids (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}')."/>
          <additionalProp>
            <item nullable="True" type="object">
              <blank value="{}"/>
            </item>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Parameters">
        <arg nullable="True" type="ResourceLocation" var="$parameters.location" options="location l" group="Parameters">
          <help short="The location of the policy assignment." lines="The location of the policy assignment is only required when utilizing managed identity."/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="string" var="$parameters.properties.assignmentType" options="assignment-type" hide="True" group="Properties">
          <help short="The type of policy assignment. Possible values are NotSpecified, System, SystemHidden, and Custom. Immutable."/>
          <enum>
            <item name="Custom" value="&quot;Custom&quot;"/>
            <item name="NotSpecified" value="&quot;NotSpecified&quot;"/>
            <item name="System" value="&quot;System&quot;"/>
            <item name="SystemHidden" value="&quot;SystemHidden&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.definitionVersion" options="definition-version" group="Properties">
          <help short="The policy version to assign." lines="The version of the policy definition or policy set definition to assign."/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.description" options="description" group="Properties">
          <help short="Policy assignment description." lines="Full description of the policy assignment."/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.displayName" options="display-name" group="Properties">
          <help short="The display name of the policy assignment." lines="The display name of the policy assignment is not part of its ID, allowing for longer and more flexible naming."/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.enforcementMode" options="enforcement-mode e" group="Properties">
          <help short="The policy assignment enforcement mode." lines="The policy assignment enforcement mode. Possible values are Default and DoNotEnforce."/>
          <enum>
            <item name="Default" value="&quot;Default&quot;"/>
            <item name="DoNotEnforce" value="&quot;DoNotEnforce&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.metadata" options="metadata" group="Properties">
          <help short="The policy assignment metadata." lines="The policy assignment metadata. Metadata is an open-ended object and is typically a collection of key value pairs."/>
          <additionalProp>
            <item nullable="True" type="any"/>
          </additionalProp>
        </arg>
        <arg nullable="True" type="array<string>" var="$parameters.properties.notScopes" options="not-scopes" group="Properties">
          <help short="The policy assignment excluded scopes." lines="The collection of scopes within the policy assignment scope that it does not apply to."/>
          <item nullable="True" type="string"/>
        </arg>
        <arg nullable="True" type="array<object>" var="$parameters.properties.overrides" options="overrides" group="Properties">
          <help short="The policy property value override."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$parameters.properties.overrides[].kind" options="kind">
              <help short="The override kind."/>
              <enum>
                <item name="definitionVersion" value="&quot;definitionVersion&quot;"/>
                <item name="policyEffect" value="&quot;policyEffect&quot;"/>
              </enum>
            </arg>
            <arg nullable="True" type="array<@Selector_update>" var="$parameters.properties.overrides[].selectors" options="selectors">
              <help short="The list of the selector expressions."/>
              <item nullable="True" type="@Selector_update"/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.overrides[].value" options="value">
              <help short="The value to override the policy property."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.parameters" options="params p" group="Properties">
          <help short="The parameter values for the assigned policy rule." lines="Object or file path containing the policy rule parameter values to be used when assigning the policy definition. The object keys are the parameter names."/>
          <additionalProp>
            <item nullable="True" type="object">
              <arg nullable="True" type="any" var="$parameters.properties.parameters{}.value" options="value">
                <help short="The value of the parameter."/>
              </arg>
            </item>
          </additionalProp>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.policyDefinitionId" options="policy-set-definition d" group="Properties">
          <help short="The policy definition or policy set definition to assign." lines="The resource ID of the policy definition (format: /{scope}/providers/Microsoft.Authorization/policyDefinitions/{name}) or policy set definition (format: /{scope}/providers/Microsoft.Authorization/policySetDefinitions/{name}) to be assigned."/>
        </arg>
        <arg nullable="True" type="array<object>" var="$parameters.properties.resourceSelectors" options="resource-selectors" group="Properties">
          <help short="The resource selectors list to filter policies by resource properties." lines="The collection of resource selector expressions used to filter policy assignment applicability by certain resource property values."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$parameters.properties.resourceSelectors[].name" options="name">
              <help short="The name of the resource selector."/>
            </arg>
            <arg nullable="True" type="array<object>" var="$parameters.properties.resourceSelectors[].selectors" options="selectors">
              <help short="The list of the selector expressions."/>
              <item nullable="True" type="object" cls="Selector_update">
                <arg nullable="True" type="array<string>" var="@Selector_update.in" options="in">
                  <help short="The list of values to filter in."/>
                  <item nullable="True" type="string"/>
                </arg>
                <arg nullable="True" type="string" var="@Selector_update.kind" options="kind">
                  <help short="The selector kind."/>
                  <enum>
                    <item name="policyDefinitionReferenceId" value="&quot;policyDefinitionReferenceId&quot;"/>
                    <item name="resourceLocation" value="&quot;resourceLocation&quot;"/>
                    <item name="resourceType" value="&quot;resourceType&quot;"/>
                    <item name="resourceWithoutLocation" value="&quot;resourceWithoutLocation&quot;"/>
                  </enum>
                </arg>
                <arg nullable="True" type="array<string>" var="@Selector_update.notIn" options="not-in">
                  <help short="The list of values to filter out."/>
                  <item nullable="True" type="string"/>
                </arg>
              </item>
            </arg>
          </item>
        </arg>
      </argGroup>
      <argGroup name="non-compliance-message">
        <arg nullable="True" type="array<object>" var="$parameters.properties.nonComplianceMessages" options="non-compliance-messages m" group="non-compliance-message">
          <help short="The messages that describe why a resource is non-compliant with the policy."/>
          <item nullable="True" type="object">
            <arg type="string" var="$parameters.properties.nonComplianceMessages[].message" options="message m" group="">
              <help short="A custom non-compliance message." lines="A message that describes the reasons a resource was determined to be non-compliant. This will be shown in 'deny' error messages and resource non-compliance results."/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.nonComplianceMessages[].policyDefinitionReferenceId" options="policy-definition-reference-id r" group="">
              <help short="The policy definition reference ID." lines="The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If not provided, the message applies to all policy definitions assigned by this policy assignment."/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <operation operationId="PolicyAssignments_Get">
        <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
          <request method="get">
            <path>
              <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
              </param>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-05-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="PolicyAssignment_read">
                  <prop readOnly="True" type="ResourceId" name="id"/>
                  <prop type="IdentityObject" name="identity">
                    <prop readOnly="True" type="string" name="principalId"/>
                    <prop readOnly="True" type="string" name="tenantId"/>
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="string" name="clientId"/>
                          <prop readOnly="True" type="string" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="string" name="assignmentType">
                      <enum>
                        <item value="&quot;Custom&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;System&quot;"/>
                        <item value="&quot;SystemHidden&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="definitionVersion"/>
                    <prop type="string" name="description"/>
                    <prop type="string" name="displayName"/>
                    <prop readOnly="True" type="string" name="effectiveDefinitionVersion"/>
                    <prop type="string" name="enforcementMode">
                      <default value="&quot;Default&quot;"/>
                      <enum>
                        <item value="&quot;Default&quot;"/>
                        <item value="&quot;DoNotEnforce&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="latestDefinitionVersion"/>
                    <prop type="object" name="metadata">
                      <additionalProp>
                        <item type="any"/>
                      </additionalProp>
                    </prop>
                    <prop type="array<object>" name="nonComplianceMessages" identifiers="policyDefinitionReferenceId message">
                      <item type="object">
                        <prop type="string" name="message" required="True"/>
                        <prop type="string" name="policyDefinitionReferenceId"/>
                      </item>
                    </prop>
                    <prop type="array<string>" name="notScopes">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="overrides">
                      <item type="object">
                        <prop type="string" name="kind">
                          <enum>
                            <item value="&quot;definitionVersion&quot;"/>
                            <item value="&quot;policyEffect&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<@Selector_read>" name="selectors">
                          <item type="@Selector_read"/>
                        </prop>
                        <prop type="string" name="value"/>
                      </item>
                    </prop>
                    <prop type="object" name="parameters">
                      <additionalProp>
                        <item type="object">
                          <prop type="any" name="value"/>
                        </item>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="policyDefinitionId"/>
                    <prop type="array<object>" name="resourceSelectors">
                      <item type="object">
                        <prop type="string" name="name"/>
                        <prop type="array<object>" name="selectors">
                          <item type="object" cls="Selector_read">
                            <prop type="array<string>" name="in">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="kind">
                              <enum>
                                <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                <item value="&quot;resourceLocation&quot;"/>
                                <item value="&quot;resourceType&quot;"/>
                                <item value="&quot;resourceWithoutLocation&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<string>" name="notIn">
                              <item type="string"/>
                            </prop>
                          </item>
                        </prop>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="scope"/>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="parameters" required="True" clientFlatten="True">
              <prop type="IdentityObject" name="identity">
                <prop type="string" name="type" arg="$parameters.identity.type">
                  <enum>
                    <item value="&quot;None&quot;"/>
                    <item value="&quot;SystemAssigned&quot;"/>
                    <item value="&quot;UserAssigned&quot;"/>
                  </enum>
                </prop>
                <prop type="object" name="userAssignedIdentities" arg="$parameters.identity.userAssignedIdentities">
                  <additionalProp>
                    <item type="object"/>
                  </additionalProp>
                </prop>
              </prop>
              <prop type="ResourceLocation" name="location" arg="$parameters.location"/>
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="string" name="assignmentType" arg="$parameters.properties.assignmentType">
                  <enum>
                    <item value="&quot;Custom&quot;"/>
                    <item value="&quot;NotSpecified&quot;"/>
                    <item value="&quot;System&quot;"/>
                    <item value="&quot;SystemHidden&quot;"/>
                  </enum>
                </prop>
                <prop type="string" name="definitionVersion" arg="$parameters.properties.definitionVersion"/>
                <prop type="string" name="description" arg="$parameters.properties.description"/>
                <prop type="string" name="displayName" arg="$parameters.properties.displayName"/>
                <prop type="string" name="enforcementMode" arg="$parameters.properties.enforcementMode">
                  <default value="&quot;Default&quot;"/>
                  <enum>
                    <item value="&quot;Default&quot;"/>
                    <item value="&quot;DoNotEnforce&quot;"/>
                  </enum>
                </prop>
                <prop type="object" name="metadata" arg="$parameters.properties.metadata">
                  <additionalProp>
                    <item type="any"/>
                  </additionalProp>
                </prop>
                <prop type="array<object>" name="nonComplianceMessages" arg="$parameters.properties.nonComplianceMessages" identifiers="policyDefinitionReferenceId message">
                  <item type="object">
                    <prop type="string" name="message" arg="$parameters.properties.nonComplianceMessages[].message" required="True"/>
                    <prop type="string" name="policyDefinitionReferenceId" arg="$parameters.properties.nonComplianceMessages[].policyDefinitionReferenceId"/>
                  </item>
                </prop>
                <prop type="array<string>" name="notScopes" arg="$parameters.properties.notScopes">
                  <item type="string"/>
                </prop>
                <prop type="array<object>" name="overrides" arg="$parameters.properties.overrides">
                  <item type="object">
                    <prop type="string" name="kind" arg="$parameters.properties.overrides[].kind">
                      <enum>
                        <item value="&quot;definitionVersion&quot;"/>
                        <item value="&quot;policyEffect&quot;"/>
                      </enum>
                    </prop>
                    <prop type="array<@Selector_update>" name="selectors" arg="$parameters.properties.overrides[].selectors">
                      <item type="@Selector_update"/>
                    </prop>
                    <prop type="string" name="value" arg="$parameters.properties.overrides[].value"/>
                  </item>
                </prop>
                <prop type="object" name="parameters" arg="$parameters.properties.parameters">
                  <additionalProp>
                    <item type="object">
                      <prop type="any" name="value" arg="$parameters.properties.parameters{}.value"/>
                    </item>
                  </additionalProp>
                </prop>
                <prop type="string" name="policyDefinitionId" arg="$parameters.properties.policyDefinitionId"/>
                <prop type="array<object>" name="resourceSelectors" arg="$parameters.properties.resourceSelectors">
                  <item type="object">
                    <prop type="string" name="name" arg="$parameters.properties.resourceSelectors[].name"/>
                    <prop type="array<object>" name="selectors" arg="$parameters.properties.resourceSelectors[].selectors">
                      <item type="object" cls="Selector_update">
                        <prop type="array<string>" name="in" arg="@Selector_update.in">
                          <item type="string"/>
                        </prop>
                        <prop type="string" name="kind" arg="@Selector_update.kind">
                          <enum>
                            <item value="&quot;policyDefinitionReferenceId&quot;"/>
                            <item value="&quot;resourceLocation&quot;"/>
                            <item value="&quot;resourceType&quot;"/>
                            <item value="&quot;resourceWithoutLocation&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<string>" name="notIn" arg="@Selector_update.notIn">
                          <item type="string"/>
                        </prop>
                      </item>
                    </prop>
                  </item>
                </prop>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="PolicyAssignments_Create">
        <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
          <request method="put">
            <path>
              <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
              </param>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-05-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="201">
            <body>
              <json var="$Instance">
                <schema type="@PolicyAssignment_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <commandGroup name="identity">
      <command name="assign" version="2024-05-01" confirmation="">
        <resource id="/{scope}/providers/microsoft.authorization/policyassignments/{}" version="2024-05-01" subresource="identity" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUFzc2lnbm1lbnRzL3twb2xpY3lBc3NpZ25tZW50TmFtZX0=/V/MjAyNC0wNS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.policyAssignmentName" options="name n" required="True" group="">
            <help short="The name of the policy assignment." lines="The name of the policy assignment is the name segment of its resource ID."/>
            <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
          </arg>
          <arg type="string" var="$Path.scope" options="scope" required="True" group="">
            <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
          </arg>
        </argGroup>
        <argGroup name="Parameters.identity">
          <arg type="string" var="$parameters.identity.systemAssigned" options="mi-system-assigned system-assigned" group="Parameters.identity">
            <blank value="&quot;True&quot;"/>
            <help short="Set the system managed identity."/>
          </arg>
          <arg type="array<string>" var="$parameters.identity.userAssigned" options="mi-user-assigned user-assigned" group="Parameters.identity">
            <blank value="[]"/>
            <help short="Set the user managed identity."/>
            <item type="string"/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="object" name="identity"/>
          </json>
        </subresourceSelector>
        <operation operationId="PolicyAssignments_Get">
          <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
            <request method="get">
              <path>
                <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                  <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
                </param>
                <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2024-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="PolicyAssignment_read">
                    <prop readOnly="True" type="ResourceId" name="id"/>
                    <prop type="IdentityObject" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="string" name="assignmentType">
                        <enum>
                          <item value="&quot;Custom&quot;"/>
                          <item value="&quot;NotSpecified&quot;"/>
                          <item value="&quot;System&quot;"/>
                          <item value="&quot;SystemHidden&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="definitionVersion"/>
                      <prop type="string" name="description"/>
                      <prop type="string" name="displayName"/>
                      <prop readOnly="True" type="string" name="effectiveDefinitionVersion"/>
                      <prop type="string" name="enforcementMode">
                        <default value="&quot;Default&quot;"/>
                        <enum>
                          <item value="&quot;Default&quot;"/>
                          <item value="&quot;DoNotEnforce&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="latestDefinitionVersion"/>
                      <prop type="object" name="metadata">
                        <additionalProp>
                          <item type="any"/>
                        </additionalProp>
                      </prop>
                      <prop type="array<object>" name="nonComplianceMessages" identifiers="policyDefinitionReferenceId message">
                        <item type="object">
                          <prop type="string" name="message" required="True"/>
                          <prop type="string" name="policyDefinitionReferenceId"/>
                        </item>
                      </prop>
                      <prop type="array<string>" name="notScopes">
                        <item type="string"/>
                      </prop>
                      <prop type="array<object>" name="overrides">
                        <item type="object">
                          <prop type="string" name="kind">
                            <enum>
                              <item value="&quot;definitionVersion&quot;"/>
                              <item value="&quot;policyEffect&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<@Selector_read>" name="selectors">
                            <item type="@Selector_read"/>
                          </prop>
                          <prop type="string" name="value"/>
                        </item>
                      </prop>
                      <prop type="object" name="parameters">
                        <additionalProp>
                          <item type="object">
                            <prop type="any" name="value"/>
                          </item>
                        </additionalProp>
                      </prop>
                      <prop type="string" name="policyDefinitionId"/>
                      <prop type="array<object>" name="resourceSelectors">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="array<object>" name="selectors">
                            <item type="object" cls="Selector_read">
                              <prop type="array<string>" name="in">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="kind">
                                <enum>
                                  <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                  <item value="&quot;resourceLocation&quot;"/>
                                  <item value="&quot;resourceType&quot;"/>
                                  <item value="&quot;resourceWithoutLocation&quot;"/>
                                </enum>
                              </prop>
                              <prop type="array<string>" name="notIn">
                                <item type="string"/>
                              </prop>
                            </item>
                          </prop>
                        </item>
                      </prop>
                      <prop readOnly="True" type="string" name="scope"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceUpdate ref="$Subresource">
            <json>
              <schema action="assign" type="IdentityObject" name="parameters.identity" required="True">
                <userAssigned action="assign" type="array<string>" name="userAssigned" arg="$parameters.identity.userAssigned">
                  <item action="assign" type="string"/>
                </userAssigned>
                <systemAssigned action="assign" type="string" name="systemAssigned" arg="$parameters.identity.systemAssigned"/>
              </schema>
            </json>
          </instanceUpdate>
        </operation>
        <operation operationId="PolicyAssignments_Create">
          <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
            <request method="put">
              <path>
                <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                  <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
                </param>
                <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2024-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="201">
              <body>
                <json var="$Instance">
                  <schema type="@PolicyAssignment_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="remove" version="2024-05-01" confirmation="">
        <resource id="/{scope}/providers/microsoft.authorization/policyassignments/{}" version="2024-05-01" subresource="identity" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUFzc2lnbm1lbnRzL3twb2xpY3lBc3NpZ25tZW50TmFtZX0=/V/MjAyNC0wNS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.policyAssignmentName" options="name n" required="True" group="">
            <help short="The name of the policy assignment." lines="The name of the policy assignment is the name segment of its resource ID."/>
            <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
          </arg>
          <arg type="string" var="$Path.scope" options="scope" required="True" group="">
            <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
          </arg>
        </argGroup>
        <argGroup name="Parameters.identity">
          <arg type="string" var="$parameters.identity.systemAssigned" options="mi-system-assigned system-assigned" group="Parameters.identity">
            <blank value="&quot;True&quot;"/>
            <help short="Remove the system managed identity."/>
          </arg>
          <arg type="array<string>" var="$parameters.identity.userAssigned" options="mi-user-assigned user-assigned" group="Parameters.identity">
            <blank value="[]"/>
            <help short="Remove the user managed identity."/>
            <item type="string"/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="object" name="identity"/>
          </json>
        </subresourceSelector>
        <operation operationId="PolicyAssignments_Get">
          <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
            <request method="get">
              <path>
                <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                  <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
                </param>
                <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2024-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="PolicyAssignment_read">
                    <prop readOnly="True" type="ResourceId" name="id"/>
                    <prop type="IdentityObject" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="string" name="assignmentType">
                        <enum>
                          <item value="&quot;Custom&quot;"/>
                          <item value="&quot;NotSpecified&quot;"/>
                          <item value="&quot;System&quot;"/>
                          <item value="&quot;SystemHidden&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="definitionVersion"/>
                      <prop type="string" name="description"/>
                      <prop type="string" name="displayName"/>
                      <prop readOnly="True" type="string" name="effectiveDefinitionVersion"/>
                      <prop type="string" name="enforcementMode">
                        <default value="&quot;Default&quot;"/>
                        <enum>
                          <item value="&quot;Default&quot;"/>
                          <item value="&quot;DoNotEnforce&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="latestDefinitionVersion"/>
                      <prop type="object" name="metadata">
                        <additionalProp>
                          <item type="any"/>
                        </additionalProp>
                      </prop>
                      <prop type="array<object>" name="nonComplianceMessages" identifiers="policyDefinitionReferenceId message">
                        <item type="object">
                          <prop type="string" name="message" required="True"/>
                          <prop type="string" name="policyDefinitionReferenceId"/>
                        </item>
                      </prop>
                      <prop type="array<string>" name="notScopes">
                        <item type="string"/>
                      </prop>
                      <prop type="array<object>" name="overrides">
                        <item type="object">
                          <prop type="string" name="kind">
                            <enum>
                              <item value="&quot;definitionVersion&quot;"/>
                              <item value="&quot;policyEffect&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<@Selector_read>" name="selectors">
                            <item type="@Selector_read"/>
                          </prop>
                          <prop type="string" name="value"/>
                        </item>
                      </prop>
                      <prop type="object" name="parameters">
                        <additionalProp>
                          <item type="object">
                            <prop type="any" name="value"/>
                          </item>
                        </additionalProp>
                      </prop>
                      <prop type="string" name="policyDefinitionId"/>
                      <prop type="array<object>" name="resourceSelectors">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="array<object>" name="selectors">
                            <item type="object" cls="Selector_read">
                              <prop type="array<string>" name="in">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="kind">
                                <enum>
                                  <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                  <item value="&quot;resourceLocation&quot;"/>
                                  <item value="&quot;resourceType&quot;"/>
                                  <item value="&quot;resourceWithoutLocation&quot;"/>
                                </enum>
                              </prop>
                              <prop type="array<string>" name="notIn">
                                <item type="string"/>
                              </prop>
                            </item>
                          </prop>
                        </item>
                      </prop>
                      <prop readOnly="True" type="string" name="scope"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceUpdate ref="$Subresource">
            <json>
              <schema action="remove" type="IdentityObject" name="parameters.identity" required="True">
                <userAssigned action="remove" type="array<string>" name="userAssigned" arg="$parameters.identity.userAssigned">
                  <item action="remove" type="string"/>
                </userAssigned>
                <systemAssigned action="remove" type="string" name="systemAssigned" arg="$parameters.identity.systemAssigned"/>
              </schema>
            </json>
          </instanceUpdate>
        </operation>
        <operation operationId="PolicyAssignments_Create">
          <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
            <request method="put">
              <path>
                <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                  <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
                </param>
                <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2024-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="201">
              <body>
                <json var="$Instance">
                  <schema type="@PolicyAssignment_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="show" version="2024-05-01" confirmation="">
        <resource id="/{scope}/providers/microsoft.authorization/policyassignments/{}" version="2024-05-01" subresource="identity" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUFzc2lnbm1lbnRzL3twb2xpY3lBc3NpZ25tZW50TmFtZX0=/V/MjAyNC0wNS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.policyAssignmentName" options="name n" required="True" group="">
            <help short="The name of the policy assignment." lines="The name of the policy assignment is the name segment of its resource ID."/>
            <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
          </arg>
          <arg type="string" var="$Path.scope" options="scope" required="True" group="">
            <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="object" name="identity"/>
          </json>
        </subresourceSelector>
        <operation operationId="PolicyAssignments_Get">
          <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
            <request method="get">
              <path>
                <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                  <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
                </param>
                <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2024-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="PolicyAssignment_read">
                    <prop readOnly="True" type="ResourceId" name="id"/>
                    <prop type="IdentityObject" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="string" name="assignmentType">
                        <enum>
                          <item value="&quot;Custom&quot;"/>
                          <item value="&quot;NotSpecified&quot;"/>
                          <item value="&quot;System&quot;"/>
                          <item value="&quot;SystemHidden&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="definitionVersion"/>
                      <prop type="string" name="description"/>
                      <prop type="string" name="displayName"/>
                      <prop readOnly="True" type="string" name="effectiveDefinitionVersion"/>
                      <prop type="string" name="enforcementMode">
                        <default value="&quot;Default&quot;"/>
                        <enum>
                          <item value="&quot;Default&quot;"/>
                          <item value="&quot;DoNotEnforce&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="latestDefinitionVersion"/>
                      <prop type="object" name="metadata">
                        <additionalProp>
                          <item type="any"/>
                        </additionalProp>
                      </prop>
                      <prop type="array<object>" name="nonComplianceMessages" identifiers="policyDefinitionReferenceId message">
                        <item type="object">
                          <prop type="string" name="message" required="True"/>
                          <prop type="string" name="policyDefinitionReferenceId"/>
                        </item>
                      </prop>
                      <prop type="array<string>" name="notScopes">
                        <item type="string"/>
                      </prop>
                      <prop type="array<object>" name="overrides">
                        <item type="object">
                          <prop type="string" name="kind">
                            <enum>
                              <item value="&quot;definitionVersion&quot;"/>
                              <item value="&quot;policyEffect&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<@Selector_read>" name="selectors">
                            <item type="@Selector_read"/>
                          </prop>
                          <prop type="string" name="value"/>
                        </item>
                      </prop>
                      <prop type="object" name="parameters">
                        <additionalProp>
                          <item type="object">
                            <prop type="any" name="value"/>
                          </item>
                        </additionalProp>
                      </prop>
                      <prop type="string" name="policyDefinitionId"/>
                      <prop type="array<object>" name="resourceSelectors">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="array<object>" name="selectors">
                            <item type="object" cls="Selector_read">
                              <prop type="array<string>" name="in">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="kind">
                                <enum>
                                  <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                  <item value="&quot;resourceLocation&quot;"/>
                                  <item value="&quot;resourceType&quot;"/>
                                  <item value="&quot;resourceWithoutLocation&quot;"/>
                                </enum>
                              </prop>
                              <prop type="array<string>" name="notIn">
                                <item type="string"/>
                              </prop>
                            </item>
                          </prop>
                        </item>
                      </prop>
                      <prop readOnly="True" type="string" name="scope"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
    </commandGroup>
    <commandGroup name="non-compliance-message">
      <command name="list" version="2024-05-01" confirmation="">
        <resource id="/{scope}/providers/microsoft.authorization/policyassignments/{}" version="2024-05-01" subresource="properties.nonComplianceMessages" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUFzc2lnbm1lbnRzL3twb2xpY3lBc3NpZ25tZW50TmFtZX0=/V/MjAyNC0wNS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.policyAssignmentName" options="name n" required="True" group="">
            <help short="The name of the policy assignment." lines="The name of the policy assignment is the name segment of its resource ID."/>
            <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
          </arg>
          <arg type="string" var="$Path.scope" options="scope" required="True" group="">
            <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="array" name="properties.nonComplianceMessages"/>
          </json>
        </subresourceSelector>
        <operation operationId="PolicyAssignments_Get">
          <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
            <request method="get">
              <path>
                <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                  <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
                </param>
                <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2024-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="PolicyAssignment_read">
                    <prop readOnly="True" type="ResourceId" name="id"/>
                    <prop type="IdentityObject" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="string" name="assignmentType">
                        <enum>
                          <item value="&quot;Custom&quot;"/>
                          <item value="&quot;NotSpecified&quot;"/>
                          <item value="&quot;System&quot;"/>
                          <item value="&quot;SystemHidden&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="definitionVersion"/>
                      <prop type="string" name="description"/>
                      <prop type="string" name="displayName"/>
                      <prop readOnly="True" type="string" name="effectiveDefinitionVersion"/>
                      <prop type="string" name="enforcementMode">
                        <default value="&quot;Default&quot;"/>
                        <enum>
                          <item value="&quot;Default&quot;"/>
                          <item value="&quot;DoNotEnforce&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="latestDefinitionVersion"/>
                      <prop type="object" name="metadata">
                        <additionalProp>
                          <item type="any"/>
                        </additionalProp>
                      </prop>
                      <prop type="array<object>" name="nonComplianceMessages" identifiers="policyDefinitionReferenceId message">
                        <item type="object">
                          <prop type="string" name="message" required="True"/>
                          <prop type="string" name="policyDefinitionReferenceId"/>
                        </item>
                      </prop>
                      <prop type="array<string>" name="notScopes">
                        <item type="string"/>
                      </prop>
                      <prop type="array<object>" name="overrides">
                        <item type="object">
                          <prop type="string" name="kind">
                            <enum>
                              <item value="&quot;definitionVersion&quot;"/>
                              <item value="&quot;policyEffect&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<@Selector_read>" name="selectors">
                            <item type="@Selector_read"/>
                          </prop>
                          <prop type="string" name="value"/>
                        </item>
                      </prop>
                      <prop type="object" name="parameters">
                        <additionalProp>
                          <item type="object">
                            <prop type="any" name="value"/>
                          </item>
                        </additionalProp>
                      </prop>
                      <prop type="string" name="policyDefinitionId"/>
                      <prop type="array<object>" name="resourceSelectors">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="array<object>" name="selectors">
                            <item type="object" cls="Selector_read">
                              <prop type="array<string>" name="in">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="kind">
                                <enum>
                                  <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                  <item value="&quot;resourceLocation&quot;"/>
                                  <item value="&quot;resourceType&quot;"/>
                                  <item value="&quot;resourceWithoutLocation&quot;"/>
                                </enum>
                              </prop>
                              <prop type="array<string>" name="notIn">
                                <item type="string"/>
                              </prop>
                            </item>
                          </prop>
                        </item>
                      </prop>
                      <prop readOnly="True" type="string" name="scope"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="array" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="create" version="2024-05-01" confirmation="">
        <resource id="/{scope}/providers/microsoft.authorization/policyassignments/{}" version="2024-05-01" subresource="properties.nonComplianceMessages[]" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUFzc2lnbm1lbnRzL3twb2xpY3lBc3NpZ25tZW50TmFtZX0=/V/MjAyNC0wNS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.policyAssignmentName" options="name n" required="True" group="">
            <help short="The name of the policy assignment." lines="The name of the policy assignment is the name segment of its resource ID."/>
            <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
          </arg>
          <arg type="string" var="$Path.scope" options="scope" required="True" group="">
            <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
          </arg>
          <arg type="string" var="$parameters.properties.nonComplianceMessages[].message" options="message m" required="True" group="">
            <help short="A custom non-compliance message." lines="A message that describes the reasons a resource was determined to be non-compliant. This will be shown in 'deny' error messages and resource non-compliance results."/>
          </arg>
          <arg type="string" var="$parameters.properties.nonComplianceMessages[].policyDefinitionReferenceId" options="policy-definition-reference-id r" required="True" group="">
            <help short="The policy definition reference ID." lines="The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If not provided, the message applies to all policy definitions assigned by this policy assignment."/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="array" name="properties.nonComplianceMessages">
              <item type="object"/>
              <identifier type="string" name="[].message" arg="$parameters.properties.nonComplianceMessages[].message" required="True"/>
              <identifier type="string" name="[].policyDefinitionReferenceId" arg="$parameters.properties.nonComplianceMessages[].policyDefinitionReferenceId" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="PolicyAssignments_Get">
          <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
            <request method="get">
              <path>
                <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                  <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
                </param>
                <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2024-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="PolicyAssignment_read">
                    <prop readOnly="True" type="ResourceId" name="id"/>
                    <prop type="IdentityObject" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="string" name="assignmentType">
                        <enum>
                          <item value="&quot;Custom&quot;"/>
                          <item value="&quot;NotSpecified&quot;"/>
                          <item value="&quot;System&quot;"/>
                          <item value="&quot;SystemHidden&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="definitionVersion"/>
                      <prop type="string" name="description"/>
                      <prop type="string" name="displayName"/>
                      <prop readOnly="True" type="string" name="effectiveDefinitionVersion"/>
                      <prop type="string" name="enforcementMode">
                        <default value="&quot;Default&quot;"/>
                        <enum>
                          <item value="&quot;Default&quot;"/>
                          <item value="&quot;DoNotEnforce&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="latestDefinitionVersion"/>
                      <prop type="object" name="metadata">
                        <additionalProp>
                          <item type="any"/>
                        </additionalProp>
                      </prop>
                      <prop type="array<object>" name="nonComplianceMessages" identifiers="policyDefinitionReferenceId message">
                        <item type="object">
                          <prop type="string" name="message" required="True"/>
                          <prop type="string" name="policyDefinitionReferenceId"/>
                        </item>
                      </prop>
                      <prop type="array<string>" name="notScopes">
                        <item type="string"/>
                      </prop>
                      <prop type="array<object>" name="overrides">
                        <item type="object">
                          <prop type="string" name="kind">
                            <enum>
                              <item value="&quot;definitionVersion&quot;"/>
                              <item value="&quot;policyEffect&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<@Selector_read>" name="selectors">
                            <item type="@Selector_read"/>
                          </prop>
                          <prop type="string" name="value"/>
                        </item>
                      </prop>
                      <prop type="object" name="parameters">
                        <additionalProp>
                          <item type="object">
                            <prop type="any" name="value"/>
                          </item>
                        </additionalProp>
                      </prop>
                      <prop type="string" name="policyDefinitionId"/>
                      <prop type="array<object>" name="resourceSelectors">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="array<object>" name="selectors">
                            <item type="object" cls="Selector_read">
                              <prop type="array<string>" name="in">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="kind">
                                <enum>
                                  <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                  <item value="&quot;resourceLocation&quot;"/>
                                  <item value="&quot;resourceType&quot;"/>
                                  <item value="&quot;resourceWithoutLocation&quot;"/>
                                </enum>
                              </prop>
                              <prop type="array<string>" name="notIn">
                                <item type="string"/>
                              </prop>
                            </item>
                          </prop>
                        </item>
                      </prop>
                      <prop readOnly="True" type="string" name="scope"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceCreate ref="$Subresource">
            <json>
              <schema type="object" name="parameters.properties.nonComplianceMessages[]" required="True">
                <prop type="string" name="message" arg="$parameters.properties.nonComplianceMessages[].message" required="True"/>
                <prop type="string" name="policyDefinitionReferenceId" arg="$parameters.properties.nonComplianceMessages[].policyDefinitionReferenceId"/>
              </schema>
            </json>
          </instanceCreate>
        </operation>
        <operation operationId="PolicyAssignments_Create">
          <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
            <request method="put">
              <path>
                <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                  <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
                </param>
                <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2024-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="201">
              <body>
                <json var="$Instance">
                  <schema type="@PolicyAssignment_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="update" version="2024-05-01" confirmation="">
        <resource id="/{scope}/providers/microsoft.authorization/policyassignments/{}" version="2024-05-01" subresource="properties.nonComplianceMessages[]" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUFzc2lnbm1lbnRzL3twb2xpY3lBc3NpZ25tZW50TmFtZX0=/V/MjAyNC0wNS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.policyAssignmentName" options="name n" required="True" group="">
            <help short="The name of the policy assignment." lines="The name of the policy assignment is the name segment of its resource ID."/>
            <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
          </arg>
          <arg type="string" var="$Path.scope" options="scope" required="True" group="">
            <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
          </arg>
          <arg type="string" var="$parameters.properties.nonComplianceMessages[].message" options="message m" required="True" group="">
            <help short="A custom non-compliance message." lines="A message that describes the reasons a resource was determined to be non-compliant. This will be shown in 'deny' error messages and resource non-compliance results."/>
          </arg>
          <arg type="string" var="$parameters.properties.nonComplianceMessages[].policyDefinitionReferenceId" options="policy-definition-reference-id r" required="True" group="">
            <help short="The policy definition reference ID." lines="The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If not provided, the message applies to all policy definitions assigned by this policy assignment."/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="array" name="properties.nonComplianceMessages">
              <item type="object"/>
              <identifier type="string" name="[].message" arg="$parameters.properties.nonComplianceMessages[].message" required="True"/>
              <identifier type="string" name="[].policyDefinitionReferenceId" arg="$parameters.properties.nonComplianceMessages[].policyDefinitionReferenceId" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="PolicyAssignments_Get">
          <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
            <request method="get">
              <path>
                <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                  <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
                </param>
                <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2024-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="PolicyAssignment_read">
                    <prop readOnly="True" type="ResourceId" name="id"/>
                    <prop type="IdentityObject" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="string" name="assignmentType">
                        <enum>
                          <item value="&quot;Custom&quot;"/>
                          <item value="&quot;NotSpecified&quot;"/>
                          <item value="&quot;System&quot;"/>
                          <item value="&quot;SystemHidden&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="definitionVersion"/>
                      <prop type="string" name="description"/>
                      <prop type="string" name="displayName"/>
                      <prop readOnly="True" type="string" name="effectiveDefinitionVersion"/>
                      <prop type="string" name="enforcementMode">
                        <default value="&quot;Default&quot;"/>
                        <enum>
                          <item value="&quot;Default&quot;"/>
                          <item value="&quot;DoNotEnforce&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="latestDefinitionVersion"/>
                      <prop type="object" name="metadata">
                        <additionalProp>
                          <item type="any"/>
                        </additionalProp>
                      </prop>
                      <prop type="array<object>" name="nonComplianceMessages" identifiers="policyDefinitionReferenceId message">
                        <item type="object">
                          <prop type="string" name="message" required="True"/>
                          <prop type="string" name="policyDefinitionReferenceId"/>
                        </item>
                      </prop>
                      <prop type="array<string>" name="notScopes">
                        <item type="string"/>
                      </prop>
                      <prop type="array<object>" name="overrides">
                        <item type="object">
                          <prop type="string" name="kind">
                            <enum>
                              <item value="&quot;definitionVersion&quot;"/>
                              <item value="&quot;policyEffect&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<@Selector_read>" name="selectors">
                            <item type="@Selector_read"/>
                          </prop>
                          <prop type="string" name="value"/>
                        </item>
                      </prop>
                      <prop type="object" name="parameters">
                        <additionalProp>
                          <item type="object">
                            <prop type="any" name="value"/>
                          </item>
                        </additionalProp>
                      </prop>
                      <prop type="string" name="policyDefinitionId"/>
                      <prop type="array<object>" name="resourceSelectors">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="array<object>" name="selectors">
                            <item type="object" cls="Selector_read">
                              <prop type="array<string>" name="in">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="kind">
                                <enum>
                                  <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                  <item value="&quot;resourceLocation&quot;"/>
                                  <item value="&quot;resourceType&quot;"/>
                                  <item value="&quot;resourceWithoutLocation&quot;"/>
                                </enum>
                              </prop>
                              <prop type="array<string>" name="notIn">
                                <item type="string"/>
                              </prop>
                            </item>
                          </prop>
                        </item>
                      </prop>
                      <prop readOnly="True" type="string" name="scope"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceUpdate ref="$Subresource">
            <json>
              <schema type="object" name="parameters.properties.nonComplianceMessages[]" required="True">
                <prop type="string" name="message" arg="$parameters.properties.nonComplianceMessages[].message" required="True"/>
                <prop type="string" name="policyDefinitionReferenceId" arg="$parameters.properties.nonComplianceMessages[].policyDefinitionReferenceId"/>
              </schema>
            </json>
          </instanceUpdate>
        </operation>
        <operation operationId="PolicyAssignments_Create">
          <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
            <request method="put">
              <path>
                <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                  <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
                </param>
                <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2024-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="201">
              <body>
                <json var="$Instance">
                  <schema type="@PolicyAssignment_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="delete" version="2024-05-01" confirmation="">
        <resource id="/{scope}/providers/microsoft.authorization/policyassignments/{}" version="2024-05-01" subresource="properties.nonComplianceMessages[]" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUFzc2lnbm1lbnRzL3twb2xpY3lBc3NpZ25tZW50TmFtZX0=/V/MjAyNC0wNS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.policyAssignmentName" options="name n" required="True" group="">
            <help short="The name of the policy assignment." lines="The name of the policy assignment is the name segment of its resource ID."/>
            <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
          </arg>
          <arg type="string" var="$Path.scope" options="scope" required="True" group="">
            <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
          </arg>
          <arg type="string" var="$parameters.properties.nonComplianceMessages[].message" options="message m" required="True" group="">
            <help short="A custom non-compliance message." lines="A message that describes the reasons a resource was determined to be non-compliant. This will be shown in 'deny' error messages and resource non-compliance results."/>
          </arg>
          <arg type="string" var="$parameters.properties.nonComplianceMessages[].policyDefinitionReferenceId" options="policy-definition-reference-id r" required="True" group="">
            <help short="The policy definition reference ID." lines="The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If not provided, the message applies to all policy definitions assigned by this policy assignment."/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="array" name="properties.nonComplianceMessages">
              <item type="object"/>
              <identifier type="string" name="[].message" arg="$parameters.properties.nonComplianceMessages[].message" required="True"/>
              <identifier type="string" name="[].policyDefinitionReferenceId" arg="$parameters.properties.nonComplianceMessages[].policyDefinitionReferenceId" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="PolicyAssignments_Get">
          <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
            <request method="get">
              <path>
                <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                  <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
                </param>
                <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2024-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="PolicyAssignment_read">
                    <prop readOnly="True" type="ResourceId" name="id"/>
                    <prop type="IdentityObject" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="string" name="assignmentType">
                        <enum>
                          <item value="&quot;Custom&quot;"/>
                          <item value="&quot;NotSpecified&quot;"/>
                          <item value="&quot;System&quot;"/>
                          <item value="&quot;SystemHidden&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="definitionVersion"/>
                      <prop type="string" name="description"/>
                      <prop type="string" name="displayName"/>
                      <prop readOnly="True" type="string" name="effectiveDefinitionVersion"/>
                      <prop type="string" name="enforcementMode">
                        <default value="&quot;Default&quot;"/>
                        <enum>
                          <item value="&quot;Default&quot;"/>
                          <item value="&quot;DoNotEnforce&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="latestDefinitionVersion"/>
                      <prop type="object" name="metadata">
                        <additionalProp>
                          <item type="any"/>
                        </additionalProp>
                      </prop>
                      <prop type="array<object>" name="nonComplianceMessages" identifiers="policyDefinitionReferenceId message">
                        <item type="object">
                          <prop type="string" name="message" required="True"/>
                          <prop type="string" name="policyDefinitionReferenceId"/>
                        </item>
                      </prop>
                      <prop type="array<string>" name="notScopes">
                        <item type="string"/>
                      </prop>
                      <prop type="array<object>" name="overrides">
                        <item type="object">
                          <prop type="string" name="kind">
                            <enum>
                              <item value="&quot;definitionVersion&quot;"/>
                              <item value="&quot;policyEffect&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<@Selector_read>" name="selectors">
                            <item type="@Selector_read"/>
                          </prop>
                          <prop type="string" name="value"/>
                        </item>
                      </prop>
                      <prop type="object" name="parameters">
                        <additionalProp>
                          <item type="object">
                            <prop type="any" name="value"/>
                          </item>
                        </additionalProp>
                      </prop>
                      <prop type="string" name="policyDefinitionId"/>
                      <prop type="array<object>" name="resourceSelectors">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="array<object>" name="selectors">
                            <item type="object" cls="Selector_read">
                              <prop type="array<string>" name="in">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="kind">
                                <enum>
                                  <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                  <item value="&quot;resourceLocation&quot;"/>
                                  <item value="&quot;resourceType&quot;"/>
                                  <item value="&quot;resourceWithoutLocation&quot;"/>
                                </enum>
                              </prop>
                              <prop type="array<string>" name="notIn">
                                <item type="string"/>
                              </prop>
                            </item>
                          </prop>
                        </item>
                      </prop>
                      <prop readOnly="True" type="string" name="scope"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceDelete ref="$Subresource">
            <json/>
          </instanceDelete>
        </operation>
        <operation operationId="PolicyAssignments_Create">
          <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
            <request method="put">
              <path>
                <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                  <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
                </param>
                <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2024-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="201">
              <body>
                <json var="$Instance">
                  <schema type="@PolicyAssignment_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
      </command>
      <command name="show" version="2024-05-01" confirmation="">
        <resource id="/{scope}/providers/microsoft.authorization/policyassignments/{}" version="2024-05-01" subresource="properties.nonComplianceMessages[]" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUFzc2lnbm1lbnRzL3twb2xpY3lBc3NpZ25tZW50TmFtZX0=/V/MjAyNC0wNS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.policyAssignmentName" options="name n" required="True" group="">
            <help short="The name of the policy assignment." lines="The name of the policy assignment is the name segment of its resource ID."/>
            <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
          </arg>
          <arg type="string" var="$Path.scope" options="scope" required="True" group="">
            <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
          </arg>
          <arg type="string" var="$parameters.properties.nonComplianceMessages[].message" options="message m" required="True" group="">
            <help short="A custom non-compliance message." lines="A message that describes the reasons a resource was determined to be non-compliant. This will be shown in 'deny' error messages and resource non-compliance results."/>
          </arg>
          <arg type="string" var="$parameters.properties.nonComplianceMessages[].policyDefinitionReferenceId" options="policy-definition-reference-id r" required="True" group="">
            <help short="The policy definition reference ID." lines="The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If not provided, the message applies to all policy definitions assigned by this policy assignment."/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="array" name="properties.nonComplianceMessages">
              <item type="object"/>
              <identifier type="string" name="[].message" arg="$parameters.properties.nonComplianceMessages[].message" required="True"/>
              <identifier type="string" name="[].policyDefinitionReferenceId" arg="$parameters.properties.nonComplianceMessages[].policyDefinitionReferenceId" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="PolicyAssignments_Get">
          <http path="/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}">
            <request method="get">
              <path>
                <param type="string" name="policyAssignmentName" arg="$Path.policyAssignmentName" required="True">
                  <format pattern="^[^<>*%&:\?.+/]*[^<>*%&:\?.+/ ]+$"/>
                </param>
                <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2024-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="PolicyAssignment_read">
                    <prop readOnly="True" type="ResourceId" name="id"/>
                    <prop type="IdentityObject" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="string" name="assignmentType">
                        <enum>
                          <item value="&quot;Custom&quot;"/>
                          <item value="&quot;NotSpecified&quot;"/>
                          <item value="&quot;System&quot;"/>
                          <item value="&quot;SystemHidden&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="definitionVersion"/>
                      <prop type="string" name="description"/>
                      <prop type="string" name="displayName"/>
                      <prop readOnly="True" type="string" name="effectiveDefinitionVersion"/>
                      <prop type="string" name="enforcementMode">
                        <default value="&quot;Default&quot;"/>
                        <enum>
                          <item value="&quot;Default&quot;"/>
                          <item value="&quot;DoNotEnforce&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="latestDefinitionVersion"/>
                      <prop type="object" name="metadata">
                        <additionalProp>
                          <item type="any"/>
                        </additionalProp>
                      </prop>
                      <prop type="array<object>" name="nonComplianceMessages" identifiers="policyDefinitionReferenceId message">
                        <item type="object">
                          <prop type="string" name="message" required="True"/>
                          <prop type="string" name="policyDefinitionReferenceId"/>
                        </item>
                      </prop>
                      <prop type="array<string>" name="notScopes">
                        <item type="string"/>
                      </prop>
                      <prop type="array<object>" name="overrides">
                        <item type="object">
                          <prop type="string" name="kind">
                            <enum>
                              <item value="&quot;definitionVersion&quot;"/>
                              <item value="&quot;policyEffect&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<@Selector_read>" name="selectors">
                            <item type="@Selector_read"/>
                          </prop>
                          <prop type="string" name="value"/>
                        </item>
                      </prop>
                      <prop type="object" name="parameters">
                        <additionalProp>
                          <item type="object">
                            <prop type="any" name="value"/>
                          </item>
                        </additionalProp>
                      </prop>
                      <prop type="string" name="policyDefinitionId"/>
                      <prop type="array<object>" name="resourceSelectors">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="array<object>" name="selectors">
                            <item type="object" cls="Selector_read">
                              <prop type="array<string>" name="in">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="kind">
                                <enum>
                                  <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                  <item value="&quot;resourceLocation&quot;"/>
                                  <item value="&quot;resourceType&quot;"/>
                                  <item value="&quot;resourceWithoutLocation&quot;"/>
                                </enum>
                              </prop>
                              <prop type="array<string>" name="notIn">
                                <item type="string"/>
                              </prop>
                            </item>
                          </prop>
                        </item>
                      </prop>
                      <prop readOnly="True" type="string" name="scope"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
    </commandGroup>
  </commandGroup>
</CodeGen>
