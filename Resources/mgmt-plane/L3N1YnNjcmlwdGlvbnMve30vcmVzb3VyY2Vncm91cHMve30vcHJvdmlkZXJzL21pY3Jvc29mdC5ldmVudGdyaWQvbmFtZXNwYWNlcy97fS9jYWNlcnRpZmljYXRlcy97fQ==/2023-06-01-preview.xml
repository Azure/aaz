<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/cacertificates/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L2NhQ2VydGlmaWNhdGVzL3tjYUNlcnRpZmljYXRlTmFtZX0=/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
  <commandGroup name="eventgrid namespace ca-certificate">
    <command name="show" version="2023-06-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/cacertificates/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L2NhQ2VydGlmaWNhdGVzL3tjYUNlcnRpZmljYXRlTmFtZX0=/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.caCertificateName" options="ca-certificate-name name n" required="True" idPart="child_name_1">
          <help short="Name of the CA certificate."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="Name of the namespace."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="CaCertificates_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/caCertificates/{caCertificateName}">
          <request method="get">
            <path>
              <param type="string" name="caCertificateName" arg="$Path.caCertificateName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EventGrid/namespaces/{}/caCertificates/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="string" name="description"/>
                    <prop type="string" name="encodedCertificate"/>
                    <prop readOnly="True" type="dateTime" name="expiryTimeInUtc"/>
                    <prop readOnly="True" type="dateTime" name="issueTimeInUtc"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2023-06-01-preview" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/cacertificates/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L2NhQ2VydGlmaWNhdGVzL3tjYUNlcnRpZmljYXRlTmFtZX0=/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.caCertificateName" options="ca-certificate-name name n" required="True" idPart="child_name_1">
          <help short="Name of the CA certificate."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="Name of the namespace."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="CaCertificates_Delete">
        <longRunning finalStateVia="location"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/caCertificates/{caCertificateName}">
          <request method="delete">
            <path>
              <param type="string" name="caCertificateName" arg="$Path.caCertificateName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="202">
            <header>
              <item name="Location"/>
            </header>
          </response>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2023-06-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/cacertificates/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L2NhQ2VydGlmaWNhdGVzL3tjYUNlcnRpZmljYXRlTmFtZX0=/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.caCertificateName" options="ca-certificate-name name n" required="True" idPart="child_name_1">
          <help short="The CA certificate name."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="Name of the namespace."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$caCertificateInfo.properties.description" options="description" group="Properties">
          <help short="Description for the CA Certificate resource."/>
        </arg>
        <arg type="string" var="$caCertificateInfo.properties.encodedCertificate" options="encoded-certificate" group="Properties">
          <help short="Base64 encoded PEM (Privacy Enhanced Mail) format certificate data."/>
        </arg>
      </argGroup>
      <operation operationId="CaCertificates_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/caCertificates/{caCertificateName}">
          <request method="put">
            <path>
              <param type="string" name="caCertificateName" arg="$Path.caCertificateName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="caCertificateInfo" required="True" clientFlatten="True">
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="string" name="description" arg="$caCertificateInfo.properties.description"/>
                    <prop type="string" name="encodedCertificate" arg="$caCertificateInfo.properties.encodedCertificate"/>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EventGrid/namespaces/{}/caCertificates/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="string" name="description"/>
                    <prop type="string" name="encodedCertificate"/>
                    <prop readOnly="True" type="dateTime" name="expiryTimeInUtc"/>
                    <prop readOnly="True" type="dateTime" name="issueTimeInUtc"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2023-06-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/cacertificates/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L2NhQ2VydGlmaWNhdGVzL3tjYUNlcnRpZmljYXRlTmFtZX0=/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.caCertificateName" options="ca-certificate-name name n" required="True" idPart="child_name_1">
          <help short="Name of the CA certificate."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="Name of the namespace."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="string" var="$caCertificateInfo.properties.description" options="description" group="Properties">
          <help short="Description for the CA Certificate resource."/>
        </arg>
        <arg nullable="True" type="string" var="$caCertificateInfo.properties.encodedCertificate" options="encoded-certificate" group="Properties">
          <help short="Base64 encoded PEM (Privacy Enhanced Mail) format certificate data."/>
        </arg>
      </argGroup>
      <operation operationId="CaCertificates_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/caCertificates/{caCertificateName}">
          <request method="get">
            <path>
              <param type="string" name="caCertificateName" arg="$Path.caCertificateName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="CaCertificate_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EventGrid/namespaces/{}/caCertificates/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="string" name="description"/>
                    <prop type="string" name="encodedCertificate"/>
                    <prop readOnly="True" type="dateTime" name="expiryTimeInUtc"/>
                    <prop readOnly="True" type="dateTime" name="issueTimeInUtc"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="caCertificateInfo" required="True" clientFlatten="True">
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="string" name="description" arg="$caCertificateInfo.properties.description"/>
                <prop type="string" name="encodedCertificate" arg="$caCertificateInfo.properties.encodedCertificate"/>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="CaCertificates_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/caCertificates/{caCertificateName}">
          <request method="put">
            <path>
              <param type="string" name="caCertificateName" arg="$Path.caCertificateName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@CaCertificate_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
