<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/firewallpolicies/{}" version="2022-01-01" swagger="mgmt-plane/network/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9maXJld2FsbFBvbGljaWVzL3tmaXJld2FsbFBvbGljeU5hbWV9/V/MjAyMi0wMS0wMQ=="/>
  <commandGroup name="network firewall policy">
    <command name="show" version="2022-01-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/firewallpolicies/{}" version="2022-01-01" swagger="mgmt-plane/network/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9maXJld2FsbFBvbGljaWVzL3tmaXJld2FsbFBvbGljeU5hbWV9/V/MjAyMi0wMS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.firewallPolicyName" options="name n" required="True" group="" idPart="name">
          <help short="The name of the Firewall Policy."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Query.expand" options="expand" group="">
          <help short="Expands referenced resources. Default value is None."/>
        </arg>
      </argGroup>
      <operation operationId="FirewallPolicies_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}">
          <request method="get">
            <path>
              <param type="string" name="firewallPolicyName" arg="$Path.firewallPolicyName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <param type="string" name="$expand" arg="$Query.expand"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-01-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="string" name="etag"/>
                  <prop type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/firewallPolicies/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity">
                    <prop readOnly="True" type="string" name="principalId"/>
                    <prop readOnly="True" type="string" name="tenantId"/>
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="string" name="clientId"/>
                          <prop readOnly="True" type="string" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="@SubResource_read" name="basePolicy"/>
                    <prop readOnly="True" type="array<@SubResource_read>" name="childPolicies">
                      <item type="@SubResource_read"/>
                    </prop>
                    <prop type="object" name="dnsSettings">
                      <prop type="boolean" name="enableProxy"/>
                      <prop nullable="True" type="boolean" name="requireProxyForNetworkRules"/>
                      <prop type="array<string>" name="servers">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="object" name="explicitProxy">
                      <prop nullable="True" type="boolean" name="enableExplicitProxy"/>
                      <prop nullable="True" type="boolean" name="enablePacFile"/>
                      <prop type="integer32" name="httpPort">
                        <format maximum="64000" minimum="0"/>
                      </prop>
                      <prop type="integer32" name="httpsPort">
                        <format maximum="64000" minimum="0"/>
                      </prop>
                      <prop type="string" name="pacFile"/>
                      <prop type="integer32" name="pacFilePort">
                        <format maximum="64000" minimum="0"/>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="array<@SubResource_read>" name="firewalls">
                      <item type="@SubResource_read"/>
                    </prop>
                    <prop type="object" name="insights">
                      <prop type="boolean" name="isEnabled"/>
                      <prop type="object" name="logAnalyticsResources">
                        <prop type="@SubResource_read" name="defaultWorkspaceId"/>
                        <prop type="array<object>" name="workspaces">
                          <item type="object">
                            <prop type="string" name="region"/>
                            <prop type="@SubResource_read" name="workspaceId"/>
                          </item>
                        </prop>
                      </prop>
                      <prop type="integer32" name="retentionDays"/>
                    </prop>
                    <prop type="object" name="intrusionDetection">
                      <prop type="object" name="configuration">
                        <prop type="array<object>" name="bypassTrafficSettings">
                          <item type="object">
                            <prop type="string" name="description"/>
                            <prop type="array<string>" name="destinationAddresses">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="destinationIpGroups">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="destinationPorts">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="name"/>
                            <prop type="string" name="protocol">
                              <enum>
                                <item value="&quot;ANY&quot;"/>
                                <item value="&quot;ICMP&quot;"/>
                                <item value="&quot;TCP&quot;"/>
                                <item value="&quot;UDP&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<string>" name="sourceAddresses">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="sourceIpGroups">
                              <item type="string"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="array<string>" name="privateRanges">
                          <item type="string"/>
                        </prop>
                        <prop type="array<object>" name="signatureOverrides">
                          <item type="object">
                            <prop type="string" name="id"/>
                            <prop type="string" name="mode">
                              <enum>
                                <item value="&quot;Alert&quot;"/>
                                <item value="&quot;Deny&quot;"/>
                                <item value="&quot;Off&quot;"/>
                              </enum>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop type="string" name="mode">
                        <enum>
                          <item value="&quot;Alert&quot;"/>
                          <item value="&quot;Deny&quot;"/>
                          <item value="&quot;Off&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="ruleCollectionGroups">
                      <item type="object" cls="SubResource_read">
                        <prop type="string" name="id"/>
                      </item>
                    </prop>
                    <prop type="object" name="sku">
                      <prop type="string" name="tier">
                        <enum>
                          <item value="&quot;Basic&quot;"/>
                          <item value="&quot;Premium&quot;"/>
                          <item value="&quot;Standard&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="snat">
                      <prop type="string" name="autoLearnPrivateRanges">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                      <prop type="array<string>" name="privateRanges">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="object" name="sql">
                      <prop type="boolean" name="allowSqlRedirect"/>
                    </prop>
                    <prop type="string" name="threatIntelMode">
                      <enum>
                        <item value="&quot;Alert&quot;"/>
                        <item value="&quot;Deny&quot;"/>
                        <item value="&quot;Off&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="threatIntelWhitelist">
                      <prop type="array<string>" name="fqdns">
                        <item type="string"/>
                      </prop>
                      <prop type="array<string>" name="ipAddresses">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="object" name="transportSecurity">
                      <prop type="object" name="certificateAuthority">
                        <prop type="string" name="keyVaultSecretId"/>
                        <prop type="string" name="name"/>
                      </prop>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2022-01-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/firewallpolicies/{}" version="2022-01-01" swagger="mgmt-plane/network/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9maXJld2FsbFBvbGljaWVzL3tmaXJld2FsbFBvbGljeU5hbWV9/V/MjAyMi0wMS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.firewallPolicyName" options="name n" required="True" group="" idPart="name">
          <help short="The name of the Firewall Policy."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="FirewallPolicies_Delete">
        <longRunning finalStateVia="location"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}">
          <request method="delete">
            <path>
              <param type="string" name="firewallPolicyName" arg="$Path.firewallPolicyName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-01-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="202"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2022-01-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/firewallpolicies/{}" version="2022-01-01" swagger="mgmt-plane/network/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9maXJld2FsbFBvbGljaWVzL3tmaXJld2FsbFBvbGljeU5hbWV9/V/MjAyMi0wMS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.firewallPolicyName" options="name n" required="True" group="" idPart="name">
          <help short="The name of the Firewall Policy."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="ResourceLocation" var="$parameters.location" options="location l" group="">
          <help short="Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=<location>`."/>
        </arg>
        <arg type="string" var="$parameters.properties.basePolicy.id" options="base-policy" group="">
          <help short="The name or ID of parent firewall policy from which rules are inherited."/>
        </arg>
        <arg type="string" var="$parameters.properties.sku.tier" options="sku" stage="Preview" group="">
          <help short="SKU of Firewall policy."/>
          <enum>
            <item name="Basic" value="&quot;Basic&quot;"/>
            <item name="Premium" value="&quot;Premium&quot;"/>
            <item name="Standard" value="&quot;Standard&quot;"/>
          </enum>
        </arg>
        <arg type="boolean" var="$parameters.properties.sql.allowSqlRedirect" options="sql" stage="Preview" group="">
          <help short="A flag to indicate if SQL Redirect traffic filtering is enabled."/>
        </arg>
        <arg type="string" var="$parameters.properties.threatIntelMode" options="threat-intel-mode" group="">
          <help short="The operation mode for Threat Intelligence."/>
          <enum>
            <item name="Alert" value="&quot;Alert&quot;"/>
            <item name="Deny" value="&quot;Deny&quot;"/>
            <item name="Off" value="&quot;Off&quot;"/>
          </enum>
        </arg>
        <arg type="object" var="$parameters.tags" options="tags" group="">
          <help short="Space-separated tags: key[=value] [key[=value] ...]. Use &quot;&quot; to clear existing tags."/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="DNS">
        <arg type="boolean" var="$parameters.properties.dnsSettings.enableProxy" options="enable-dns-proxy" group="DNS">
          <help short="Enable DNS Proxy."/>
        </arg>
        <arg type="array<string>" var="$parameters.properties.dnsSettings.servers" options="dns-servers" group="DNS">
          <help short="Space-separated list of DNS server IP addresses."/>
          <item type="string"/>
        </arg>
      </argGroup>
      <argGroup name="DnsSettings">
        <arg nullable="True" type="boolean" var="$parameters.properties.dnsSettings.requireProxyForNetworkRules" options="require-proxy-for-network-rules" hide="True" group="DnsSettings">
          <help short="FQDNs in Network Rules are supported when set to true."/>
        </arg>
      </argGroup>
      <argGroup name="Explicit Proxy">
        <arg type="object" var="$parameters.properties.explicitProxy" options="explicit-proxy" group="Explicit Proxy">
          <help short="Explicit Proxy Settings definition."/>
          <arg nullable="True" type="boolean" var="$parameters.properties.explicitProxy.enableExplicitProxy" options="enable-explicit-proxy">
            <help short="When set to true, explicit proxy mode is enabled."/>
          </arg>
          <arg nullable="True" type="boolean" var="$parameters.properties.explicitProxy.enablePacFile" options="enable-pac-file">
            <help short="When set to true, pac file port and url needs to be provided."/>
          </arg>
          <arg type="integer32" var="$parameters.properties.explicitProxy.httpPort" options="http-port">
            <help short="Port number for explicit proxy http protocol, cannot be greater than 64000."/>
            <format maximum="64000" minimum="0"/>
          </arg>
          <arg type="integer32" var="$parameters.properties.explicitProxy.httpsPort" options="https-port">
            <help short="Port number for explicit proxy https protocol, cannot be greater than 64000."/>
            <format maximum="64000" minimum="0"/>
          </arg>
          <arg type="string" var="$parameters.properties.explicitProxy.pacFile" options="pac-file">
            <help short="SAS URL for PAC file."/>
          </arg>
          <arg type="integer32" var="$parameters.properties.explicitProxy.pacFilePort" options="pac-file-port">
            <help short="Port number for firewall to serve PAC file."/>
            <format maximum="64000" minimum="0"/>
          </arg>
        </arg>
      </argGroup>
      <argGroup name="Identity Instance">
        <arg type="string" var="$parameters.identity.type" options="identity-type" group="Identity Instance">
          <help short="The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine."/>
          <enum>
            <item name="None" value="&quot;None&quot;"/>
            <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
            <item name="SystemAssigned, UserAssigned" value="&quot;SystemAssigned, UserAssigned&quot;"/>
            <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
          </enum>
        </arg>
        <arg type="object" var="$parameters.identity.userAssignedIdentities" options="user-assigned-identities" group="Identity Instance">
          <help short="The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'."/>
          <additionalProp>
            <item type="object">
              <blank value="{}"/>
            </item>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="IntrusionDetection">
        <arg type="object" var="$parameters.properties.intrusionDetection.configuration" options="configuration" hide="True" group="IntrusionDetection">
          <help short="Intrusion detection configuration properties."/>
          <arg type="array<object>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings" options="bypass-traffic-settings">
            <help short="List of rules for traffic to bypass."/>
            <item type="object">
              <arg type="string" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].description" options="description">
                <help short="Description of the bypass traffic rule."/>
              </arg>
              <arg type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationAddresses" options="destination-addresses">
                <help short="List of destination IP addresses or ranges for this rule."/>
                <item type="string"/>
              </arg>
              <arg type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationIpGroups" options="destination-ip-groups">
                <help short="List of destination IpGroups for this rule."/>
                <item type="string"/>
              </arg>
              <arg type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationPorts" options="destination-ports">
                <help short="List of destination ports or ranges."/>
                <item type="string"/>
              </arg>
              <arg type="string" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].name" options="name">
                <help short="Name of the bypass traffic rule."/>
              </arg>
              <arg type="string" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].protocol" options="protocol">
                <help short="The rule bypass protocol."/>
                <enum>
                  <item name="ANY" value="&quot;ANY&quot;"/>
                  <item name="ICMP" value="&quot;ICMP&quot;"/>
                  <item name="TCP" value="&quot;TCP&quot;"/>
                  <item name="UDP" value="&quot;UDP&quot;"/>
                </enum>
              </arg>
              <arg type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceAddresses" options="source-addresses">
                <help short="List of source IP addresses or ranges for this rule."/>
                <item type="string"/>
              </arg>
              <arg type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceIpGroups" options="source-ip-groups">
                <help short="List of source IpGroups for this rule."/>
                <item type="string"/>
              </arg>
            </item>
          </arg>
          <arg type="array<string>" var="$parameters.properties.intrusionDetection.configuration.privateRanges" options="private-ranges">
            <help short="IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918 are considered private IP addresses. To modify default ranges, specify your Private IP address ranges with this property"/>
            <item type="string"/>
          </arg>
          <arg type="array<object>" var="$parameters.properties.intrusionDetection.configuration.signatureOverrides" options="signature-overrides">
            <help short="List of specific signatures states."/>
            <item type="object">
              <arg type="string" var="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].id" options="id">
                <help short="Signature id."/>
              </arg>
              <arg type="string" var="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].mode" options="mode">
                <help short="The signature state."/>
                <enum>
                  <item name="Alert" value="&quot;Alert&quot;"/>
                  <item name="Deny" value="&quot;Deny&quot;"/>
                  <item name="Off" value="&quot;Off&quot;"/>
                </enum>
              </arg>
            </item>
          </arg>
        </arg>
      </argGroup>
      <argGroup name="Intrustion Detection">
        <arg type="string" var="$parameters.properties.intrusionDetection.mode" options="idps-mode" stage="Preview" group="Intrustion Detection">
          <help short="IDPS mode."/>
          <enum>
            <item name="Alert" value="&quot;Alert&quot;"/>
            <item name="Deny" value="&quot;Deny&quot;"/>
            <item name="Off" value="&quot;Off&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="ResourceId" var="$parameters.id" options="id" hide="True" group="Parameters">
          <help short="Resource ID."/>
          <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/firewallPolicies/{}"/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="object" var="$parameters.properties.insights" options="insights" hide="True" group="Properties">
          <help short="Insights on Firewall Policy."/>
          <arg type="boolean" var="$parameters.properties.insights.isEnabled" options="is-enabled">
            <help short="A flag to indicate if the insights are enabled on the policy."/>
          </arg>
          <arg type="object" var="$parameters.properties.insights.logAnalyticsResources" options="log-analytics-resources">
            <help short="Workspaces needed to configure the Firewall Policy Insights."/>
            <arg type="object" var="$parameters.properties.insights.logAnalyticsResources.defaultWorkspaceId" options="default-workspace-id" cls="SubResource_create">
              <help short="The default workspace Id for Firewall Policy Insights."/>
              <arg type="string" var="@SubResource_create.id" options="id">
                <help short="Resource ID."/>
              </arg>
            </arg>
            <arg type="array<object>" var="$parameters.properties.insights.logAnalyticsResources.workspaces" options="workspaces">
              <help short="List of workspaces for Firewall Policy Insights."/>
              <item type="object">
                <arg type="string" var="$parameters.properties.insights.logAnalyticsResources.workspaces[].region" options="region">
                  <help short="Region to configure the Workspace."/>
                </arg>
                <arg type="@SubResource_create" var="$parameters.properties.insights.logAnalyticsResources.workspaces[].workspaceId" options="workspace-id">
                  <help short="The workspace Id for Firewall Policy Insights."/>
                </arg>
              </item>
            </arg>
          </arg>
          <arg type="integer32" var="$parameters.properties.insights.retentionDays" options="retention-days">
            <help short="Number of days the insights should be enabled on the policy."/>
          </arg>
        </arg>
      </argGroup>
      <argGroup name="Snat">
        <arg type="string" var="$parameters.properties.snat.autoLearnPrivateRanges" options="auto-learn-private-ranges learn-ranges" group="Snat">
          <help short="The operation mode for automatically learning private ranges to not be SNAT"/>
          <enum>
            <item name="Disabled" value="&quot;Disabled&quot;"/>
            <item name="Enabled" value="&quot;Enabled&quot;"/>
          </enum>
        </arg>
        <arg type="array<string>" var="$parameters.properties.snat.privateRanges" options="private-ranges" group="Snat">
          <help short="List of private IP addresses/IP address ranges to not be SNAT."/>
          <item type="string"/>
        </arg>
      </argGroup>
      <argGroup name="TLS Inspection">
        <arg type="string" var="$parameters.properties.transportSecurity.certificateAuthority.keyVaultSecretId" options="key-vault-secret-id" stage="Preview" group="TLS Inspection">
          <help short="Secret Id of (base-64 encoded unencrypted pfx) Secret or Certificate object stored in KeyVault."/>
        </arg>
        <arg type="string" var="$parameters.properties.transportSecurity.certificateAuthority.name" options="cert-name" stage="Preview" group="TLS Inspection">
          <help short="Name of the CA certificate."/>
        </arg>
      </argGroup>
      <argGroup name="Threat Intel Allowlist">
        <arg type="array<string>" var="$parameters.properties.threatIntelWhitelist.fqdns" options="fqdns" group="Threat Intel Allowlist">
          <help short="Space-separated list of FQDNs."/>
          <item type="string"/>
        </arg>
        <arg type="array<string>" var="$parameters.properties.threatIntelWhitelist.ipAddresses" options="ip-addresses" group="Threat Intel Allowlist">
          <help short="Space-separated list of IPv4 addresses."/>
          <item type="string"/>
        </arg>
      </argGroup>
      <operation operationId="FirewallPolicies_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}">
          <request method="put">
            <path>
              <param type="string" name="firewallPolicyName" arg="$Path.firewallPolicyName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-01-01&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="ResourceId" name="id" arg="$parameters.id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/firewallPolicies/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity">
                    <prop type="string" name="type" arg="$parameters.identity.type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities" arg="$parameters.identity.userAssignedIdentities">
                      <additionalProp>
                        <item type="object"/>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" arg="$parameters.location"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="basePolicy">
                      <prop type="string" name="id" arg="$parameters.properties.basePolicy.id"/>
                    </prop>
                    <prop type="object" name="dnsSettings">
                      <prop type="boolean" name="enableProxy" arg="$parameters.properties.dnsSettings.enableProxy"/>
                      <prop nullable="True" type="boolean" name="requireProxyForNetworkRules" arg="$parameters.properties.dnsSettings.requireProxyForNetworkRules"/>
                      <prop type="array<string>" name="servers" arg="$parameters.properties.dnsSettings.servers">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="object" name="explicitProxy" arg="$parameters.properties.explicitProxy">
                      <prop nullable="True" type="boolean" name="enableExplicitProxy" arg="$parameters.properties.explicitProxy.enableExplicitProxy"/>
                      <prop nullable="True" type="boolean" name="enablePacFile" arg="$parameters.properties.explicitProxy.enablePacFile"/>
                      <prop type="integer32" name="httpPort" arg="$parameters.properties.explicitProxy.httpPort">
                        <format maximum="64000" minimum="0"/>
                      </prop>
                      <prop type="integer32" name="httpsPort" arg="$parameters.properties.explicitProxy.httpsPort">
                        <format maximum="64000" minimum="0"/>
                      </prop>
                      <prop type="string" name="pacFile" arg="$parameters.properties.explicitProxy.pacFile"/>
                      <prop type="integer32" name="pacFilePort" arg="$parameters.properties.explicitProxy.pacFilePort">
                        <format maximum="64000" minimum="0"/>
                      </prop>
                    </prop>
                    <prop type="object" name="insights" arg="$parameters.properties.insights">
                      <prop type="boolean" name="isEnabled" arg="$parameters.properties.insights.isEnabled"/>
                      <prop type="object" name="logAnalyticsResources" arg="$parameters.properties.insights.logAnalyticsResources">
                        <prop type="object" name="defaultWorkspaceId" arg="$parameters.properties.insights.logAnalyticsResources.defaultWorkspaceId" cls="SubResource_create">
                          <prop type="string" name="id" arg="@SubResource_create.id"/>
                        </prop>
                        <prop type="array<object>" name="workspaces" arg="$parameters.properties.insights.logAnalyticsResources.workspaces">
                          <item type="object">
                            <prop type="string" name="region" arg="$parameters.properties.insights.logAnalyticsResources.workspaces[].region"/>
                            <prop type="@SubResource_create" name="workspaceId" arg="$parameters.properties.insights.logAnalyticsResources.workspaces[].workspaceId"/>
                          </item>
                        </prop>
                      </prop>
                      <prop type="integer32" name="retentionDays" arg="$parameters.properties.insights.retentionDays"/>
                    </prop>
                    <prop type="object" name="intrusionDetection">
                      <prop type="object" name="configuration" arg="$parameters.properties.intrusionDetection.configuration">
                        <prop type="array<object>" name="bypassTrafficSettings" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings">
                          <item type="object">
                            <prop type="string" name="description" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].description"/>
                            <prop type="array<string>" name="destinationAddresses" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationAddresses">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="destinationIpGroups" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationIpGroups">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="destinationPorts" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationPorts">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="name" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].name"/>
                            <prop type="string" name="protocol" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].protocol">
                              <enum>
                                <item value="&quot;ANY&quot;"/>
                                <item value="&quot;ICMP&quot;"/>
                                <item value="&quot;TCP&quot;"/>
                                <item value="&quot;UDP&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<string>" name="sourceAddresses" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceAddresses">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="sourceIpGroups" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceIpGroups">
                              <item type="string"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="array<string>" name="privateRanges" arg="$parameters.properties.intrusionDetection.configuration.privateRanges">
                          <item type="string"/>
                        </prop>
                        <prop type="array<object>" name="signatureOverrides" arg="$parameters.properties.intrusionDetection.configuration.signatureOverrides">
                          <item type="object">
                            <prop type="string" name="id" arg="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].id"/>
                            <prop type="string" name="mode" arg="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].mode">
                              <enum>
                                <item value="&quot;Alert&quot;"/>
                                <item value="&quot;Deny&quot;"/>
                                <item value="&quot;Off&quot;"/>
                              </enum>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop type="string" name="mode" arg="$parameters.properties.intrusionDetection.mode">
                        <enum>
                          <item value="&quot;Alert&quot;"/>
                          <item value="&quot;Deny&quot;"/>
                          <item value="&quot;Off&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="sku">
                      <prop type="string" name="tier" arg="$parameters.properties.sku.tier">
                        <enum>
                          <item value="&quot;Basic&quot;"/>
                          <item value="&quot;Premium&quot;"/>
                          <item value="&quot;Standard&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="snat">
                      <prop type="string" name="autoLearnPrivateRanges" arg="$parameters.properties.snat.autoLearnPrivateRanges">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                      <prop type="array<string>" name="privateRanges" arg="$parameters.properties.snat.privateRanges">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="object" name="sql">
                      <prop type="boolean" name="allowSqlRedirect" arg="$parameters.properties.sql.allowSqlRedirect"/>
                    </prop>
                    <prop type="string" name="threatIntelMode" arg="$parameters.properties.threatIntelMode">
                      <enum>
                        <item value="&quot;Alert&quot;"/>
                        <item value="&quot;Deny&quot;"/>
                        <item value="&quot;Off&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="threatIntelWhitelist">
                      <prop type="array<string>" name="fqdns" arg="$parameters.properties.threatIntelWhitelist.fqdns">
                        <item type="string"/>
                      </prop>
                      <prop type="array<string>" name="ipAddresses" arg="$parameters.properties.threatIntelWhitelist.ipAddresses">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="object" name="transportSecurity">
                      <prop type="object" name="certificateAuthority">
                        <prop type="string" name="keyVaultSecretId" arg="$parameters.properties.transportSecurity.certificateAuthority.keyVaultSecretId"/>
                        <prop type="string" name="name" arg="$parameters.properties.transportSecurity.certificateAuthority.name"/>
                      </prop>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$parameters.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="string" name="etag"/>
                  <prop type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/firewallPolicies/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity">
                    <prop readOnly="True" type="string" name="principalId"/>
                    <prop readOnly="True" type="string" name="tenantId"/>
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="string" name="clientId"/>
                          <prop readOnly="True" type="string" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="@SubResource_read" name="basePolicy"/>
                    <prop readOnly="True" type="array<@SubResource_read>" name="childPolicies">
                      <item type="@SubResource_read"/>
                    </prop>
                    <prop type="object" name="dnsSettings">
                      <prop type="boolean" name="enableProxy"/>
                      <prop nullable="True" type="boolean" name="requireProxyForNetworkRules"/>
                      <prop type="array<string>" name="servers">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="object" name="explicitProxy">
                      <prop nullable="True" type="boolean" name="enableExplicitProxy"/>
                      <prop nullable="True" type="boolean" name="enablePacFile"/>
                      <prop type="integer32" name="httpPort">
                        <format maximum="64000" minimum="0"/>
                      </prop>
                      <prop type="integer32" name="httpsPort">
                        <format maximum="64000" minimum="0"/>
                      </prop>
                      <prop type="string" name="pacFile"/>
                      <prop type="integer32" name="pacFilePort">
                        <format maximum="64000" minimum="0"/>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="array<@SubResource_read>" name="firewalls">
                      <item type="@SubResource_read"/>
                    </prop>
                    <prop type="object" name="insights">
                      <prop type="boolean" name="isEnabled"/>
                      <prop type="object" name="logAnalyticsResources">
                        <prop type="@SubResource_read" name="defaultWorkspaceId"/>
                        <prop type="array<object>" name="workspaces">
                          <item type="object">
                            <prop type="string" name="region"/>
                            <prop type="@SubResource_read" name="workspaceId"/>
                          </item>
                        </prop>
                      </prop>
                      <prop type="integer32" name="retentionDays"/>
                    </prop>
                    <prop type="object" name="intrusionDetection">
                      <prop type="object" name="configuration">
                        <prop type="array<object>" name="bypassTrafficSettings">
                          <item type="object">
                            <prop type="string" name="description"/>
                            <prop type="array<string>" name="destinationAddresses">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="destinationIpGroups">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="destinationPorts">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="name"/>
                            <prop type="string" name="protocol">
                              <enum>
                                <item value="&quot;ANY&quot;"/>
                                <item value="&quot;ICMP&quot;"/>
                                <item value="&quot;TCP&quot;"/>
                                <item value="&quot;UDP&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<string>" name="sourceAddresses">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="sourceIpGroups">
                              <item type="string"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="array<string>" name="privateRanges">
                          <item type="string"/>
                        </prop>
                        <prop type="array<object>" name="signatureOverrides">
                          <item type="object">
                            <prop type="string" name="id"/>
                            <prop type="string" name="mode">
                              <enum>
                                <item value="&quot;Alert&quot;"/>
                                <item value="&quot;Deny&quot;"/>
                                <item value="&quot;Off&quot;"/>
                              </enum>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop type="string" name="mode">
                        <enum>
                          <item value="&quot;Alert&quot;"/>
                          <item value="&quot;Deny&quot;"/>
                          <item value="&quot;Off&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="ruleCollectionGroups">
                      <item type="object" cls="SubResource_read">
                        <prop type="string" name="id"/>
                      </item>
                    </prop>
                    <prop type="object" name="sku">
                      <prop type="string" name="tier">
                        <enum>
                          <item value="&quot;Basic&quot;"/>
                          <item value="&quot;Premium&quot;"/>
                          <item value="&quot;Standard&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="snat">
                      <prop type="string" name="autoLearnPrivateRanges">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                      <prop type="array<string>" name="privateRanges">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="object" name="sql">
                      <prop type="boolean" name="allowSqlRedirect"/>
                    </prop>
                    <prop type="string" name="threatIntelMode">
                      <enum>
                        <item value="&quot;Alert&quot;"/>
                        <item value="&quot;Deny&quot;"/>
                        <item value="&quot;Off&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="threatIntelWhitelist">
                      <prop type="array<string>" name="fqdns">
                        <item type="string"/>
                      </prop>
                      <prop type="array<string>" name="ipAddresses">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="object" name="transportSecurity">
                      <prop type="object" name="certificateAuthority">
                        <prop type="string" name="keyVaultSecretId"/>
                        <prop type="string" name="name"/>
                      </prop>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2022-01-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/firewallpolicies/{}" version="2022-01-01" swagger="mgmt-plane/network/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9maXJld2FsbFBvbGljaWVzL3tmaXJld2FsbFBvbGljeU5hbWV9/V/MjAyMi0wMS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.firewallPolicyName" options="name n" required="True" group="" idPart="name">
          <help short="The name of the Firewall Policy."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg nullable="True" type="ResourceLocation" var="$parameters.location" options="location l" hide="True" group="">
          <help short="Location. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=<location>`."/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.basePolicy.id" options="base-policy" hide="True" group="">
          <help short="The name or ID of parent firewall policy from which rules are inherited."/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.sku.tier" options="sku" group="">
          <help short="SKU of Firewall policy."/>
          <enum>
            <item name="Basic" value="&quot;Basic&quot;"/>
            <item name="Premium" value="&quot;Premium&quot;"/>
            <item name="Standard" value="&quot;Standard&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="boolean" var="$parameters.properties.sql.allowSqlRedirect" options="sql" stage="Preview" group="">
          <help short="A flag to indicate if SQL Redirect traffic filtering is enabled."/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.threatIntelMode" options="threat-intel-mode" group="">
          <help short="The operation mode for Threat Intelligence."/>
          <enum>
            <item name="Alert" value="&quot;Alert&quot;"/>
            <item name="Deny" value="&quot;Deny&quot;"/>
            <item name="Off" value="&quot;Off&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="object" var="$parameters.tags" options="tags" group="">
          <help short="Space-separated tags: key[=value] [key[=value] ...]. Use &quot;&quot; to clear existing tags."/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="DNS">
        <arg nullable="True" type="boolean" var="$parameters.properties.dnsSettings.enableProxy" options="enable-dns-proxy" group="DNS">
          <help short="Enable DNS Proxy."/>
        </arg>
        <arg nullable="True" type="array<string>" var="$parameters.properties.dnsSettings.servers" options="dns-servers" group="DNS">
          <help short="Space-separated list of DNS server IP addresses."/>
          <item nullable="True" type="string"/>
        </arg>
      </argGroup>
      <argGroup name="DnsSettings">
        <arg nullable="True" type="boolean" var="$parameters.properties.dnsSettings.requireProxyForNetworkRules" options="require-proxy-for-network-rules" hide="True" group="DnsSettings">
          <help short="FQDNs in Network Rules are supported when set to true."/>
        </arg>
      </argGroup>
      <argGroup name="Explicit Proxy">
        <arg nullable="True" type="object" var="$parameters.properties.explicitProxy" options="explicit-proxy" group="Explicit Proxy">
          <help short="Explicit Proxy Settings definition."/>
          <arg nullable="True" type="boolean" var="$parameters.properties.explicitProxy.enableExplicitProxy" options="enable-explicit-proxy">
            <help short="When set to true, explicit proxy mode is enabled."/>
          </arg>
          <arg nullable="True" type="boolean" var="$parameters.properties.explicitProxy.enablePacFile" options="enable-pac-file">
            <help short="When set to true, pac file port and url needs to be provided."/>
          </arg>
          <arg nullable="True" type="integer32" var="$parameters.properties.explicitProxy.httpPort" options="http-port">
            <help short="Port number for explicit proxy http protocol, cannot be greater than 64000."/>
            <format maximum="64000" minimum="0"/>
          </arg>
          <arg nullable="True" type="integer32" var="$parameters.properties.explicitProxy.httpsPort" options="https-port">
            <help short="Port number for explicit proxy https protocol, cannot be greater than 64000."/>
            <format maximum="64000" minimum="0"/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.explicitProxy.pacFile" options="pac-file">
            <help short="SAS URL for PAC file."/>
          </arg>
          <arg nullable="True" type="integer32" var="$parameters.properties.explicitProxy.pacFilePort" options="pac-file-port">
            <help short="Port number for firewall to serve PAC file."/>
            <format maximum="64000" minimum="0"/>
          </arg>
        </arg>
      </argGroup>
      <argGroup name="Identity Instance">
        <arg nullable="True" type="string" var="$parameters.identity.type" options="identity-type" group="Identity Instance">
          <help short="The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine."/>
          <enum>
            <item name="None" value="&quot;None&quot;"/>
            <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
            <item name="SystemAssigned, UserAssigned" value="&quot;SystemAssigned, UserAssigned&quot;"/>
            <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="object" var="$parameters.identity.userAssignedIdentities" options="user-assigned-identities" group="Identity Instance">
          <help short="The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'."/>
          <additionalProp>
            <item nullable="True" type="object">
              <blank value="{}"/>
            </item>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="IntrusionDetection">
        <arg nullable="True" type="object" var="$parameters.properties.intrusionDetection.configuration" options="configuration" group="IntrusionDetection">
          <help short="Intrusion detection configuration properties."/>
          <arg nullable="True" type="array<object>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings" options="bypass-traffic-settings">
            <help short="List of rules for traffic to bypass."/>
            <item nullable="True" type="object">
              <arg nullable="True" type="string" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].description" options="description">
                <help short="Description of the bypass traffic rule."/>
              </arg>
              <arg nullable="True" type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationAddresses" options="destination-addresses">
                <help short="List of destination IP addresses or ranges for this rule."/>
                <item nullable="True" type="string"/>
              </arg>
              <arg nullable="True" type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationIpGroups" options="destination-ip-groups">
                <help short="List of destination IpGroups for this rule."/>
                <item nullable="True" type="string"/>
              </arg>
              <arg nullable="True" type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationPorts" options="destination-ports">
                <help short="List of destination ports or ranges."/>
                <item nullable="True" type="string"/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].name" options="name">
                <help short="Name of the bypass traffic rule."/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].protocol" options="protocol">
                <help short="The rule bypass protocol."/>
                <enum>
                  <item name="ANY" value="&quot;ANY&quot;"/>
                  <item name="ICMP" value="&quot;ICMP&quot;"/>
                  <item name="TCP" value="&quot;TCP&quot;"/>
                  <item name="UDP" value="&quot;UDP&quot;"/>
                </enum>
              </arg>
              <arg nullable="True" type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceAddresses" options="source-addresses">
                <help short="List of source IP addresses or ranges for this rule."/>
                <item nullable="True" type="string"/>
              </arg>
              <arg nullable="True" type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceIpGroups" options="source-ip-groups">
                <help short="List of source IpGroups for this rule."/>
                <item nullable="True" type="string"/>
              </arg>
            </item>
          </arg>
          <arg nullable="True" type="array<string>" var="$parameters.properties.intrusionDetection.configuration.privateRanges" options="private-ranges">
            <help short="IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918 are considered private IP addresses. To modify default ranges, specify your Private IP address ranges with this property"/>
            <item nullable="True" type="string"/>
          </arg>
          <arg nullable="True" type="array<object>" var="$parameters.properties.intrusionDetection.configuration.signatureOverrides" options="signature-overrides">
            <help short="List of specific signatures states."/>
            <item nullable="True" type="object">
              <arg nullable="True" type="string" var="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].id" options="id">
                <help short="Signature id."/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].mode" options="mode">
                <help short="The signature state."/>
                <enum>
                  <item name="Alert" value="&quot;Alert&quot;"/>
                  <item name="Deny" value="&quot;Deny&quot;"/>
                  <item name="Off" value="&quot;Off&quot;"/>
                </enum>
              </arg>
            </item>
          </arg>
        </arg>
      </argGroup>
      <argGroup name="Intrustion Detection">
        <arg nullable="True" type="string" var="$parameters.properties.intrusionDetection.mode" options="idps-mode" stage="Preview" group="Intrustion Detection">
          <help short="IDPS mode."/>
          <enum>
            <item name="Alert" value="&quot;Alert&quot;"/>
            <item name="Deny" value="&quot;Deny&quot;"/>
            <item name="Off" value="&quot;Off&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <argGroup name="Parameters">
        <arg nullable="True" type="ResourceId" var="$parameters.id" options="id" hide="True" group="Parameters">
          <help short="Resource ID."/>
          <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/firewallPolicies/{}"/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="object" var="$parameters.properties.insights" options="insights" hide="True" group="Properties">
          <help short="Insights on Firewall Policy."/>
          <arg nullable="True" type="boolean" var="$parameters.properties.insights.isEnabled" options="is-enabled">
            <help short="A flag to indicate if the insights are enabled on the policy."/>
          </arg>
          <arg nullable="True" type="object" var="$parameters.properties.insights.logAnalyticsResources" options="log-analytics-resources">
            <help short="Workspaces needed to configure the Firewall Policy Insights."/>
            <arg nullable="True" type="object" var="$parameters.properties.insights.logAnalyticsResources.defaultWorkspaceId" options="default-workspace-id" cls="SubResource_update">
              <help short="The default workspace Id for Firewall Policy Insights."/>
              <arg nullable="True" type="string" var="@SubResource_update.id" options="id">
                <help short="Resource ID."/>
              </arg>
            </arg>
            <arg nullable="True" type="array<object>" var="$parameters.properties.insights.logAnalyticsResources.workspaces" options="workspaces">
              <help short="List of workspaces for Firewall Policy Insights."/>
              <item nullable="True" type="object">
                <arg nullable="True" type="string" var="$parameters.properties.insights.logAnalyticsResources.workspaces[].region" options="region">
                  <help short="Region to configure the Workspace."/>
                </arg>
                <arg nullable="True" type="@SubResource_update" var="$parameters.properties.insights.logAnalyticsResources.workspaces[].workspaceId" options="workspace-id">
                  <help short="The workspace Id for Firewall Policy Insights."/>
                </arg>
              </item>
            </arg>
          </arg>
          <arg nullable="True" type="integer32" var="$parameters.properties.insights.retentionDays" options="retention-days">
            <help short="Number of days the insights should be enabled on the policy."/>
          </arg>
        </arg>
      </argGroup>
      <argGroup name="Snat">
        <arg nullable="True" type="string" var="$parameters.properties.snat.autoLearnPrivateRanges" options="auto-learn-private-ranges learn-ranges" group="Snat">
          <help short="The operation mode for automatically learning private ranges to not be SNAT"/>
          <enum>
            <item name="Disabled" value="&quot;Disabled&quot;"/>
            <item name="Enabled" value="&quot;Enabled&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="array<string>" var="$parameters.properties.snat.privateRanges" options="private-ranges" group="Snat">
          <help short="List of private IP addresses/IP address ranges to not be SNAT."/>
          <item nullable="True" type="string"/>
        </arg>
      </argGroup>
      <argGroup name="TLS Inspection">
        <arg nullable="True" type="string" var="$parameters.properties.transportSecurity.certificateAuthority.keyVaultSecretId" options="key-vault-secret-id" stage="Preview" group="TLS Inspection">
          <help short="Secret Id of (base-64 encoded unencrypted pfx) Secret or Certificate object stored in KeyVault."/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.transportSecurity.certificateAuthority.name" options="cert-name" stage="Preview" group="TLS Inspection">
          <help short="Name of the CA certificate."/>
        </arg>
      </argGroup>
      <argGroup name="Threat Intel Allowlist">
        <arg nullable="True" type="array<string>" var="$parameters.properties.threatIntelWhitelist.fqdns" options="fqdns" group="Threat Intel Allowlist">
          <help short="Space-separated list of FQDNs."/>
          <item nullable="True" type="string"/>
        </arg>
        <arg nullable="True" type="array<string>" var="$parameters.properties.threatIntelWhitelist.ipAddresses" options="ip-addresses" group="Threat Intel Allowlist">
          <help short="Space-separated list of IPv4 addresses."/>
          <item nullable="True" type="string"/>
        </arg>
      </argGroup>
      <operation operationId="FirewallPolicies_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}">
          <request method="get">
            <path>
              <param type="string" name="firewallPolicyName" arg="$Path.firewallPolicyName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-01-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="FirewallPolicy_read">
                  <prop readOnly="True" type="string" name="etag"/>
                  <prop type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/firewallPolicies/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity">
                    <prop readOnly="True" type="string" name="principalId"/>
                    <prop readOnly="True" type="string" name="tenantId"/>
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="string" name="clientId"/>
                          <prop readOnly="True" type="string" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="@SubResource_read" name="basePolicy"/>
                    <prop readOnly="True" type="array<@SubResource_read>" name="childPolicies">
                      <item type="@SubResource_read"/>
                    </prop>
                    <prop type="object" name="dnsSettings">
                      <prop type="boolean" name="enableProxy"/>
                      <prop nullable="True" type="boolean" name="requireProxyForNetworkRules"/>
                      <prop type="array<string>" name="servers">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="object" name="explicitProxy">
                      <prop nullable="True" type="boolean" name="enableExplicitProxy"/>
                      <prop nullable="True" type="boolean" name="enablePacFile"/>
                      <prop type="integer32" name="httpPort">
                        <format maximum="64000" minimum="0"/>
                      </prop>
                      <prop type="integer32" name="httpsPort">
                        <format maximum="64000" minimum="0"/>
                      </prop>
                      <prop type="string" name="pacFile"/>
                      <prop type="integer32" name="pacFilePort">
                        <format maximum="64000" minimum="0"/>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="array<@SubResource_read>" name="firewalls">
                      <item type="@SubResource_read"/>
                    </prop>
                    <prop type="object" name="insights">
                      <prop type="boolean" name="isEnabled"/>
                      <prop type="object" name="logAnalyticsResources">
                        <prop type="@SubResource_read" name="defaultWorkspaceId"/>
                        <prop type="array<object>" name="workspaces">
                          <item type="object">
                            <prop type="string" name="region"/>
                            <prop type="@SubResource_read" name="workspaceId"/>
                          </item>
                        </prop>
                      </prop>
                      <prop type="integer32" name="retentionDays"/>
                    </prop>
                    <prop type="object" name="intrusionDetection">
                      <prop type="object" name="configuration">
                        <prop type="array<object>" name="bypassTrafficSettings">
                          <item type="object">
                            <prop type="string" name="description"/>
                            <prop type="array<string>" name="destinationAddresses">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="destinationIpGroups">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="destinationPorts">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="name"/>
                            <prop type="string" name="protocol">
                              <enum>
                                <item value="&quot;ANY&quot;"/>
                                <item value="&quot;ICMP&quot;"/>
                                <item value="&quot;TCP&quot;"/>
                                <item value="&quot;UDP&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<string>" name="sourceAddresses">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="sourceIpGroups">
                              <item type="string"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="array<string>" name="privateRanges">
                          <item type="string"/>
                        </prop>
                        <prop type="array<object>" name="signatureOverrides">
                          <item type="object">
                            <prop type="string" name="id"/>
                            <prop type="string" name="mode">
                              <enum>
                                <item value="&quot;Alert&quot;"/>
                                <item value="&quot;Deny&quot;"/>
                                <item value="&quot;Off&quot;"/>
                              </enum>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop type="string" name="mode">
                        <enum>
                          <item value="&quot;Alert&quot;"/>
                          <item value="&quot;Deny&quot;"/>
                          <item value="&quot;Off&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="ruleCollectionGroups">
                      <item type="object" cls="SubResource_read">
                        <prop type="string" name="id"/>
                      </item>
                    </prop>
                    <prop type="object" name="sku">
                      <prop type="string" name="tier">
                        <enum>
                          <item value="&quot;Basic&quot;"/>
                          <item value="&quot;Premium&quot;"/>
                          <item value="&quot;Standard&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="snat">
                      <prop type="string" name="autoLearnPrivateRanges">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                      <prop type="array<string>" name="privateRanges">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="object" name="sql">
                      <prop type="boolean" name="allowSqlRedirect"/>
                    </prop>
                    <prop type="string" name="threatIntelMode">
                      <enum>
                        <item value="&quot;Alert&quot;"/>
                        <item value="&quot;Deny&quot;"/>
                        <item value="&quot;Off&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="threatIntelWhitelist">
                      <prop type="array<string>" name="fqdns">
                        <item type="string"/>
                      </prop>
                      <prop type="array<string>" name="ipAddresses">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="object" name="transportSecurity">
                      <prop type="object" name="certificateAuthority">
                        <prop type="string" name="keyVaultSecretId"/>
                        <prop type="string" name="name"/>
                      </prop>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="parameters" required="True" clientFlatten="True">
              <prop type="ResourceId" name="id" arg="$parameters.id">
                <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/firewallPolicies/{}"/>
              </prop>
              <prop type="IdentityObject" name="identity">
                <prop type="string" name="type" arg="$parameters.identity.type">
                  <enum>
                    <item value="&quot;None&quot;"/>
                    <item value="&quot;SystemAssigned&quot;"/>
                    <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                    <item value="&quot;UserAssigned&quot;"/>
                  </enum>
                </prop>
                <prop type="object" name="userAssignedIdentities" arg="$parameters.identity.userAssignedIdentities">
                  <additionalProp>
                    <item type="object"/>
                  </additionalProp>
                </prop>
              </prop>
              <prop type="ResourceLocation" name="location" arg="$parameters.location"/>
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="object" name="basePolicy">
                  <prop type="string" name="id" arg="$parameters.properties.basePolicy.id"/>
                </prop>
                <prop type="object" name="dnsSettings">
                  <prop type="boolean" name="enableProxy" arg="$parameters.properties.dnsSettings.enableProxy"/>
                  <prop nullable="True" type="boolean" name="requireProxyForNetworkRules" arg="$parameters.properties.dnsSettings.requireProxyForNetworkRules"/>
                  <prop type="array<string>" name="servers" arg="$parameters.properties.dnsSettings.servers">
                    <item type="string"/>
                  </prop>
                </prop>
                <prop type="object" name="explicitProxy" arg="$parameters.properties.explicitProxy">
                  <prop nullable="True" type="boolean" name="enableExplicitProxy" arg="$parameters.properties.explicitProxy.enableExplicitProxy"/>
                  <prop nullable="True" type="boolean" name="enablePacFile" arg="$parameters.properties.explicitProxy.enablePacFile"/>
                  <prop type="integer32" name="httpPort" arg="$parameters.properties.explicitProxy.httpPort">
                    <format maximum="64000" minimum="0"/>
                  </prop>
                  <prop type="integer32" name="httpsPort" arg="$parameters.properties.explicitProxy.httpsPort">
                    <format maximum="64000" minimum="0"/>
                  </prop>
                  <prop type="string" name="pacFile" arg="$parameters.properties.explicitProxy.pacFile"/>
                  <prop type="integer32" name="pacFilePort" arg="$parameters.properties.explicitProxy.pacFilePort">
                    <format maximum="64000" minimum="0"/>
                  </prop>
                </prop>
                <prop type="object" name="insights" arg="$parameters.properties.insights">
                  <prop type="boolean" name="isEnabled" arg="$parameters.properties.insights.isEnabled"/>
                  <prop type="object" name="logAnalyticsResources" arg="$parameters.properties.insights.logAnalyticsResources">
                    <prop type="object" name="defaultWorkspaceId" arg="$parameters.properties.insights.logAnalyticsResources.defaultWorkspaceId" cls="SubResource_update">
                      <prop type="string" name="id" arg="@SubResource_update.id"/>
                    </prop>
                    <prop type="array<object>" name="workspaces" arg="$parameters.properties.insights.logAnalyticsResources.workspaces">
                      <item type="object">
                        <prop type="string" name="region" arg="$parameters.properties.insights.logAnalyticsResources.workspaces[].region"/>
                        <prop type="@SubResource_update" name="workspaceId" arg="$parameters.properties.insights.logAnalyticsResources.workspaces[].workspaceId"/>
                      </item>
                    </prop>
                  </prop>
                  <prop type="integer32" name="retentionDays" arg="$parameters.properties.insights.retentionDays"/>
                </prop>
                <prop type="object" name="intrusionDetection">
                  <prop type="object" name="configuration" arg="$parameters.properties.intrusionDetection.configuration">
                    <prop type="array<object>" name="bypassTrafficSettings" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings">
                      <item type="object">
                        <prop type="string" name="description" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].description"/>
                        <prop type="array<string>" name="destinationAddresses" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationAddresses">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="destinationIpGroups" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationIpGroups">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="destinationPorts" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationPorts">
                          <item type="string"/>
                        </prop>
                        <prop type="string" name="name" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].name"/>
                        <prop type="string" name="protocol" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].protocol">
                          <enum>
                            <item value="&quot;ANY&quot;"/>
                            <item value="&quot;ICMP&quot;"/>
                            <item value="&quot;TCP&quot;"/>
                            <item value="&quot;UDP&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<string>" name="sourceAddresses" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceAddresses">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="sourceIpGroups" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceIpGroups">
                          <item type="string"/>
                        </prop>
                      </item>
                    </prop>
                    <prop type="array<string>" name="privateRanges" arg="$parameters.properties.intrusionDetection.configuration.privateRanges">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="signatureOverrides" arg="$parameters.properties.intrusionDetection.configuration.signatureOverrides">
                      <item type="object">
                        <prop type="string" name="id" arg="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].id"/>
                        <prop type="string" name="mode" arg="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].mode">
                          <enum>
                            <item value="&quot;Alert&quot;"/>
                            <item value="&quot;Deny&quot;"/>
                            <item value="&quot;Off&quot;"/>
                          </enum>
                        </prop>
                      </item>
                    </prop>
                  </prop>
                  <prop type="string" name="mode" arg="$parameters.properties.intrusionDetection.mode">
                    <enum>
                      <item value="&quot;Alert&quot;"/>
                      <item value="&quot;Deny&quot;"/>
                      <item value="&quot;Off&quot;"/>
                    </enum>
                  </prop>
                </prop>
                <prop type="object" name="sku">
                  <prop type="string" name="tier" arg="$parameters.properties.sku.tier">
                    <enum>
                      <item value="&quot;Basic&quot;"/>
                      <item value="&quot;Premium&quot;"/>
                      <item value="&quot;Standard&quot;"/>
                    </enum>
                  </prop>
                </prop>
                <prop type="object" name="snat">
                  <prop type="string" name="autoLearnPrivateRanges" arg="$parameters.properties.snat.autoLearnPrivateRanges">
                    <enum>
                      <item value="&quot;Disabled&quot;"/>
                      <item value="&quot;Enabled&quot;"/>
                    </enum>
                  </prop>
                  <prop type="array<string>" name="privateRanges" arg="$parameters.properties.snat.privateRanges">
                    <item type="string"/>
                  </prop>
                </prop>
                <prop type="object" name="sql">
                  <prop type="boolean" name="allowSqlRedirect" arg="$parameters.properties.sql.allowSqlRedirect"/>
                </prop>
                <prop type="string" name="threatIntelMode" arg="$parameters.properties.threatIntelMode">
                  <enum>
                    <item value="&quot;Alert&quot;"/>
                    <item value="&quot;Deny&quot;"/>
                    <item value="&quot;Off&quot;"/>
                  </enum>
                </prop>
                <prop type="object" name="threatIntelWhitelist">
                  <prop type="array<string>" name="fqdns" arg="$parameters.properties.threatIntelWhitelist.fqdns">
                    <item type="string"/>
                  </prop>
                  <prop type="array<string>" name="ipAddresses" arg="$parameters.properties.threatIntelWhitelist.ipAddresses">
                    <item type="string"/>
                  </prop>
                </prop>
                <prop type="object" name="transportSecurity">
                  <prop type="object" name="certificateAuthority">
                    <prop type="string" name="keyVaultSecretId" arg="$parameters.properties.transportSecurity.certificateAuthority.keyVaultSecretId"/>
                    <prop type="string" name="name" arg="$parameters.properties.transportSecurity.certificateAuthority.name"/>
                  </prop>
                </prop>
              </prop>
              <prop type="object" name="tags" arg="$parameters.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="FirewallPolicies_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}">
          <request method="put">
            <path>
              <param type="string" name="firewallPolicyName" arg="$Path.firewallPolicyName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-01-01&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@FirewallPolicy_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <commandGroup name="intrusion-detection">
      <command name="create" version="2022-01-01" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/firewallpolicies/{}" version="2022-01-01" subresource="properties.intrusionDetection.configuration" swagger="mgmt-plane/network/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9maXJld2FsbFBvbGljaWVzL3tmaXJld2FsbFBvbGljeU5hbWV9/V/MjAyMi0wMS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.firewallPolicyName" options="name" required="True" group="" idPart="name">
            <help short="The name of the Firewall Policy."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <argGroup name="Parameters.properties.intrusionDetection.configuration">
          <arg type="array<object>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings" options="bypass-traffic-settings" group="Parameters.properties.intrusionDetection.configuration">
            <help short="List of rules for traffic to bypass."/>
            <item type="object">
              <arg type="string" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].description" options="description">
                <help short="Description of the bypass traffic rule."/>
              </arg>
              <arg type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationAddresses" options="destination-addresses">
                <help short="List of destination IP addresses or ranges for this rule."/>
                <item type="string"/>
              </arg>
              <arg type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationIpGroups" options="destination-ip-groups">
                <help short="List of destination IpGroups for this rule."/>
                <item type="string"/>
              </arg>
              <arg type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationPorts" options="destination-ports">
                <help short="List of destination ports or ranges."/>
                <item type="string"/>
              </arg>
              <arg type="string" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].name" options="name">
                <help short="Name of the bypass traffic rule."/>
              </arg>
              <arg type="string" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].protocol" options="protocol">
                <help short="The rule bypass protocol."/>
                <enum>
                  <item name="ANY" value="&quot;ANY&quot;"/>
                  <item name="ICMP" value="&quot;ICMP&quot;"/>
                  <item name="TCP" value="&quot;TCP&quot;"/>
                  <item name="UDP" value="&quot;UDP&quot;"/>
                </enum>
              </arg>
              <arg type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceAddresses" options="source-addresses">
                <help short="List of source IP addresses or ranges for this rule."/>
                <item type="string"/>
              </arg>
              <arg type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceIpGroups" options="source-ip-groups">
                <help short="List of source IpGroups for this rule."/>
                <item type="string"/>
              </arg>
            </item>
          </arg>
          <arg type="array<string>" var="$parameters.properties.intrusionDetection.configuration.privateRanges" options="private-ranges" group="Parameters.properties.intrusionDetection.configuration">
            <help short="IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918 are considered private IP addresses. To modify default ranges, specify your Private IP address ranges with this property"/>
            <item type="string"/>
          </arg>
          <arg type="array<object>" var="$parameters.properties.intrusionDetection.configuration.signatureOverrides" options="signature-overrides" group="Parameters.properties.intrusionDetection.configuration">
            <help short="List of specific signatures states."/>
            <item type="object">
              <arg type="string" var="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].id" options="id">
                <help short="Signature id."/>
              </arg>
              <arg type="string" var="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].mode" options="mode">
                <help short="The signature state."/>
                <enum>
                  <item name="Alert" value="&quot;Alert&quot;"/>
                  <item name="Deny" value="&quot;Deny&quot;"/>
                  <item name="Off" value="&quot;Off&quot;"/>
                </enum>
              </arg>
            </item>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="object" name="properties.intrusionDetection.configuration"/>
          </json>
        </subresourceSelector>
        <operation operationId="FirewallPolicies_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}">
            <request method="get">
              <path>
                <param type="string" name="firewallPolicyName" arg="$Path.firewallPolicyName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-01-01&quot;"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="FirewallPolicy_read">
                    <prop readOnly="True" type="string" name="etag"/>
                    <prop type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/firewallPolicies/{}"/>
                    </prop>
                    <prop type="IdentityObject" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                          <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="@SubResource_read" name="basePolicy"/>
                      <prop readOnly="True" type="array<@SubResource_read>" name="childPolicies">
                        <item type="@SubResource_read"/>
                      </prop>
                      <prop type="object" name="dnsSettings">
                        <prop type="boolean" name="enableProxy"/>
                        <prop nullable="True" type="boolean" name="requireProxyForNetworkRules"/>
                        <prop type="array<string>" name="servers">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="explicitProxy">
                        <prop nullable="True" type="boolean" name="enableExplicitProxy"/>
                        <prop nullable="True" type="boolean" name="enablePacFile"/>
                        <prop type="integer32" name="httpPort">
                          <format maximum="64000" minimum="0"/>
                        </prop>
                        <prop type="integer32" name="httpsPort">
                          <format maximum="64000" minimum="0"/>
                        </prop>
                        <prop type="string" name="pacFile"/>
                        <prop type="integer32" name="pacFilePort">
                          <format maximum="64000" minimum="0"/>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="array<@SubResource_read>" name="firewalls">
                        <item type="@SubResource_read"/>
                      </prop>
                      <prop type="object" name="insights">
                        <prop type="boolean" name="isEnabled"/>
                        <prop type="object" name="logAnalyticsResources">
                          <prop type="@SubResource_read" name="defaultWorkspaceId"/>
                          <prop type="array<object>" name="workspaces">
                            <item type="object">
                              <prop type="string" name="region"/>
                              <prop type="@SubResource_read" name="workspaceId"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="integer32" name="retentionDays"/>
                      </prop>
                      <prop type="object" name="intrusionDetection">
                        <prop type="object" name="configuration">
                          <prop type="array<object>" name="bypassTrafficSettings">
                            <item type="object">
                              <prop type="string" name="description"/>
                              <prop type="array<string>" name="destinationAddresses">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="destinationIpGroups">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="destinationPorts">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="name"/>
                              <prop type="string" name="protocol">
                                <enum>
                                  <item value="&quot;ANY&quot;"/>
                                  <item value="&quot;ICMP&quot;"/>
                                  <item value="&quot;TCP&quot;"/>
                                  <item value="&quot;UDP&quot;"/>
                                </enum>
                              </prop>
                              <prop type="array<string>" name="sourceAddresses">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="sourceIpGroups">
                                <item type="string"/>
                              </prop>
                            </item>
                          </prop>
                          <prop type="array<string>" name="privateRanges">
                            <item type="string"/>
                          </prop>
                          <prop type="array<object>" name="signatureOverrides">
                            <item type="object">
                              <prop type="string" name="id"/>
                              <prop type="string" name="mode">
                                <enum>
                                  <item value="&quot;Alert&quot;"/>
                                  <item value="&quot;Deny&quot;"/>
                                  <item value="&quot;Off&quot;"/>
                                </enum>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                        <prop type="string" name="mode">
                          <enum>
                            <item value="&quot;Alert&quot;"/>
                            <item value="&quot;Deny&quot;"/>
                            <item value="&quot;Off&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="array<object>" name="ruleCollectionGroups">
                        <item type="object" cls="SubResource_read">
                          <prop type="string" name="id"/>
                        </item>
                      </prop>
                      <prop type="object" name="sku">
                        <prop type="string" name="tier">
                          <enum>
                            <item value="&quot;Basic&quot;"/>
                            <item value="&quot;Premium&quot;"/>
                            <item value="&quot;Standard&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="object" name="snat">
                        <prop type="string" name="autoLearnPrivateRanges">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<string>" name="privateRanges">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="sql">
                        <prop type="boolean" name="allowSqlRedirect"/>
                      </prop>
                      <prop type="string" name="threatIntelMode">
                        <enum>
                          <item value="&quot;Alert&quot;"/>
                          <item value="&quot;Deny&quot;"/>
                          <item value="&quot;Off&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="threatIntelWhitelist">
                        <prop type="array<string>" name="fqdns">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="ipAddresses">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="transportSecurity">
                        <prop type="object" name="certificateAuthority">
                          <prop type="string" name="keyVaultSecretId"/>
                          <prop type="string" name="name"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@ODataV4Format"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceCreate ref="$Subresource">
            <json>
              <schema type="object" name="parameters.properties.intrusionDetection.configuration" required="True">
                <prop type="array<object>" name="bypassTrafficSettings" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings">
                  <item type="object">
                    <prop type="string" name="description" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].description"/>
                    <prop type="array<string>" name="destinationAddresses" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationAddresses">
                      <item type="string"/>
                    </prop>
                    <prop type="array<string>" name="destinationIpGroups" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationIpGroups">
                      <item type="string"/>
                    </prop>
                    <prop type="array<string>" name="destinationPorts" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationPorts">
                      <item type="string"/>
                    </prop>
                    <prop type="string" name="name" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].name"/>
                    <prop type="string" name="protocol" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].protocol">
                      <enum>
                        <item value="&quot;ANY&quot;"/>
                        <item value="&quot;ICMP&quot;"/>
                        <item value="&quot;TCP&quot;"/>
                        <item value="&quot;UDP&quot;"/>
                      </enum>
                    </prop>
                    <prop type="array<string>" name="sourceAddresses" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceAddresses">
                      <item type="string"/>
                    </prop>
                    <prop type="array<string>" name="sourceIpGroups" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceIpGroups">
                      <item type="string"/>
                    </prop>
                  </item>
                </prop>
                <prop type="array<string>" name="privateRanges" arg="$parameters.properties.intrusionDetection.configuration.privateRanges">
                  <item type="string"/>
                </prop>
                <prop type="array<object>" name="signatureOverrides" arg="$parameters.properties.intrusionDetection.configuration.signatureOverrides">
                  <item type="object">
                    <prop type="string" name="id" arg="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].id"/>
                    <prop type="string" name="mode" arg="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].mode">
                      <enum>
                        <item value="&quot;Alert&quot;"/>
                        <item value="&quot;Deny&quot;"/>
                        <item value="&quot;Off&quot;"/>
                      </enum>
                    </prop>
                  </item>
                </prop>
              </schema>
            </json>
          </instanceCreate>
        </operation>
        <operation operationId="FirewallPolicies_CreateOrUpdate">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}">
            <request method="put">
              <path>
                <param type="string" name="firewallPolicyName" arg="$Path.firewallPolicyName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-01-01&quot;"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@FirewallPolicy_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@ODataV4Format"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="update" version="2022-01-01" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/firewallpolicies/{}" version="2022-01-01" subresource="properties.intrusionDetection.configuration" swagger="mgmt-plane/network/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9maXJld2FsbFBvbGljaWVzL3tmaXJld2FsbFBvbGljeU5hbWV9/V/MjAyMi0wMS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.firewallPolicyName" options="name" required="True" group="" idPart="name">
            <help short="The name of the Firewall Policy."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <argGroup name="Parameters.properties.intrusionDetection.configuration">
          <arg nullable="True" type="array<object>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings" options="bypass-traffic-settings" group="Parameters.properties.intrusionDetection.configuration">
            <help short="List of rules for traffic to bypass."/>
            <item nullable="True" type="object">
              <arg nullable="True" type="string" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].description" options="description">
                <help short="Description of the bypass traffic rule."/>
              </arg>
              <arg nullable="True" type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationAddresses" options="destination-addresses">
                <help short="List of destination IP addresses or ranges for this rule."/>
                <item nullable="True" type="string"/>
              </arg>
              <arg nullable="True" type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationIpGroups" options="destination-ip-groups">
                <help short="List of destination IpGroups for this rule."/>
                <item nullable="True" type="string"/>
              </arg>
              <arg nullable="True" type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationPorts" options="destination-ports">
                <help short="List of destination ports or ranges."/>
                <item nullable="True" type="string"/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].name" options="name">
                <help short="Name of the bypass traffic rule."/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].protocol" options="protocol">
                <help short="The rule bypass protocol."/>
                <enum>
                  <item name="ANY" value="&quot;ANY&quot;"/>
                  <item name="ICMP" value="&quot;ICMP&quot;"/>
                  <item name="TCP" value="&quot;TCP&quot;"/>
                  <item name="UDP" value="&quot;UDP&quot;"/>
                </enum>
              </arg>
              <arg nullable="True" type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceAddresses" options="source-addresses">
                <help short="List of source IP addresses or ranges for this rule."/>
                <item nullable="True" type="string"/>
              </arg>
              <arg nullable="True" type="array<string>" var="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceIpGroups" options="source-ip-groups">
                <help short="List of source IpGroups for this rule."/>
                <item nullable="True" type="string"/>
              </arg>
            </item>
          </arg>
          <arg nullable="True" type="array<string>" var="$parameters.properties.intrusionDetection.configuration.privateRanges" options="private-ranges" group="Parameters.properties.intrusionDetection.configuration">
            <help short="IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918 are considered private IP addresses. To modify default ranges, specify your Private IP address ranges with this property"/>
            <item nullable="True" type="string"/>
          </arg>
          <arg nullable="True" type="array<object>" var="$parameters.properties.intrusionDetection.configuration.signatureOverrides" options="signature-overrides" group="Parameters.properties.intrusionDetection.configuration">
            <help short="List of specific signatures states."/>
            <item nullable="True" type="object">
              <arg nullable="True" type="string" var="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].id" options="id">
                <help short="Signature id."/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].mode" options="mode">
                <help short="The signature state."/>
                <enum>
                  <item name="Alert" value="&quot;Alert&quot;"/>
                  <item name="Deny" value="&quot;Deny&quot;"/>
                  <item name="Off" value="&quot;Off&quot;"/>
                </enum>
              </arg>
            </item>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="object" name="properties.intrusionDetection.configuration"/>
          </json>
        </subresourceSelector>
        <operation operationId="FirewallPolicies_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}">
            <request method="get">
              <path>
                <param type="string" name="firewallPolicyName" arg="$Path.firewallPolicyName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-01-01&quot;"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="FirewallPolicy_read">
                    <prop readOnly="True" type="string" name="etag"/>
                    <prop type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/firewallPolicies/{}"/>
                    </prop>
                    <prop type="IdentityObject" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                          <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="@SubResource_read" name="basePolicy"/>
                      <prop readOnly="True" type="array<@SubResource_read>" name="childPolicies">
                        <item type="@SubResource_read"/>
                      </prop>
                      <prop type="object" name="dnsSettings">
                        <prop type="boolean" name="enableProxy"/>
                        <prop nullable="True" type="boolean" name="requireProxyForNetworkRules"/>
                        <prop type="array<string>" name="servers">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="explicitProxy">
                        <prop nullable="True" type="boolean" name="enableExplicitProxy"/>
                        <prop nullable="True" type="boolean" name="enablePacFile"/>
                        <prop type="integer32" name="httpPort">
                          <format maximum="64000" minimum="0"/>
                        </prop>
                        <prop type="integer32" name="httpsPort">
                          <format maximum="64000" minimum="0"/>
                        </prop>
                        <prop type="string" name="pacFile"/>
                        <prop type="integer32" name="pacFilePort">
                          <format maximum="64000" minimum="0"/>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="array<@SubResource_read>" name="firewalls">
                        <item type="@SubResource_read"/>
                      </prop>
                      <prop type="object" name="insights">
                        <prop type="boolean" name="isEnabled"/>
                        <prop type="object" name="logAnalyticsResources">
                          <prop type="@SubResource_read" name="defaultWorkspaceId"/>
                          <prop type="array<object>" name="workspaces">
                            <item type="object">
                              <prop type="string" name="region"/>
                              <prop type="@SubResource_read" name="workspaceId"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="integer32" name="retentionDays"/>
                      </prop>
                      <prop type="object" name="intrusionDetection">
                        <prop type="object" name="configuration">
                          <prop type="array<object>" name="bypassTrafficSettings">
                            <item type="object">
                              <prop type="string" name="description"/>
                              <prop type="array<string>" name="destinationAddresses">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="destinationIpGroups">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="destinationPorts">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="name"/>
                              <prop type="string" name="protocol">
                                <enum>
                                  <item value="&quot;ANY&quot;"/>
                                  <item value="&quot;ICMP&quot;"/>
                                  <item value="&quot;TCP&quot;"/>
                                  <item value="&quot;UDP&quot;"/>
                                </enum>
                              </prop>
                              <prop type="array<string>" name="sourceAddresses">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="sourceIpGroups">
                                <item type="string"/>
                              </prop>
                            </item>
                          </prop>
                          <prop type="array<string>" name="privateRanges">
                            <item type="string"/>
                          </prop>
                          <prop type="array<object>" name="signatureOverrides">
                            <item type="object">
                              <prop type="string" name="id"/>
                              <prop type="string" name="mode">
                                <enum>
                                  <item value="&quot;Alert&quot;"/>
                                  <item value="&quot;Deny&quot;"/>
                                  <item value="&quot;Off&quot;"/>
                                </enum>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                        <prop type="string" name="mode">
                          <enum>
                            <item value="&quot;Alert&quot;"/>
                            <item value="&quot;Deny&quot;"/>
                            <item value="&quot;Off&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="array<object>" name="ruleCollectionGroups">
                        <item type="object" cls="SubResource_read">
                          <prop type="string" name="id"/>
                        </item>
                      </prop>
                      <prop type="object" name="sku">
                        <prop type="string" name="tier">
                          <enum>
                            <item value="&quot;Basic&quot;"/>
                            <item value="&quot;Premium&quot;"/>
                            <item value="&quot;Standard&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="object" name="snat">
                        <prop type="string" name="autoLearnPrivateRanges">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<string>" name="privateRanges">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="sql">
                        <prop type="boolean" name="allowSqlRedirect"/>
                      </prop>
                      <prop type="string" name="threatIntelMode">
                        <enum>
                          <item value="&quot;Alert&quot;"/>
                          <item value="&quot;Deny&quot;"/>
                          <item value="&quot;Off&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="threatIntelWhitelist">
                        <prop type="array<string>" name="fqdns">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="ipAddresses">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="transportSecurity">
                        <prop type="object" name="certificateAuthority">
                          <prop type="string" name="keyVaultSecretId"/>
                          <prop type="string" name="name"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@ODataV4Format"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceUpdate ref="$Subresource">
            <json>
              <schema type="object" name="parameters.properties.intrusionDetection.configuration" required="True">
                <prop type="array<object>" name="bypassTrafficSettings" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings">
                  <item type="object">
                    <prop type="string" name="description" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].description"/>
                    <prop type="array<string>" name="destinationAddresses" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationAddresses">
                      <item type="string"/>
                    </prop>
                    <prop type="array<string>" name="destinationIpGroups" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationIpGroups">
                      <item type="string"/>
                    </prop>
                    <prop type="array<string>" name="destinationPorts" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationPorts">
                      <item type="string"/>
                    </prop>
                    <prop type="string" name="name" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].name"/>
                    <prop type="string" name="protocol" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].protocol">
                      <enum>
                        <item value="&quot;ANY&quot;"/>
                        <item value="&quot;ICMP&quot;"/>
                        <item value="&quot;TCP&quot;"/>
                        <item value="&quot;UDP&quot;"/>
                      </enum>
                    </prop>
                    <prop type="array<string>" name="sourceAddresses" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceAddresses">
                      <item type="string"/>
                    </prop>
                    <prop type="array<string>" name="sourceIpGroups" arg="$parameters.properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceIpGroups">
                      <item type="string"/>
                    </prop>
                  </item>
                </prop>
                <prop type="array<string>" name="privateRanges" arg="$parameters.properties.intrusionDetection.configuration.privateRanges">
                  <item type="string"/>
                </prop>
                <prop type="array<object>" name="signatureOverrides" arg="$parameters.properties.intrusionDetection.configuration.signatureOverrides">
                  <item type="object">
                    <prop type="string" name="id" arg="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].id"/>
                    <prop type="string" name="mode" arg="$parameters.properties.intrusionDetection.configuration.signatureOverrides[].mode">
                      <enum>
                        <item value="&quot;Alert&quot;"/>
                        <item value="&quot;Deny&quot;"/>
                        <item value="&quot;Off&quot;"/>
                      </enum>
                    </prop>
                  </item>
                </prop>
              </schema>
            </json>
          </instanceUpdate>
        </operation>
        <operation operationId="FirewallPolicies_CreateOrUpdate">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}">
            <request method="put">
              <path>
                <param type="string" name="firewallPolicyName" arg="$Path.firewallPolicyName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-01-01&quot;"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@FirewallPolicy_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@ODataV4Format"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="delete" version="2022-01-01" confirmation="Are you sure you want to perform this operation?">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/firewallpolicies/{}" version="2022-01-01" subresource="properties.intrusionDetection.configuration" swagger="mgmt-plane/network/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9maXJld2FsbFBvbGljaWVzL3tmaXJld2FsbFBvbGljeU5hbWV9/V/MjAyMi0wMS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.firewallPolicyName" options="name" required="True" group="" idPart="name">
            <help short="The name of the Firewall Policy."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="object" name="properties.intrusionDetection.configuration"/>
          </json>
        </subresourceSelector>
        <operation operationId="FirewallPolicies_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}">
            <request method="get">
              <path>
                <param type="string" name="firewallPolicyName" arg="$Path.firewallPolicyName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-01-01&quot;"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="FirewallPolicy_read">
                    <prop readOnly="True" type="string" name="etag"/>
                    <prop type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/firewallPolicies/{}"/>
                    </prop>
                    <prop type="IdentityObject" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                          <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="@SubResource_read" name="basePolicy"/>
                      <prop readOnly="True" type="array<@SubResource_read>" name="childPolicies">
                        <item type="@SubResource_read"/>
                      </prop>
                      <prop type="object" name="dnsSettings">
                        <prop type="boolean" name="enableProxy"/>
                        <prop nullable="True" type="boolean" name="requireProxyForNetworkRules"/>
                        <prop type="array<string>" name="servers">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="explicitProxy">
                        <prop nullable="True" type="boolean" name="enableExplicitProxy"/>
                        <prop nullable="True" type="boolean" name="enablePacFile"/>
                        <prop type="integer32" name="httpPort">
                          <format maximum="64000" minimum="0"/>
                        </prop>
                        <prop type="integer32" name="httpsPort">
                          <format maximum="64000" minimum="0"/>
                        </prop>
                        <prop type="string" name="pacFile"/>
                        <prop type="integer32" name="pacFilePort">
                          <format maximum="64000" minimum="0"/>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="array<@SubResource_read>" name="firewalls">
                        <item type="@SubResource_read"/>
                      </prop>
                      <prop type="object" name="insights">
                        <prop type="boolean" name="isEnabled"/>
                        <prop type="object" name="logAnalyticsResources">
                          <prop type="@SubResource_read" name="defaultWorkspaceId"/>
                          <prop type="array<object>" name="workspaces">
                            <item type="object">
                              <prop type="string" name="region"/>
                              <prop type="@SubResource_read" name="workspaceId"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="integer32" name="retentionDays"/>
                      </prop>
                      <prop type="object" name="intrusionDetection">
                        <prop type="object" name="configuration">
                          <prop type="array<object>" name="bypassTrafficSettings">
                            <item type="object">
                              <prop type="string" name="description"/>
                              <prop type="array<string>" name="destinationAddresses">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="destinationIpGroups">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="destinationPorts">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="name"/>
                              <prop type="string" name="protocol">
                                <enum>
                                  <item value="&quot;ANY&quot;"/>
                                  <item value="&quot;ICMP&quot;"/>
                                  <item value="&quot;TCP&quot;"/>
                                  <item value="&quot;UDP&quot;"/>
                                </enum>
                              </prop>
                              <prop type="array<string>" name="sourceAddresses">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="sourceIpGroups">
                                <item type="string"/>
                              </prop>
                            </item>
                          </prop>
                          <prop type="array<string>" name="privateRanges">
                            <item type="string"/>
                          </prop>
                          <prop type="array<object>" name="signatureOverrides">
                            <item type="object">
                              <prop type="string" name="id"/>
                              <prop type="string" name="mode">
                                <enum>
                                  <item value="&quot;Alert&quot;"/>
                                  <item value="&quot;Deny&quot;"/>
                                  <item value="&quot;Off&quot;"/>
                                </enum>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                        <prop type="string" name="mode">
                          <enum>
                            <item value="&quot;Alert&quot;"/>
                            <item value="&quot;Deny&quot;"/>
                            <item value="&quot;Off&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="array<object>" name="ruleCollectionGroups">
                        <item type="object" cls="SubResource_read">
                          <prop type="string" name="id"/>
                        </item>
                      </prop>
                      <prop type="object" name="sku">
                        <prop type="string" name="tier">
                          <enum>
                            <item value="&quot;Basic&quot;"/>
                            <item value="&quot;Premium&quot;"/>
                            <item value="&quot;Standard&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="object" name="snat">
                        <prop type="string" name="autoLearnPrivateRanges">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<string>" name="privateRanges">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="sql">
                        <prop type="boolean" name="allowSqlRedirect"/>
                      </prop>
                      <prop type="string" name="threatIntelMode">
                        <enum>
                          <item value="&quot;Alert&quot;"/>
                          <item value="&quot;Deny&quot;"/>
                          <item value="&quot;Off&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="threatIntelWhitelist">
                        <prop type="array<string>" name="fqdns">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="ipAddresses">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="transportSecurity">
                        <prop type="object" name="certificateAuthority">
                          <prop type="string" name="keyVaultSecretId"/>
                          <prop type="string" name="name"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@ODataV4Format"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceDelete ref="$Subresource">
            <json/>
          </instanceDelete>
        </operation>
        <operation operationId="FirewallPolicies_CreateOrUpdate">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}">
            <request method="put">
              <path>
                <param type="string" name="firewallPolicyName" arg="$Path.firewallPolicyName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-01-01&quot;"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@FirewallPolicy_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@ODataV4Format"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
      </command>
      <command name="show" version="2022-01-01" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/firewallpolicies/{}" version="2022-01-01" subresource="properties.intrusionDetection.configuration" swagger="mgmt-plane/network/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9maXJld2FsbFBvbGljaWVzL3tmaXJld2FsbFBvbGljeU5hbWV9/V/MjAyMi0wMS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.firewallPolicyName" options="name" required="True" group="" idPart="name">
            <help short="The name of the Firewall Policy."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="object" name="properties.intrusionDetection.configuration"/>
          </json>
        </subresourceSelector>
        <operation operationId="FirewallPolicies_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}">
            <request method="get">
              <path>
                <param type="string" name="firewallPolicyName" arg="$Path.firewallPolicyName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-01-01&quot;"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="FirewallPolicy_read">
                    <prop readOnly="True" type="string" name="etag"/>
                    <prop type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/firewallPolicies/{}"/>
                    </prop>
                    <prop type="IdentityObject" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                          <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="@SubResource_read" name="basePolicy"/>
                      <prop readOnly="True" type="array<@SubResource_read>" name="childPolicies">
                        <item type="@SubResource_read"/>
                      </prop>
                      <prop type="object" name="dnsSettings">
                        <prop type="boolean" name="enableProxy"/>
                        <prop nullable="True" type="boolean" name="requireProxyForNetworkRules"/>
                        <prop type="array<string>" name="servers">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="explicitProxy">
                        <prop nullable="True" type="boolean" name="enableExplicitProxy"/>
                        <prop nullable="True" type="boolean" name="enablePacFile"/>
                        <prop type="integer32" name="httpPort">
                          <format maximum="64000" minimum="0"/>
                        </prop>
                        <prop type="integer32" name="httpsPort">
                          <format maximum="64000" minimum="0"/>
                        </prop>
                        <prop type="string" name="pacFile"/>
                        <prop type="integer32" name="pacFilePort">
                          <format maximum="64000" minimum="0"/>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="array<@SubResource_read>" name="firewalls">
                        <item type="@SubResource_read"/>
                      </prop>
                      <prop type="object" name="insights">
                        <prop type="boolean" name="isEnabled"/>
                        <prop type="object" name="logAnalyticsResources">
                          <prop type="@SubResource_read" name="defaultWorkspaceId"/>
                          <prop type="array<object>" name="workspaces">
                            <item type="object">
                              <prop type="string" name="region"/>
                              <prop type="@SubResource_read" name="workspaceId"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="integer32" name="retentionDays"/>
                      </prop>
                      <prop type="object" name="intrusionDetection">
                        <prop type="object" name="configuration">
                          <prop type="array<object>" name="bypassTrafficSettings">
                            <item type="object">
                              <prop type="string" name="description"/>
                              <prop type="array<string>" name="destinationAddresses">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="destinationIpGroups">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="destinationPorts">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="name"/>
                              <prop type="string" name="protocol">
                                <enum>
                                  <item value="&quot;ANY&quot;"/>
                                  <item value="&quot;ICMP&quot;"/>
                                  <item value="&quot;TCP&quot;"/>
                                  <item value="&quot;UDP&quot;"/>
                                </enum>
                              </prop>
                              <prop type="array<string>" name="sourceAddresses">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="sourceIpGroups">
                                <item type="string"/>
                              </prop>
                            </item>
                          </prop>
                          <prop type="array<string>" name="privateRanges">
                            <item type="string"/>
                          </prop>
                          <prop type="array<object>" name="signatureOverrides">
                            <item type="object">
                              <prop type="string" name="id"/>
                              <prop type="string" name="mode">
                                <enum>
                                  <item value="&quot;Alert&quot;"/>
                                  <item value="&quot;Deny&quot;"/>
                                  <item value="&quot;Off&quot;"/>
                                </enum>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                        <prop type="string" name="mode">
                          <enum>
                            <item value="&quot;Alert&quot;"/>
                            <item value="&quot;Deny&quot;"/>
                            <item value="&quot;Off&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="array<object>" name="ruleCollectionGroups">
                        <item type="object" cls="SubResource_read">
                          <prop type="string" name="id"/>
                        </item>
                      </prop>
                      <prop type="object" name="sku">
                        <prop type="string" name="tier">
                          <enum>
                            <item value="&quot;Basic&quot;"/>
                            <item value="&quot;Premium&quot;"/>
                            <item value="&quot;Standard&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="object" name="snat">
                        <prop type="string" name="autoLearnPrivateRanges">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<string>" name="privateRanges">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="sql">
                        <prop type="boolean" name="allowSqlRedirect"/>
                      </prop>
                      <prop type="string" name="threatIntelMode">
                        <enum>
                          <item value="&quot;Alert&quot;"/>
                          <item value="&quot;Deny&quot;"/>
                          <item value="&quot;Off&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="threatIntelWhitelist">
                        <prop type="array<string>" name="fqdns">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="ipAddresses">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="transportSecurity">
                        <prop type="object" name="certificateAuthority">
                          <prop type="string" name="keyVaultSecretId"/>
                          <prop type="string" name="name"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@ODataV4Format"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
    </commandGroup>
  </commandGroup>
</CodeGen>
