<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventhub/namespaces/{}/eventhubs/{}" version="2023-01-01-preview" swagger="mgmt-plane/eventhub/ResourceProviders/Microsoft.EventHub/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRIdWIvbmFtZXNwYWNlcy97bmFtZXNwYWNlTmFtZX0vZXZlbnRodWJzL3tldmVudEh1Yk5hbWV9/V/MjAyMy0wMS0wMS1wcmV2aWV3"/>
  <commandGroup name="eventhubs eventhub">
    <command name="show" version="2023-01-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventhub/namespaces/{}/eventhubs/{}" version="2023-01-01-preview" swagger="mgmt-plane/eventhub/ResourceProviders/Microsoft.EventHub/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRIdWIvbmFtZXNwYWNlcy97bmFtZXNwYWNlTmFtZX0vZXZlbnRodWJzL3tldmVudEh1Yk5hbWV9/V/MjAyMy0wMS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.eventHubName" options="event-hub-name name n" required="True" idPart="child_name_1">
          <help short="The Event Hub name"/>
          <format maxLength="256" minLength="1"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="The Namespace name"/>
          <format maxLength="50" minLength="6"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="EventHubs_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}">
          <request method="get">
            <path>
              <param type="string" name="eventHubName" arg="$Path.eventHubName" required="True">
                <format maxLength="256" minLength="1"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format maxLength="50" minLength="6"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-01-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EventHub/namespaces/{}/eventhubs/{}"/>
                  </prop>
                  <prop readOnly="True" type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="captureDescription">
                      <prop type="object" name="destination">
                        <prop type="object" name="identity">
                          <prop type="string" name="type">
                            <enum>
                              <item value="&quot;SystemAssigned&quot;"/>
                              <item value="&quot;UserAssigned&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="userAssignedIdentity"/>
                        </prop>
                        <prop type="string" name="name"/>
                        <prop type="object" name="properties" clientFlatten="True">
                          <prop type="string" name="archiveNameFormat"/>
                          <prop type="string" name="blobContainer"/>
                          <prop type="string" name="dataLakeAccountName"/>
                          <prop type="string" name="dataLakeFolderPath"/>
                          <prop type="uuid" name="dataLakeSubscriptionId"/>
                          <prop type="string" name="storageAccountResourceId"/>
                        </prop>
                      </prop>
                      <prop type="boolean" name="enabled"/>
                      <prop type="string" name="encoding">
                        <enum>
                          <item value="&quot;Avro&quot;"/>
                          <item value="&quot;AvroDeflate&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer32" name="intervalInSeconds"/>
                      <prop type="integer32" name="sizeLimitInBytes"/>
                      <prop type="boolean" name="skipEmptyArchives"/>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="createdAt"/>
                    <prop type="integer64" name="messageRetentionInDays">
                      <format minimum="1"/>
                    </prop>
                    <prop type="integer64" name="partitionCount">
                      <format minimum="1"/>
                    </prop>
                    <prop readOnly="True" type="array<string>" name="partitionIds">
                      <item type="string"/>
                    </prop>
                    <prop type="object" name="retentionDescription">
                      <prop type="string" name="cleanupPolicy">
                        <enum>
                          <item value="&quot;Compact&quot;"/>
                          <item value="&quot;Delete&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer64" name="retentionTimeInHours"/>
                      <prop type="integer32" name="tombstoneRetentionTimeInHours"/>
                    </prop>
                    <prop type="string" name="status">
                      <enum>
                        <item value="&quot;Active&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;ReceiveDisabled&quot;"/>
                        <item value="&quot;Renaming&quot;"/>
                        <item value="&quot;Restoring&quot;"/>
                        <item value="&quot;SendDisabled&quot;"/>
                        <item value="&quot;Unknown&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="updatedAt"/>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2023-01-01-preview" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventhub/namespaces/{}/eventhubs/{}" version="2023-01-01-preview" swagger="mgmt-plane/eventhub/ResourceProviders/Microsoft.EventHub/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRIdWIvbmFtZXNwYWNlcy97bmFtZXNwYWNlTmFtZX0vZXZlbnRodWJzL3tldmVudEh1Yk5hbWV9/V/MjAyMy0wMS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.eventHubName" options="event-hub-name name n" required="True" idPart="child_name_1">
          <help short="The Event Hub name"/>
          <format maxLength="256" minLength="1"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="The Namespace name"/>
          <format maxLength="50" minLength="6"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="EventHubs_Delete">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}">
          <request method="delete">
            <path>
              <param type="string" name="eventHubName" arg="$Path.eventHubName" required="True">
                <format maxLength="256" minLength="1"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format maxLength="50" minLength="6"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-01-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2023-01-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventhub/namespaces/{}/eventhubs/{}" version="2023-01-01-preview" swagger="mgmt-plane/eventhub/ResourceProviders/Microsoft.EventHub/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRIdWIvbmFtZXNwYWNlcy97bmFtZXNwYWNlTmFtZX0vZXZlbnRodWJzL3tldmVudEh1Yk5hbWV9/V/MjAyMy0wMS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.eventHubName" options="event-hub-name name n" required="True" idPart="child_name_1">
          <help short="The Event Hub name"/>
          <format maxLength="256" minLength="1"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="The Namespace name"/>
          <format maxLength="50" minLength="6"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="CaptureDescription">
        <arg type="string" var="$parameters.properties.captureDescription.destination.name" options="destination-name" group="CaptureDescription">
          <help short="Name for capture destination"/>
        </arg>
        <arg type="string" var="$parameters.properties.captureDescription.destination.properties.archiveNameFormat" options="archive-name-format" group="CaptureDescription">
          <help short="Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order"/>
        </arg>
        <arg type="string" var="$parameters.properties.captureDescription.destination.properties.blobContainer" options="blob-container" group="CaptureDescription">
          <help short="Blob container Name"/>
        </arg>
        <arg type="string" var="$parameters.properties.captureDescription.destination.properties.dataLakeAccountName" options="data-lake-account-name" hide="True" group="CaptureDescription">
          <help short="The Azure Data Lake Store name for the captured events"/>
        </arg>
        <arg type="string" var="$parameters.properties.captureDescription.destination.properties.dataLakeFolderPath" options="data-lake-folder-path" hide="True" group="CaptureDescription">
          <help short="The destination folder path for the captured events"/>
        </arg>
        <arg type="uuid" var="$parameters.properties.captureDescription.destination.properties.dataLakeSubscriptionId" options="data-lake-subscription-id" hide="True" group="CaptureDescription">
          <help short="Subscription Id of Azure Data Lake Store"/>
        </arg>
        <arg type="string" var="$parameters.properties.captureDescription.destination.properties.storageAccountResourceId" options="storage-account" group="CaptureDescription">
          <help short="Resource id of the storage account to be used to create the blobs"/>
        </arg>
        <arg type="boolean" var="$parameters.properties.captureDescription.enabled" options="enable-capture" group="CaptureDescription">
          <help short="A value that indicates whether capture description is enabled."/>
        </arg>
        <arg type="string" var="$parameters.properties.captureDescription.encoding" options="encoding" group="CaptureDescription">
          <help short="Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be deprecated in New API Version"/>
          <enum>
            <item name="Avro" value="&quot;Avro&quot;"/>
            <item name="AvroDeflate" value="&quot;AvroDeflate&quot;"/>
          </enum>
        </arg>
        <arg type="integer32" var="$parameters.properties.captureDescription.intervalInSeconds" options="capture-interval" group="CaptureDescription">
          <help short="The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds"/>
        </arg>
        <arg type="integer32" var="$parameters.properties.captureDescription.sizeLimitInBytes" options="capture-size-limit" group="CaptureDescription">
          <help short="The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes"/>
        </arg>
        <arg type="boolean" var="$parameters.properties.captureDescription.skipEmptyArchives" options="skip-empty-archives" group="CaptureDescription">
          <help short="A value that indicates whether to Skip Empty Archives"/>
        </arg>
      </argGroup>
      <argGroup name="Destination">
        <arg type="object" var="$parameters.properties.captureDescription.destination.identity" options="identity" group="Destination">
          <help short="A value that indicates whether capture description is enabled."/>
          <arg type="string" var="$parameters.properties.captureDescription.destination.identity.type" options="type">
            <help short="Type of Azure Active Directory Managed Identity."/>
            <enum>
              <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
              <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
            </enum>
          </arg>
          <arg type="string" var="$parameters.properties.captureDescription.destination.identity.userAssignedIdentity" options="user-assigned-identity">
            <help short="ARM ID of Managed User Identity. This property is required is the type is UserAssignedIdentity. If type is SystemAssigned, then the System Assigned Identity Associated with the namespace will be used."/>
          </arg>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="integer64" var="$parameters.properties.messageRetentionInDays" options="message-retention-in-days" group="Properties">
          <help short="Number of days to retain the events for this Event Hub, value should be 1 to 7 days"/>
          <format minimum="1"/>
        </arg>
        <arg type="integer64" var="$parameters.properties.partitionCount" options="partition-count" group="Properties">
          <help short="Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions."/>
          <format minimum="1"/>
        </arg>
        <arg type="string" var="$parameters.properties.status" options="status" group="Properties">
          <help short="Enumerates the possible values for the status of the Event Hub."/>
          <enum>
            <item name="Active" value="&quot;Active&quot;"/>
            <item name="Creating" value="&quot;Creating&quot;"/>
            <item name="Deleting" value="&quot;Deleting&quot;"/>
            <item name="Disabled" value="&quot;Disabled&quot;"/>
            <item name="ReceiveDisabled" value="&quot;ReceiveDisabled&quot;"/>
            <item name="Renaming" value="&quot;Renaming&quot;"/>
            <item name="Restoring" value="&quot;Restoring&quot;"/>
            <item name="SendDisabled" value="&quot;SendDisabled&quot;"/>
            <item name="Unknown" value="&quot;Unknown&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <argGroup name="RetentionDescription">
        <arg type="string" var="$parameters.properties.retentionDescription.cleanupPolicy" options="cleanup-policy" group="RetentionDescription">
          <help short="Enumerates the possible values for cleanup policy"/>
          <enum>
            <item name="Compact" value="&quot;Compact&quot;"/>
            <item name="Delete" value="&quot;Delete&quot;"/>
          </enum>
        </arg>
        <arg type="integer64" var="$parameters.properties.retentionDescription.retentionTimeInHours" options="retention-time-in-hours retention-time" group="RetentionDescription">
          <help short="Number of hours to retain the events for this Event Hub. This value is only used when cleanupPolicy is Delete. If cleanupPolicy is Compaction the returned value of this property is Long.MaxValue"/>
        </arg>
        <arg type="integer32" var="$parameters.properties.retentionDescription.tombstoneRetentionTimeInHours" options="tombstone-retention-time-in-hours t" group="RetentionDescription">
          <help short="Number of hours to retain the tombstone markers of a compacted Event Hub. This value is only used when cleanupPolicy is Compaction. Consumer must complete reading the tombstone marker within this specified amount of time if consumer begins from starting offset to ensure they get a valid snapshot for the specific key described by the tombstone marker within the compacted Event Hub"/>
        </arg>
      </argGroup>
      <operation operationId="EventHubs_CreateOrUpdate">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}">
          <request method="put">
            <path>
              <param type="string" name="eventHubName" arg="$Path.eventHubName" required="True">
                <format maxLength="256" minLength="1"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format maxLength="50" minLength="6"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-01-01-preview&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="captureDescription">
                      <prop type="object" name="destination">
                        <prop type="object" name="identity" arg="$parameters.properties.captureDescription.destination.identity">
                          <prop type="string" name="type" arg="$parameters.properties.captureDescription.destination.identity.type">
                            <enum>
                              <item value="&quot;SystemAssigned&quot;"/>
                              <item value="&quot;UserAssigned&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="userAssignedIdentity" arg="$parameters.properties.captureDescription.destination.identity.userAssignedIdentity"/>
                        </prop>
                        <prop type="string" name="name" arg="$parameters.properties.captureDescription.destination.name"/>
                        <prop type="object" name="properties" clientFlatten="True">
                          <prop type="string" name="archiveNameFormat" arg="$parameters.properties.captureDescription.destination.properties.archiveNameFormat"/>
                          <prop type="string" name="blobContainer" arg="$parameters.properties.captureDescription.destination.properties.blobContainer"/>
                          <prop type="string" name="dataLakeAccountName" arg="$parameters.properties.captureDescription.destination.properties.dataLakeAccountName"/>
                          <prop type="string" name="dataLakeFolderPath" arg="$parameters.properties.captureDescription.destination.properties.dataLakeFolderPath"/>
                          <prop type="uuid" name="dataLakeSubscriptionId" arg="$parameters.properties.captureDescription.destination.properties.dataLakeSubscriptionId"/>
                          <prop type="string" name="storageAccountResourceId" arg="$parameters.properties.captureDescription.destination.properties.storageAccountResourceId"/>
                        </prop>
                      </prop>
                      <prop type="boolean" name="enabled" arg="$parameters.properties.captureDescription.enabled"/>
                      <prop type="string" name="encoding" arg="$parameters.properties.captureDescription.encoding">
                        <enum>
                          <item value="&quot;Avro&quot;"/>
                          <item value="&quot;AvroDeflate&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer32" name="intervalInSeconds" arg="$parameters.properties.captureDescription.intervalInSeconds"/>
                      <prop type="integer32" name="sizeLimitInBytes" arg="$parameters.properties.captureDescription.sizeLimitInBytes"/>
                      <prop type="boolean" name="skipEmptyArchives" arg="$parameters.properties.captureDescription.skipEmptyArchives"/>
                    </prop>
                    <prop type="integer64" name="messageRetentionInDays" arg="$parameters.properties.messageRetentionInDays">
                      <format minimum="1"/>
                    </prop>
                    <prop type="integer64" name="partitionCount" arg="$parameters.properties.partitionCount">
                      <format minimum="1"/>
                    </prop>
                    <prop type="object" name="retentionDescription">
                      <prop type="string" name="cleanupPolicy" arg="$parameters.properties.retentionDescription.cleanupPolicy">
                        <enum>
                          <item value="&quot;Compact&quot;"/>
                          <item value="&quot;Delete&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer64" name="retentionTimeInHours" arg="$parameters.properties.retentionDescription.retentionTimeInHours"/>
                      <prop type="integer32" name="tombstoneRetentionTimeInHours" arg="$parameters.properties.retentionDescription.tombstoneRetentionTimeInHours"/>
                    </prop>
                    <prop type="string" name="status" arg="$parameters.properties.status">
                      <enum>
                        <item value="&quot;Active&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;ReceiveDisabled&quot;"/>
                        <item value="&quot;Renaming&quot;"/>
                        <item value="&quot;Restoring&quot;"/>
                        <item value="&quot;SendDisabled&quot;"/>
                        <item value="&quot;Unknown&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EventHub/namespaces/{}/eventhubs/{}"/>
                  </prop>
                  <prop readOnly="True" type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="captureDescription">
                      <prop type="object" name="destination">
                        <prop type="object" name="identity">
                          <prop type="string" name="type">
                            <enum>
                              <item value="&quot;SystemAssigned&quot;"/>
                              <item value="&quot;UserAssigned&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="userAssignedIdentity"/>
                        </prop>
                        <prop type="string" name="name"/>
                        <prop type="object" name="properties" clientFlatten="True">
                          <prop type="string" name="archiveNameFormat"/>
                          <prop type="string" name="blobContainer"/>
                          <prop type="string" name="dataLakeAccountName"/>
                          <prop type="string" name="dataLakeFolderPath"/>
                          <prop type="uuid" name="dataLakeSubscriptionId"/>
                          <prop type="string" name="storageAccountResourceId"/>
                        </prop>
                      </prop>
                      <prop type="boolean" name="enabled"/>
                      <prop type="string" name="encoding">
                        <enum>
                          <item value="&quot;Avro&quot;"/>
                          <item value="&quot;AvroDeflate&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer32" name="intervalInSeconds"/>
                      <prop type="integer32" name="sizeLimitInBytes"/>
                      <prop type="boolean" name="skipEmptyArchives"/>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="createdAt"/>
                    <prop type="integer64" name="messageRetentionInDays">
                      <format minimum="1"/>
                    </prop>
                    <prop type="integer64" name="partitionCount">
                      <format minimum="1"/>
                    </prop>
                    <prop readOnly="True" type="array<string>" name="partitionIds">
                      <item type="string"/>
                    </prop>
                    <prop type="object" name="retentionDescription">
                      <prop type="string" name="cleanupPolicy">
                        <enum>
                          <item value="&quot;Compact&quot;"/>
                          <item value="&quot;Delete&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer64" name="retentionTimeInHours"/>
                      <prop type="integer32" name="tombstoneRetentionTimeInHours"/>
                    </prop>
                    <prop type="string" name="status">
                      <enum>
                        <item value="&quot;Active&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;ReceiveDisabled&quot;"/>
                        <item value="&quot;Renaming&quot;"/>
                        <item value="&quot;Restoring&quot;"/>
                        <item value="&quot;SendDisabled&quot;"/>
                        <item value="&quot;Unknown&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="updatedAt"/>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2023-01-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventhub/namespaces/{}/eventhubs/{}" version="2023-01-01-preview" swagger="mgmt-plane/eventhub/ResourceProviders/Microsoft.EventHub/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRIdWIvbmFtZXNwYWNlcy97bmFtZXNwYWNlTmFtZX0vZXZlbnRodWJzL3tldmVudEh1Yk5hbWV9/V/MjAyMy0wMS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.eventHubName" options="event-hub-name name n" required="True" idPart="child_name_1">
          <help short="The Event Hub name"/>
          <format maxLength="256" minLength="1"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="The Namespace name"/>
          <format maxLength="50" minLength="6"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="CaptureDescription">
        <arg nullable="True" type="string" var="$parameters.properties.captureDescription.destination.name" options="destination-name" group="CaptureDescription">
          <help short="Name for capture destination"/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.captureDescription.destination.properties.archiveNameFormat" options="archive-name-format" group="CaptureDescription">
          <help short="Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order"/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.captureDescription.destination.properties.blobContainer" options="blob-container" group="CaptureDescription">
          <help short="Blob container Name"/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.captureDescription.destination.properties.dataLakeAccountName" options="data-lake-account-name" hide="True" group="CaptureDescription">
          <help short="The Azure Data Lake Store name for the captured events"/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.captureDescription.destination.properties.dataLakeFolderPath" options="data-lake-folder-path" hide="True" group="CaptureDescription">
          <help short="The destination folder path for the captured events"/>
        </arg>
        <arg nullable="True" type="uuid" var="$parameters.properties.captureDescription.destination.properties.dataLakeSubscriptionId" options="data-lake-subscription-id" hide="True" group="CaptureDescription">
          <help short="Subscription Id of Azure Data Lake Store"/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.captureDescription.destination.properties.storageAccountResourceId" options="storage-account" group="CaptureDescription">
          <help short="Resource id of the storage account to be used to create the blobs"/>
        </arg>
        <arg nullable="True" type="boolean" var="$parameters.properties.captureDescription.enabled" options="enable-capture" group="CaptureDescription">
          <help short="A value that indicates whether capture description is enabled."/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.captureDescription.encoding" options="encoding" group="CaptureDescription">
          <help short="Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be deprecated in New API Version"/>
          <enum>
            <item name="Avro" value="&quot;Avro&quot;"/>
            <item name="AvroDeflate" value="&quot;AvroDeflate&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="integer32" var="$parameters.properties.captureDescription.intervalInSeconds" options="capture-interval" group="CaptureDescription">
          <help short="The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds"/>
        </arg>
        <arg nullable="True" type="integer32" var="$parameters.properties.captureDescription.sizeLimitInBytes" options="capture-size-limit" group="CaptureDescription">
          <help short="The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes"/>
        </arg>
        <arg nullable="True" type="boolean" var="$parameters.properties.captureDescription.skipEmptyArchives" options="skip-empty-archives" group="CaptureDescription">
          <help short="A value that indicates whether to Skip Empty Archives"/>
        </arg>
      </argGroup>
      <argGroup name="Destination">
        <arg nullable="True" type="object" var="$parameters.properties.captureDescription.destination.identity" options="identity" group="Destination">
          <help short="A value that indicates whether capture description is enabled."/>
          <arg nullable="True" type="string" var="$parameters.properties.captureDescription.destination.identity.type" options="type">
            <help short="Type of Azure Active Directory Managed Identity."/>
            <enum>
              <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
              <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
            </enum>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.captureDescription.destination.identity.userAssignedIdentity" options="user-assigned-identity">
            <help short="ARM ID of Managed User Identity. This property is required is the type is UserAssignedIdentity. If type is SystemAssigned, then the System Assigned Identity Associated with the namespace will be used."/>
          </arg>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="integer64" var="$parameters.properties.messageRetentionInDays" options="message-retention-in-days" hide="True" group="Properties">
          <help short="Number of days to retain the events for this Event Hub, value should be 1 to 7 days"/>
          <format minimum="1"/>
        </arg>
        <arg nullable="True" type="integer64" var="$parameters.properties.partitionCount" options="partition-count" group="Properties">
          <help short="Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions."/>
          <format minimum="1"/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.status" options="status" group="Properties">
          <help short="Enumerates the possible values for the status of the Event Hub."/>
          <enum>
            <item name="Active" value="&quot;Active&quot;"/>
            <item name="Creating" value="&quot;Creating&quot;"/>
            <item name="Deleting" value="&quot;Deleting&quot;"/>
            <item name="Disabled" value="&quot;Disabled&quot;"/>
            <item name="ReceiveDisabled" value="&quot;ReceiveDisabled&quot;"/>
            <item name="Renaming" value="&quot;Renaming&quot;"/>
            <item name="Restoring" value="&quot;Restoring&quot;"/>
            <item name="SendDisabled" value="&quot;SendDisabled&quot;"/>
            <item name="Unknown" value="&quot;Unknown&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <argGroup name="RetentionDescription">
        <arg nullable="True" type="string" var="$parameters.properties.retentionDescription.cleanupPolicy" options="cleanup-policy" group="RetentionDescription">
          <help short="Enumerates the possible values for cleanup policy"/>
          <enum>
            <item name="Compact" value="&quot;Compact&quot;"/>
            <item name="Delete" value="&quot;Delete&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="integer64" var="$parameters.properties.retentionDescription.retentionTimeInHours" options="retention-time-in-hours retention-time" group="RetentionDescription">
          <help short="Number of hours to retain the events for this Event Hub. This value is only used when cleanupPolicy is Delete. If cleanupPolicy is Compaction the returned value of this property is Long.MaxValue"/>
        </arg>
        <arg nullable="True" type="integer32" var="$parameters.properties.retentionDescription.tombstoneRetentionTimeInHours" options="tombstone-retention-time-in-hours t" group="RetentionDescription">
          <help short="Number of hours to retain the tombstone markers of a compacted Event Hub. This value is only used when cleanupPolicy is Compaction. Consumer must complete reading the tombstone marker within this specified amount of time if consumer begins from starting offset to ensure they get a valid snapshot for the specific key described by the tombstone marker within the compacted Event Hub"/>
        </arg>
      </argGroup>
      <operation operationId="EventHubs_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}">
          <request method="get">
            <path>
              <param type="string" name="eventHubName" arg="$Path.eventHubName" required="True">
                <format maxLength="256" minLength="1"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format maxLength="50" minLength="6"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-01-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="Eventhub_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EventHub/namespaces/{}/eventhubs/{}"/>
                  </prop>
                  <prop readOnly="True" type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="captureDescription">
                      <prop type="object" name="destination">
                        <prop type="object" name="identity">
                          <prop type="string" name="type">
                            <enum>
                              <item value="&quot;SystemAssigned&quot;"/>
                              <item value="&quot;UserAssigned&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="userAssignedIdentity"/>
                        </prop>
                        <prop type="string" name="name"/>
                        <prop type="object" name="properties" clientFlatten="True">
                          <prop type="string" name="archiveNameFormat"/>
                          <prop type="string" name="blobContainer"/>
                          <prop type="string" name="dataLakeAccountName"/>
                          <prop type="string" name="dataLakeFolderPath"/>
                          <prop type="uuid" name="dataLakeSubscriptionId"/>
                          <prop type="string" name="storageAccountResourceId"/>
                        </prop>
                      </prop>
                      <prop type="boolean" name="enabled"/>
                      <prop type="string" name="encoding">
                        <enum>
                          <item value="&quot;Avro&quot;"/>
                          <item value="&quot;AvroDeflate&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer32" name="intervalInSeconds"/>
                      <prop type="integer32" name="sizeLimitInBytes"/>
                      <prop type="boolean" name="skipEmptyArchives"/>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="createdAt"/>
                    <prop type="integer64" name="messageRetentionInDays">
                      <format minimum="1"/>
                    </prop>
                    <prop type="integer64" name="partitionCount">
                      <format minimum="1"/>
                    </prop>
                    <prop readOnly="True" type="array<string>" name="partitionIds">
                      <item type="string"/>
                    </prop>
                    <prop type="object" name="retentionDescription">
                      <prop type="string" name="cleanupPolicy">
                        <enum>
                          <item value="&quot;Compact&quot;"/>
                          <item value="&quot;Delete&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer64" name="retentionTimeInHours"/>
                      <prop type="integer32" name="tombstoneRetentionTimeInHours"/>
                    </prop>
                    <prop type="string" name="status">
                      <enum>
                        <item value="&quot;Active&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;ReceiveDisabled&quot;"/>
                        <item value="&quot;Renaming&quot;"/>
                        <item value="&quot;Restoring&quot;"/>
                        <item value="&quot;SendDisabled&quot;"/>
                        <item value="&quot;Unknown&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="updatedAt"/>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="parameters" required="True" clientFlatten="True">
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="object" name="captureDescription">
                  <prop type="object" name="destination">
                    <prop type="object" name="identity" arg="$parameters.properties.captureDescription.destination.identity">
                      <prop type="string" name="type" arg="$parameters.properties.captureDescription.destination.identity.type">
                        <enum>
                          <item value="&quot;SystemAssigned&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="userAssignedIdentity" arg="$parameters.properties.captureDescription.destination.identity.userAssignedIdentity"/>
                    </prop>
                    <prop type="string" name="name" arg="$parameters.properties.captureDescription.destination.name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="string" name="archiveNameFormat" arg="$parameters.properties.captureDescription.destination.properties.archiveNameFormat"/>
                      <prop type="string" name="blobContainer" arg="$parameters.properties.captureDescription.destination.properties.blobContainer"/>
                      <prop type="string" name="dataLakeAccountName" arg="$parameters.properties.captureDescription.destination.properties.dataLakeAccountName"/>
                      <prop type="string" name="dataLakeFolderPath" arg="$parameters.properties.captureDescription.destination.properties.dataLakeFolderPath"/>
                      <prop type="uuid" name="dataLakeSubscriptionId" arg="$parameters.properties.captureDescription.destination.properties.dataLakeSubscriptionId"/>
                      <prop type="string" name="storageAccountResourceId" arg="$parameters.properties.captureDescription.destination.properties.storageAccountResourceId"/>
                    </prop>
                  </prop>
                  <prop type="boolean" name="enabled" arg="$parameters.properties.captureDescription.enabled"/>
                  <prop type="string" name="encoding" arg="$parameters.properties.captureDescription.encoding">
                    <enum>
                      <item value="&quot;Avro&quot;"/>
                      <item value="&quot;AvroDeflate&quot;"/>
                    </enum>
                  </prop>
                  <prop type="integer32" name="intervalInSeconds" arg="$parameters.properties.captureDescription.intervalInSeconds"/>
                  <prop type="integer32" name="sizeLimitInBytes" arg="$parameters.properties.captureDescription.sizeLimitInBytes"/>
                  <prop type="boolean" name="skipEmptyArchives" arg="$parameters.properties.captureDescription.skipEmptyArchives"/>
                </prop>
                <prop type="integer64" name="messageRetentionInDays" arg="$parameters.properties.messageRetentionInDays">
                  <format minimum="1"/>
                </prop>
                <prop type="integer64" name="partitionCount" arg="$parameters.properties.partitionCount">
                  <format minimum="1"/>
                </prop>
                <prop type="object" name="retentionDescription">
                  <prop type="string" name="cleanupPolicy" arg="$parameters.properties.retentionDescription.cleanupPolicy">
                    <enum>
                      <item value="&quot;Compact&quot;"/>
                      <item value="&quot;Delete&quot;"/>
                    </enum>
                  </prop>
                  <prop type="integer64" name="retentionTimeInHours" arg="$parameters.properties.retentionDescription.retentionTimeInHours"/>
                  <prop type="integer32" name="tombstoneRetentionTimeInHours" arg="$parameters.properties.retentionDescription.tombstoneRetentionTimeInHours"/>
                </prop>
                <prop type="string" name="status" arg="$parameters.properties.status">
                  <enum>
                    <item value="&quot;Active&quot;"/>
                    <item value="&quot;Creating&quot;"/>
                    <item value="&quot;Deleting&quot;"/>
                    <item value="&quot;Disabled&quot;"/>
                    <item value="&quot;ReceiveDisabled&quot;"/>
                    <item value="&quot;Renaming&quot;"/>
                    <item value="&quot;Restoring&quot;"/>
                    <item value="&quot;SendDisabled&quot;"/>
                    <item value="&quot;Unknown&quot;"/>
                  </enum>
                </prop>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="EventHubs_CreateOrUpdate">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}">
          <request method="put">
            <path>
              <param type="string" name="eventHubName" arg="$Path.eventHubName" required="True">
                <format maxLength="256" minLength="1"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format maxLength="50" minLength="6"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-01-01-preview&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="@Eventhub_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
