<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.avs/privateclouds/{}" version="2022-05-01" swagger="mgmt-plane/vmware/ResourceProviders/Microsoft.AVS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQVZTL3ByaXZhdGVDbG91ZHMve3ByaXZhdGVDbG91ZE5hbWV9/V/MjAyMi0wNS0wMQ=="/>
  <commandGroup name="vmware private-cloud">
    <command name="show" version="2022-05-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.avs/privateclouds/{}" version="2022-05-01" swagger="mgmt-plane/vmware/ResourceProviders/Microsoft.AVS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQVZTL3ByaXZhdGVDbG91ZHMve3ByaXZhdGVDbG91ZE5hbWV9/V/MjAyMi0wNS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.privateCloudName" options="private-cloud-name name n" required="True" idPart="name">
          <help short="Name of the private cloud"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="PrivateClouds_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}">
          <request method="get">
            <path>
              <param type="string" name="privateCloudName" arg="$Path.privateCloudName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-05-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}"/>
                  </prop>
                  <prop type="object" name="identity">
                    <prop readOnly="True" type="string" name="principalId"/>
                    <prop readOnly="True" type="string" name="tenantId"/>
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="object" name="availability">
                      <prop type="integer32" name="secondaryZone"/>
                      <prop type="string" name="strategy">
                        <enum>
                          <item value="&quot;DualZone&quot;"/>
                          <item value="&quot;SingleZone&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer32" name="zone"/>
                    </prop>
                    <prop type="object" name="circuit" cls="Circuit_read">
                      <prop readOnly="True" type="string" name="expressRouteID"/>
                      <prop readOnly="True" type="string" name="expressRoutePrivatePeeringID"/>
                      <prop readOnly="True" type="string" name="primarySubnet"/>
                      <prop readOnly="True" type="string" name="secondarySubnet"/>
                    </prop>
                    <prop type="object" name="encryption">
                      <prop type="object" name="keyVaultProperties">
                        <prop readOnly="True" type="string" name="autoDetectedKeyVersion"/>
                        <prop type="string" name="keyName"/>
                        <prop readOnly="True" type="string" name="keyState">
                          <enum>
                            <item value="&quot;AccessDenied&quot;"/>
                            <item value="&quot;Connected&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="keyVaultUrl"/>
                        <prop type="string" name="keyVersion"/>
                        <prop readOnly="True" type="string" name="versionType">
                          <enum>
                            <item value="&quot;AutoDetected&quot;"/>
                            <item value="&quot;Fixed&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="string" name="status">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="endpoints">
                      <prop readOnly="True" type="string" name="hcxCloudManager"/>
                      <prop readOnly="True" type="string" name="nsxtManager"/>
                      <prop readOnly="True" type="string" name="vcsa"/>
                    </prop>
                    <prop readOnly="True" type="array<string>" name="externalCloudLinks">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="identitySources" identifiers="name">
                      <item type="object">
                        <prop type="string" name="alias" required="True"/>
                        <prop type="string" name="baseGroupDN" required="True"/>
                        <prop type="string" name="baseUserDN" required="True"/>
                        <prop type="string" name="domain" required="True"/>
                        <prop type="string" name="name" required="True"/>
                        <prop type="string" name="password" required="True" secret="True"/>
                        <prop type="string" name="primaryServer" required="True"/>
                        <prop type="string" name="secondaryServer"/>
                        <prop type="string" name="ssl">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="username" required="True" secret="True"/>
                      </item>
                    </prop>
                    <prop type="string" name="internet">
                      <default value="&quot;Disabled&quot;"/>
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="managementCluster" required="True">
                      <prop readOnly="True" type="integer32" name="clusterId"/>
                      <prop type="integer32" name="clusterSize" required="True"/>
                      <prop type="array<string>" name="hosts">
                        <item type="string"/>
                      </prop>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Cancelled&quot;"/>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="managementNetwork"/>
                    <prop type="string" name="networkBlock" required="True"/>
                    <prop readOnly="True" type="string" name="nsxPublicIpQuotaRaised">
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="nsxtCertificateThumbprint"/>
                    <prop type="password" name="nsxtPassword" secret="True"/>
                    <prop readOnly="True" type="string" name="provisioningNetwork"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Building&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Cancelled&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Pending&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="@Circuit_read" name="secondaryCircuit"/>
                    <prop readOnly="True" type="string" name="vcenterCertificateThumbprint"/>
                    <prop type="password" name="vcenterPassword" secret="True"/>
                    <prop readOnly="True" type="string" name="vmotionNetwork"/>
                  </prop>
                  <prop type="object" name="sku" required="True">
                    <prop type="string" name="name" required="True"/>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2022-05-01" confirmation="This will delete the private cloud. Are you sure?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.avs/privateclouds/{}" version="2022-05-01" swagger="mgmt-plane/vmware/ResourceProviders/Microsoft.AVS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQVZTL3ByaXZhdGVDbG91ZHMve3ByaXZhdGVDbG91ZE5hbWV9/V/MjAyMi0wNS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.privateCloudName" options="private-cloud-name name n" required="True" idPart="name">
          <help short="Name of the private cloud"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="PrivateClouds_Delete">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}">
          <request method="delete">
            <path>
              <param type="string" name="privateCloudName" arg="$Path.privateCloudName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-05-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="202"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2022-05-01" confirmation="LEGAL TERMS&#10;&#10;Azure VMware Solution (&quot;AVS&quot;) is an Azure Service licensed to you as part of your Azure subscription and subject to the terms and conditions of the agreement under which you obtained your Azure subscription (https://azure.microsoft.com/support/legal/). The following additional terms also apply to your use of AVS:&#10;&#10;DATA RETENTION. AVS does not currently support retention or extraction of data stored in AVS Clusters. Once an AVS Cluster is deleted, the data cannot be recovered as it terminates all running workloads, components, and destroys all Cluster data and configuration settings, including public IP addresses.&#10;&#10;PROFESSIONAL SERVICES DATA TRANSFER TO VMWARE. In the event that you contact Microsoft for technical support relating to Azure VMware Solution and Microsoft must engage VMware for assistance with the issue, Microsoft will transfer the Professional Services Data and the Personal Data contained in the support case to VMware. The transfer is made subject to the terms of the Support Transfer Agreement between VMware and Microsoft, which establishes Microsoft and VMware as independent processors of the Professional Services Data. Before any transfer of Professional Services Data to VMware will occur, Microsoft will obtain and record consent from you for the transfer.&#10;&#10;VMWARE DATA PROCESSING AGREEMENT. Once Professional Services Data is transferred to VMware (pursuant to the above section), the processing of Professional Services Data, including the Personal Data contained the support case, by VMware as an independent processor will be governed by the VMware Data Processing Agreement for Microsoft AVS Customers Transferred for L3 Support (the &quot;VMware Data Processing Agreement&quot;) between you and VMware (located at https://www.vmware.com/content/dam/digitalmarketing/vmware/en/pdf/privacy/vmware-data-processing-agreement.pdf). You also give authorization to allow your representative(s) who request technical support for Azure VMware Solution to provide consent on your behalf to Microsoft for the transfer of the Professional Services Data to VMware.&#10;&#10;ACCEPTANCE OF LEGAL TERMS. By continuing, you agree to the above additional Legal Terms for AVS. If you are an individual accepting these terms on behalf of an entity, you also represent that you have the legal authority to enter into these additional terms on that entity's behalf.&#10;&#10;Do you agree to the above additional terms for AVS?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.avs/privateclouds/{}" version="2022-05-01" swagger="mgmt-plane/vmware/ResourceProviders/Microsoft.AVS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQVZTL3ByaXZhdGVDbG91ZHMve3ByaXZhdGVDbG91ZE5hbWV9/V/MjAyMi0wNS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.privateCloudName" options="private-cloud-name name n" required="True" idPart="name">
          <help short="Name of the private cloud"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Availability">
        <arg type="integer32" var="$privateCloud.properties.availability.secondaryZone" options="secondary-zone" group="Availability">
          <help short="The secondary availability zone for the private cloud"/>
        </arg>
        <arg type="string" var="$privateCloud.properties.availability.strategy" options="strategy" group="Availability">
          <help short="The availability strategy for the private cloud"/>
          <enum>
            <item name="DualZone" value="&quot;DualZone&quot;"/>
            <item name="SingleZone" value="&quot;SingleZone&quot;"/>
          </enum>
        </arg>
        <arg type="integer32" var="$privateCloud.properties.availability.zone" options="zone" group="Availability">
          <help short="The primary availability zone for the private cloud"/>
        </arg>
      </argGroup>
      <argGroup name="ManagementCluster">
        <arg type="integer32" var="$privateCloud.properties.managementCluster.clusterSize" options="cluster-size" required="True" group="ManagementCluster">
          <help short="Number of hosts for the default management cluster. Minimum of 3 and maximum of 16."/>
        </arg>
        <arg type="array<string>" var="$privateCloud.properties.managementCluster.hosts" options="hosts" hide="True" group="ManagementCluster">
          <help short="The hosts"/>
          <item type="string"/>
        </arg>
      </argGroup>
      <argGroup name="PrivateCloud">
        <arg type="object" var="$privateCloud.identity" options="identity" group="PrivateCloud">
          <help short="The identity of the private cloud, if configured."/>
          <arg type="string" var="$privateCloud.identity.type" options="type">
            <help short="The type of identity used for the private cloud. The type 'SystemAssigned' refers to an implicitly created identity. The type 'None' will remove any identities from the Private Cloud."/>
            <enum>
              <item name="None" value="&quot;None&quot;"/>
              <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg type="ResourceLocation" var="$privateCloud.location" options="location l" required="True" group="PrivateCloud">
          <help short="Resource location"/>
        </arg>
        <arg type="object" var="$privateCloud.tags" options="tags" group="PrivateCloud">
          <help short="Resource tags"/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="object" var="$privateCloud.properties.encryption" options="encryption" hide="True" group="Properties">
          <help short="Customer managed key encryption, can be enabled or disabled"/>
          <arg type="object" var="$privateCloud.properties.encryption.keyVaultProperties" options="key-vault-properties">
            <help short="The key vault where the encryption key is stored"/>
            <arg type="string" var="$privateCloud.properties.encryption.keyVaultProperties.keyName" options="key-name">
              <help short="The name of the key."/>
            </arg>
            <arg type="string" var="$privateCloud.properties.encryption.keyVaultProperties.keyVaultUrl" options="key-vault-url">
              <help short="The URL of the vault."/>
            </arg>
            <arg type="string" var="$privateCloud.properties.encryption.keyVaultProperties.keyVersion" options="key-version">
              <help short="The version of the key."/>
            </arg>
          </arg>
          <arg type="string" var="$privateCloud.properties.encryption.status" options="status">
            <help short="Status of customer managed encryption key"/>
            <enum>
              <item name="Disabled" value="&quot;Disabled&quot;"/>
              <item name="Enabled" value="&quot;Enabled&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg type="array<object>" var="$privateCloud.properties.identitySources" options="identity-sources" hide="True" group="Properties">
          <help short="vCenter Single Sign On Identity Sources"/>
          <item type="object">
            <arg type="string" var="$privateCloud.properties.identitySources[].alias" options="alias" required="True">
              <help short="The domain's NetBIOS name"/>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].baseGroupDN" options="base-group-dn" required="True">
              <help short="The base distinguished name for groups"/>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].baseUserDN" options="base-user-dn" required="True">
              <help short="The base distinguished name for users"/>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].domain" options="domain" required="True">
              <help short="The domain's dns name"/>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].name" options="name" required="True">
              <help short="The name of the identity source"/>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].password" options="password" required="True">
              <help short="The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups."/>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].primaryServer" options="primary-server" required="True">
              <help short="Primary server URL"/>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].secondaryServer" options="secondary-server">
              <help short="Secondary server URL"/>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].ssl" options="ssl">
              <help short="Protect LDAP communication using SSL certificate (LDAPS)"/>
              <enum>
                <item name="Disabled" value="&quot;Disabled&quot;"/>
                <item name="Enabled" value="&quot;Enabled&quot;"/>
              </enum>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].username" options="username" required="True">
              <help short="The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group"/>
            </arg>
          </item>
        </arg>
        <arg type="string" var="$privateCloud.properties.internet" options="internet" group="Properties">
          <help short="Connectivity to internet is enabled or disabled"/>
          <default value="&quot;Disabled&quot;"/>
          <enum>
            <item name="Disabled" value="&quot;Disabled&quot;"/>
            <item name="Enabled" value="&quot;Enabled&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$privateCloud.properties.networkBlock" options="network-block" required="True" group="Properties">
          <help short="The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22"/>
        </arg>
        <arg type="password" var="$privateCloud.properties.nsxtPassword" options="nsxt-password" group="Properties">
          <help short="NSX-T Manager password when the private cloud is created"/>
          <prompt msg="NSX-T Manager Password:" confirm="True"/>
        </arg>
        <arg type="password" var="$privateCloud.properties.vcenterPassword" options="vcenter-password" group="Properties">
          <help short="vCenter admin password when the private cloud is created"/>
          <prompt msg="vCenter Admin Password:" confirm="True"/>
        </arg>
      </argGroup>
      <argGroup name="Sku">
        <arg type="string" var="$privateCloud.sku.name" options="sku" required="True" group="Sku">
          <help short="The name of the SKU."/>
        </arg>
      </argGroup>
      <operation operationId="PrivateClouds_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}">
          <request method="put">
            <path>
              <param type="string" name="privateCloudName" arg="$Path.privateCloudName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-05-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="privateCloud" required="True" clientFlatten="True">
                  <prop type="object" name="identity" arg="$privateCloud.identity">
                    <prop type="string" name="type" arg="$privateCloud.identity.type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" arg="$privateCloud.location" required="True"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="object" name="availability">
                      <prop type="integer32" name="secondaryZone" arg="$privateCloud.properties.availability.secondaryZone"/>
                      <prop type="string" name="strategy" arg="$privateCloud.properties.availability.strategy">
                        <enum>
                          <item value="&quot;DualZone&quot;"/>
                          <item value="&quot;SingleZone&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer32" name="zone" arg="$privateCloud.properties.availability.zone"/>
                    </prop>
                    <prop type="object" name="encryption" arg="$privateCloud.properties.encryption">
                      <prop type="object" name="keyVaultProperties" arg="$privateCloud.properties.encryption.keyVaultProperties">
                        <prop type="string" name="keyName" arg="$privateCloud.properties.encryption.keyVaultProperties.keyName"/>
                        <prop type="string" name="keyVaultUrl" arg="$privateCloud.properties.encryption.keyVaultProperties.keyVaultUrl"/>
                        <prop type="string" name="keyVersion" arg="$privateCloud.properties.encryption.keyVaultProperties.keyVersion"/>
                      </prop>
                      <prop type="string" name="status" arg="$privateCloud.properties.encryption.status">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="array<object>" name="identitySources" arg="$privateCloud.properties.identitySources" identifiers="name">
                      <item type="object">
                        <prop type="string" name="alias" arg="$privateCloud.properties.identitySources[].alias" required="True"/>
                        <prop type="string" name="baseGroupDN" arg="$privateCloud.properties.identitySources[].baseGroupDN" required="True"/>
                        <prop type="string" name="baseUserDN" arg="$privateCloud.properties.identitySources[].baseUserDN" required="True"/>
                        <prop type="string" name="domain" arg="$privateCloud.properties.identitySources[].domain" required="True"/>
                        <prop type="string" name="name" arg="$privateCloud.properties.identitySources[].name" required="True"/>
                        <prop type="string" name="password" arg="$privateCloud.properties.identitySources[].password" required="True" secret="True"/>
                        <prop type="string" name="primaryServer" arg="$privateCloud.properties.identitySources[].primaryServer" required="True"/>
                        <prop type="string" name="secondaryServer" arg="$privateCloud.properties.identitySources[].secondaryServer"/>
                        <prop type="string" name="ssl" arg="$privateCloud.properties.identitySources[].ssl">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="username" arg="$privateCloud.properties.identitySources[].username" required="True" secret="True"/>
                      </item>
                    </prop>
                    <prop type="string" name="internet" arg="$privateCloud.properties.internet">
                      <default value="&quot;Disabled&quot;"/>
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="managementCluster" required="True">
                      <prop type="integer32" name="clusterSize" arg="$privateCloud.properties.managementCluster.clusterSize" required="True"/>
                      <prop type="array<string>" name="hosts" arg="$privateCloud.properties.managementCluster.hosts">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="string" name="networkBlock" arg="$privateCloud.properties.networkBlock" required="True"/>
                    <prop type="password" name="nsxtPassword" arg="$privateCloud.properties.nsxtPassword" secret="True"/>
                    <prop type="password" name="vcenterPassword" arg="$privateCloud.properties.vcenterPassword" secret="True"/>
                  </prop>
                  <prop type="object" name="sku" required="True">
                    <prop type="string" name="name" arg="$privateCloud.sku.name" required="True"/>
                  </prop>
                  <prop type="object" name="tags" arg="$privateCloud.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}"/>
                  </prop>
                  <prop type="object" name="identity">
                    <prop readOnly="True" type="string" name="principalId"/>
                    <prop readOnly="True" type="string" name="tenantId"/>
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="object" name="availability">
                      <prop type="integer32" name="secondaryZone"/>
                      <prop type="string" name="strategy">
                        <enum>
                          <item value="&quot;DualZone&quot;"/>
                          <item value="&quot;SingleZone&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer32" name="zone"/>
                    </prop>
                    <prop type="object" name="circuit" cls="Circuit_read">
                      <prop readOnly="True" type="string" name="expressRouteID"/>
                      <prop readOnly="True" type="string" name="expressRoutePrivatePeeringID"/>
                      <prop readOnly="True" type="string" name="primarySubnet"/>
                      <prop readOnly="True" type="string" name="secondarySubnet"/>
                    </prop>
                    <prop type="object" name="encryption">
                      <prop type="object" name="keyVaultProperties">
                        <prop readOnly="True" type="string" name="autoDetectedKeyVersion"/>
                        <prop type="string" name="keyName"/>
                        <prop readOnly="True" type="string" name="keyState">
                          <enum>
                            <item value="&quot;AccessDenied&quot;"/>
                            <item value="&quot;Connected&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="keyVaultUrl"/>
                        <prop type="string" name="keyVersion"/>
                        <prop readOnly="True" type="string" name="versionType">
                          <enum>
                            <item value="&quot;AutoDetected&quot;"/>
                            <item value="&quot;Fixed&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="string" name="status">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="endpoints">
                      <prop readOnly="True" type="string" name="hcxCloudManager"/>
                      <prop readOnly="True" type="string" name="nsxtManager"/>
                      <prop readOnly="True" type="string" name="vcsa"/>
                    </prop>
                    <prop readOnly="True" type="array<string>" name="externalCloudLinks">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="identitySources" identifiers="name">
                      <item type="object">
                        <prop type="string" name="alias" required="True"/>
                        <prop type="string" name="baseGroupDN" required="True"/>
                        <prop type="string" name="baseUserDN" required="True"/>
                        <prop type="string" name="domain" required="True"/>
                        <prop type="string" name="name" required="True"/>
                        <prop type="string" name="password" required="True" secret="True"/>
                        <prop type="string" name="primaryServer" required="True"/>
                        <prop type="string" name="secondaryServer"/>
                        <prop type="string" name="ssl">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="username" required="True" secret="True"/>
                      </item>
                    </prop>
                    <prop type="string" name="internet">
                      <default value="&quot;Disabled&quot;"/>
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="managementCluster" required="True">
                      <prop readOnly="True" type="integer32" name="clusterId"/>
                      <prop type="integer32" name="clusterSize" required="True"/>
                      <prop type="array<string>" name="hosts">
                        <item type="string"/>
                      </prop>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Cancelled&quot;"/>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="managementNetwork"/>
                    <prop type="string" name="networkBlock" required="True"/>
                    <prop readOnly="True" type="string" name="nsxPublicIpQuotaRaised">
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="nsxtCertificateThumbprint"/>
                    <prop type="password" name="nsxtPassword" secret="True"/>
                    <prop readOnly="True" type="string" name="provisioningNetwork"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Building&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Cancelled&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Pending&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="@Circuit_read" name="secondaryCircuit"/>
                    <prop readOnly="True" type="string" name="vcenterCertificateThumbprint"/>
                    <prop type="password" name="vcenterPassword" secret="True"/>
                    <prop readOnly="True" type="string" name="vmotionNetwork"/>
                  </prop>
                  <prop type="object" name="sku" required="True">
                    <prop type="string" name="name" required="True"/>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2022-05-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.avs/privateclouds/{}" version="2022-05-01" swagger="mgmt-plane/vmware/ResourceProviders/Microsoft.AVS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQVZTL3ByaXZhdGVDbG91ZHMve3ByaXZhdGVDbG91ZE5hbWV9/V/MjAyMi0wNS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.privateCloudName" options="private-cloud-name name n" required="True" idPart="name">
          <help short="Name of the private cloud"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="ManagementCluster">
        <arg type="integer32" var="$privateCloud.properties.managementCluster.clusterSize" options="cluster-size" group="ManagementCluster">
          <help short="The cluster size"/>
        </arg>
        <arg nullable="True" type="array<string>" var="$privateCloud.properties.managementCluster.hosts" options="hosts" hide="True" group="ManagementCluster">
          <help short="The hosts"/>
          <item nullable="True" type="string"/>
        </arg>
      </argGroup>
      <argGroup name="PrivateCloud">
        <arg nullable="True" type="object" var="$privateCloud.identity" options="identity" group="PrivateCloud">
          <help short="The identity of the private cloud, if configured."/>
          <arg nullable="True" type="string" var="$privateCloud.identity.type" options="type">
            <help short="The type of identity used for the private cloud. The type 'SystemAssigned' refers to an implicitly created identity. The type 'None' will remove any identities from the Private Cloud."/>
            <enum>
              <item name="None" value="&quot;None&quot;"/>
              <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg type="ResourceLocation" var="$privateCloud.location" options="location l" hide="True" group="PrivateCloud">
          <help short="Resource location"/>
        </arg>
        <arg nullable="True" type="object" var="$privateCloud.tags" options="tags" group="PrivateCloud">
          <help short="Resource tags"/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="object" var="$privateCloud.properties.encryption" options="encryption" group="Properties">
          <help short="Customer managed key encryption, can be enabled or disabled"/>
          <arg nullable="True" type="object" var="$privateCloud.properties.encryption.keyVaultProperties" options="key-vault-properties">
            <help short="The key vault where the encryption key is stored"/>
            <arg nullable="True" type="string" var="$privateCloud.properties.encryption.keyVaultProperties.keyName" options="key-name">
              <help short="The name of the key."/>
            </arg>
            <arg nullable="True" type="string" var="$privateCloud.properties.encryption.keyVaultProperties.keyVaultUrl" options="key-vault-url">
              <help short="The URL of the vault."/>
            </arg>
            <arg nullable="True" type="string" var="$privateCloud.properties.encryption.keyVaultProperties.keyVersion" options="key-version">
              <help short="The version of the key."/>
            </arg>
          </arg>
          <arg nullable="True" type="string" var="$privateCloud.properties.encryption.status" options="status">
            <help short="Status of customer managed encryption key"/>
            <enum>
              <item name="Disabled" value="&quot;Disabled&quot;"/>
              <item name="Enabled" value="&quot;Enabled&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg nullable="True" type="array<object>" var="$privateCloud.properties.identitySources" options="identity-sources" group="Properties">
          <help short="vCenter Single Sign On Identity Sources"/>
          <item nullable="True" type="object">
            <arg type="string" var="$privateCloud.properties.identitySources[].alias" options="alias">
              <help short="The domain's NetBIOS name"/>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].baseGroupDN" options="base-group-dn">
              <help short="The base distinguished name for groups"/>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].baseUserDN" options="base-user-dn">
              <help short="The base distinguished name for users"/>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].domain" options="domain">
              <help short="The domain's dns name"/>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].name" options="name">
              <help short="The name of the identity source"/>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].password" options="password">
              <help short="The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups."/>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].primaryServer" options="primary-server">
              <help short="Primary server URL"/>
            </arg>
            <arg nullable="True" type="string" var="$privateCloud.properties.identitySources[].secondaryServer" options="secondary-server">
              <help short="Secondary server URL"/>
            </arg>
            <arg nullable="True" type="string" var="$privateCloud.properties.identitySources[].ssl" options="ssl">
              <help short="Protect LDAP communication using SSL certificate (LDAPS)"/>
              <enum>
                <item name="Disabled" value="&quot;Disabled&quot;"/>
                <item name="Enabled" value="&quot;Enabled&quot;"/>
              </enum>
            </arg>
            <arg type="string" var="$privateCloud.properties.identitySources[].username" options="username">
              <help short="The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group"/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="string" var="$privateCloud.properties.internet" options="internet" group="Properties">
          <help short="Connectivity to internet is enabled or disabled"/>
          <enum>
            <item name="Disabled" value="&quot;Disabled&quot;"/>
            <item name="Enabled" value="&quot;Enabled&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="password" var="$privateCloud.properties.nsxtPassword" options="nsxt-password" group="Properties">
          <help short="Optionally, set the NSX-T Manager password when the private cloud is created"/>
          <prompt msg="Password:"/>
        </arg>
        <arg nullable="True" type="password" var="$privateCloud.properties.vcenterPassword" options="vcenter-password" group="Properties">
          <help short="Optionally, set the vCenter admin password when the private cloud is created"/>
          <prompt msg="Password:"/>
        </arg>
      </argGroup>
      <argGroup name="Sku">
        <arg type="string" var="$privateCloud.sku.name" options="sku" hide="True" group="Sku">
          <help short="The name of the SKU."/>
        </arg>
      </argGroup>
      <operation operationId="PrivateClouds_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}">
          <request method="get">
            <path>
              <param type="string" name="privateCloudName" arg="$Path.privateCloudName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-05-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="PrivateCloud_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}"/>
                  </prop>
                  <prop type="object" name="identity">
                    <prop readOnly="True" type="string" name="principalId"/>
                    <prop readOnly="True" type="string" name="tenantId"/>
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="object" name="availability">
                      <prop type="integer32" name="secondaryZone"/>
                      <prop type="string" name="strategy">
                        <enum>
                          <item value="&quot;DualZone&quot;"/>
                          <item value="&quot;SingleZone&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer32" name="zone"/>
                    </prop>
                    <prop type="object" name="circuit" cls="Circuit_read">
                      <prop readOnly="True" type="string" name="expressRouteID"/>
                      <prop readOnly="True" type="string" name="expressRoutePrivatePeeringID"/>
                      <prop readOnly="True" type="string" name="primarySubnet"/>
                      <prop readOnly="True" type="string" name="secondarySubnet"/>
                    </prop>
                    <prop type="object" name="encryption">
                      <prop type="object" name="keyVaultProperties">
                        <prop readOnly="True" type="string" name="autoDetectedKeyVersion"/>
                        <prop type="string" name="keyName"/>
                        <prop readOnly="True" type="string" name="keyState">
                          <enum>
                            <item value="&quot;AccessDenied&quot;"/>
                            <item value="&quot;Connected&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="keyVaultUrl"/>
                        <prop type="string" name="keyVersion"/>
                        <prop readOnly="True" type="string" name="versionType">
                          <enum>
                            <item value="&quot;AutoDetected&quot;"/>
                            <item value="&quot;Fixed&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="string" name="status">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="endpoints">
                      <prop readOnly="True" type="string" name="hcxCloudManager"/>
                      <prop readOnly="True" type="string" name="nsxtManager"/>
                      <prop readOnly="True" type="string" name="vcsa"/>
                    </prop>
                    <prop readOnly="True" type="array<string>" name="externalCloudLinks">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="identitySources" identifiers="name">
                      <item type="object">
                        <prop type="string" name="alias" required="True"/>
                        <prop type="string" name="baseGroupDN" required="True"/>
                        <prop type="string" name="baseUserDN" required="True"/>
                        <prop type="string" name="domain" required="True"/>
                        <prop type="string" name="name" required="True"/>
                        <prop type="string" name="password" required="True" secret="True"/>
                        <prop type="string" name="primaryServer" required="True"/>
                        <prop type="string" name="secondaryServer"/>
                        <prop type="string" name="ssl">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="username" required="True" secret="True"/>
                      </item>
                    </prop>
                    <prop type="string" name="internet">
                      <default value="&quot;Disabled&quot;"/>
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="managementCluster" required="True">
                      <prop readOnly="True" type="integer32" name="clusterId"/>
                      <prop type="integer32" name="clusterSize" required="True"/>
                      <prop type="array<string>" name="hosts">
                        <item type="string"/>
                      </prop>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Cancelled&quot;"/>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="managementNetwork"/>
                    <prop type="string" name="networkBlock" required="True"/>
                    <prop readOnly="True" type="string" name="nsxPublicIpQuotaRaised">
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="nsxtCertificateThumbprint"/>
                    <prop type="password" name="nsxtPassword" secret="True"/>
                    <prop readOnly="True" type="string" name="provisioningNetwork"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Building&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Cancelled&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Pending&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="@Circuit_read" name="secondaryCircuit"/>
                    <prop readOnly="True" type="string" name="vcenterCertificateThumbprint"/>
                    <prop type="password" name="vcenterPassword" secret="True"/>
                    <prop readOnly="True" type="string" name="vmotionNetwork"/>
                  </prop>
                  <prop type="object" name="sku" required="True">
                    <prop type="string" name="name" required="True"/>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="privateCloud" required="True" clientFlatten="True">
              <prop type="object" name="identity" arg="$privateCloud.identity">
                <prop type="string" name="type" arg="$privateCloud.identity.type">
                  <enum>
                    <item value="&quot;None&quot;"/>
                    <item value="&quot;SystemAssigned&quot;"/>
                  </enum>
                </prop>
              </prop>
              <prop type="ResourceLocation" name="location" arg="$privateCloud.location" required="True"/>
              <prop type="object" name="properties" required="True" clientFlatten="True">
                <prop type="object" name="encryption" arg="$privateCloud.properties.encryption">
                  <prop type="object" name="keyVaultProperties" arg="$privateCloud.properties.encryption.keyVaultProperties">
                    <prop type="string" name="keyName" arg="$privateCloud.properties.encryption.keyVaultProperties.keyName"/>
                    <prop type="string" name="keyVaultUrl" arg="$privateCloud.properties.encryption.keyVaultProperties.keyVaultUrl"/>
                    <prop type="string" name="keyVersion" arg="$privateCloud.properties.encryption.keyVaultProperties.keyVersion"/>
                  </prop>
                  <prop type="string" name="status" arg="$privateCloud.properties.encryption.status">
                    <enum>
                      <item value="&quot;Disabled&quot;"/>
                      <item value="&quot;Enabled&quot;"/>
                    </enum>
                  </prop>
                </prop>
                <prop type="array<object>" name="identitySources" arg="$privateCloud.properties.identitySources" identifiers="name">
                  <item type="object">
                    <prop type="string" name="alias" arg="$privateCloud.properties.identitySources[].alias" required="True"/>
                    <prop type="string" name="baseGroupDN" arg="$privateCloud.properties.identitySources[].baseGroupDN" required="True"/>
                    <prop type="string" name="baseUserDN" arg="$privateCloud.properties.identitySources[].baseUserDN" required="True"/>
                    <prop type="string" name="domain" arg="$privateCloud.properties.identitySources[].domain" required="True"/>
                    <prop type="string" name="name" arg="$privateCloud.properties.identitySources[].name" required="True"/>
                    <prop type="string" name="password" arg="$privateCloud.properties.identitySources[].password" required="True" secret="True"/>
                    <prop type="string" name="primaryServer" arg="$privateCloud.properties.identitySources[].primaryServer" required="True"/>
                    <prop type="string" name="secondaryServer" arg="$privateCloud.properties.identitySources[].secondaryServer"/>
                    <prop type="string" name="ssl" arg="$privateCloud.properties.identitySources[].ssl">
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="username" arg="$privateCloud.properties.identitySources[].username" required="True" secret="True"/>
                  </item>
                </prop>
                <prop type="string" name="internet" arg="$privateCloud.properties.internet">
                  <default value="&quot;Disabled&quot;"/>
                  <enum>
                    <item value="&quot;Disabled&quot;"/>
                    <item value="&quot;Enabled&quot;"/>
                  </enum>
                </prop>
                <prop type="object" name="managementCluster" required="True">
                  <prop type="integer32" name="clusterSize" arg="$privateCloud.properties.managementCluster.clusterSize" required="True"/>
                  <prop type="array<string>" name="hosts" arg="$privateCloud.properties.managementCluster.hosts">
                    <item type="string"/>
                  </prop>
                </prop>
                <prop type="password" name="nsxtPassword" arg="$privateCloud.properties.nsxtPassword" secret="True"/>
                <prop type="password" name="vcenterPassword" arg="$privateCloud.properties.vcenterPassword" secret="True"/>
              </prop>
              <prop type="object" name="sku" required="True">
                <prop type="string" name="name" arg="$privateCloud.sku.name" required="True"/>
              </prop>
              <prop type="object" name="tags" arg="$privateCloud.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="PrivateClouds_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}">
          <request method="put">
            <path>
              <param type="string" name="privateCloudName" arg="$Path.privateCloudName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-05-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@PrivateCloud_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <commandGroup name="identity-source">
      <command name="list" version="2022-05-01" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.avs/privateclouds/{}" version="2022-05-01" subresource="properties.identitySources" swagger="mgmt-plane/vmware/ResourceProviders/Microsoft.AVS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQVZTL3ByaXZhdGVDbG91ZHMve3ByaXZhdGVDbG91ZE5hbWV9/V/MjAyMi0wNS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.privateCloudName" options="private-cloud c" required="True" group="" idPart="name">
            <help short="Name of the private cloud"/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="privateCloud">
            <prop type="array" name="properties.identitySources"/>
          </json>
        </subresourceSelector>
        <operation operationId="PrivateClouds_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}">
            <request method="get">
              <path>
                <param type="string" name="privateCloudName" arg="$Path.privateCloudName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                  <format minLength="1"/>
                </param>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="PrivateCloud_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}"/>
                    </prop>
                    <prop type="object" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" required="True" clientFlatten="True">
                      <prop type="object" name="availability">
                        <prop type="integer32" name="secondaryZone"/>
                        <prop type="string" name="strategy">
                          <enum>
                            <item value="&quot;DualZone&quot;"/>
                            <item value="&quot;SingleZone&quot;"/>
                          </enum>
                        </prop>
                        <prop type="integer32" name="zone"/>
                      </prop>
                      <prop type="object" name="circuit" cls="Circuit_read">
                        <prop readOnly="True" type="string" name="expressRouteID"/>
                        <prop readOnly="True" type="string" name="expressRoutePrivatePeeringID"/>
                        <prop readOnly="True" type="string" name="primarySubnet"/>
                        <prop readOnly="True" type="string" name="secondarySubnet"/>
                      </prop>
                      <prop type="object" name="encryption">
                        <prop type="object" name="keyVaultProperties">
                          <prop readOnly="True" type="string" name="autoDetectedKeyVersion"/>
                          <prop type="string" name="keyName"/>
                          <prop readOnly="True" type="string" name="keyState">
                            <enum>
                              <item value="&quot;AccessDenied&quot;"/>
                              <item value="&quot;Connected&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="keyVaultUrl"/>
                          <prop type="string" name="keyVersion"/>
                          <prop readOnly="True" type="string" name="versionType">
                            <enum>
                              <item value="&quot;AutoDetected&quot;"/>
                              <item value="&quot;Fixed&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                        <prop type="string" name="status">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="object" name="endpoints">
                        <prop readOnly="True" type="string" name="hcxCloudManager"/>
                        <prop readOnly="True" type="string" name="nsxtManager"/>
                        <prop readOnly="True" type="string" name="vcsa"/>
                      </prop>
                      <prop readOnly="True" type="array<string>" name="externalCloudLinks">
                        <item type="string"/>
                      </prop>
                      <prop type="array<object>" name="identitySources" identifiers="name">
                        <item type="object">
                          <prop type="string" name="alias" required="True"/>
                          <prop type="string" name="baseGroupDN" required="True"/>
                          <prop type="string" name="baseUserDN" required="True"/>
                          <prop type="string" name="domain" required="True"/>
                          <prop type="string" name="name" required="True"/>
                          <prop type="string" name="password" required="True" secret="True"/>
                          <prop type="string" name="primaryServer" required="True"/>
                          <prop type="string" name="secondaryServer"/>
                          <prop type="string" name="ssl">
                            <enum>
                              <item value="&quot;Disabled&quot;"/>
                              <item value="&quot;Enabled&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="username" required="True" secret="True"/>
                        </item>
                      </prop>
                      <prop type="string" name="internet">
                        <default value="&quot;Disabled&quot;"/>
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="managementCluster" required="True">
                        <prop readOnly="True" type="integer32" name="clusterId"/>
                        <prop type="integer32" name="clusterSize" required="True"/>
                        <prop type="array<string>" name="hosts">
                          <item type="string"/>
                        </prop>
                        <prop readOnly="True" type="string" name="provisioningState">
                          <enum>
                            <item value="&quot;Canceled&quot;"/>
                            <item value="&quot;Cancelled&quot;"/>
                            <item value="&quot;Deleting&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                            <item value="&quot;Updating&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="managementNetwork"/>
                      <prop type="string" name="networkBlock" required="True"/>
                      <prop readOnly="True" type="string" name="nsxPublicIpQuotaRaised">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="nsxtCertificateThumbprint"/>
                      <prop type="password" name="nsxtPassword" secret="True"/>
                      <prop readOnly="True" type="string" name="provisioningNetwork"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Building&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Cancelled&quot;"/>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Pending&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                      <prop type="@Circuit_read" name="secondaryCircuit"/>
                      <prop readOnly="True" type="string" name="vcenterCertificateThumbprint"/>
                      <prop type="password" name="vcenterPassword" secret="True"/>
                      <prop readOnly="True" type="string" name="vmotionNetwork"/>
                    </prop>
                    <prop type="object" name="sku" required="True">
                      <prop type="string" name="name" required="True"/>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="array" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="create" version="2022-05-01" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.avs/privateclouds/{}" version="2022-05-01" subresource="properties.identitySources[]" swagger="mgmt-plane/vmware/ResourceProviders/Microsoft.AVS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQVZTL3ByaXZhdGVDbG91ZHMve3ByaXZhdGVDbG91ZE5hbWV9/V/MjAyMi0wNS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.privateCloudName" options="private-cloud c" required="True" group="" idPart="name">
            <help short="Name of the private cloud"/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
          <arg type="string" var="$privateCloud.properties.identitySources[].name" options="name n" required="True" group="">
            <help short="The name of the identity source"/>
          </arg>
        </argGroup>
        <argGroup name="PrivateCloud.properties.identitySources[]">
          <arg type="string" var="$privateCloud.properties.identitySources[].alias" options="alias" required="True" group="PrivateCloud.properties.identitySources[]">
            <help short="The domain's NetBIOS name"/>
          </arg>
          <arg type="string" var="$privateCloud.properties.identitySources[].baseGroupDN" options="base-group-dn" required="True" group="PrivateCloud.properties.identitySources[]">
            <help short="The base distinguished name for groups"/>
          </arg>
          <arg type="string" var="$privateCloud.properties.identitySources[].baseUserDN" options="base-user-dn" required="True" group="PrivateCloud.properties.identitySources[]">
            <help short="The base distinguished name for users"/>
          </arg>
          <arg type="string" var="$privateCloud.properties.identitySources[].domain" options="domain" required="True" group="PrivateCloud.properties.identitySources[]">
            <help short="The domain's dns name"/>
          </arg>
          <arg type="string" var="$privateCloud.properties.identitySources[].password" options="password" required="True" group="PrivateCloud.properties.identitySources[]">
            <help short="The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups."/>
          </arg>
          <arg type="string" var="$privateCloud.properties.identitySources[].primaryServer" options="primary-server" required="True" group="PrivateCloud.properties.identitySources[]">
            <help short="Primary server URL"/>
          </arg>
          <arg type="string" var="$privateCloud.properties.identitySources[].secondaryServer" options="secondary-server" group="PrivateCloud.properties.identitySources[]">
            <help short="Secondary server URL"/>
          </arg>
          <arg type="string" var="$privateCloud.properties.identitySources[].ssl" options="ssl" group="PrivateCloud.properties.identitySources[]">
            <help short="Protect LDAP communication using SSL certificate (LDAPS)"/>
            <default value="&quot;Disabled&quot;"/>
            <enum>
              <item name="Disabled" value="&quot;Disabled&quot;"/>
              <item name="Enabled" value="&quot;Enabled&quot;"/>
            </enum>
          </arg>
          <arg type="string" var="$privateCloud.properties.identitySources[].username" options="username" required="True" group="PrivateCloud.properties.identitySources[]">
            <help short="The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group"/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="privateCloud">
            <prop type="array" name="properties.identitySources">
              <item type="object"/>
              <identifier type="string" name="[].name" arg="$privateCloud.properties.identitySources[].name" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="PrivateClouds_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}">
            <request method="get">
              <path>
                <param type="string" name="privateCloudName" arg="$Path.privateCloudName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                  <format minLength="1"/>
                </param>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="PrivateCloud_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}"/>
                    </prop>
                    <prop type="object" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" required="True" clientFlatten="True">
                      <prop type="object" name="availability">
                        <prop type="integer32" name="secondaryZone"/>
                        <prop type="string" name="strategy">
                          <enum>
                            <item value="&quot;DualZone&quot;"/>
                            <item value="&quot;SingleZone&quot;"/>
                          </enum>
                        </prop>
                        <prop type="integer32" name="zone"/>
                      </prop>
                      <prop type="object" name="circuit" cls="Circuit_read">
                        <prop readOnly="True" type="string" name="expressRouteID"/>
                        <prop readOnly="True" type="string" name="expressRoutePrivatePeeringID"/>
                        <prop readOnly="True" type="string" name="primarySubnet"/>
                        <prop readOnly="True" type="string" name="secondarySubnet"/>
                      </prop>
                      <prop type="object" name="encryption">
                        <prop type="object" name="keyVaultProperties">
                          <prop readOnly="True" type="string" name="autoDetectedKeyVersion"/>
                          <prop type="string" name="keyName"/>
                          <prop readOnly="True" type="string" name="keyState">
                            <enum>
                              <item value="&quot;AccessDenied&quot;"/>
                              <item value="&quot;Connected&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="keyVaultUrl"/>
                          <prop type="string" name="keyVersion"/>
                          <prop readOnly="True" type="string" name="versionType">
                            <enum>
                              <item value="&quot;AutoDetected&quot;"/>
                              <item value="&quot;Fixed&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                        <prop type="string" name="status">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="object" name="endpoints">
                        <prop readOnly="True" type="string" name="hcxCloudManager"/>
                        <prop readOnly="True" type="string" name="nsxtManager"/>
                        <prop readOnly="True" type="string" name="vcsa"/>
                      </prop>
                      <prop readOnly="True" type="array<string>" name="externalCloudLinks">
                        <item type="string"/>
                      </prop>
                      <prop type="array<object>" name="identitySources" identifiers="name">
                        <item type="object">
                          <prop type="string" name="alias" required="True"/>
                          <prop type="string" name="baseGroupDN" required="True"/>
                          <prop type="string" name="baseUserDN" required="True"/>
                          <prop type="string" name="domain" required="True"/>
                          <prop type="string" name="name" required="True"/>
                          <prop type="string" name="password" required="True" secret="True"/>
                          <prop type="string" name="primaryServer" required="True"/>
                          <prop type="string" name="secondaryServer"/>
                          <prop type="string" name="ssl">
                            <enum>
                              <item value="&quot;Disabled&quot;"/>
                              <item value="&quot;Enabled&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="username" required="True" secret="True"/>
                        </item>
                      </prop>
                      <prop type="string" name="internet">
                        <default value="&quot;Disabled&quot;"/>
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="managementCluster" required="True">
                        <prop readOnly="True" type="integer32" name="clusterId"/>
                        <prop type="integer32" name="clusterSize" required="True"/>
                        <prop type="array<string>" name="hosts">
                          <item type="string"/>
                        </prop>
                        <prop readOnly="True" type="string" name="provisioningState">
                          <enum>
                            <item value="&quot;Canceled&quot;"/>
                            <item value="&quot;Cancelled&quot;"/>
                            <item value="&quot;Deleting&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                            <item value="&quot;Updating&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="managementNetwork"/>
                      <prop type="string" name="networkBlock" required="True"/>
                      <prop readOnly="True" type="string" name="nsxPublicIpQuotaRaised">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="nsxtCertificateThumbprint"/>
                      <prop type="password" name="nsxtPassword" secret="True"/>
                      <prop readOnly="True" type="string" name="provisioningNetwork"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Building&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Cancelled&quot;"/>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Pending&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                      <prop type="@Circuit_read" name="secondaryCircuit"/>
                      <prop readOnly="True" type="string" name="vcenterCertificateThumbprint"/>
                      <prop type="password" name="vcenterPassword" secret="True"/>
                      <prop readOnly="True" type="string" name="vmotionNetwork"/>
                    </prop>
                    <prop type="object" name="sku" required="True">
                      <prop type="string" name="name" required="True"/>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceCreate ref="$Subresource">
            <json>
              <schema type="object" name="privateCloud.properties.identitySources[]" required="True">
                <prop type="string" name="alias" arg="$privateCloud.properties.identitySources[].alias" required="True"/>
                <prop type="string" name="baseGroupDN" arg="$privateCloud.properties.identitySources[].baseGroupDN" required="True"/>
                <prop type="string" name="baseUserDN" arg="$privateCloud.properties.identitySources[].baseUserDN" required="True"/>
                <prop type="string" name="domain" arg="$privateCloud.properties.identitySources[].domain" required="True"/>
                <prop type="string" name="name" arg="$privateCloud.properties.identitySources[].name" required="True"/>
                <prop type="string" name="password" arg="$privateCloud.properties.identitySources[].password" required="True" secret="True"/>
                <prop type="string" name="primaryServer" arg="$privateCloud.properties.identitySources[].primaryServer" required="True"/>
                <prop type="string" name="secondaryServer" arg="$privateCloud.properties.identitySources[].secondaryServer"/>
                <prop type="string" name="ssl" arg="$privateCloud.properties.identitySources[].ssl">
                  <enum>
                    <item value="&quot;Disabled&quot;"/>
                    <item value="&quot;Enabled&quot;"/>
                  </enum>
                </prop>
                <prop type="string" name="username" arg="$privateCloud.properties.identitySources[].username" required="True" secret="True"/>
              </schema>
            </json>
          </instanceCreate>
        </operation>
        <operation operationId="PrivateClouds_CreateOrUpdate">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}">
            <request method="put">
              <path>
                <param type="string" name="privateCloudName" arg="$Path.privateCloudName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                  <format minLength="1"/>
                </param>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@PrivateCloud_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="update" version="2022-05-01" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.avs/privateclouds/{}" version="2022-05-01" subresource="properties.identitySources[]" swagger="mgmt-plane/vmware/ResourceProviders/Microsoft.AVS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQVZTL3ByaXZhdGVDbG91ZHMve3ByaXZhdGVDbG91ZE5hbWV9/V/MjAyMi0wNS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.privateCloudName" options="private-cloud c" required="True" group="" idPart="name">
            <help short="Name of the private cloud"/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
          <arg type="string" var="$privateCloud.properties.identitySources[].name" options="name n" required="True" group="">
            <help short="The name of the identity source"/>
          </arg>
        </argGroup>
        <argGroup name="PrivateCloud.properties.identitySources[]">
          <arg type="string" var="$privateCloud.properties.identitySources[].alias" options="alias" group="PrivateCloud.properties.identitySources[]">
            <help short="The domain's NetBIOS name"/>
          </arg>
          <arg type="string" var="$privateCloud.properties.identitySources[].baseGroupDN" options="base-group-dn" group="PrivateCloud.properties.identitySources[]">
            <help short="The base distinguished name for groups"/>
          </arg>
          <arg type="string" var="$privateCloud.properties.identitySources[].baseUserDN" options="base-user-dn" group="PrivateCloud.properties.identitySources[]">
            <help short="The base distinguished name for users"/>
          </arg>
          <arg type="string" var="$privateCloud.properties.identitySources[].domain" options="domain" group="PrivateCloud.properties.identitySources[]">
            <help short="The domain's dns name"/>
          </arg>
          <arg type="string" var="$privateCloud.properties.identitySources[].password" options="password" group="PrivateCloud.properties.identitySources[]">
            <help short="The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups."/>
          </arg>
          <arg type="string" var="$privateCloud.properties.identitySources[].primaryServer" options="primary-server" group="PrivateCloud.properties.identitySources[]">
            <help short="Primary server URL"/>
          </arg>
          <arg nullable="True" type="string" var="$privateCloud.properties.identitySources[].secondaryServer" options="secondary-server" group="PrivateCloud.properties.identitySources[]">
            <help short="Secondary server URL"/>
          </arg>
          <arg nullable="True" type="string" var="$privateCloud.properties.identitySources[].ssl" options="ssl" group="PrivateCloud.properties.identitySources[]">
            <help short="Protect LDAP communication using SSL certificate (LDAPS)"/>
            <enum>
              <item name="Disabled" value="&quot;Disabled&quot;"/>
              <item name="Enabled" value="&quot;Enabled&quot;"/>
            </enum>
          </arg>
          <arg type="string" var="$privateCloud.properties.identitySources[].username" options="username" group="PrivateCloud.properties.identitySources[]">
            <help short="The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group"/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="privateCloud">
            <prop type="array" name="properties.identitySources">
              <item type="object"/>
              <identifier type="string" name="[].name" arg="$privateCloud.properties.identitySources[].name" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="PrivateClouds_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}">
            <request method="get">
              <path>
                <param type="string" name="privateCloudName" arg="$Path.privateCloudName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                  <format minLength="1"/>
                </param>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="PrivateCloud_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}"/>
                    </prop>
                    <prop type="object" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" required="True" clientFlatten="True">
                      <prop type="object" name="availability">
                        <prop type="integer32" name="secondaryZone"/>
                        <prop type="string" name="strategy">
                          <enum>
                            <item value="&quot;DualZone&quot;"/>
                            <item value="&quot;SingleZone&quot;"/>
                          </enum>
                        </prop>
                        <prop type="integer32" name="zone"/>
                      </prop>
                      <prop type="object" name="circuit" cls="Circuit_read">
                        <prop readOnly="True" type="string" name="expressRouteID"/>
                        <prop readOnly="True" type="string" name="expressRoutePrivatePeeringID"/>
                        <prop readOnly="True" type="string" name="primarySubnet"/>
                        <prop readOnly="True" type="string" name="secondarySubnet"/>
                      </prop>
                      <prop type="object" name="encryption">
                        <prop type="object" name="keyVaultProperties">
                          <prop readOnly="True" type="string" name="autoDetectedKeyVersion"/>
                          <prop type="string" name="keyName"/>
                          <prop readOnly="True" type="string" name="keyState">
                            <enum>
                              <item value="&quot;AccessDenied&quot;"/>
                              <item value="&quot;Connected&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="keyVaultUrl"/>
                          <prop type="string" name="keyVersion"/>
                          <prop readOnly="True" type="string" name="versionType">
                            <enum>
                              <item value="&quot;AutoDetected&quot;"/>
                              <item value="&quot;Fixed&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                        <prop type="string" name="status">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="object" name="endpoints">
                        <prop readOnly="True" type="string" name="hcxCloudManager"/>
                        <prop readOnly="True" type="string" name="nsxtManager"/>
                        <prop readOnly="True" type="string" name="vcsa"/>
                      </prop>
                      <prop readOnly="True" type="array<string>" name="externalCloudLinks">
                        <item type="string"/>
                      </prop>
                      <prop type="array<object>" name="identitySources" identifiers="name">
                        <item type="object">
                          <prop type="string" name="alias" required="True"/>
                          <prop type="string" name="baseGroupDN" required="True"/>
                          <prop type="string" name="baseUserDN" required="True"/>
                          <prop type="string" name="domain" required="True"/>
                          <prop type="string" name="name" required="True"/>
                          <prop type="string" name="password" required="True" secret="True"/>
                          <prop type="string" name="primaryServer" required="True"/>
                          <prop type="string" name="secondaryServer"/>
                          <prop type="string" name="ssl">
                            <enum>
                              <item value="&quot;Disabled&quot;"/>
                              <item value="&quot;Enabled&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="username" required="True" secret="True"/>
                        </item>
                      </prop>
                      <prop type="string" name="internet">
                        <default value="&quot;Disabled&quot;"/>
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="managementCluster" required="True">
                        <prop readOnly="True" type="integer32" name="clusterId"/>
                        <prop type="integer32" name="clusterSize" required="True"/>
                        <prop type="array<string>" name="hosts">
                          <item type="string"/>
                        </prop>
                        <prop readOnly="True" type="string" name="provisioningState">
                          <enum>
                            <item value="&quot;Canceled&quot;"/>
                            <item value="&quot;Cancelled&quot;"/>
                            <item value="&quot;Deleting&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                            <item value="&quot;Updating&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="managementNetwork"/>
                      <prop type="string" name="networkBlock" required="True"/>
                      <prop readOnly="True" type="string" name="nsxPublicIpQuotaRaised">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="nsxtCertificateThumbprint"/>
                      <prop type="password" name="nsxtPassword" secret="True"/>
                      <prop readOnly="True" type="string" name="provisioningNetwork"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Building&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Cancelled&quot;"/>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Pending&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                      <prop type="@Circuit_read" name="secondaryCircuit"/>
                      <prop readOnly="True" type="string" name="vcenterCertificateThumbprint"/>
                      <prop type="password" name="vcenterPassword" secret="True"/>
                      <prop readOnly="True" type="string" name="vmotionNetwork"/>
                    </prop>
                    <prop type="object" name="sku" required="True">
                      <prop type="string" name="name" required="True"/>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceUpdate ref="$Subresource">
            <json>
              <schema type="object" name="privateCloud.properties.identitySources[]" required="True">
                <prop type="string" name="alias" arg="$privateCloud.properties.identitySources[].alias" required="True"/>
                <prop type="string" name="baseGroupDN" arg="$privateCloud.properties.identitySources[].baseGroupDN" required="True"/>
                <prop type="string" name="baseUserDN" arg="$privateCloud.properties.identitySources[].baseUserDN" required="True"/>
                <prop type="string" name="domain" arg="$privateCloud.properties.identitySources[].domain" required="True"/>
                <prop type="string" name="name" arg="$privateCloud.properties.identitySources[].name" required="True"/>
                <prop type="string" name="password" arg="$privateCloud.properties.identitySources[].password" required="True" secret="True"/>
                <prop type="string" name="primaryServer" arg="$privateCloud.properties.identitySources[].primaryServer" required="True"/>
                <prop type="string" name="secondaryServer" arg="$privateCloud.properties.identitySources[].secondaryServer"/>
                <prop type="string" name="ssl" arg="$privateCloud.properties.identitySources[].ssl">
                  <enum>
                    <item value="&quot;Disabled&quot;"/>
                    <item value="&quot;Enabled&quot;"/>
                  </enum>
                </prop>
                <prop type="string" name="username" arg="$privateCloud.properties.identitySources[].username" required="True" secret="True"/>
              </schema>
            </json>
          </instanceUpdate>
        </operation>
        <operation operationId="PrivateClouds_CreateOrUpdate">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}">
            <request method="put">
              <path>
                <param type="string" name="privateCloudName" arg="$Path.privateCloudName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                  <format minLength="1"/>
                </param>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@PrivateCloud_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="delete" version="2022-05-01" confirmation="This will delete the identity source. Are you sure?">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.avs/privateclouds/{}" version="2022-05-01" subresource="properties.identitySources[]" swagger="mgmt-plane/vmware/ResourceProviders/Microsoft.AVS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQVZTL3ByaXZhdGVDbG91ZHMve3ByaXZhdGVDbG91ZE5hbWV9/V/MjAyMi0wNS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.privateCloudName" options="private-cloud c" required="True" group="" idPart="name">
            <help short="Name of the private cloud"/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
          <arg type="string" var="$privateCloud.properties.identitySources[].name" options="name n" required="True" group="">
            <help short="The name of the identity source"/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="privateCloud">
            <prop type="array" name="properties.identitySources">
              <item type="object"/>
              <identifier type="string" name="[].name" arg="$privateCloud.properties.identitySources[].name" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="PrivateClouds_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}">
            <request method="get">
              <path>
                <param type="string" name="privateCloudName" arg="$Path.privateCloudName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                  <format minLength="1"/>
                </param>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="PrivateCloud_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}"/>
                    </prop>
                    <prop type="object" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" required="True" clientFlatten="True">
                      <prop type="object" name="availability">
                        <prop type="integer32" name="secondaryZone"/>
                        <prop type="string" name="strategy">
                          <enum>
                            <item value="&quot;DualZone&quot;"/>
                            <item value="&quot;SingleZone&quot;"/>
                          </enum>
                        </prop>
                        <prop type="integer32" name="zone"/>
                      </prop>
                      <prop type="object" name="circuit" cls="Circuit_read">
                        <prop readOnly="True" type="string" name="expressRouteID"/>
                        <prop readOnly="True" type="string" name="expressRoutePrivatePeeringID"/>
                        <prop readOnly="True" type="string" name="primarySubnet"/>
                        <prop readOnly="True" type="string" name="secondarySubnet"/>
                      </prop>
                      <prop type="object" name="encryption">
                        <prop type="object" name="keyVaultProperties">
                          <prop readOnly="True" type="string" name="autoDetectedKeyVersion"/>
                          <prop type="string" name="keyName"/>
                          <prop readOnly="True" type="string" name="keyState">
                            <enum>
                              <item value="&quot;AccessDenied&quot;"/>
                              <item value="&quot;Connected&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="keyVaultUrl"/>
                          <prop type="string" name="keyVersion"/>
                          <prop readOnly="True" type="string" name="versionType">
                            <enum>
                              <item value="&quot;AutoDetected&quot;"/>
                              <item value="&quot;Fixed&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                        <prop type="string" name="status">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="object" name="endpoints">
                        <prop readOnly="True" type="string" name="hcxCloudManager"/>
                        <prop readOnly="True" type="string" name="nsxtManager"/>
                        <prop readOnly="True" type="string" name="vcsa"/>
                      </prop>
                      <prop readOnly="True" type="array<string>" name="externalCloudLinks">
                        <item type="string"/>
                      </prop>
                      <prop type="array<object>" name="identitySources" identifiers="name">
                        <item type="object">
                          <prop type="string" name="alias" required="True"/>
                          <prop type="string" name="baseGroupDN" required="True"/>
                          <prop type="string" name="baseUserDN" required="True"/>
                          <prop type="string" name="domain" required="True"/>
                          <prop type="string" name="name" required="True"/>
                          <prop type="string" name="password" required="True" secret="True"/>
                          <prop type="string" name="primaryServer" required="True"/>
                          <prop type="string" name="secondaryServer"/>
                          <prop type="string" name="ssl">
                            <enum>
                              <item value="&quot;Disabled&quot;"/>
                              <item value="&quot;Enabled&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="username" required="True" secret="True"/>
                        </item>
                      </prop>
                      <prop type="string" name="internet">
                        <default value="&quot;Disabled&quot;"/>
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="managementCluster" required="True">
                        <prop readOnly="True" type="integer32" name="clusterId"/>
                        <prop type="integer32" name="clusterSize" required="True"/>
                        <prop type="array<string>" name="hosts">
                          <item type="string"/>
                        </prop>
                        <prop readOnly="True" type="string" name="provisioningState">
                          <enum>
                            <item value="&quot;Canceled&quot;"/>
                            <item value="&quot;Cancelled&quot;"/>
                            <item value="&quot;Deleting&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                            <item value="&quot;Updating&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="managementNetwork"/>
                      <prop type="string" name="networkBlock" required="True"/>
                      <prop readOnly="True" type="string" name="nsxPublicIpQuotaRaised">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="nsxtCertificateThumbprint"/>
                      <prop type="password" name="nsxtPassword" secret="True"/>
                      <prop readOnly="True" type="string" name="provisioningNetwork"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Building&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Cancelled&quot;"/>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Pending&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                      <prop type="@Circuit_read" name="secondaryCircuit"/>
                      <prop readOnly="True" type="string" name="vcenterCertificateThumbprint"/>
                      <prop type="password" name="vcenterPassword" secret="True"/>
                      <prop readOnly="True" type="string" name="vmotionNetwork"/>
                    </prop>
                    <prop type="object" name="sku" required="True">
                      <prop type="string" name="name" required="True"/>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceDelete ref="$Subresource">
            <json/>
          </instanceDelete>
        </operation>
        <operation operationId="PrivateClouds_CreateOrUpdate">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}">
            <request method="put">
              <path>
                <param type="string" name="privateCloudName" arg="$Path.privateCloudName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                  <format minLength="1"/>
                </param>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@PrivateCloud_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
      </command>
      <command name="show" version="2022-05-01" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.avs/privateclouds/{}" version="2022-05-01" subresource="properties.identitySources[]" swagger="mgmt-plane/vmware/ResourceProviders/Microsoft.AVS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQVZTL3ByaXZhdGVDbG91ZHMve3ByaXZhdGVDbG91ZE5hbWV9/V/MjAyMi0wNS0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.privateCloudName" options="private-cloud c" required="True" group="" idPart="name">
            <help short="Name of the private cloud"/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
          <arg type="string" var="$privateCloud.properties.identitySources[].name" options="name n" required="True" group="">
            <help short="The name of the identity source"/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="privateCloud">
            <prop type="array" name="properties.identitySources">
              <item type="object"/>
              <identifier type="string" name="[].name" arg="$privateCloud.properties.identitySources[].name" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="PrivateClouds_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}">
            <request method="get">
              <path>
                <param type="string" name="privateCloudName" arg="$Path.privateCloudName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                  <format minLength="1"/>
                </param>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-05-01&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="PrivateCloud_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.AVS/privateClouds/{}"/>
                    </prop>
                    <prop type="object" name="identity">
                      <prop readOnly="True" type="string" name="principalId"/>
                      <prop readOnly="True" type="string" name="tenantId"/>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;SystemAssigned&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" required="True" clientFlatten="True">
                      <prop type="object" name="availability">
                        <prop type="integer32" name="secondaryZone"/>
                        <prop type="string" name="strategy">
                          <enum>
                            <item value="&quot;DualZone&quot;"/>
                            <item value="&quot;SingleZone&quot;"/>
                          </enum>
                        </prop>
                        <prop type="integer32" name="zone"/>
                      </prop>
                      <prop type="object" name="circuit" cls="Circuit_read">
                        <prop readOnly="True" type="string" name="expressRouteID"/>
                        <prop readOnly="True" type="string" name="expressRoutePrivatePeeringID"/>
                        <prop readOnly="True" type="string" name="primarySubnet"/>
                        <prop readOnly="True" type="string" name="secondarySubnet"/>
                      </prop>
                      <prop type="object" name="encryption">
                        <prop type="object" name="keyVaultProperties">
                          <prop readOnly="True" type="string" name="autoDetectedKeyVersion"/>
                          <prop type="string" name="keyName"/>
                          <prop readOnly="True" type="string" name="keyState">
                            <enum>
                              <item value="&quot;AccessDenied&quot;"/>
                              <item value="&quot;Connected&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="keyVaultUrl"/>
                          <prop type="string" name="keyVersion"/>
                          <prop readOnly="True" type="string" name="versionType">
                            <enum>
                              <item value="&quot;AutoDetected&quot;"/>
                              <item value="&quot;Fixed&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                        <prop type="string" name="status">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="object" name="endpoints">
                        <prop readOnly="True" type="string" name="hcxCloudManager"/>
                        <prop readOnly="True" type="string" name="nsxtManager"/>
                        <prop readOnly="True" type="string" name="vcsa"/>
                      </prop>
                      <prop readOnly="True" type="array<string>" name="externalCloudLinks">
                        <item type="string"/>
                      </prop>
                      <prop type="array<object>" name="identitySources" identifiers="name">
                        <item type="object">
                          <prop type="string" name="alias" required="True"/>
                          <prop type="string" name="baseGroupDN" required="True"/>
                          <prop type="string" name="baseUserDN" required="True"/>
                          <prop type="string" name="domain" required="True"/>
                          <prop type="string" name="name" required="True"/>
                          <prop type="string" name="password" required="True" secret="True"/>
                          <prop type="string" name="primaryServer" required="True"/>
                          <prop type="string" name="secondaryServer"/>
                          <prop type="string" name="ssl">
                            <enum>
                              <item value="&quot;Disabled&quot;"/>
                              <item value="&quot;Enabled&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="username" required="True" secret="True"/>
                        </item>
                      </prop>
                      <prop type="string" name="internet">
                        <default value="&quot;Disabled&quot;"/>
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="managementCluster" required="True">
                        <prop readOnly="True" type="integer32" name="clusterId"/>
                        <prop type="integer32" name="clusterSize" required="True"/>
                        <prop type="array<string>" name="hosts">
                          <item type="string"/>
                        </prop>
                        <prop readOnly="True" type="string" name="provisioningState">
                          <enum>
                            <item value="&quot;Canceled&quot;"/>
                            <item value="&quot;Cancelled&quot;"/>
                            <item value="&quot;Deleting&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                            <item value="&quot;Updating&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="managementNetwork"/>
                      <prop type="string" name="networkBlock" required="True"/>
                      <prop readOnly="True" type="string" name="nsxPublicIpQuotaRaised">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="nsxtCertificateThumbprint"/>
                      <prop type="password" name="nsxtPassword" secret="True"/>
                      <prop readOnly="True" type="string" name="provisioningNetwork"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Building&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Cancelled&quot;"/>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Pending&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                      <prop type="@Circuit_read" name="secondaryCircuit"/>
                      <prop readOnly="True" type="string" name="vcenterCertificateThumbprint"/>
                      <prop type="password" name="vcenterPassword" secret="True"/>
                      <prop readOnly="True" type="string" name="vmotionNetwork"/>
                    </prop>
                    <prop type="object" name="sku" required="True">
                      <prop type="string" name="name" required="True"/>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
    </commandGroup>
  </commandGroup>
</CodeGen>
