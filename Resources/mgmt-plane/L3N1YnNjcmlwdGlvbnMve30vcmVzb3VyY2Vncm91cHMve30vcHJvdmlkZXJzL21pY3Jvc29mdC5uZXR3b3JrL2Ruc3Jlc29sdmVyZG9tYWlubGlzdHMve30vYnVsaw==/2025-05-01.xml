<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/dnsresolverdomainlists/{}/bulk" version="2025-05-01" swagger="mgmt-plane/dnsresolver/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9kbnNSZXNvbHZlckRvbWFpbkxpc3RzL3tkbnNSZXNvbHZlckRvbWFpbkxpc3ROYW1lfS9idWxr/V/MjAyNS0wNS0wMQ=="/>
  <commandGroup name="dns-resolver domain-list">
    <command name="bulk" version="2025-05-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/dnsresolverdomainlists/{}/bulk" version="2025-05-01" swagger="mgmt-plane/dnsresolver/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9kbnNSZXNvbHZlckRvbWFpbkxpc3RzL3tkbnNSZXNvbHZlckRvbWFpbkxpc3ROYW1lfS9idWxr/V/MjAyNS0wNS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Header.If-Match" options="if-match">
          <help short="ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes."/>
        </arg>
        <arg type="string" var="$Header.If-None-Match" options="if-none-match">
          <help short="Set to '*' to allow a new resource to be created, but to prevent updating an existing resource. Other values will be ignored."/>
        </arg>
        <arg type="string" var="$Path.dnsResolverDomainListName" options="dns-resolver-domain-list-name" required="True" idPart="name">
          <help short="The name of the DNS resolver domain list."/>
          <format pattern="^[a-zA-Z0-9]([a-zA-Z0-9_\-]*[a-zA-Z0-9])?$" maxLength="80" minLength="1"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$parameters.properties.action" options="action" required="True" group="Properties">
          <help short="The action to take in the request, Upload or Download."/>
          <enum>
            <item name="Download" value="&quot;Download&quot;"/>
            <item name="Upload" value="&quot;Upload&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$parameters.properties.storageUrl" options="storage-url" required="True" group="Properties">
          <help short="The storage account blob file URL to be used in the bulk upload or download request of DNS resolver domain list."/>
        </arg>
      </argGroup>
      <operation operationId="DnsResolverDomainLists_Bulk">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverDomainLists/{dnsResolverDomainListName}/bulk">
          <request method="post">
            <path>
              <param type="string" name="dnsResolverDomainListName" arg="$Path.dnsResolverDomainListName" required="True">
                <format pattern="^[a-zA-Z0-9]([a-zA-Z0-9_\-]*[a-zA-Z0-9])?$" maxLength="80" minLength="1"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2025-05-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <header>
              <param type="string" name="If-Match" arg="$Header.If-Match"/>
              <param type="string" name="If-None-Match" arg="$Header.If-None-Match"/>
            </header>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="string" name="action" arg="$parameters.properties.action" required="True">
                      <enum>
                        <item value="&quot;Download&quot;"/>
                        <item value="&quot;Upload&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="storageUrl" arg="$parameters.properties.storageUrl" required="True"/>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="string" name="etag"/>
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/dnsResolverDomainLists/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="array<string>" name="domains">
                      <item type="string"/>
                    </prop>
                    <prop readOnly="True" type="string" name="domainsUrl"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="resourceGuid"/>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response statusCode="202">
            <header>
              <item name="Location"/>
            </header>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
