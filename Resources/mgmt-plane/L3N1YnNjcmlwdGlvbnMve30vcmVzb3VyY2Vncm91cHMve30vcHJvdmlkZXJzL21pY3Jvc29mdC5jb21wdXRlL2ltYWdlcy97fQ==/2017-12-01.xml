<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/images/{}" version="2017-12-01" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS9pbWFnZXMve2ltYWdlTmFtZX0=/V/MjAxNy0xMi0wMQ=="/>
  <commandGroup name="image">
    <command name="show" version="2017-12-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/images/{}" version="2017-12-01" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS9pbWFnZXMve2ltYWdlTmFtZX0=/V/MjAxNy0xMi0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.imageName" options="image-name name n" required="True" idPart="name">
          <help short="The name of the image."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Query.expand" options="expand">
          <help short="The expand expression to apply on the operation."/>
        </arg>
      </argGroup>
      <operation operationId="Images_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}">
          <request method="get">
            <path>
              <param type="string" name="imageName" arg="$Path.imageName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <param type="string" name="$expand" arg="$Query.expand"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-12-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/images/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop type="object" name="sourceVirtualMachine" cls="SubResource_read">
                      <prop type="string" name="id"/>
                    </prop>
                    <prop type="object" name="storageProfile">
                      <prop type="array<object>" name="dataDisks">
                        <item type="object">
                          <prop type="string" name="blobUri"/>
                          <prop type="string" name="caching">
                            <enum>
                              <item value="&quot;None&quot;"/>
                              <item value="&quot;ReadOnly&quot;"/>
                              <item value="&quot;ReadWrite&quot;"/>
                            </enum>
                          </prop>
                          <prop type="integer32" name="diskSizeGB"/>
                          <prop type="integer32" name="lun" required="True"/>
                          <prop type="@SubResource_read" name="managedDisk"/>
                          <prop type="@SubResource_read" name="snapshot"/>
                          <prop type="string" name="storageAccountType">
                            <enum>
                              <item value="&quot;Premium_LRS&quot;"/>
                              <item value="&quot;Standard_LRS&quot;"/>
                            </enum>
                          </prop>
                        </item>
                      </prop>
                      <prop type="object" name="osDisk">
                        <prop type="string" name="blobUri"/>
                        <prop type="string" name="caching">
                          <enum>
                            <item value="&quot;None&quot;"/>
                            <item value="&quot;ReadOnly&quot;"/>
                            <item value="&quot;ReadWrite&quot;"/>
                          </enum>
                        </prop>
                        <prop type="integer32" name="diskSizeGB"/>
                        <prop type="@SubResource_read" name="managedDisk"/>
                        <prop type="string" name="osState" required="True">
                          <enum>
                            <item value="&quot;Generalized&quot;"/>
                            <item value="&quot;Specialized&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="osType" required="True">
                          <enum>
                            <item value="&quot;Linux&quot;"/>
                            <item value="&quot;Windows&quot;"/>
                          </enum>
                        </prop>
                        <prop type="@SubResource_read" name="snapshot"/>
                        <prop type="string" name="storageAccountType">
                          <enum>
                            <item value="&quot;Premium_LRS&quot;"/>
                            <item value="&quot;Standard_LRS&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="boolean" name="zoneResilient"/>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2017-12-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/images/{}" version="2017-12-01" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS9pbWFnZXMve2ltYWdlTmFtZX0=/V/MjAxNy0xMi0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.imageName" options="image-name name n" required="True" idPart="name">
          <help short="The name of the image."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Images_Delete">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}">
          <request method="delete">
            <path>
              <param type="string" name="imageName" arg="$Path.imageName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-12-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="dateTime" name="endTime"/>
                  <prop type="object" name="error">
                    <prop type="string" name="code"/>
                    <prop type="array<object>" name="details">
                      <item type="object">
                        <prop type="string" name="code"/>
                        <prop type="string" name="message"/>
                        <prop type="string" name="target"/>
                      </item>
                    </prop>
                    <prop type="object" name="innererror">
                      <prop type="string" name="errordetail"/>
                      <prop type="string" name="exceptiontype"/>
                    </prop>
                    <prop type="string" name="message"/>
                    <prop type="string" name="target"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop readOnly="True" type="dateTime" name="startTime"/>
                  <prop readOnly="True" type="string" name="status"/>
                </schema>
              </json>
            </body>
          </response>
          <response statusCode="202"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="create" version="2017-12-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/images/{}" version="2017-12-01" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS9pbWFnZXMve2ltYWdlTmFtZX0=/V/MjAxNy0xMi0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.imageName" options="image-name name n" required="True" idPart="name">
          <help short="The name of the image."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="ResourceLocation" var="$parameters.location" options="location l" required="True" group="Parameters">
          <help short="Resource location"/>
        </arg>
        <arg type="object" var="$parameters.tags" options="tags" group="Parameters">
          <help short="Resource tags"/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="object" var="$parameters.properties.sourceVirtualMachine" options="source-virtual-machine" group="Properties" cls="SubResource_create">
          <help short="The source virtual machine from which Image is created."/>
          <arg type="string" var="@SubResource_create.id" options="id">
            <help short="Resource Id"/>
          </arg>
        </arg>
        <arg type="object" var="$parameters.properties.storageProfile" options="storage-profile" group="Properties">
          <help short="Specifies the storage settings for the virtual machine disks."/>
          <arg type="array<object>" var="$parameters.properties.storageProfile.dataDisks" options="data-disks">
            <help short="Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview)."/>
            <item type="object">
              <arg type="string" var="$parameters.properties.storageProfile.dataDisks[].blobUri" options="blob-uri">
                <help short="The Virtual Hard Disk."/>
              </arg>
              <arg type="string" var="$parameters.properties.storageProfile.dataDisks[].caching" options="caching">
                <help short="Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**"/>
                <enum>
                  <item name="None" value="&quot;None&quot;"/>
                  <item name="ReadOnly" value="&quot;ReadOnly&quot;"/>
                  <item name="ReadWrite" value="&quot;ReadWrite&quot;"/>
                </enum>
              </arg>
              <arg type="integer32" var="$parameters.properties.storageProfile.dataDisks[].diskSizeGB" options="disk-size-gb">
                <help short="Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB"/>
              </arg>
              <arg type="integer32" var="$parameters.properties.storageProfile.dataDisks[].lun" options="lun" required="True">
                <help short="Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM."/>
              </arg>
              <arg type="@SubResource_create" var="$parameters.properties.storageProfile.dataDisks[].managedDisk" options="managed-disk">
                <help short="The managedDisk."/>
              </arg>
              <arg type="@SubResource_create" var="$parameters.properties.storageProfile.dataDisks[].snapshot" options="snapshot">
                <help short="The snapshot."/>
              </arg>
              <arg type="string" var="$parameters.properties.storageProfile.dataDisks[].storageAccountType" options="storage-account-type">
                <help short="Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk."/>
                <enum>
                  <item name="Premium_LRS" value="&quot;Premium_LRS&quot;"/>
                  <item name="Standard_LRS" value="&quot;Standard_LRS&quot;"/>
                </enum>
              </arg>
            </item>
          </arg>
          <arg type="object" var="$parameters.properties.storageProfile.osDisk" options="os-disk">
            <help short="Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview)."/>
            <arg type="string" var="$parameters.properties.storageProfile.osDisk.blobUri" options="blob-uri">
              <help short="The Virtual Hard Disk."/>
            </arg>
            <arg type="string" var="$parameters.properties.storageProfile.osDisk.caching" options="caching">
              <help short="Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**"/>
              <enum>
                <item name="None" value="&quot;None&quot;"/>
                <item name="ReadOnly" value="&quot;ReadOnly&quot;"/>
                <item name="ReadWrite" value="&quot;ReadWrite&quot;"/>
              </enum>
            </arg>
            <arg type="integer32" var="$parameters.properties.storageProfile.osDisk.diskSizeGB" options="disk-size-gb">
              <help short="Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB"/>
            </arg>
            <arg type="@SubResource_create" var="$parameters.properties.storageProfile.osDisk.managedDisk" options="managed-disk">
              <help short="The managedDisk."/>
            </arg>
            <arg type="string" var="$parameters.properties.storageProfile.osDisk.osState" options="os-state" required="True">
              <help short="The OS State. For managed images, use Generalized."/>
              <enum>
                <item name="Generalized" value="&quot;Generalized&quot;"/>
                <item name="Specialized" value="&quot;Specialized&quot;"/>
              </enum>
            </arg>
            <arg type="string" var="$parameters.properties.storageProfile.osDisk.osType" options="os-type" required="True">
              <help short="This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**"/>
              <enum>
                <item name="Linux" value="&quot;Linux&quot;"/>
                <item name="Windows" value="&quot;Windows&quot;"/>
              </enum>
            </arg>
            <arg type="@SubResource_create" var="$parameters.properties.storageProfile.osDisk.snapshot" options="snapshot">
              <help short="The snapshot."/>
            </arg>
            <arg type="string" var="$parameters.properties.storageProfile.osDisk.storageAccountType" options="storage-account-type">
              <help short="Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk."/>
              <enum>
                <item name="Premium_LRS" value="&quot;Premium_LRS&quot;"/>
                <item name="Standard_LRS" value="&quot;Standard_LRS&quot;"/>
              </enum>
            </arg>
          </arg>
          <arg type="boolean" var="$parameters.properties.storageProfile.zoneResilient" options="zone-resilient">
            <help short="Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS)."/>
          </arg>
        </arg>
      </argGroup>
      <operation operationId="Images_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}">
          <request method="put">
            <path>
              <param type="string" name="imageName" arg="$Path.imageName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-12-01&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="ResourceLocation" name="location" arg="$parameters.location" required="True"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="sourceVirtualMachine" arg="$parameters.properties.sourceVirtualMachine" cls="SubResource_create">
                      <prop type="string" name="id" arg="@SubResource_create.id"/>
                    </prop>
                    <prop type="object" name="storageProfile" arg="$parameters.properties.storageProfile">
                      <prop type="array<object>" name="dataDisks" arg="$parameters.properties.storageProfile.dataDisks">
                        <item type="object">
                          <prop type="string" name="blobUri" arg="$parameters.properties.storageProfile.dataDisks[].blobUri"/>
                          <prop type="string" name="caching" arg="$parameters.properties.storageProfile.dataDisks[].caching">
                            <enum>
                              <item value="&quot;None&quot;"/>
                              <item value="&quot;ReadOnly&quot;"/>
                              <item value="&quot;ReadWrite&quot;"/>
                            </enum>
                          </prop>
                          <prop type="integer32" name="diskSizeGB" arg="$parameters.properties.storageProfile.dataDisks[].diskSizeGB"/>
                          <prop type="integer32" name="lun" arg="$parameters.properties.storageProfile.dataDisks[].lun" required="True"/>
                          <prop type="@SubResource_create" name="managedDisk" arg="$parameters.properties.storageProfile.dataDisks[].managedDisk"/>
                          <prop type="@SubResource_create" name="snapshot" arg="$parameters.properties.storageProfile.dataDisks[].snapshot"/>
                          <prop type="string" name="storageAccountType" arg="$parameters.properties.storageProfile.dataDisks[].storageAccountType">
                            <enum>
                              <item value="&quot;Premium_LRS&quot;"/>
                              <item value="&quot;Standard_LRS&quot;"/>
                            </enum>
                          </prop>
                        </item>
                      </prop>
                      <prop type="object" name="osDisk" arg="$parameters.properties.storageProfile.osDisk">
                        <prop type="string" name="blobUri" arg="$parameters.properties.storageProfile.osDisk.blobUri"/>
                        <prop type="string" name="caching" arg="$parameters.properties.storageProfile.osDisk.caching">
                          <enum>
                            <item value="&quot;None&quot;"/>
                            <item value="&quot;ReadOnly&quot;"/>
                            <item value="&quot;ReadWrite&quot;"/>
                          </enum>
                        </prop>
                        <prop type="integer32" name="diskSizeGB" arg="$parameters.properties.storageProfile.osDisk.diskSizeGB"/>
                        <prop type="@SubResource_create" name="managedDisk" arg="$parameters.properties.storageProfile.osDisk.managedDisk"/>
                        <prop type="string" name="osState" arg="$parameters.properties.storageProfile.osDisk.osState" required="True">
                          <enum>
                            <item value="&quot;Generalized&quot;"/>
                            <item value="&quot;Specialized&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="osType" arg="$parameters.properties.storageProfile.osDisk.osType" required="True">
                          <enum>
                            <item value="&quot;Linux&quot;"/>
                            <item value="&quot;Windows&quot;"/>
                          </enum>
                        </prop>
                        <prop type="@SubResource_create" name="snapshot" arg="$parameters.properties.storageProfile.osDisk.snapshot"/>
                        <prop type="string" name="storageAccountType" arg="$parameters.properties.storageProfile.osDisk.storageAccountType">
                          <enum>
                            <item value="&quot;Premium_LRS&quot;"/>
                            <item value="&quot;Standard_LRS&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="boolean" name="zoneResilient" arg="$parameters.properties.storageProfile.zoneResilient"/>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$parameters.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/images/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop type="object" name="sourceVirtualMachine" cls="SubResource_read">
                      <prop type="string" name="id"/>
                    </prop>
                    <prop type="object" name="storageProfile">
                      <prop type="array<object>" name="dataDisks">
                        <item type="object">
                          <prop type="string" name="blobUri"/>
                          <prop type="string" name="caching">
                            <enum>
                              <item value="&quot;None&quot;"/>
                              <item value="&quot;ReadOnly&quot;"/>
                              <item value="&quot;ReadWrite&quot;"/>
                            </enum>
                          </prop>
                          <prop type="integer32" name="diskSizeGB"/>
                          <prop type="integer32" name="lun" required="True"/>
                          <prop type="@SubResource_read" name="managedDisk"/>
                          <prop type="@SubResource_read" name="snapshot"/>
                          <prop type="string" name="storageAccountType">
                            <enum>
                              <item value="&quot;Premium_LRS&quot;"/>
                              <item value="&quot;Standard_LRS&quot;"/>
                            </enum>
                          </prop>
                        </item>
                      </prop>
                      <prop type="object" name="osDisk">
                        <prop type="string" name="blobUri"/>
                        <prop type="string" name="caching">
                          <enum>
                            <item value="&quot;None&quot;"/>
                            <item value="&quot;ReadOnly&quot;"/>
                            <item value="&quot;ReadWrite&quot;"/>
                          </enum>
                        </prop>
                        <prop type="integer32" name="diskSizeGB"/>
                        <prop type="@SubResource_read" name="managedDisk"/>
                        <prop type="string" name="osState" required="True">
                          <enum>
                            <item value="&quot;Generalized&quot;"/>
                            <item value="&quot;Specialized&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="osType" required="True">
                          <enum>
                            <item value="&quot;Linux&quot;"/>
                            <item value="&quot;Windows&quot;"/>
                          </enum>
                        </prop>
                        <prop type="@SubResource_read" name="snapshot"/>
                        <prop type="string" name="storageAccountType">
                          <enum>
                            <item value="&quot;Premium_LRS&quot;"/>
                            <item value="&quot;Standard_LRS&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="boolean" name="zoneResilient"/>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2017-12-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/images/{}" version="2017-12-01" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS9pbWFnZXMve2ltYWdlTmFtZX0=/V/MjAxNy0xMi0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.imageName" options="image-name name n" required="True" idPart="name">
          <help short="The name of the image."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="ResourceLocation" var="$parameters.location" options="location l" group="Parameters">
          <help short="Resource location"/>
        </arg>
        <arg nullable="True" type="object" var="$parameters.tags" options="tags" group="Parameters">
          <help short="Resource tags"/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="object" var="$parameters.properties.sourceVirtualMachine" options="source-virtual-machine" group="Properties" cls="SubResource_update">
          <help short="The source virtual machine from which Image is created."/>
          <arg nullable="True" type="string" var="@SubResource_update.id" options="id">
            <help short="Resource Id"/>
          </arg>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.storageProfile" options="storage-profile" group="Properties">
          <help short="Specifies the storage settings for the virtual machine disks."/>
          <arg nullable="True" type="array<object>" var="$parameters.properties.storageProfile.dataDisks" options="data-disks">
            <help short="Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview)."/>
            <item nullable="True" type="object">
              <arg nullable="True" type="string" var="$parameters.properties.storageProfile.dataDisks[].blobUri" options="blob-uri">
                <help short="The Virtual Hard Disk."/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.storageProfile.dataDisks[].caching" options="caching">
                <help short="Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**"/>
                <enum>
                  <item name="None" value="&quot;None&quot;"/>
                  <item name="ReadOnly" value="&quot;ReadOnly&quot;"/>
                  <item name="ReadWrite" value="&quot;ReadWrite&quot;"/>
                </enum>
              </arg>
              <arg nullable="True" type="integer32" var="$parameters.properties.storageProfile.dataDisks[].diskSizeGB" options="disk-size-gb">
                <help short="Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB"/>
              </arg>
              <arg type="integer32" var="$parameters.properties.storageProfile.dataDisks[].lun" options="lun">
                <help short="Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM."/>
              </arg>
              <arg nullable="True" type="@SubResource_update" var="$parameters.properties.storageProfile.dataDisks[].managedDisk" options="managed-disk">
                <help short="The managedDisk."/>
              </arg>
              <arg nullable="True" type="@SubResource_update" var="$parameters.properties.storageProfile.dataDisks[].snapshot" options="snapshot">
                <help short="The snapshot."/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.storageProfile.dataDisks[].storageAccountType" options="storage-account-type">
                <help short="Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk."/>
                <enum>
                  <item name="Premium_LRS" value="&quot;Premium_LRS&quot;"/>
                  <item name="Standard_LRS" value="&quot;Standard_LRS&quot;"/>
                </enum>
              </arg>
            </item>
          </arg>
          <arg nullable="True" type="object" var="$parameters.properties.storageProfile.osDisk" options="os-disk">
            <help short="Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview)."/>
            <arg nullable="True" type="string" var="$parameters.properties.storageProfile.osDisk.blobUri" options="blob-uri">
              <help short="The Virtual Hard Disk."/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.storageProfile.osDisk.caching" options="caching">
              <help short="Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**"/>
              <enum>
                <item name="None" value="&quot;None&quot;"/>
                <item name="ReadOnly" value="&quot;ReadOnly&quot;"/>
                <item name="ReadWrite" value="&quot;ReadWrite&quot;"/>
              </enum>
            </arg>
            <arg nullable="True" type="integer32" var="$parameters.properties.storageProfile.osDisk.diskSizeGB" options="disk-size-gb">
              <help short="Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB"/>
            </arg>
            <arg nullable="True" type="@SubResource_update" var="$parameters.properties.storageProfile.osDisk.managedDisk" options="managed-disk">
              <help short="The managedDisk."/>
            </arg>
            <arg type="string" var="$parameters.properties.storageProfile.osDisk.osState" options="os-state">
              <help short="The OS State. For managed images, use Generalized."/>
              <enum>
                <item name="Generalized" value="&quot;Generalized&quot;"/>
                <item name="Specialized" value="&quot;Specialized&quot;"/>
              </enum>
            </arg>
            <arg type="string" var="$parameters.properties.storageProfile.osDisk.osType" options="os-type">
              <help short="This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**"/>
              <enum>
                <item name="Linux" value="&quot;Linux&quot;"/>
                <item name="Windows" value="&quot;Windows&quot;"/>
              </enum>
            </arg>
            <arg nullable="True" type="@SubResource_update" var="$parameters.properties.storageProfile.osDisk.snapshot" options="snapshot">
              <help short="The snapshot."/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.storageProfile.osDisk.storageAccountType" options="storage-account-type">
              <help short="Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk."/>
              <enum>
                <item name="Premium_LRS" value="&quot;Premium_LRS&quot;"/>
                <item name="Standard_LRS" value="&quot;Standard_LRS&quot;"/>
              </enum>
            </arg>
          </arg>
          <arg nullable="True" type="boolean" var="$parameters.properties.storageProfile.zoneResilient" options="zone-resilient">
            <help short="Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS)."/>
          </arg>
        </arg>
      </argGroup>
      <operation operationId="Images_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}">
          <request method="get">
            <path>
              <param type="string" name="imageName" arg="$Path.imageName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-12-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="Image_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/images/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop type="object" name="sourceVirtualMachine" cls="SubResource_read">
                      <prop type="string" name="id"/>
                    </prop>
                    <prop type="object" name="storageProfile">
                      <prop type="array<object>" name="dataDisks">
                        <item type="object">
                          <prop type="string" name="blobUri"/>
                          <prop type="string" name="caching">
                            <enum>
                              <item value="&quot;None&quot;"/>
                              <item value="&quot;ReadOnly&quot;"/>
                              <item value="&quot;ReadWrite&quot;"/>
                            </enum>
                          </prop>
                          <prop type="integer32" name="diskSizeGB"/>
                          <prop type="integer32" name="lun" required="True"/>
                          <prop type="@SubResource_read" name="managedDisk"/>
                          <prop type="@SubResource_read" name="snapshot"/>
                          <prop type="string" name="storageAccountType">
                            <enum>
                              <item value="&quot;Premium_LRS&quot;"/>
                              <item value="&quot;Standard_LRS&quot;"/>
                            </enum>
                          </prop>
                        </item>
                      </prop>
                      <prop type="object" name="osDisk">
                        <prop type="string" name="blobUri"/>
                        <prop type="string" name="caching">
                          <enum>
                            <item value="&quot;None&quot;"/>
                            <item value="&quot;ReadOnly&quot;"/>
                            <item value="&quot;ReadWrite&quot;"/>
                          </enum>
                        </prop>
                        <prop type="integer32" name="diskSizeGB"/>
                        <prop type="@SubResource_read" name="managedDisk"/>
                        <prop type="string" name="osState" required="True">
                          <enum>
                            <item value="&quot;Generalized&quot;"/>
                            <item value="&quot;Specialized&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="osType" required="True">
                          <enum>
                            <item value="&quot;Linux&quot;"/>
                            <item value="&quot;Windows&quot;"/>
                          </enum>
                        </prop>
                        <prop type="@SubResource_read" name="snapshot"/>
                        <prop type="string" name="storageAccountType">
                          <enum>
                            <item value="&quot;Premium_LRS&quot;"/>
                            <item value="&quot;Standard_LRS&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="boolean" name="zoneResilient"/>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="parameters" required="True" clientFlatten="True">
              <prop type="ResourceLocation" name="location" arg="$parameters.location" required="True"/>
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="object" name="sourceVirtualMachine" arg="$parameters.properties.sourceVirtualMachine" cls="SubResource_update">
                  <prop type="string" name="id" arg="@SubResource_update.id"/>
                </prop>
                <prop type="object" name="storageProfile" arg="$parameters.properties.storageProfile">
                  <prop type="array<object>" name="dataDisks" arg="$parameters.properties.storageProfile.dataDisks">
                    <item type="object">
                      <prop type="string" name="blobUri" arg="$parameters.properties.storageProfile.dataDisks[].blobUri"/>
                      <prop type="string" name="caching" arg="$parameters.properties.storageProfile.dataDisks[].caching">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;ReadOnly&quot;"/>
                          <item value="&quot;ReadWrite&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer32" name="diskSizeGB" arg="$parameters.properties.storageProfile.dataDisks[].diskSizeGB"/>
                      <prop type="integer32" name="lun" arg="$parameters.properties.storageProfile.dataDisks[].lun" required="True"/>
                      <prop type="@SubResource_update" name="managedDisk" arg="$parameters.properties.storageProfile.dataDisks[].managedDisk"/>
                      <prop type="@SubResource_update" name="snapshot" arg="$parameters.properties.storageProfile.dataDisks[].snapshot"/>
                      <prop type="string" name="storageAccountType" arg="$parameters.properties.storageProfile.dataDisks[].storageAccountType">
                        <enum>
                          <item value="&quot;Premium_LRS&quot;"/>
                          <item value="&quot;Standard_LRS&quot;"/>
                        </enum>
                      </prop>
                    </item>
                  </prop>
                  <prop type="object" name="osDisk" arg="$parameters.properties.storageProfile.osDisk">
                    <prop type="string" name="blobUri" arg="$parameters.properties.storageProfile.osDisk.blobUri"/>
                    <prop type="string" name="caching" arg="$parameters.properties.storageProfile.osDisk.caching">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;ReadOnly&quot;"/>
                        <item value="&quot;ReadWrite&quot;"/>
                      </enum>
                    </prop>
                    <prop type="integer32" name="diskSizeGB" arg="$parameters.properties.storageProfile.osDisk.diskSizeGB"/>
                    <prop type="@SubResource_update" name="managedDisk" arg="$parameters.properties.storageProfile.osDisk.managedDisk"/>
                    <prop type="string" name="osState" arg="$parameters.properties.storageProfile.osDisk.osState" required="True">
                      <enum>
                        <item value="&quot;Generalized&quot;"/>
                        <item value="&quot;Specialized&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="osType" arg="$parameters.properties.storageProfile.osDisk.osType" required="True">
                      <enum>
                        <item value="&quot;Linux&quot;"/>
                        <item value="&quot;Windows&quot;"/>
                      </enum>
                    </prop>
                    <prop type="@SubResource_update" name="snapshot" arg="$parameters.properties.storageProfile.osDisk.snapshot"/>
                    <prop type="string" name="storageAccountType" arg="$parameters.properties.storageProfile.osDisk.storageAccountType">
                      <enum>
                        <item value="&quot;Premium_LRS&quot;"/>
                        <item value="&quot;Standard_LRS&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="boolean" name="zoneResilient" arg="$parameters.properties.storageProfile.zoneResilient"/>
                </prop>
              </prop>
              <prop type="object" name="tags" arg="$parameters.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="Images_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}">
          <request method="put">
            <path>
              <param type="string" name="imageName" arg="$Path.imageName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-12-01&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@Image_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
