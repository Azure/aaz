<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/nginx.nginxplus/nginxdeployments/{}/configurations/{}" version="2024-09-01-preview" swagger="mgmt-plane/nginx/ResourceProviders/NGINX.NGINXPLUS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9OZ2lueC5OZ2lueFBsdXMvbmdpbnhEZXBsb3ltZW50cy97ZGVwbG95bWVudE5hbWV9L2NvbmZpZ3VyYXRpb25zL3tjb25maWd1cmF0aW9uTmFtZX0=/V/MjAyNC0wOS0wMS1wcmV2aWV3"/>
  <commandGroup name="nginx deployment configuration">
    <command name="show" version="2024-09-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/nginx.nginxplus/nginxdeployments/{}/configurations/{}" version="2024-09-01-preview" swagger="mgmt-plane/nginx/ResourceProviders/NGINX.NGINXPLUS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9OZ2lueC5OZ2lueFBsdXMvbmdpbnhEZXBsb3ltZW50cy97ZGVwbG95bWVudE5hbWV9L2NvbmZpZ3VyYXRpb25zL3tjb25maWd1cmF0aW9uTmFtZX0=/V/MjAyNC0wOS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.configurationName" options="configuration-name name n" required="True" idPart="child_name_1">
          <help short="The name of configuration, only 'default' is supported value due to the singleton of Nginx conf"/>
        </arg>
        <arg type="string" var="$Path.deploymentName" options="deployment-name" required="True" idPart="name">
          <help short="The name of targeted Nginx deployment"/>
          <format pattern="^([a-z0-9A-Z][a-z0-9A-Z-]{0,28}[a-z0-9A-Z]|[a-z0-9A-Z])$"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Configurations_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{deploymentName}/configurations/{configurationName}">
          <request method="get">
            <path>
              <param type="string" name="configurationName" arg="$Path.configurationName" required="True"/>
              <param type="string" name="deploymentName" arg="$Path.deploymentName" required="True">
                <format pattern="^([a-z0-9A-Z][a-z0-9A-Z-]{0,28}[a-z0-9A-Z]|[a-z0-9A-Z])$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-09-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Nginx.NginxPlus/nginxDeployments/{}/configurations/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties">
                    <prop type="array<object>" name="files">
                      <item type="object">
                        <prop type="string" name="content"/>
                        <prop type="string" name="virtualPath"/>
                      </item>
                    </prop>
                    <prop type="object" name="package">
                      <prop type="string" name="data"/>
                      <prop type="array<string>" name="protectedFiles">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="array<object>" name="protectedFiles">
                      <item type="object">
                        <prop type="string" name="contentHash"/>
                        <prop type="string" name="virtualPath"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="rootFile"/>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2024-09-01-preview" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/nginx.nginxplus/nginxdeployments/{}/configurations/{}" version="2024-09-01-preview" swagger="mgmt-plane/nginx/ResourceProviders/NGINX.NGINXPLUS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9OZ2lueC5OZ2lueFBsdXMvbmdpbnhEZXBsb3ltZW50cy97ZGVwbG95bWVudE5hbWV9L2NvbmZpZ3VyYXRpb25zL3tjb25maWd1cmF0aW9uTmFtZX0=/V/MjAyNC0wOS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.configurationName" options="configuration-name name n" required="True" idPart="child_name_1">
          <help short="The name of configuration, only 'default' is supported value due to the singleton of Nginx conf"/>
        </arg>
        <arg type="string" var="$Path.deploymentName" options="deployment-name" required="True" idPart="name">
          <help short="The name of targeted Nginx deployment"/>
          <format pattern="^([a-z0-9A-Z][a-z0-9A-Z-]{0,28}[a-z0-9A-Z]|[a-z0-9A-Z])$"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Configurations_Delete">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{deploymentName}/configurations/{configurationName}">
          <request method="delete">
            <path>
              <param type="string" name="configurationName" arg="$Path.configurationName" required="True"/>
              <param type="string" name="deploymentName" arg="$Path.deploymentName" required="True">
                <format pattern="^([a-z0-9A-Z][a-z0-9A-Z-]{0,28}[a-z0-9A-Z]|[a-z0-9A-Z])$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-09-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="202"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2024-09-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/nginx.nginxplus/nginxdeployments/{}/configurations/{}" version="2024-09-01-preview" swagger="mgmt-plane/nginx/ResourceProviders/NGINX.NGINXPLUS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9OZ2lueC5OZ2lueFBsdXMvbmdpbnhEZXBsb3ltZW50cy97ZGVwbG95bWVudE5hbWV9L2NvbmZpZ3VyYXRpb25zL3tjb25maWd1cmF0aW9uTmFtZX0=/V/MjAyNC0wOS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.configurationName" options="configuration-name name n" required="True" idPart="child_name_1">
          <help short="The name of configuration, only 'default' is supported value due to the singleton of Nginx conf"/>
        </arg>
        <arg type="string" var="$Path.deploymentName" options="deployment-name" required="True" idPart="name">
          <help short="The name of targeted Nginx deployment"/>
          <format pattern="^([a-z0-9A-Z][a-z0-9A-Z-]{0,28}[a-z0-9A-Z]|[a-z0-9A-Z])$"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Properties">
        <arg type="array<object>" var="$body.properties.files" options="files" group="Properties">
          <help short="Config files. Cannot be used with --package, only --protected-files" lines="file>&quot;,&quot;virtual-path&quot;:&quot;<path>&quot;}]. [{&quot;content&quot;:&quot;<Base64 virtual-path multi-file references directive. set-up, file(s) include --files content should config Usage: config files match file. needs other root root file have One the the For the the of to to in an of a"/>
          <item type="object">
            <arg type="string" var="$body.properties.files[].content" options="content"/>
            <arg type="string" var="$body.properties.files[].virtualPath" options="virtual-path"/>
          </item>
        </arg>
        <arg type="object" var="$body.properties.package" options="package" group="Properties">
          <help short="Compressed files. Cannot be used with --files or --protected-files" lines="Usage: --package data=<base64 string with content> protected-files=<base64 string with content>"/>
          <arg type="string" var="$body.properties.package.data" options="data"/>
          <arg type="array<string>" var="$body.properties.package.protectedFiles" options="protected-files">
            <item type="string"/>
          </arg>
        </arg>
        <arg type="array<object>" var="$body.properties.protectedFiles" options="protected-files" group="Properties">
          <help short="Protected files" lines="Usage: --protected-files [{&quot;content&quot;:&quot;<Base64 content of config file>&quot;,&quot;virtual-path&quot;:&quot;<path>&quot;}]."/>
          <item type="object">
            <arg type="string" var="$body.properties.protectedFiles[].content" options="content">
              <help short="The content of the protected file. This value is a PUT only value. If you perform a GET request on this value, it will be empty because it is a protected file."/>
            </arg>
            <arg type="string" var="$body.properties.protectedFiles[].contentHash" options="content-hash">
              <help short="The hash of the content of the file. This value is used to determine if the file has changed."/>
            </arg>
            <arg type="string" var="$body.properties.protectedFiles[].virtualPath" options="virtual-path">
              <help short="The virtual path of the protected file."/>
            </arg>
          </item>
        </arg>
        <arg type="string" var="$body.properties.rootFile" options="root-file" group="Properties">
          <help short="Required. The root file that should align with your Nginx configuration structure"/>
        </arg>
      </argGroup>
      <operation operationId="Configurations_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{deploymentName}/configurations/{configurationName}">
          <request method="put">
            <path>
              <param type="string" name="configurationName" arg="$Path.configurationName" required="True"/>
              <param type="string" name="deploymentName" arg="$Path.deploymentName" required="True">
                <format pattern="^([a-z0-9A-Z][a-z0-9A-Z-]{0,28}[a-z0-9A-Z]|[a-z0-9A-Z])$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-09-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="body" clientFlatten="True">
                  <prop type="object" name="properties">
                    <prop type="array<object>" name="files" arg="$body.properties.files">
                      <item type="object">
                        <prop type="string" name="content" arg="$body.properties.files[].content"/>
                        <prop type="string" name="virtualPath" arg="$body.properties.files[].virtualPath"/>
                      </item>
                    </prop>
                    <prop type="object" name="package" arg="$body.properties.package">
                      <prop type="string" name="data" arg="$body.properties.package.data"/>
                      <prop type="array<string>" name="protectedFiles" arg="$body.properties.package.protectedFiles">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="array<object>" name="protectedFiles" arg="$body.properties.protectedFiles">
                      <item type="object">
                        <prop type="string" name="content" arg="$body.properties.protectedFiles[].content" secret="True"/>
                        <prop type="string" name="contentHash" arg="$body.properties.protectedFiles[].contentHash"/>
                        <prop type="string" name="virtualPath" arg="$body.properties.protectedFiles[].virtualPath"/>
                      </item>
                    </prop>
                    <prop type="string" name="rootFile" arg="$body.properties.rootFile"/>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Nginx.NginxPlus/nginxDeployments/{}/configurations/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties">
                    <prop type="array<object>" name="files">
                      <item type="object">
                        <prop type="string" name="content"/>
                        <prop type="string" name="virtualPath"/>
                      </item>
                    </prop>
                    <prop type="object" name="package">
                      <prop type="string" name="data"/>
                      <prop type="array<string>" name="protectedFiles">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="array<object>" name="protectedFiles">
                      <item type="object">
                        <prop type="string" name="contentHash"/>
                        <prop type="string" name="virtualPath"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="rootFile"/>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2024-09-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/nginx.nginxplus/nginxdeployments/{}/configurations/{}" version="2024-09-01-preview" swagger="mgmt-plane/nginx/ResourceProviders/NGINX.NGINXPLUS/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9OZ2lueC5OZ2lueFBsdXMvbmdpbnhEZXBsb3ltZW50cy97ZGVwbG95bWVudE5hbWV9L2NvbmZpZ3VyYXRpb25zL3tjb25maWd1cmF0aW9uTmFtZX0=/V/MjAyNC0wOS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.configurationName" options="configuration-name name n" required="True" idPart="child_name_1">
          <help short="The name of configuration, only 'default' is supported value due to the singleton of Nginx conf"/>
        </arg>
        <arg type="string" var="$Path.deploymentName" options="deployment-name" required="True" idPart="name">
          <help short="The name of targeted Nginx deployment"/>
          <format pattern="^([a-z0-9A-Z][a-z0-9A-Z-]{0,28}[a-z0-9A-Z]|[a-z0-9A-Z])$"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="array<object>" var="$body.properties.files" options="files" group="Properties">
          <help short="This is an array of files required for the config set-up. Cannot be used with packages" lines="file>&quot;,&quot;virtual-path&quot;:&quot;<path>&quot;}]. [{&quot;content&quot;:&quot;<Base64 virtual-path multi-file references directive. set-up, file(s) include --files content should config Usage: config files match file. needs other root root file have One the the For the the of to to in an of a"/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$body.properties.files[].content" options="content"/>
            <arg nullable="True" type="string" var="$body.properties.files[].virtualPath" options="virtual-path"/>
          </item>
        </arg>
        <arg nullable="True" type="object" var="$body.properties.package" options="package" group="Properties">
          <help short="Compressed files"/>
          <arg nullable="True" type="string" var="$body.properties.package.data" options="data"/>
          <arg nullable="True" type="array<string>" var="$body.properties.package.protectedFiles" options="protected-files">
            <item nullable="True" type="string"/>
          </arg>
        </arg>
        <arg nullable="True" type="array<object>" var="$body.properties.protectedFiles" options="protected-files" group="Properties">
          <help short="Protected files"/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$body.properties.protectedFiles[].content" options="content">
              <help short="The content of the protected file. This value is a PUT only value. If you perform a GET request on this value, it will be empty because it is a protected file."/>
            </arg>
            <arg nullable="True" type="string" var="$body.properties.protectedFiles[].contentHash" options="content-hash">
              <help short="The hash of the content of the file. This value is used to determine if the file has changed."/>
            </arg>
            <arg nullable="True" type="string" var="$body.properties.protectedFiles[].virtualPath" options="virtual-path">
              <help short="The virtual path of the protected file."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="string" var="$body.properties.rootFile" options="root-file" group="Properties"/>
      </argGroup>
      <operation operationId="Configurations_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{deploymentName}/configurations/{configurationName}">
          <request method="get">
            <path>
              <param type="string" name="configurationName" arg="$Path.configurationName" required="True"/>
              <param type="string" name="deploymentName" arg="$Path.deploymentName" required="True">
                <format pattern="^([a-z0-9A-Z][a-z0-9A-Z-]{0,28}[a-z0-9A-Z]|[a-z0-9A-Z])$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-09-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="NginxConfigurationResponse_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Nginx.NginxPlus/nginxDeployments/{}/configurations/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties">
                    <prop type="array<object>" name="files">
                      <item type="object">
                        <prop type="string" name="content"/>
                        <prop type="string" name="virtualPath"/>
                      </item>
                    </prop>
                    <prop type="object" name="package">
                      <prop type="string" name="data"/>
                      <prop type="array<string>" name="protectedFiles">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop type="array<object>" name="protectedFiles">
                      <item type="object">
                        <prop type="string" name="contentHash"/>
                        <prop type="string" name="virtualPath"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="rootFile"/>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="body" clientFlatten="True">
              <prop type="object" name="properties">
                <prop type="array<object>" name="files" arg="$body.properties.files">
                  <item type="object">
                    <prop type="string" name="content" arg="$body.properties.files[].content"/>
                    <prop type="string" name="virtualPath" arg="$body.properties.files[].virtualPath"/>
                  </item>
                </prop>
                <prop type="object" name="package" arg="$body.properties.package">
                  <prop type="string" name="data" arg="$body.properties.package.data"/>
                  <prop type="array<string>" name="protectedFiles" arg="$body.properties.package.protectedFiles">
                    <item type="string"/>
                  </prop>
                </prop>
                <prop type="array<object>" name="protectedFiles" arg="$body.properties.protectedFiles">
                  <item type="object">
                    <prop type="string" name="content" arg="$body.properties.protectedFiles[].content" secret="True"/>
                    <prop type="string" name="contentHash" arg="$body.properties.protectedFiles[].contentHash"/>
                    <prop type="string" name="virtualPath" arg="$body.properties.protectedFiles[].virtualPath"/>
                  </item>
                </prop>
                <prop type="string" name="rootFile" arg="$body.properties.rootFile"/>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="Configurations_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{deploymentName}/configurations/{configurationName}">
          <request method="put">
            <path>
              <param type="string" name="configurationName" arg="$Path.configurationName" required="True"/>
              <param type="string" name="deploymentName" arg="$Path.deploymentName" required="True">
                <format pattern="^([a-z0-9A-Z][a-z0-9A-Z-]{0,28}[a-z0-9A-Z]|[a-z0-9A-Z])$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-09-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@NginxConfigurationResponse_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
