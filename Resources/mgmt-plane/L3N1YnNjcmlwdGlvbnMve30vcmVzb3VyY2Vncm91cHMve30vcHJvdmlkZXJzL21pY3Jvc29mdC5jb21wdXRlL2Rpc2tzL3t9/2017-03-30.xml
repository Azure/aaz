<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/disks/{}" version="2017-03-30" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS9kaXNrcy97ZGlza05hbWV9/V/MjAxNy0wMy0zMA=="/>
  <commandGroup name="disk">
    <command name="show" version="2017-03-30">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/disks/{}" version="2017-03-30" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS9kaXNrcy97ZGlza05hbWV9/V/MjAxNy0wMy0zMA=="/>
      <argGroup name="">
        <arg type="string" var="$Path.diskName" options="disk-name name n" required="True" idPart="name">
          <help short="The name of the managed disk that is being created. The name can't be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Disks_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}">
          <request method="get">
            <path>
              <param type="string" name="diskName" arg="$Path.diskName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-03-30&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/disks/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="managedBy"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="creationData" required="True">
                      <prop type="string" name="createOption" required="True">
                        <enum>
                          <item value="&quot;Attach&quot;"/>
                          <item value="&quot;Copy&quot;"/>
                          <item value="&quot;Empty&quot;"/>
                          <item value="&quot;FromImage&quot;"/>
                          <item value="&quot;Import&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="imageReference">
                        <prop type="string" name="id" required="True"/>
                        <prop type="integer32" name="lun"/>
                      </prop>
                      <prop type="string" name="sourceResourceId"/>
                      <prop type="string" name="sourceUri"/>
                      <prop type="string" name="storageAccountId"/>
                    </prop>
                    <prop type="integer32" name="diskSizeGB"/>
                    <prop type="object" name="encryptionSettings">
                      <prop type="object" name="diskEncryptionKey">
                        <prop type="string" name="secretUrl" required="True"/>
                        <prop type="object" name="sourceVault" required="True" cls="SourceVault_read">
                          <prop type="string" name="id"/>
                        </prop>
                      </prop>
                      <prop type="boolean" name="enabled"/>
                      <prop type="object" name="keyEncryptionKey">
                        <prop type="string" name="keyUrl" required="True"/>
                        <prop type="@SourceVault_read" name="sourceVault" required="True"/>
                      </prop>
                    </prop>
                    <prop type="string" name="osType">
                      <enum>
                        <item value="&quot;Linux&quot;"/>
                        <item value="&quot;Windows&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop readOnly="True" type="dateTime" name="timeCreated"/>
                  </prop>
                  <prop type="object" name="sku">
                    <prop type="string" name="name">
                      <enum>
                        <item value="&quot;Premium_LRS&quot;"/>
                        <item value="&quot;Standard_LRS&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="tier">
                      <default value="&quot;Standard&quot;"/>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                  <prop type="array<string>" name="zones">
                    <item type="string"/>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2017-03-30" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/disks/{}" version="2017-03-30" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS9kaXNrcy97ZGlza05hbWV9/V/MjAxNy0wMy0zMA=="/>
      <argGroup name="">
        <arg type="string" var="$Path.diskName" options="disk-name name n" required="True" idPart="name">
          <help short="The name of the managed disk that is being created. The name can't be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Disks_Delete">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}">
          <request method="delete">
            <path>
              <param type="string" name="diskName" arg="$Path.diskName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-03-30&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="dateTime" name="endTime"/>
                  <prop type="object" name="error">
                    <prop type="string" name="code"/>
                    <prop type="array<object>" name="details">
                      <item type="object">
                        <prop type="string" name="code"/>
                        <prop type="string" name="message"/>
                        <prop type="string" name="target"/>
                      </item>
                    </prop>
                    <prop type="object" name="innererror">
                      <prop type="string" name="errordetail"/>
                      <prop type="string" name="exceptiontype"/>
                    </prop>
                    <prop type="string" name="message"/>
                    <prop type="string" name="target"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop readOnly="True" type="dateTime" name="startTime"/>
                  <prop readOnly="True" type="string" name="status"/>
                </schema>
              </json>
            </body>
          </response>
          <response statusCode="202"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="create" version="2017-03-30">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/disks/{}" version="2017-03-30" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS9kaXNrcy97ZGlza05hbWV9/V/MjAxNy0wMy0zMA=="/>
      <argGroup name="">
        <arg type="string" var="$Path.diskName" options="disk-name name n" required="True" idPart="name">
          <help short="The name of the managed disk that is being created. The name can't be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Disk">
        <arg type="ResourceLocation" var="$disk.location" options="location l" required="True" group="Disk">
          <help short="Resource location"/>
        </arg>
        <arg type="object" var="$disk.sku" options="sku" group="Disk">
          <help short="The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS."/>
          <arg type="string" var="$disk.sku.name" options="name">
            <help short="The sku name."/>
            <enum>
              <item name="Premium_LRS" value="&quot;Premium_LRS&quot;"/>
              <item name="Standard_LRS" value="&quot;Standard_LRS&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg type="object" var="$disk.tags" options="tags" group="Disk">
          <help short="Resource tags"/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
        <arg type="array<string>" var="$disk.zones" options="zones" group="Disk">
          <help short="The Logical zone list for Disk."/>
          <item type="string"/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="object" var="$disk.properties.creationData" options="creation-data" group="Properties">
          <help short="Disk source information. CreationData information cannot be changed after the disk has been created."/>
          <arg type="string" var="$disk.properties.creationData.createOption" options="create-option" required="True">
            <help short="This enumerates the possible sources of a disk's creation."/>
            <enum>
              <item name="Attach" value="&quot;Attach&quot;"/>
              <item name="Copy" value="&quot;Copy&quot;"/>
              <item name="Empty" value="&quot;Empty&quot;"/>
              <item name="FromImage" value="&quot;FromImage&quot;"/>
              <item name="Import" value="&quot;Import&quot;"/>
            </enum>
          </arg>
          <arg type="object" var="$disk.properties.creationData.imageReference" options="image-reference">
            <help short="Disk source information for PIR or user images."/>
            <arg type="string" var="$disk.properties.creationData.imageReference.id" options="id" required="True">
              <help short="A relative uri containing either a Platform Image Repository or user image reference."/>
            </arg>
            <arg type="integer32" var="$disk.properties.creationData.imageReference.lun" options="lun">
              <help short="If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null."/>
            </arg>
          </arg>
          <arg type="string" var="$disk.properties.creationData.sourceResourceId" options="source-resource-id">
            <help short="If createOption is Copy, this is the ARM id of the source snapshot or disk."/>
          </arg>
          <arg type="string" var="$disk.properties.creationData.sourceUri" options="source-uri">
            <help short="If createOption is Import, this is the URI of a blob to be imported into a managed disk."/>
          </arg>
          <arg type="string" var="$disk.properties.creationData.storageAccountId" options="storage-account-id">
            <help short="Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk."/>
          </arg>
        </arg>
        <arg type="integer32" var="$disk.properties.diskSizeGB" options="disk-size-gb" group="Properties">
          <help short="If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size."/>
        </arg>
        <arg type="object" var="$disk.properties.encryptionSettings" options="encryption-settings" group="Properties">
          <help short="Encryption settings for disk or snapshot"/>
          <arg type="object" var="$disk.properties.encryptionSettings.diskEncryptionKey" options="disk-encryption-key">
            <help short="Key Vault Secret Url and vault id of the disk encryption key"/>
            <arg type="string" var="$disk.properties.encryptionSettings.diskEncryptionKey.secretUrl" options="secret-url" required="True">
              <help short="Url pointing to a key or secret in KeyVault"/>
            </arg>
            <arg type="object" var="$disk.properties.encryptionSettings.diskEncryptionKey.sourceVault" options="source-vault" required="True" cls="SourceVault_create">
              <help short="Resource id of the KeyVault containing the key or secret"/>
              <arg type="string" var="@SourceVault_create.id" options="id">
                <help short="Resource Id"/>
              </arg>
            </arg>
          </arg>
          <arg type="boolean" var="$disk.properties.encryptionSettings.enabled" options="enabled">
            <help short="Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged."/>
          </arg>
          <arg type="object" var="$disk.properties.encryptionSettings.keyEncryptionKey" options="key-encryption-key">
            <help short="Key Vault Key Url and vault id of the key encryption key"/>
            <arg type="string" var="$disk.properties.encryptionSettings.keyEncryptionKey.keyUrl" options="key-url" required="True">
              <help short="Url pointing to a key or secret in KeyVault"/>
            </arg>
            <arg type="@SourceVault_create" var="$disk.properties.encryptionSettings.keyEncryptionKey.sourceVault" options="source-vault" required="True">
              <help short="Resource id of the KeyVault containing the key or secret"/>
            </arg>
          </arg>
        </arg>
        <arg type="string" var="$disk.properties.osType" options="os-type" group="Properties">
          <help short="The Operating System type."/>
          <enum>
            <item name="Linux" value="&quot;Linux&quot;"/>
            <item name="Windows" value="&quot;Windows&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <operation operationId="Disks_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}">
          <request method="put">
            <path>
              <param type="string" name="diskName" arg="$Path.diskName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-03-30&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="disk" required="True" clientFlatten="True">
                  <prop type="ResourceLocation" name="location" arg="$disk.location" required="True"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="creationData" arg="$disk.properties.creationData" required="True">
                      <prop type="string" name="createOption" arg="$disk.properties.creationData.createOption" required="True">
                        <enum>
                          <item value="&quot;Attach&quot;"/>
                          <item value="&quot;Copy&quot;"/>
                          <item value="&quot;Empty&quot;"/>
                          <item value="&quot;FromImage&quot;"/>
                          <item value="&quot;Import&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="imageReference" arg="$disk.properties.creationData.imageReference">
                        <prop type="string" name="id" arg="$disk.properties.creationData.imageReference.id" required="True"/>
                        <prop type="integer32" name="lun" arg="$disk.properties.creationData.imageReference.lun"/>
                      </prop>
                      <prop type="string" name="sourceResourceId" arg="$disk.properties.creationData.sourceResourceId"/>
                      <prop type="string" name="sourceUri" arg="$disk.properties.creationData.sourceUri"/>
                      <prop type="string" name="storageAccountId" arg="$disk.properties.creationData.storageAccountId"/>
                    </prop>
                    <prop type="integer32" name="diskSizeGB" arg="$disk.properties.diskSizeGB"/>
                    <prop type="object" name="encryptionSettings" arg="$disk.properties.encryptionSettings">
                      <prop type="object" name="diskEncryptionKey" arg="$disk.properties.encryptionSettings.diskEncryptionKey">
                        <prop type="string" name="secretUrl" arg="$disk.properties.encryptionSettings.diskEncryptionKey.secretUrl" required="True"/>
                        <prop type="object" name="sourceVault" arg="$disk.properties.encryptionSettings.diskEncryptionKey.sourceVault" required="True" cls="SourceVault_create">
                          <prop type="string" name="id" arg="@SourceVault_create.id"/>
                        </prop>
                      </prop>
                      <prop type="boolean" name="enabled" arg="$disk.properties.encryptionSettings.enabled"/>
                      <prop type="object" name="keyEncryptionKey" arg="$disk.properties.encryptionSettings.keyEncryptionKey">
                        <prop type="string" name="keyUrl" arg="$disk.properties.encryptionSettings.keyEncryptionKey.keyUrl" required="True"/>
                        <prop type="@SourceVault_create" name="sourceVault" arg="$disk.properties.encryptionSettings.keyEncryptionKey.sourceVault" required="True"/>
                      </prop>
                    </prop>
                    <prop type="string" name="osType" arg="$disk.properties.osType">
                      <enum>
                        <item value="&quot;Linux&quot;"/>
                        <item value="&quot;Windows&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="sku" arg="$disk.sku">
                    <prop type="string" name="name" arg="$disk.sku.name">
                      <enum>
                        <item value="&quot;Premium_LRS&quot;"/>
                        <item value="&quot;Standard_LRS&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$disk.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop type="array<string>" name="zones" arg="$disk.zones">
                    <item type="string"/>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="Disk_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/disks/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="managedBy"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="creationData" required="True">
                      <prop type="string" name="createOption" required="True">
                        <enum>
                          <item value="&quot;Attach&quot;"/>
                          <item value="&quot;Copy&quot;"/>
                          <item value="&quot;Empty&quot;"/>
                          <item value="&quot;FromImage&quot;"/>
                          <item value="&quot;Import&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="imageReference">
                        <prop type="string" name="id" required="True"/>
                        <prop type="integer32" name="lun"/>
                      </prop>
                      <prop type="string" name="sourceResourceId"/>
                      <prop type="string" name="sourceUri"/>
                      <prop type="string" name="storageAccountId"/>
                    </prop>
                    <prop type="integer32" name="diskSizeGB"/>
                    <prop type="object" name="encryptionSettings">
                      <prop type="object" name="diskEncryptionKey">
                        <prop type="string" name="secretUrl" required="True"/>
                        <prop type="object" name="sourceVault" required="True" cls="SourceVault_read">
                          <prop type="string" name="id"/>
                        </prop>
                      </prop>
                      <prop type="boolean" name="enabled"/>
                      <prop type="object" name="keyEncryptionKey">
                        <prop type="string" name="keyUrl" required="True"/>
                        <prop type="@SourceVault_read" name="sourceVault" required="True"/>
                      </prop>
                    </prop>
                    <prop type="string" name="osType">
                      <enum>
                        <item value="&quot;Linux&quot;"/>
                        <item value="&quot;Windows&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop readOnly="True" type="dateTime" name="timeCreated"/>
                  </prop>
                  <prop type="object" name="sku">
                    <prop type="string" name="name">
                      <enum>
                        <item value="&quot;Premium_LRS&quot;"/>
                        <item value="&quot;Standard_LRS&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="tier">
                      <default value="&quot;Standard&quot;"/>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                  <prop type="array<string>" name="zones">
                    <item type="string"/>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response statusCode="202">
            <body>
              <json var="$Instance">
                <schema type="@Disk_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2017-03-30">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/disks/{}" version="2017-03-30" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS9kaXNrcy97ZGlza05hbWV9/V/MjAxNy0wMy0zMA=="/>
      <argGroup name="">
        <arg type="string" var="$Path.diskName" options="disk-name name n" required="True" idPart="name">
          <help short="The name of the managed disk that is being created. The name can't be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9, _ and -. The maximum name length is 80 characters."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Disk">
        <arg type="ResourceLocation" var="$disk.location" options="location l" group="Disk">
          <help short="Resource location"/>
        </arg>
        <arg nullable="True" type="object" var="$disk.sku" options="sku" group="Disk">
          <help short="The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS."/>
          <arg nullable="True" type="string" var="$disk.sku.name" options="name">
            <help short="The sku name."/>
            <enum>
              <item name="Premium_LRS" value="&quot;Premium_LRS&quot;"/>
              <item name="Standard_LRS" value="&quot;Standard_LRS&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg nullable="True" type="object" var="$disk.tags" options="tags" group="Disk">
          <help short="Resource tags"/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
        <arg nullable="True" type="array<string>" var="$disk.zones" options="zones" group="Disk">
          <help short="The Logical zone list for Disk."/>
          <item nullable="True" type="string"/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="object" var="$disk.properties.creationData" options="creation-data" group="Properties">
          <help short="Disk source information. CreationData information cannot be changed after the disk has been created."/>
          <arg type="string" var="$disk.properties.creationData.createOption" options="create-option">
            <help short="This enumerates the possible sources of a disk's creation."/>
            <enum>
              <item name="Attach" value="&quot;Attach&quot;"/>
              <item name="Copy" value="&quot;Copy&quot;"/>
              <item name="Empty" value="&quot;Empty&quot;"/>
              <item name="FromImage" value="&quot;FromImage&quot;"/>
              <item name="Import" value="&quot;Import&quot;"/>
            </enum>
          </arg>
          <arg nullable="True" type="object" var="$disk.properties.creationData.imageReference" options="image-reference">
            <help short="Disk source information for PIR or user images."/>
            <arg type="string" var="$disk.properties.creationData.imageReference.id" options="id">
              <help short="A relative uri containing either a Platform Image Repository or user image reference."/>
            </arg>
            <arg nullable="True" type="integer32" var="$disk.properties.creationData.imageReference.lun" options="lun">
              <help short="If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null."/>
            </arg>
          </arg>
          <arg nullable="True" type="string" var="$disk.properties.creationData.sourceResourceId" options="source-resource-id">
            <help short="If createOption is Copy, this is the ARM id of the source snapshot or disk."/>
          </arg>
          <arg nullable="True" type="string" var="$disk.properties.creationData.sourceUri" options="source-uri">
            <help short="If createOption is Import, this is the URI of a blob to be imported into a managed disk."/>
          </arg>
          <arg nullable="True" type="string" var="$disk.properties.creationData.storageAccountId" options="storage-account-id">
            <help short="Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk."/>
          </arg>
        </arg>
        <arg nullable="True" type="integer32" var="$disk.properties.diskSizeGB" options="disk-size-gb" group="Properties">
          <help short="If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size."/>
        </arg>
        <arg nullable="True" type="object" var="$disk.properties.encryptionSettings" options="encryption-settings" group="Properties">
          <help short="Encryption settings for disk or snapshot"/>
          <arg nullable="True" type="object" var="$disk.properties.encryptionSettings.diskEncryptionKey" options="disk-encryption-key">
            <help short="Key Vault Secret Url and vault id of the disk encryption key"/>
            <arg type="string" var="$disk.properties.encryptionSettings.diskEncryptionKey.secretUrl" options="secret-url">
              <help short="Url pointing to a key or secret in KeyVault"/>
            </arg>
            <arg type="object" var="$disk.properties.encryptionSettings.diskEncryptionKey.sourceVault" options="source-vault" cls="SourceVault_update">
              <help short="Resource id of the KeyVault containing the key or secret"/>
              <arg nullable="True" type="string" var="@SourceVault_update.id" options="id">
                <help short="Resource Id"/>
              </arg>
            </arg>
          </arg>
          <arg nullable="True" type="boolean" var="$disk.properties.encryptionSettings.enabled" options="enabled">
            <help short="Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged."/>
          </arg>
          <arg nullable="True" type="object" var="$disk.properties.encryptionSettings.keyEncryptionKey" options="key-encryption-key">
            <help short="Key Vault Key Url and vault id of the key encryption key"/>
            <arg type="string" var="$disk.properties.encryptionSettings.keyEncryptionKey.keyUrl" options="key-url">
              <help short="Url pointing to a key or secret in KeyVault"/>
            </arg>
            <arg type="@SourceVault_update" var="$disk.properties.encryptionSettings.keyEncryptionKey.sourceVault" options="source-vault">
              <help short="Resource id of the KeyVault containing the key or secret"/>
            </arg>
          </arg>
        </arg>
        <arg nullable="True" type="string" var="$disk.properties.osType" options="os-type" group="Properties">
          <help short="The Operating System type."/>
          <enum>
            <item name="Linux" value="&quot;Linux&quot;"/>
            <item name="Windows" value="&quot;Windows&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <operation operationId="Disks_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}">
          <request method="get">
            <path>
              <param type="string" name="diskName" arg="$Path.diskName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-03-30&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="Disk_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/disks/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="managedBy"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="creationData" required="True">
                      <prop type="string" name="createOption" required="True">
                        <enum>
                          <item value="&quot;Attach&quot;"/>
                          <item value="&quot;Copy&quot;"/>
                          <item value="&quot;Empty&quot;"/>
                          <item value="&quot;FromImage&quot;"/>
                          <item value="&quot;Import&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="imageReference">
                        <prop type="string" name="id" required="True"/>
                        <prop type="integer32" name="lun"/>
                      </prop>
                      <prop type="string" name="sourceResourceId"/>
                      <prop type="string" name="sourceUri"/>
                      <prop type="string" name="storageAccountId"/>
                    </prop>
                    <prop type="integer32" name="diskSizeGB"/>
                    <prop type="object" name="encryptionSettings">
                      <prop type="object" name="diskEncryptionKey">
                        <prop type="string" name="secretUrl" required="True"/>
                        <prop type="object" name="sourceVault" required="True" cls="SourceVault_read">
                          <prop type="string" name="id"/>
                        </prop>
                      </prop>
                      <prop type="boolean" name="enabled"/>
                      <prop type="object" name="keyEncryptionKey">
                        <prop type="string" name="keyUrl" required="True"/>
                        <prop type="@SourceVault_read" name="sourceVault" required="True"/>
                      </prop>
                    </prop>
                    <prop type="string" name="osType">
                      <enum>
                        <item value="&quot;Linux&quot;"/>
                        <item value="&quot;Windows&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop readOnly="True" type="dateTime" name="timeCreated"/>
                  </prop>
                  <prop type="object" name="sku">
                    <prop type="string" name="name">
                      <enum>
                        <item value="&quot;Premium_LRS&quot;"/>
                        <item value="&quot;Standard_LRS&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="tier">
                      <default value="&quot;Standard&quot;"/>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                  <prop type="array<string>" name="zones">
                    <item type="string"/>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="disk" required="True" clientFlatten="True">
              <prop type="ResourceLocation" name="location" arg="$disk.location" required="True"/>
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="object" name="creationData" arg="$disk.properties.creationData" required="True">
                  <prop type="string" name="createOption" arg="$disk.properties.creationData.createOption" required="True">
                    <enum>
                      <item value="&quot;Attach&quot;"/>
                      <item value="&quot;Copy&quot;"/>
                      <item value="&quot;Empty&quot;"/>
                      <item value="&quot;FromImage&quot;"/>
                      <item value="&quot;Import&quot;"/>
                    </enum>
                  </prop>
                  <prop type="object" name="imageReference" arg="$disk.properties.creationData.imageReference">
                    <prop type="string" name="id" arg="$disk.properties.creationData.imageReference.id" required="True"/>
                    <prop type="integer32" name="lun" arg="$disk.properties.creationData.imageReference.lun"/>
                  </prop>
                  <prop type="string" name="sourceResourceId" arg="$disk.properties.creationData.sourceResourceId"/>
                  <prop type="string" name="sourceUri" arg="$disk.properties.creationData.sourceUri"/>
                  <prop type="string" name="storageAccountId" arg="$disk.properties.creationData.storageAccountId"/>
                </prop>
                <prop type="integer32" name="diskSizeGB" arg="$disk.properties.diskSizeGB"/>
                <prop type="object" name="encryptionSettings" arg="$disk.properties.encryptionSettings">
                  <prop type="object" name="diskEncryptionKey" arg="$disk.properties.encryptionSettings.diskEncryptionKey">
                    <prop type="string" name="secretUrl" arg="$disk.properties.encryptionSettings.diskEncryptionKey.secretUrl" required="True"/>
                    <prop type="object" name="sourceVault" arg="$disk.properties.encryptionSettings.diskEncryptionKey.sourceVault" required="True" cls="SourceVault_update">
                      <prop type="string" name="id" arg="@SourceVault_update.id"/>
                    </prop>
                  </prop>
                  <prop type="boolean" name="enabled" arg="$disk.properties.encryptionSettings.enabled"/>
                  <prop type="object" name="keyEncryptionKey" arg="$disk.properties.encryptionSettings.keyEncryptionKey">
                    <prop type="string" name="keyUrl" arg="$disk.properties.encryptionSettings.keyEncryptionKey.keyUrl" required="True"/>
                    <prop type="@SourceVault_update" name="sourceVault" arg="$disk.properties.encryptionSettings.keyEncryptionKey.sourceVault" required="True"/>
                  </prop>
                </prop>
                <prop type="string" name="osType" arg="$disk.properties.osType">
                  <enum>
                    <item value="&quot;Linux&quot;"/>
                    <item value="&quot;Windows&quot;"/>
                  </enum>
                </prop>
              </prop>
              <prop type="object" name="sku" arg="$disk.sku">
                <prop type="string" name="name" arg="$disk.sku.name">
                  <enum>
                    <item value="&quot;Premium_LRS&quot;"/>
                    <item value="&quot;Standard_LRS&quot;"/>
                  </enum>
                </prop>
              </prop>
              <prop type="object" name="tags" arg="$disk.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
              <prop type="array<string>" name="zones" arg="$disk.zones">
                <item type="string"/>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="Disks_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}">
          <request method="put">
            <path>
              <param type="string" name="diskName" arg="$Path.diskName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-03-30&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="@Disk_read"/>
              </json>
            </body>
          </response>
          <response statusCode="202">
            <body>
              <json var="$Instance">
                <schema type="@Disk_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
