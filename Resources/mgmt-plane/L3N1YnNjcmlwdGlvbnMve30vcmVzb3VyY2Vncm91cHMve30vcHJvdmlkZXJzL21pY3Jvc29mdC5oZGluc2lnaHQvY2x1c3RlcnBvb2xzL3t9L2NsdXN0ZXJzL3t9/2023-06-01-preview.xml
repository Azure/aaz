<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
  <commandGroup name="hdinsightonaks cluster">
    <command name="show" version="2023-06-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.clusterName" options="cluster-name name n" required="True" idPart="child_name_1">
          <help short="The name of the HDInsight cluster."/>
        </arg>
        <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
          <help short="The name of the cluster pool."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Clusters_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
          <request method="get">
            <path>
              <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
              <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="clusterProfile" required="True">
                      <prop type="object" name="authorizationProfile" required="True">
                        <prop type="array<string>" name="groupIds">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="userIds">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="autoscaleProfile">
                        <prop type="string" name="autoscaleType">
                          <enum>
                            <item value="&quot;LoadBased&quot;"/>
                            <item value="&quot;ScheduleBased&quot;"/>
                          </enum>
                        </prop>
                        <prop type="boolean" name="enabled" required="True"/>
                        <prop type="integer32" name="gracefulDecommissionTimeout"/>
                        <prop type="object" name="loadBasedConfig">
                          <prop type="integer32" name="cooldownPeriod"/>
                          <prop type="integer32" name="maxNodes" required="True"/>
                          <prop type="integer32" name="minNodes" required="True"/>
                          <prop type="integer32" name="pollInterval"/>
                          <prop type="array<object>" name="scalingRules" required="True">
                            <item type="object">
                              <prop type="string" name="actionType" required="True">
                                <enum>
                                  <item value="&quot;scaledown&quot;"/>
                                  <item value="&quot;scaleup&quot;"/>
                                </enum>
                              </prop>
                              <prop type="object" name="comparisonRule" required="True">
                                <prop type="string" name="operator" required="True">
                                  <enum>
                                    <item value="&quot;greaterThan&quot;"/>
                                    <item value="&quot;greaterThanOrEqual&quot;"/>
                                    <item value="&quot;lessThan&quot;"/>
                                    <item value="&quot;lessThanOrEqual&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="float" name="threshold" required="True"/>
                              </prop>
                              <prop type="integer32" name="evaluationCount" required="True"/>
                              <prop type="string" name="scalingMetric" required="True"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="object" name="scheduleBasedConfig">
                          <prop type="integer32" name="defaultCount" required="True"/>
                          <prop type="array<object>" name="schedules" required="True">
                            <item type="object">
                              <prop type="integer32" name="count" required="True"/>
                              <prop type="array<string>" name="days" required="True">
                                <item type="string">
                                  <enum>
                                    <item value="&quot;Friday&quot;"/>
                                    <item value="&quot;Monday&quot;"/>
                                    <item value="&quot;Saturday&quot;"/>
                                    <item value="&quot;Sunday&quot;"/>
                                    <item value="&quot;Thursday&quot;"/>
                                    <item value="&quot;Tuesday&quot;"/>
                                    <item value="&quot;Wednesday&quot;"/>
                                  </enum>
                                </item>
                              </prop>
                              <prop type="string" name="endTime" required="True">
                                <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                              </prop>
                              <prop type="string" name="startTime" required="True">
                                <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                              </prop>
                            </item>
                          </prop>
                          <prop type="string" name="timeZone" required="True"/>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterVersion" required="True">
                        <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                      </prop>
                      <prop readOnly="True" type="array<object>" name="components">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="string" name="version"/>
                        </item>
                      </prop>
                      <prop readOnly="True" type="object" name="connectivityProfile">
                        <prop type="array<object>" name="ssh">
                          <item type="object">
                            <prop type="string" name="endpoint" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="web" required="True">
                          <prop type="string" name="fqdn" required="True"/>
                        </prop>
                      </prop>
                      <prop type="object" name="flinkProfile">
                        <prop type="object" name="catalogOptions">
                          <prop type="object" name="hive">
                            <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                            <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                            <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                          </prop>
                        </prop>
                        <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                        <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                          <prop type="float32" name="cpu" required="True"/>
                          <prop type="integer64" name="memory" required="True"/>
                        </prop>
                        <prop type="integer32" name="numReplicas"/>
                        <prop type="object" name="storage" required="True">
                          <prop type="string" name="storageUri" required="True">
                            <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                          </prop>
                          <prop type="string" name="storagekey" secret="True"/>
                        </prop>
                        <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                      </prop>
                      <prop type="object" name="identityProfile" required="True">
                        <prop type="string" name="msiClientId" required="True">
                          <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                        </prop>
                        <prop type="string" name="msiObjectId" required="True">
                          <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                        </prop>
                        <prop type="ResourceId" name="msiResourceId" required="True"/>
                      </prop>
                      <prop type="object" name="kafkaProfile">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="object" name="llapProfile">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="object" name="logAnalyticsProfile">
                        <prop type="object" name="applicationLogs">
                          <prop type="boolean" name="stdErrorEnabled"/>
                          <prop type="boolean" name="stdOutEnabled"/>
                        </prop>
                        <prop type="boolean" name="enabled" required="True"/>
                        <prop type="boolean" name="metricsEnabled"/>
                      </prop>
                      <prop type="string" name="ossVersion" required="True">
                        <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                      </prop>
                      <prop type="object" name="prometheusProfile">
                        <prop type="boolean" name="enabled" required="True">
                          <default value="false"/>
                        </prop>
                      </prop>
                      <prop type="array<object>" name="scriptActionProfiles">
                        <item type="object">
                          <prop type="string" name="name" required="True"/>
                          <prop type="string" name="parameters"/>
                          <prop type="array<string>" name="services" required="True">
                            <item type="string"/>
                          </prop>
                          <prop type="boolean" name="shouldPersist">
                            <default value="true"/>
                          </prop>
                          <prop type="integer32" name="timeoutInMinutes"/>
                          <prop type="string" name="type" required="True"/>
                          <prop type="string" name="url" required="True">
                            <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                          </prop>
                        </item>
                      </prop>
                      <prop type="object" name="secretsProfile">
                        <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                        <prop type="array<object>" name="secrets">
                          <item type="object">
                            <prop type="string" name="keyVaultObjectName" required="True">
                              <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                            </prop>
                            <prop type="string" name="referenceName" required="True"/>
                            <prop type="string" name="type" required="True">
                              <enum>
                                <item value="&quot;Certificate&quot;"/>
                                <item value="&quot;Key&quot;"/>
                                <item value="&quot;Secret&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                      </prop>
                      <prop type="array<object>" name="serviceConfigsProfiles">
                        <item type="object">
                          <prop type="array<object>" name="configs" required="True">
                            <item type="object">
                              <prop type="string" name="component" required="True"/>
                              <prop type="array<object>" name="files" required="True">
                                <item type="object">
                                  <prop type="string" name="content"/>
                                  <prop type="string" name="encoding">
                                    <enum>
                                      <item value="&quot;Base64&quot;"/>
                                      <item value="&quot;None&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="string" name="fileName" required="True"/>
                                  <prop type="string" name="path"/>
                                  <prop type="object" name="values">
                                    <additionalProp>
                                      <item type="string"/>
                                    </additionalProp>
                                  </prop>
                                </item>
                              </prop>
                            </item>
                          </prop>
                          <prop type="string" name="serviceName" required="True"/>
                        </item>
                      </prop>
                      <prop type="object" name="sparkProfile">
                        <prop type="string" name="defaultStorageUrl"/>
                        <prop type="object" name="metastoreSpec">
                          <prop type="string" name="dbName" required="True"/>
                          <prop type="string" name="dbPasswordSecretName" required="True"/>
                          <prop type="string" name="dbServerHost" required="True"/>
                          <prop type="string" name="dbUserName" required="True"/>
                          <prop type="string" name="keyVaultId" required="True"/>
                          <prop type="string" name="thriftUrl"/>
                        </prop>
                        <prop type="object" name="userPluginsSpec">
                          <prop type="array<object>" name="plugins">
                            <item type="object">
                              <prop type="string" name="path" required="True">
                                <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="object" name="sshProfile">
                        <prop type="integer32" name="count" required="True">
                          <format maximum="5" minimum="0"/>
                        </prop>
                        <prop readOnly="True" type="string" name="podPrefix"/>
                      </prop>
                      <prop type="object" name="stubProfile">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="object" name="trinoProfile">
                        <prop type="object" name="catalogOptions">
                          <prop type="array<object>" name="hive">
                            <item type="object">
                              <prop type="string" name="catalogName" required="True">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                              <prop type="string" name="metastoreWarehouseDir" required="True"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="object" name="coordinator">
                          <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                            <prop type="boolean" name="enable">
                              <default value="false"/>
                            </prop>
                            <prop type="integer32" name="port">
                              <default value="8008"/>
                            </prop>
                            <prop type="boolean" name="suspend">
                              <default value="false"/>
                            </prop>
                          </prop>
                          <prop type="boolean" name="highAvailabilityEnabled">
                            <default value="true"/>
                          </prop>
                        </prop>
                        <prop type="object" name="userPluginsSpec">
                          <prop type="array<object>" name="plugins">
                            <item type="object">
                              <prop type="boolean" name="enabled"/>
                              <prop type="string" name="name">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="path">
                                <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                        <prop type="object" name="userTelemetrySpec">
                          <prop type="object" name="storage">
                            <prop type="string" name="hivecatalogName">
                              <format minLength="1"/>
                            </prop>
                            <prop type="string" name="hivecatalogSchema">
                              <default value="&quot;trinologs&quot;"/>
                            </prop>
                            <prop type="integer32" name="partitionRetentionInDays">
                              <default value="365"/>
                            </prop>
                            <prop type="string" name="path">
                              <format minLength="1"/>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="worker">
                          <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="string" name="clusterType" required="True">
                      <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                    </prop>
                    <prop type="object" name="computeProfile" required="True">
                      <prop type="array<object>" name="nodes" required="True">
                        <item type="object">
                          <prop type="integer32" name="count" required="True">
                            <format minimum="1"/>
                          </prop>
                          <prop type="string" name="type" required="True">
                            <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                          </prop>
                          <prop type="string" name="vmSize" required="True">
                            <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                          </prop>
                        </item>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="deploymentId"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="status"/>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2023-06-01-preview" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.clusterName" options="cluster-name name n" required="True" idPart="child_name_1">
          <help short="The name of the HDInsight cluster."/>
        </arg>
        <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
          <help short="The name of the cluster pool."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Clusters_Delete">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
          <request method="delete">
            <path>
              <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
              <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="202">
            <header>
              <item name="Location"/>
            </header>
          </response>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2023-06-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.clusterName" options="cluster-name name n" required="True" idPart="child_name_1">
          <help short="The name of the HDInsight cluster."/>
        </arg>
        <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
          <help short="The name of the cluster pool."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="ApplicationLogs">
        <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.applicationLogs.stdErrorEnabled" options="application-log-std-error-enabled" group="ApplicationLogs">
          <help short="True if stderror is enabled, otherwise false."/>
        </arg>
        <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.applicationLogs.stdOutEnabled" options="application-log-std-out-enabled" group="ApplicationLogs">
          <help short="True if stdout is enabled, otherwise false."/>
        </arg>
      </argGroup>
      <argGroup name="ClusterProfile">
        <arg type="array<string>" var="$HDInsightCluster.properties.clusterProfile.authorizationProfile.groupIds" options="authorization-group-id" group="ClusterProfile">
          <help short="AAD group Ids authorized for data plane access."/>
          <item type="string"/>
        </arg>
        <arg type="array<string>" var="$HDInsightCluster.properties.clusterProfile.authorizationProfile.userIds" options="authorization-user-id" group="ClusterProfile">
          <help short="AAD user Ids authorized for data plane access."/>
          <item type="string"/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.autoscaleType" options="autoscale-profile-type" group="ClusterProfile">
          <help short="User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based."/>
          <enum>
            <item name="LoadBased" value="&quot;LoadBased&quot;"/>
            <item name="ScheduleBased" value="&quot;ScheduleBased&quot;"/>
          </enum>
        </arg>
        <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.enabled" options="autoscale-profile-enabled" group="ClusterProfile">
          <help short="This indicates whether auto scale is enabled on HDInsight on AKS cluster."/>
        </arg>
        <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.gracefulDecommissionTimeout" options="autoscale-profile-graceful-decommission-timeout" group="ClusterProfile">
          <help short="This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout."/>
        </arg>
        <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.cooldownPeriod" options="loadbased-config-cooldown-period" group="ClusterProfile">
          <help short="This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds."/>
        </arg>
        <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.maxNodes" options="loadbased-config-max-nodes" group="ClusterProfile">
          <help short="User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes."/>
        </arg>
        <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.minNodes" options="loadbased-config-min-nodes" group="ClusterProfile">
          <help short="User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes."/>
        </arg>
        <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.pollInterval" options="loadbased-config-poll-interval" group="ClusterProfile">
          <help short="User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation."/>
        </arg>
        <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules" options="loadbased-config-scaling-rules" group="ClusterProfile">
          <help short="The scaling rules."/>
          <item type="object">
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].actionType" options="action-type" required="True">
              <help short="The action type."/>
              <enum>
                <item name="scaledown" value="&quot;scaledown&quot;"/>
                <item name="scaleup" value="&quot;scaleup&quot;"/>
              </enum>
            </arg>
            <arg type="object" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].comparisonRule" options="comparison-rule" required="True">
              <help short="The comparison rule."/>
              <arg type="string" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].comparisonRule.operator" options="operator" required="True">
                <help short="The comparison operator."/>
                <enum>
                  <item name="greaterThan" value="&quot;greaterThan&quot;"/>
                  <item name="greaterThanOrEqual" value="&quot;greaterThanOrEqual&quot;"/>
                  <item name="lessThan" value="&quot;lessThan&quot;"/>
                  <item name="lessThanOrEqual" value="&quot;lessThanOrEqual&quot;"/>
                </enum>
              </arg>
              <arg type="float" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].comparisonRule.threshold" options="threshold" required="True">
                <help short="Threshold setting."/>
              </arg>
            </arg>
            <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].evaluationCount" options="evaluation-count" required="True">
              <help short="This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered."/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].scalingMetric" options="scaling-metric" required="True">
              <help short="Metrics name for individual workloads. For example: cpu"/>
            </arg>
          </item>
        </arg>
        <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.defaultCount" options="schedule-based-config-default-count" group="ClusterProfile">
          <help short="Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)"/>
        </arg>
        <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules" options="schedule-based-config-schedule" group="ClusterProfile">
          <help short="This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end)."/>
          <item type="object">
            <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].count" options="count" required="True">
              <help short="User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer."/>
            </arg>
            <arg type="array<string>" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].days" options="days" required="True">
              <help short="User has to set the days where schedule has to be set for autoscale operation."/>
              <item type="string">
                <enum>
                  <item name="Friday" value="&quot;Friday&quot;"/>
                  <item name="Monday" value="&quot;Monday&quot;"/>
                  <item name="Saturday" value="&quot;Saturday&quot;"/>
                  <item name="Sunday" value="&quot;Sunday&quot;"/>
                  <item name="Thursday" value="&quot;Thursday&quot;"/>
                  <item name="Tuesday" value="&quot;Tuesday&quot;"/>
                  <item name="Wednesday" value="&quot;Wednesday&quot;"/>
                </enum>
              </item>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].endTime" options="end-time" required="True">
              <help short="User has to set the end time of current schedule configuration, format like 10:30 (HH:MM)."/>
              <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].startTime" options="start-time" required="True">
              <help short="User has to set the start time of current schedule configuration, format like 10:30 (HH:MM)."/>
              <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
            </arg>
          </item>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.timeZone" options="schedule-based-config-time-zone" group="ClusterProfile">
          <help short="User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.clusterVersion" options="cluster-version" group="ClusterProfile">
          <help short="Version with 3/4 part."/>
          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.identityProfile.msiClientId" options="assigned-identity-client-id" group="ClusterProfile">
          <help short="ClientId of the MSI."/>
          <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.identityProfile.msiObjectId" options="assigned-identity-object-id" group="ClusterProfile">
          <help short="ObjectId of the MSI."/>
          <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
        </arg>
        <arg type="ResourceId" var="$HDInsightCluster.properties.clusterProfile.identityProfile.msiResourceId" options="assigned-identity-resource-id" group="ClusterProfile">
          <help short="ResourceId of the MSI."/>
        </arg>
        <arg type="object" var="$HDInsightCluster.properties.clusterProfile.kafkaProfile" options="kafka-profile" group="ClusterProfile">
          <help short="Kafka cluster profile."/>
          <additionalProp anyType="True"/>
        </arg>
        <arg type="object" var="$HDInsightCluster.properties.clusterProfile.llapProfile" options="llap-profile" group="ClusterProfile">
          <help short="LLAP cluster profile."/>
          <additionalProp anyType="True"/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.ossVersion" options="oss-version" group="ClusterProfile">
          <help short="Version with three part."/>
          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
        </arg>
        <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles" options="script-action-profiles" group="ClusterProfile">
          <help short="The script action profile list."/>
          <item type="object">
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].name" options="name" required="True">
              <help short="Script name."/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].parameters" options="parameters">
              <help short="Additional parameters for the script action. It should be space-separated list of arguments required for script execution."/>
            </arg>
            <arg type="array<string>" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].services" options="services" required="True">
              <help short="List of services to apply the script action."/>
              <item type="string"/>
            </arg>
            <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].shouldPersist" options="should-persist">
              <help short="Specify if the script should persist on the cluster."/>
              <default value="true"/>
            </arg>
            <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].timeoutInMinutes" options="timeout-in-minutes">
              <help short="Timeout duration for the script action in minutes."/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].type" options="type" required="True">
              <help short="Type of the script action. Supported type is bash scripts."/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].url" options="url" required="True">
              <help short="Url of the script file."/>
              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
            </arg>
          </item>
        </arg>
        <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles" options="service-configs-profiles" group="ClusterProfile">
          <help short="The service configs profiles."/>
          <item type="object">
            <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs" options="configs" required="True">
              <help short="List of service configs."/>
              <item type="object">
                <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].component" options="component" required="True">
                  <help short="Name of the component the config files should apply to."/>
                </arg>
                <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files" options="files" required="True">
                  <help short="List of Config Files."/>
                  <item type="object">
                    <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content" options="content">
                      <help short="Free form content of the entire configuration file."/>
                    </arg>
                    <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding" options="encoding">
                      <help short="This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text."/>
                      <enum>
                        <item name="Base64" value="&quot;Base64&quot;"/>
                        <item name="None" value="&quot;None&quot;"/>
                      </enum>
                    </arg>
                    <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" options="file-name" required="True">
                      <help short="Configuration file name."/>
                    </arg>
                    <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path" options="path">
                      <help short="Path of the config file if content is specified."/>
                    </arg>
                    <arg type="object" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values" options="values">
                      <help short="List of key value pairs where key represents a valid service configuration name and value represents the value of the config."/>
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </arg>
                  </item>
                </arg>
              </item>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].serviceName" options="service-name" required="True">
              <help short="Name of the service the configurations should apply to."/>
            </arg>
          </item>
        </arg>
        <arg type="object" var="$HDInsightCluster.properties.clusterProfile.stubProfile" options="stub-profile" group="ClusterProfile">
          <help short="Stub cluster profile."/>
          <additionalProp anyType="True"/>
        </arg>
      </argGroup>
      <argGroup name="ComputeProfile">
        <arg type="array<object>" var="$HDInsightCluster.properties.computeProfile.nodes" options="nodes" group="ComputeProfile">
          <help short="The nodes definitions."/>
          <item type="object">
            <arg type="integer32" var="$HDInsightCluster.properties.computeProfile.nodes[].count" options="count" required="True">
              <help short="The number of virtual machines."/>
              <format minimum="1"/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.computeProfile.nodes[].type" options="type" required="True">
              <help short="The node type."/>
              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.computeProfile.nodes[].vmSize" options="vm-size" required="True">
              <help short="The virtual machine SKU."/>
              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <argGroup name="Coordinator">
        <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.debug.enable" options="coordinator-high-availability-enabled" group="Coordinator">
          <default value="false"/>
        </arg>
        <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.debug.port" options="coordinator-debug-port" group="Coordinator">
          <default value="8008"/>
        </arg>
        <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.debug.suspend" options="coordinator-debug-suspend" group="Coordinator">
          <default value="false"/>
        </arg>
        <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.highAvailabilityEnabled" options="coordinator-debug-enabled" group="Coordinator">
          <help short="The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true."/>
          <default value="true"/>
        </arg>
      </argGroup>
      <argGroup name="FlinkProfile">
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.catalogOptions.hive.metastoreDbConnectionPasswordSecret" options="flink-hive-catalog-db-connection-password-secret" group="FlinkProfile">
          <help short="Secret reference name from secretsProfile.secrets containing password for database connection."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.catalogOptions.hive.metastoreDbConnectionURL" options="flink-hive-catalog-db-connection-url" group="FlinkProfile">
          <help short="Connection string for hive metastore database."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.catalogOptions.hive.metastoreDbConnectionUserName" options="flink-hive-catalog-db-connection-user-name" group="FlinkProfile">
          <help short="User name for database connection."/>
        </arg>
        <arg type="float32" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.historyServer.cpu" options="history-server-cpu" group="FlinkProfile"/>
        <arg type="integer64" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.historyServer.memory" options="history-server-memory" group="FlinkProfile"/>
        <arg type="float32" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.jobManager.cpu" options="job-manager-cpu" group="FlinkProfile">
          <help short="Job manager CPU count."/>
        </arg>
        <arg type="integer64" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.jobManager.memory" options="job-manager-memory" group="FlinkProfile">
          <help short="Job manager memory size."/>
        </arg>
        <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.numReplicas" options="num-replicas" group="FlinkProfile">
          <help short="The number of task managers."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.storage.storageUri" options="flink-storage-uri" group="FlinkProfile">
          <help short="Storage account uri which is used for savepoint and checkpoint state."/>
          <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.storage.storagekey" options="flink-storage-key" group="FlinkProfile">
          <help short="Storage key is only required for wasb(s) storage."/>
        </arg>
        <arg type="float32" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.taskManager.cpu" options="task-manager-cpu" group="FlinkProfile">
          <help short="Task manager CPU count."/>
        </arg>
        <arg type="integer64" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.taskManager.memory" options="task-manager-memory" group="FlinkProfile">
          <help short="Task manager memory size."/>
        </arg>
      </argGroup>
      <argGroup name="HDInsightCluster">
        <arg type="ResourceLocation" var="$HDInsightCluster.location" options="location l" required="True" group="HDInsightCluster">
          <help short="The geo-location where the resource lives"/>
        </arg>
        <arg type="object" var="$HDInsightCluster.tags" options="tags" group="HDInsightCluster">
          <help short="Resource tags."/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="LogAnalyticsProfile">
        <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.enabled" options="enable-log-analytics" group="LogAnalyticsProfile">
          <help short="True if log analytics is enabled for the cluster, otherwise false."/>
        </arg>
        <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.metricsEnabled" options="log-analytic-profile-metrics-enabled" group="LogAnalyticsProfile">
          <help short="True if metrics are enabled, otherwise false."/>
        </arg>
      </argGroup>
      <argGroup name="PrometheusProfile">
        <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.prometheusProfile.enabled" options="prometheu-profile-enabled" group="PrometheusProfile">
          <help short="Enable Prometheus for cluster or not."/>
          <default value="false"/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$HDInsightCluster.properties.clusterType" options="cluster-type" group="Properties">
          <help short="The type of cluster."/>
          <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
        </arg>
      </argGroup>
      <argGroup name="SecretsProfile">
        <arg type="ResourceId" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.keyVaultResourceId" options="key-vault-id" group="SecretsProfile">
          <help short="Name of the user Key Vault where all the cluster specific user secrets are stored."/>
        </arg>
        <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets" options="secret-reference" group="SecretsProfile">
          <help short="Properties of Key Vault secret."/>
          <item type="object">
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].keyVaultObjectName" options="secret-name" required="True" group="HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[]">
              <help short="Object identifier name of the secret in key vault."/>
              <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].referenceName" options="reference-name" required="True">
              <help short="Reference name of the secret to be used in service configs."/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].type" options="type" required="True">
              <help short="Type of key vault object: secret, key or certificate."/>
              <enum>
                <item name="Certificate" value="&quot;Certificate&quot;"/>
                <item name="Key" value="&quot;Key&quot;"/>
                <item name="Secret" value="&quot;Secret&quot;"/>
              </enum>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].version" options="version">
              <help short="Version of the secret in key vault."/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <argGroup name="SparkProfile">
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.defaultStorageUrl" options="spark-storage-url" group="SparkProfile">
          <help short="The default storage URL."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbName" options="spark-hive-catalog-db-name" group="SparkProfile">
          <help short="The database name."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbPasswordSecretName" options="spark-hive-catalog-db-password-secret-name" group="SparkProfile">
          <help short="The secret name which contains the database user password."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbServerHost" options="spark-hive-catalog-db-server-name" group="SparkProfile">
          <help short="The database server host."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbUserName" options="spark-hive-catalog-db-user-name" group="SparkProfile">
          <help short="The database user name."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.keyVaultId" options="spark-hive-catalog-key-vault-id" group="SparkProfile">
          <help short="The key vault resource id."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.thriftUrl" options="spark-hive-catalog-thrift-url" group="SparkProfile">
          <help short="The thrift url."/>
        </arg>
        <arg type="object" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.userPluginsSpec" options="user-plugins-spec" group="SparkProfile">
          <help short="Spark user plugins spec"/>
          <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.userPluginsSpec.plugins" options="plugins">
            <help short="Spark user plugins."/>
            <item type="object">
              <arg type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.userPluginsSpec.plugins[].path" options="path" required="True">
                <help short="Fully qualified path to the folder containing the plugins."/>
                <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
              </arg>
            </item>
          </arg>
        </arg>
      </argGroup>
      <argGroup name="SshProfile">
        <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.sshProfile.count" options="ssh-profile-count" group="SshProfile">
          <help short="Number of ssh pods per cluster."/>
          <format maximum="5" minimum="0"/>
        </arg>
      </argGroup>
      <argGroup name="TrinoHiveCatalog">
        <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive" options="trino-hive-catalog" group="TrinoHiveCatalog">
          <help short="hive catalog options."/>
          <item type="object">
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].catalogName" options="catalog-name" required="True">
              <help short="Name of trino catalog which should use specified hive metastore."/>
              <format minLength="1"/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionPasswordSecret" options="metastore-db-connection-password-secret" required="True">
              <help short="Secret reference name from secretsProfile.secrets containing password for database connection."/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionURL" options="metastore-db-connection-url" required="True">
              <help short="Connection string for hive metastore database."/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionUserName" options="metastore-db-connection-user-name" required="True">
              <help short="User name for database connection."/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreWarehouseDir" options="metastore-warehouse-dir" required="True">
              <help short="Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri"/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <argGroup name="TrinoProfile">
        <arg type="object" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec" options="trino-profile-user-plugins-spec-plugin" group="TrinoProfile">
          <help short="Trino user plugins spec"/>
          <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins" options="plugins">
            <help short="Trino user plugins."/>
            <item type="object">
              <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins[].enabled" options="enabled">
                <help short="Denotes whether the plugin is active or not."/>
              </arg>
              <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins[].name" options="name">
                <help short="This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path."/>
                <format minLength="1"/>
              </arg>
              <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins[].path" options="path">
                <help short="Fully qualified path to the folder containing the plugins."/>
                <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
              </arg>
            </item>
          </arg>
        </arg>
        <arg type="object" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec" options="trino-profile-user-plugins-telemetry-spec" group="TrinoProfile">
          <help short="User telemetry"/>
          <arg type="object" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage" options="storage">
            <help short="Trino user telemetry definition."/>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.hivecatalogName" options="hivecatalog-name">
              <help short="Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created."/>
              <format minLength="1"/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.hivecatalogSchema" options="hivecatalog-schema">
              <help short="Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs."/>
              <default value="&quot;trinologs&quot;"/>
            </arg>
            <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.partitionRetentionInDays" options="partition-retention-in-days">
              <help short="Retention period for query log table partitions, this doesn't have any affect on actual data."/>
              <default value="365"/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.path" options="path">
              <help short="Azure storage location of the blobs."/>
              <format minLength="1"/>
            </arg>
          </arg>
        </arg>
      </argGroup>
      <argGroup name="Worker">
        <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.worker.debug.enable" options="worker-debug-enable" group="Worker">
          <default value="false"/>
        </arg>
        <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.worker.debug.port" options="worker-debug-port" group="Worker">
          <default value="8008"/>
        </arg>
        <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.worker.debug.suspend" options="worker-debug-suspend" group="Worker">
          <default value="false"/>
        </arg>
      </argGroup>
      <operation operationId="Clusters_Create">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
          <request method="put">
            <path>
              <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
              <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="HDInsightCluster" required="True" clientFlatten="True">
                  <prop type="ResourceLocation" name="location" arg="$HDInsightCluster.location" required="True"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="clusterProfile" required="True">
                      <prop type="object" name="authorizationProfile" required="True">
                        <prop type="array<string>" name="groupIds" arg="$HDInsightCluster.properties.clusterProfile.authorizationProfile.groupIds">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="userIds" arg="$HDInsightCluster.properties.clusterProfile.authorizationProfile.userIds">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="autoscaleProfile">
                        <prop type="string" name="autoscaleType" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.autoscaleType">
                          <enum>
                            <item value="&quot;LoadBased&quot;"/>
                            <item value="&quot;ScheduleBased&quot;"/>
                          </enum>
                        </prop>
                        <prop type="boolean" name="enabled" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.enabled" required="True"/>
                        <prop type="integer32" name="gracefulDecommissionTimeout" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.gracefulDecommissionTimeout"/>
                        <prop type="object" name="loadBasedConfig">
                          <prop type="integer32" name="cooldownPeriod" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.cooldownPeriod"/>
                          <prop type="integer32" name="maxNodes" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.maxNodes" required="True"/>
                          <prop type="integer32" name="minNodes" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.minNodes" required="True"/>
                          <prop type="integer32" name="pollInterval" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.pollInterval"/>
                          <prop type="array<object>" name="scalingRules" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules" required="True">
                            <item type="object">
                              <prop type="string" name="actionType" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].actionType" required="True">
                                <enum>
                                  <item value="&quot;scaledown&quot;"/>
                                  <item value="&quot;scaleup&quot;"/>
                                </enum>
                              </prop>
                              <prop type="object" name="comparisonRule" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].comparisonRule" required="True">
                                <prop type="string" name="operator" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].comparisonRule.operator" required="True">
                                  <enum>
                                    <item value="&quot;greaterThan&quot;"/>
                                    <item value="&quot;greaterThanOrEqual&quot;"/>
                                    <item value="&quot;lessThan&quot;"/>
                                    <item value="&quot;lessThanOrEqual&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="float" name="threshold" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].comparisonRule.threshold" required="True"/>
                              </prop>
                              <prop type="integer32" name="evaluationCount" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].evaluationCount" required="True"/>
                              <prop type="string" name="scalingMetric" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].scalingMetric" required="True"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="object" name="scheduleBasedConfig">
                          <prop type="integer32" name="defaultCount" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.defaultCount" required="True"/>
                          <prop type="array<object>" name="schedules" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules" required="True">
                            <item type="object">
                              <prop type="integer32" name="count" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].count" required="True"/>
                              <prop type="array<string>" name="days" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].days" required="True">
                                <item type="string">
                                  <enum>
                                    <item value="&quot;Friday&quot;"/>
                                    <item value="&quot;Monday&quot;"/>
                                    <item value="&quot;Saturday&quot;"/>
                                    <item value="&quot;Sunday&quot;"/>
                                    <item value="&quot;Thursday&quot;"/>
                                    <item value="&quot;Tuesday&quot;"/>
                                    <item value="&quot;Wednesday&quot;"/>
                                  </enum>
                                </item>
                              </prop>
                              <prop type="string" name="endTime" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].endTime" required="True">
                                <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                              </prop>
                              <prop type="string" name="startTime" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].startTime" required="True">
                                <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                              </prop>
                            </item>
                          </prop>
                          <prop type="string" name="timeZone" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.timeZone" required="True"/>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterVersion" arg="$HDInsightCluster.properties.clusterProfile.clusterVersion" required="True">
                        <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                      </prop>
                      <prop type="object" name="flinkProfile">
                        <prop type="object" name="catalogOptions">
                          <prop type="object" name="hive">
                            <prop type="string" name="metastoreDbConnectionPasswordSecret" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.catalogOptions.hive.metastoreDbConnectionPasswordSecret" required="True"/>
                            <prop type="string" name="metastoreDbConnectionURL" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.catalogOptions.hive.metastoreDbConnectionURL" required="True"/>
                            <prop type="string" name="metastoreDbConnectionUserName" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.catalogOptions.hive.metastoreDbConnectionUserName" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="historyServer">
                          <prop type="float32" name="cpu" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.historyServer.cpu" required="True"/>
                          <prop type="integer64" name="memory" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.historyServer.memory" required="True"/>
                        </prop>
                        <prop type="object" name="jobManager" required="True">
                          <prop type="float32" name="cpu" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.jobManager.cpu" required="True"/>
                          <prop type="integer64" name="memory" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.jobManager.memory" required="True"/>
                        </prop>
                        <prop type="integer32" name="numReplicas" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.numReplicas"/>
                        <prop type="object" name="storage" required="True">
                          <prop type="string" name="storageUri" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.storage.storageUri" required="True">
                            <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                          </prop>
                          <prop type="string" name="storagekey" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.storage.storagekey" secret="True"/>
                        </prop>
                        <prop type="object" name="taskManager" required="True">
                          <prop type="float32" name="cpu" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.taskManager.cpu" required="True"/>
                          <prop type="integer64" name="memory" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.taskManager.memory" required="True"/>
                        </prop>
                      </prop>
                      <prop type="object" name="identityProfile" required="True">
                        <prop type="string" name="msiClientId" arg="$HDInsightCluster.properties.clusterProfile.identityProfile.msiClientId" required="True">
                          <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                        </prop>
                        <prop type="string" name="msiObjectId" arg="$HDInsightCluster.properties.clusterProfile.identityProfile.msiObjectId" required="True">
                          <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                        </prop>
                        <prop type="ResourceId" name="msiResourceId" arg="$HDInsightCluster.properties.clusterProfile.identityProfile.msiResourceId" required="True"/>
                      </prop>
                      <prop type="object" name="kafkaProfile" arg="$HDInsightCluster.properties.clusterProfile.kafkaProfile">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="object" name="llapProfile" arg="$HDInsightCluster.properties.clusterProfile.llapProfile">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="object" name="logAnalyticsProfile">
                        <prop type="object" name="applicationLogs">
                          <prop type="boolean" name="stdErrorEnabled" arg="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.applicationLogs.stdErrorEnabled"/>
                          <prop type="boolean" name="stdOutEnabled" arg="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.applicationLogs.stdOutEnabled"/>
                        </prop>
                        <prop type="boolean" name="enabled" arg="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.enabled" required="True"/>
                        <prop type="boolean" name="metricsEnabled" arg="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.metricsEnabled"/>
                      </prop>
                      <prop type="string" name="ossVersion" arg="$HDInsightCluster.properties.clusterProfile.ossVersion" required="True">
                        <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                      </prop>
                      <prop type="object" name="prometheusProfile">
                        <prop type="boolean" name="enabled" arg="$HDInsightCluster.properties.clusterProfile.prometheusProfile.enabled" required="True">
                          <default value="false"/>
                        </prop>
                      </prop>
                      <prop type="array<object>" name="scriptActionProfiles" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles">
                        <item type="object">
                          <prop type="string" name="name" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].name" required="True"/>
                          <prop type="string" name="parameters" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].parameters"/>
                          <prop type="array<string>" name="services" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].services" required="True">
                            <item type="string"/>
                          </prop>
                          <prop type="boolean" name="shouldPersist" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].shouldPersist">
                            <default value="true"/>
                          </prop>
                          <prop type="integer32" name="timeoutInMinutes" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].timeoutInMinutes"/>
                          <prop type="string" name="type" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].type" required="True"/>
                          <prop type="string" name="url" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].url" required="True">
                            <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                          </prop>
                        </item>
                      </prop>
                      <prop type="object" name="secretsProfile">
                        <prop type="ResourceId" name="keyVaultResourceId" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.keyVaultResourceId" required="True"/>
                        <prop type="array<object>" name="secrets" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets">
                          <item type="object">
                            <prop type="string" name="keyVaultObjectName" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].keyVaultObjectName" required="True">
                              <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                            </prop>
                            <prop type="string" name="referenceName" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].referenceName" required="True"/>
                            <prop type="string" name="type" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].type" required="True">
                              <enum>
                                <item value="&quot;Certificate&quot;"/>
                                <item value="&quot;Key&quot;"/>
                                <item value="&quot;Secret&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="version" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].version"/>
                          </item>
                        </prop>
                      </prop>
                      <prop type="array<object>" name="serviceConfigsProfiles" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles">
                        <item type="object">
                          <prop type="array<object>" name="configs" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs" required="True">
                            <item type="object">
                              <prop type="string" name="component" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].component" required="True"/>
                              <prop type="array<object>" name="files" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files" required="True">
                                <item type="object">
                                  <prop type="string" name="content" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content"/>
                                  <prop type="string" name="encoding" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding">
                                    <enum>
                                      <item value="&quot;Base64&quot;"/>
                                      <item value="&quot;None&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="string" name="fileName" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" required="True"/>
                                  <prop type="string" name="path" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path"/>
                                  <prop type="object" name="values" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values">
                                    <additionalProp>
                                      <item type="string"/>
                                    </additionalProp>
                                  </prop>
                                </item>
                              </prop>
                            </item>
                          </prop>
                          <prop type="string" name="serviceName" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].serviceName" required="True"/>
                        </item>
                      </prop>
                      <prop type="object" name="sparkProfile">
                        <prop type="string" name="defaultStorageUrl" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.defaultStorageUrl"/>
                        <prop type="object" name="metastoreSpec">
                          <prop type="string" name="dbName" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbName" required="True"/>
                          <prop type="string" name="dbPasswordSecretName" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbPasswordSecretName" required="True"/>
                          <prop type="string" name="dbServerHost" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbServerHost" required="True"/>
                          <prop type="string" name="dbUserName" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbUserName" required="True"/>
                          <prop type="string" name="keyVaultId" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.keyVaultId" required="True"/>
                          <prop type="string" name="thriftUrl" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.thriftUrl"/>
                        </prop>
                        <prop type="object" name="userPluginsSpec" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.userPluginsSpec">
                          <prop type="array<object>" name="plugins" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.userPluginsSpec.plugins">
                            <item type="object">
                              <prop type="string" name="path" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.userPluginsSpec.plugins[].path" required="True">
                                <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="object" name="sshProfile">
                        <prop type="integer32" name="count" arg="$HDInsightCluster.properties.clusterProfile.sshProfile.count" required="True">
                          <format maximum="5" minimum="0"/>
                        </prop>
                      </prop>
                      <prop type="object" name="stubProfile" arg="$HDInsightCluster.properties.clusterProfile.stubProfile">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="object" name="trinoProfile">
                        <prop type="object" name="catalogOptions">
                          <prop type="array<object>" name="hive" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive">
                            <item type="object">
                              <prop type="string" name="catalogName" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].catalogName" required="True">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionUserName" required="True"/>
                              <prop type="string" name="metastoreWarehouseDir" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreWarehouseDir" required="True"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="object" name="coordinator">
                          <prop type="object" name="debug" clientFlatten="True">
                            <prop type="boolean" name="enable" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.debug.enable">
                              <default value="false"/>
                            </prop>
                            <prop type="integer32" name="port" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.debug.port">
                              <default value="8008"/>
                            </prop>
                            <prop type="boolean" name="suspend" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.debug.suspend">
                              <default value="false"/>
                            </prop>
                          </prop>
                          <prop type="boolean" name="highAvailabilityEnabled" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.highAvailabilityEnabled">
                            <default value="true"/>
                          </prop>
                        </prop>
                        <prop type="object" name="userPluginsSpec" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec">
                          <prop type="array<object>" name="plugins" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins">
                            <item type="object">
                              <prop type="boolean" name="enabled" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins[].enabled"/>
                              <prop type="string" name="name" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins[].name">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="path" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins[].path">
                                <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                        <prop type="object" name="userTelemetrySpec" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec">
                          <prop type="object" name="storage" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage">
                            <prop type="string" name="hivecatalogName" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.hivecatalogName">
                              <format minLength="1"/>
                            </prop>
                            <prop type="string" name="hivecatalogSchema" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.hivecatalogSchema">
                              <default value="&quot;trinologs&quot;"/>
                            </prop>
                            <prop type="integer32" name="partitionRetentionInDays" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.partitionRetentionInDays">
                              <default value="365"/>
                            </prop>
                            <prop type="string" name="path" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.path">
                              <format minLength="1"/>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="worker">
                          <prop type="object" name="debug" clientFlatten="True">
                            <prop type="boolean" name="enable" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.worker.debug.enable">
                              <default value="false"/>
                            </prop>
                            <prop type="integer32" name="port" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.worker.debug.port">
                              <default value="8008"/>
                            </prop>
                            <prop type="boolean" name="suspend" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.worker.debug.suspend">
                              <default value="false"/>
                            </prop>
                          </prop>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="string" name="clusterType" arg="$HDInsightCluster.properties.clusterType" required="True">
                      <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                    </prop>
                    <prop type="object" name="computeProfile" required="True">
                      <prop type="array<object>" name="nodes" arg="$HDInsightCluster.properties.computeProfile.nodes" required="True">
                        <item type="object">
                          <prop type="integer32" name="count" arg="$HDInsightCluster.properties.computeProfile.nodes[].count" required="True">
                            <format minimum="1"/>
                          </prop>
                          <prop type="string" name="type" arg="$HDInsightCluster.properties.computeProfile.nodes[].type" required="True">
                            <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                          </prop>
                          <prop type="string" name="vmSize" arg="$HDInsightCluster.properties.computeProfile.nodes[].vmSize" required="True">
                            <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                          </prop>
                        </item>
                      </prop>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$HDInsightCluster.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="clusterProfile" required="True">
                      <prop type="object" name="authorizationProfile" required="True">
                        <prop type="array<string>" name="groupIds">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="userIds">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="autoscaleProfile">
                        <prop type="string" name="autoscaleType">
                          <enum>
                            <item value="&quot;LoadBased&quot;"/>
                            <item value="&quot;ScheduleBased&quot;"/>
                          </enum>
                        </prop>
                        <prop type="boolean" name="enabled" required="True"/>
                        <prop type="integer32" name="gracefulDecommissionTimeout"/>
                        <prop type="object" name="loadBasedConfig">
                          <prop type="integer32" name="cooldownPeriod"/>
                          <prop type="integer32" name="maxNodes" required="True"/>
                          <prop type="integer32" name="minNodes" required="True"/>
                          <prop type="integer32" name="pollInterval"/>
                          <prop type="array<object>" name="scalingRules" required="True">
                            <item type="object">
                              <prop type="string" name="actionType" required="True">
                                <enum>
                                  <item value="&quot;scaledown&quot;"/>
                                  <item value="&quot;scaleup&quot;"/>
                                </enum>
                              </prop>
                              <prop type="object" name="comparisonRule" required="True">
                                <prop type="string" name="operator" required="True">
                                  <enum>
                                    <item value="&quot;greaterThan&quot;"/>
                                    <item value="&quot;greaterThanOrEqual&quot;"/>
                                    <item value="&quot;lessThan&quot;"/>
                                    <item value="&quot;lessThanOrEqual&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="float" name="threshold" required="True"/>
                              </prop>
                              <prop type="integer32" name="evaluationCount" required="True"/>
                              <prop type="string" name="scalingMetric" required="True"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="object" name="scheduleBasedConfig">
                          <prop type="integer32" name="defaultCount" required="True"/>
                          <prop type="array<object>" name="schedules" required="True">
                            <item type="object">
                              <prop type="integer32" name="count" required="True"/>
                              <prop type="array<string>" name="days" required="True">
                                <item type="string">
                                  <enum>
                                    <item value="&quot;Friday&quot;"/>
                                    <item value="&quot;Monday&quot;"/>
                                    <item value="&quot;Saturday&quot;"/>
                                    <item value="&quot;Sunday&quot;"/>
                                    <item value="&quot;Thursday&quot;"/>
                                    <item value="&quot;Tuesday&quot;"/>
                                    <item value="&quot;Wednesday&quot;"/>
                                  </enum>
                                </item>
                              </prop>
                              <prop type="string" name="endTime" required="True">
                                <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                              </prop>
                              <prop type="string" name="startTime" required="True">
                                <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                              </prop>
                            </item>
                          </prop>
                          <prop type="string" name="timeZone" required="True"/>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterVersion" required="True">
                        <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                      </prop>
                      <prop readOnly="True" type="array<object>" name="components">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="string" name="version"/>
                        </item>
                      </prop>
                      <prop readOnly="True" type="object" name="connectivityProfile">
                        <prop type="array<object>" name="ssh">
                          <item type="object">
                            <prop type="string" name="endpoint" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="web" required="True">
                          <prop type="string" name="fqdn" required="True"/>
                        </prop>
                      </prop>
                      <prop type="object" name="flinkProfile">
                        <prop type="object" name="catalogOptions">
                          <prop type="object" name="hive">
                            <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                            <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                            <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                          </prop>
                        </prop>
                        <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                        <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                          <prop type="float32" name="cpu" required="True"/>
                          <prop type="integer64" name="memory" required="True"/>
                        </prop>
                        <prop type="integer32" name="numReplicas"/>
                        <prop type="object" name="storage" required="True">
                          <prop type="string" name="storageUri" required="True">
                            <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                          </prop>
                          <prop type="string" name="storagekey" secret="True"/>
                        </prop>
                        <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                      </prop>
                      <prop type="object" name="identityProfile" required="True">
                        <prop type="string" name="msiClientId" required="True">
                          <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                        </prop>
                        <prop type="string" name="msiObjectId" required="True">
                          <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                        </prop>
                        <prop type="ResourceId" name="msiResourceId" required="True"/>
                      </prop>
                      <prop type="object" name="kafkaProfile">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="object" name="llapProfile">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="object" name="logAnalyticsProfile">
                        <prop type="object" name="applicationLogs">
                          <prop type="boolean" name="stdErrorEnabled"/>
                          <prop type="boolean" name="stdOutEnabled"/>
                        </prop>
                        <prop type="boolean" name="enabled" required="True"/>
                        <prop type="boolean" name="metricsEnabled"/>
                      </prop>
                      <prop type="string" name="ossVersion" required="True">
                        <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                      </prop>
                      <prop type="object" name="prometheusProfile">
                        <prop type="boolean" name="enabled" required="True">
                          <default value="false"/>
                        </prop>
                      </prop>
                      <prop type="array<object>" name="scriptActionProfiles">
                        <item type="object">
                          <prop type="string" name="name" required="True"/>
                          <prop type="string" name="parameters"/>
                          <prop type="array<string>" name="services" required="True">
                            <item type="string"/>
                          </prop>
                          <prop type="boolean" name="shouldPersist">
                            <default value="true"/>
                          </prop>
                          <prop type="integer32" name="timeoutInMinutes"/>
                          <prop type="string" name="type" required="True"/>
                          <prop type="string" name="url" required="True">
                            <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                          </prop>
                        </item>
                      </prop>
                      <prop type="object" name="secretsProfile">
                        <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                        <prop type="array<object>" name="secrets">
                          <item type="object">
                            <prop type="string" name="keyVaultObjectName" required="True">
                              <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                            </prop>
                            <prop type="string" name="referenceName" required="True"/>
                            <prop type="string" name="type" required="True">
                              <enum>
                                <item value="&quot;Certificate&quot;"/>
                                <item value="&quot;Key&quot;"/>
                                <item value="&quot;Secret&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                      </prop>
                      <prop type="array<object>" name="serviceConfigsProfiles">
                        <item type="object">
                          <prop type="array<object>" name="configs" required="True">
                            <item type="object">
                              <prop type="string" name="component" required="True"/>
                              <prop type="array<object>" name="files" required="True">
                                <item type="object">
                                  <prop type="string" name="content"/>
                                  <prop type="string" name="encoding">
                                    <enum>
                                      <item value="&quot;Base64&quot;"/>
                                      <item value="&quot;None&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="string" name="fileName" required="True"/>
                                  <prop type="string" name="path"/>
                                  <prop type="object" name="values">
                                    <additionalProp>
                                      <item type="string"/>
                                    </additionalProp>
                                  </prop>
                                </item>
                              </prop>
                            </item>
                          </prop>
                          <prop type="string" name="serviceName" required="True"/>
                        </item>
                      </prop>
                      <prop type="object" name="sparkProfile">
                        <prop type="string" name="defaultStorageUrl"/>
                        <prop type="object" name="metastoreSpec">
                          <prop type="string" name="dbName" required="True"/>
                          <prop type="string" name="dbPasswordSecretName" required="True"/>
                          <prop type="string" name="dbServerHost" required="True"/>
                          <prop type="string" name="dbUserName" required="True"/>
                          <prop type="string" name="keyVaultId" required="True"/>
                          <prop type="string" name="thriftUrl"/>
                        </prop>
                        <prop type="object" name="userPluginsSpec">
                          <prop type="array<object>" name="plugins">
                            <item type="object">
                              <prop type="string" name="path" required="True">
                                <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="object" name="sshProfile">
                        <prop type="integer32" name="count" required="True">
                          <format maximum="5" minimum="0"/>
                        </prop>
                        <prop readOnly="True" type="string" name="podPrefix"/>
                      </prop>
                      <prop type="object" name="stubProfile">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="object" name="trinoProfile">
                        <prop type="object" name="catalogOptions">
                          <prop type="array<object>" name="hive">
                            <item type="object">
                              <prop type="string" name="catalogName" required="True">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                              <prop type="string" name="metastoreWarehouseDir" required="True"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="object" name="coordinator">
                          <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                            <prop type="boolean" name="enable">
                              <default value="false"/>
                            </prop>
                            <prop type="integer32" name="port">
                              <default value="8008"/>
                            </prop>
                            <prop type="boolean" name="suspend">
                              <default value="false"/>
                            </prop>
                          </prop>
                          <prop type="boolean" name="highAvailabilityEnabled">
                            <default value="true"/>
                          </prop>
                        </prop>
                        <prop type="object" name="userPluginsSpec">
                          <prop type="array<object>" name="plugins">
                            <item type="object">
                              <prop type="boolean" name="enabled"/>
                              <prop type="string" name="name">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="path">
                                <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                        <prop type="object" name="userTelemetrySpec">
                          <prop type="object" name="storage">
                            <prop type="string" name="hivecatalogName">
                              <format minLength="1"/>
                            </prop>
                            <prop type="string" name="hivecatalogSchema">
                              <default value="&quot;trinologs&quot;"/>
                            </prop>
                            <prop type="integer32" name="partitionRetentionInDays">
                              <default value="365"/>
                            </prop>
                            <prop type="string" name="path">
                              <format minLength="1"/>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="worker">
                          <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="string" name="clusterType" required="True">
                      <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                    </prop>
                    <prop type="object" name="computeProfile" required="True">
                      <prop type="array<object>" name="nodes" required="True">
                        <item type="object">
                          <prop type="integer32" name="count" required="True">
                            <format minimum="1"/>
                          </prop>
                          <prop type="string" name="type" required="True">
                            <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                          </prop>
                          <prop type="string" name="vmSize" required="True">
                            <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                          </prop>
                        </item>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="deploymentId"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="status"/>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2023-06-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.clusterName" options="cluster-name name n" required="True" idPart="child_name_1">
          <help short="The name of the HDInsight cluster."/>
        </arg>
        <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
          <help short="The name of the cluster pool."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="ClusterProfile">
        <arg nullable="True" type="array<string>" var="$HDInsightCluster.properties.clusterProfile.authorizationProfile.groupIds" options="authorization-group-id" group="ClusterProfile">
          <help short="AAD group Ids authorized for data plane access."/>
          <item nullable="True" type="string"/>
        </arg>
        <arg nullable="True" type="array<string>" var="$HDInsightCluster.properties.clusterProfile.authorizationProfile.userIds" options="authorization-user-id" group="ClusterProfile">
          <help short="AAD user Ids authorized for data plane access."/>
          <item nullable="True" type="string"/>
        </arg>
        <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.autoscaleType" options="autoscale-profile-type" group="ClusterProfile">
          <help short="User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based."/>
          <enum>
            <item name="LoadBased" value="&quot;LoadBased&quot;"/>
            <item name="ScheduleBased" value="&quot;ScheduleBased&quot;"/>
          </enum>
        </arg>
        <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.enabled" options="autoscale-profile-enabled" group="ClusterProfile">
          <help short="This indicates whether auto scale is enabled on HDInsight on AKS cluster."/>
        </arg>
        <arg nullable="True" type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.gracefulDecommissionTimeout" options="autoscale-profile-graceful-decommission-timeout" group="ClusterProfile">
          <help short="This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout."/>
        </arg>
        <arg nullable="True" type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.cooldownPeriod" options="loadbased-config-cooldown-period" group="ClusterProfile">
          <help short="This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds."/>
        </arg>
        <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.maxNodes" options="loadbased-config-max-nodes" group="ClusterProfile">
          <help short="User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes."/>
        </arg>
        <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.minNodes" options="loadbased-config-min-nodes" group="ClusterProfile">
          <help short="User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes."/>
        </arg>
        <arg nullable="True" type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.pollInterval" options="loadbased-config-poll-interval" group="ClusterProfile">
          <help short="User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation."/>
        </arg>
        <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules" options="loadbased-config-scaling-rules" group="ClusterProfile">
          <help short="The scaling rules."/>
          <item nullable="True" type="object">
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].actionType" options="action-type">
              <help short="The action type."/>
              <enum>
                <item name="scaledown" value="&quot;scaledown&quot;"/>
                <item name="scaleup" value="&quot;scaleup&quot;"/>
              </enum>
            </arg>
            <arg type="object" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].comparisonRule" options="comparison-rule">
              <help short="The comparison rule."/>
              <arg type="string" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].comparisonRule.operator" options="operator">
                <help short="The comparison operator."/>
                <enum>
                  <item name="greaterThan" value="&quot;greaterThan&quot;"/>
                  <item name="greaterThanOrEqual" value="&quot;greaterThanOrEqual&quot;"/>
                  <item name="lessThan" value="&quot;lessThan&quot;"/>
                  <item name="lessThanOrEqual" value="&quot;lessThanOrEqual&quot;"/>
                </enum>
              </arg>
              <arg type="float" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].comparisonRule.threshold" options="threshold">
                <help short="Threshold setting."/>
              </arg>
            </arg>
            <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].evaluationCount" options="evaluation-count">
              <help short="This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered."/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].scalingMetric" options="scaling-metric">
              <help short="Metrics name for individual workloads. For example: cpu"/>
            </arg>
          </item>
        </arg>
        <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.defaultCount" options="schedule-based-config-default-count" group="ClusterProfile">
          <help short="Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)"/>
        </arg>
        <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules" options="schedule-based-config-schedule" group="ClusterProfile">
          <help short="This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end)."/>
          <item nullable="True" type="object">
            <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].count" options="count">
              <help short="User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer."/>
            </arg>
            <arg type="array<string>" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].days" options="days">
              <help short="User has to set the days where schedule has to be set for autoscale operation."/>
              <item nullable="True" type="string">
                <enum>
                  <item name="Friday" value="&quot;Friday&quot;"/>
                  <item name="Monday" value="&quot;Monday&quot;"/>
                  <item name="Saturday" value="&quot;Saturday&quot;"/>
                  <item name="Sunday" value="&quot;Sunday&quot;"/>
                  <item name="Thursday" value="&quot;Thursday&quot;"/>
                  <item name="Tuesday" value="&quot;Tuesday&quot;"/>
                  <item name="Wednesday" value="&quot;Wednesday&quot;"/>
                </enum>
              </item>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].endTime" options="end-time">
              <help short="User has to set the end time of current schedule configuration, format like 10:30 (HH:MM)."/>
              <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].startTime" options="start-time">
              <help short="User has to set the start time of current schedule configuration, format like 10:30 (HH:MM)."/>
              <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
            </arg>
          </item>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.timeZone" options="schedule-based-config-time-zone" group="ClusterProfile">
          <help short="User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.clusterVersion" options="cluster-version" group="ClusterProfile">
          <help short="Version with 3/4 part."/>
          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.identityProfile.msiClientId" options="assigned-identity-client-id" group="ClusterProfile">
          <help short="ClientId of the MSI."/>
          <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.identityProfile.msiObjectId" options="assigned-identity-object-id" group="ClusterProfile">
          <help short="ObjectId of the MSI."/>
          <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
        </arg>
        <arg type="ResourceId" var="$HDInsightCluster.properties.clusterProfile.identityProfile.msiResourceId" options="assigned-identity-resource-id" group="ClusterProfile">
          <help short="ResourceId of the MSI."/>
        </arg>
        <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.kafkaProfile" options="kafka-profile" group="ClusterProfile">
          <help short="Kafka cluster profile."/>
          <additionalProp anyType="True"/>
        </arg>
        <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.llapProfile" options="llap-profile" group="ClusterProfile">
          <help short="LLAP cluster profile."/>
          <additionalProp anyType="True"/>
        </arg>
        <arg nullable="True" type="boolean" var="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.applicationLogs.stdErrorEnabled" options="application-log-std-error-enabled" group="ClusterProfile">
          <help short="True if stderror is enabled, otherwise false."/>
        </arg>
        <arg nullable="True" type="boolean" var="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.applicationLogs.stdOutEnabled" options="application-log-std-out-enabled" group="ClusterProfile">
          <help short="True if stdout is enabled, otherwise false."/>
        </arg>
        <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.enabled" options="enable-log-analytics" group="ClusterProfile">
          <help short="True if log analytics is enabled for the cluster, otherwise false."/>
        </arg>
        <arg nullable="True" type="boolean" var="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.metricsEnabled" options="log-analytic-profile-metrics-enabled" group="ClusterProfile">
          <help short="True if metrics are enabled, otherwise false."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.ossVersion" options="oss-version" group="ClusterProfile">
          <help short="Version with three part."/>
          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
        </arg>
        <arg type="boolean" var="$HDInsightCluster.properties.clusterProfile.prometheusProfile.enabled" options="prometheu-profile-enabled" group="ClusterProfile">
          <help short="Enable Prometheus for cluster or not."/>
        </arg>
        <arg nullable="True" type="array<object>" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles" options="script-action-profiles" group="ClusterProfile">
          <help short="The script action profile list."/>
          <item nullable="True" type="object">
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].name" options="name">
              <help short="Script name."/>
            </arg>
            <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].parameters" options="parameters">
              <help short="Additional parameters for the script action. It should be space-separated list of arguments required for script execution."/>
            </arg>
            <arg type="array<string>" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].services" options="services">
              <help short="List of services to apply the script action."/>
              <item nullable="True" type="string"/>
            </arg>
            <arg nullable="True" type="boolean" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].shouldPersist" options="should-persist">
              <help short="Specify if the script should persist on the cluster."/>
            </arg>
            <arg nullable="True" type="integer32" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].timeoutInMinutes" options="timeout-in-minutes">
              <help short="Timeout duration for the script action in minutes."/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].type" options="type">
              <help short="Type of the script action. Supported type is bash scripts."/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].url" options="url">
              <help short="Url of the script file."/>
              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="array<object>" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles" options="service-configs-profiles" group="ClusterProfile">
          <help short="The service configs profiles."/>
          <item nullable="True" type="object">
            <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs" options="configs">
              <help short="List of service configs."/>
              <item nullable="True" type="object">
                <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].component" options="component">
                  <help short="Name of the component the config files should apply to."/>
                </arg>
                <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files" options="files">
                  <help short="List of Config Files."/>
                  <item nullable="True" type="object">
                    <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content" options="content">
                      <help short="Free form content of the entire configuration file."/>
                    </arg>
                    <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding" options="encoding">
                      <help short="This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text."/>
                      <enum>
                        <item name="Base64" value="&quot;Base64&quot;"/>
                        <item name="None" value="&quot;None&quot;"/>
                      </enum>
                    </arg>
                    <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" options="file-name">
                      <help short="Configuration file name."/>
                    </arg>
                    <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path" options="path">
                      <help short="Path of the config file if content is specified."/>
                    </arg>
                    <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values" options="values">
                      <help short="List of key value pairs where key represents a valid service configuration name and value represents the value of the config."/>
                      <additionalProp>
                        <item nullable="True" type="string"/>
                      </additionalProp>
                    </arg>
                  </item>
                </arg>
              </item>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].serviceName" options="service-name">
              <help short="Name of the service the configurations should apply to."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.defaultStorageUrl" options="spark-storage-url" group="ClusterProfile">
          <help short="The default storage URL."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbName" options="spark-hive-catalog-db-name" group="ClusterProfile">
          <help short="The database name."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbPasswordSecretName" options="spark-hive-catalog-db-password-secret-name" group="ClusterProfile">
          <help short="The secret name which contains the database user password."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbServerHost" options="spark-hive-catalog-db-server-name" group="ClusterProfile">
          <help short="The database server host."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbUserName" options="spark-hive-catalog-db-user-name" group="ClusterProfile">
          <help short="The database user name."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.keyVaultId" options="spark-hive-catalog-key-vault-id" group="ClusterProfile">
          <help short="The key vault resource id."/>
        </arg>
        <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.thriftUrl" options="spark-hive-catalog-thrift-url" group="ClusterProfile">
          <help short="The thrift url."/>
        </arg>
        <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.userPluginsSpec" options="user-plugins-spec" group="ClusterProfile">
          <help short="Spark user plugins spec"/>
          <arg nullable="True" type="array<object>" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.userPluginsSpec.plugins" options="plugins">
            <help short="Spark user plugins."/>
            <item nullable="True" type="object">
              <arg type="string" var="$HDInsightCluster.properties.clusterProfile.sparkProfile.userPluginsSpec.plugins[].path" options="path">
                <help short="Fully qualified path to the folder containing the plugins."/>
                <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
              </arg>
            </item>
          </arg>
        </arg>
        <arg type="integer32" var="$HDInsightCluster.properties.clusterProfile.sshProfile.count" options="ssh-profile-count" group="ClusterProfile">
          <help short="Number of ssh pods per cluster."/>
          <format maximum="5" minimum="0"/>
        </arg>
        <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.stubProfile" options="stub-profile" group="ClusterProfile">
          <help short="Stub cluster profile."/>
          <additionalProp anyType="True"/>
        </arg>
        <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.trinoProfile" options="trino-profile" group="ClusterProfile">
          <help short="Trino Cluster profile."/>
          <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions" options="catalog-options">
            <help short="Trino cluster catalog options."/>
            <arg nullable="True" type="array<object>" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive" options="hive">
              <help short="hive catalog options."/>
              <item nullable="True" type="object">
                <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].catalogName" options="catalog-name">
                  <help short="Name of trino catalog which should use specified hive metastore."/>
                  <format minLength="1"/>
                </arg>
                <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionPasswordSecret" options="metastore-db-connection-password-secret">
                  <help short="Secret reference name from secretsProfile.secrets containing password for database connection."/>
                </arg>
                <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionURL" options="metastore-db-connection-url">
                  <help short="Connection string for hive metastore database."/>
                </arg>
                <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionUserName" options="metastore-db-connection-user-name">
                  <help short="User name for database connection."/>
                </arg>
                <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreWarehouseDir" options="metastore-warehouse-dir">
                  <help short="Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri"/>
                </arg>
              </item>
            </arg>
          </arg>
          <arg nullable="True" type="boolean" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.debug.enable" options="coordinator-high-availability-enabled" group="Coordinator"/>
          <arg nullable="True" type="integer32" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.debug.port" options="coordinator-debug-port" group="Coordinator"/>
          <arg nullable="True" type="boolean" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.debug.suspend" options="coordinator-debug-suspend" group="Coordinator"/>
          <arg nullable="True" type="boolean" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.highAvailabilityEnabled" options="coordinator-debug-enabled" group="Coordinator">
            <help short="The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true."/>
          </arg>
          <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec" options="user-plugins-spec">
            <help short="Trino user plugins spec"/>
            <arg nullable="True" type="array<object>" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins" options="plugins">
              <help short="Trino user plugins."/>
              <item nullable="True" type="object">
                <arg nullable="True" type="boolean" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins[].enabled" options="enabled">
                  <help short="Denotes whether the plugin is active or not."/>
                </arg>
                <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins[].name" options="name">
                  <help short="This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path."/>
                  <format minLength="1"/>
                </arg>
                <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins[].path" options="path">
                  <help short="Fully qualified path to the folder containing the plugins."/>
                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                </arg>
              </item>
            </arg>
          </arg>
          <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec" options="user-telemetry-spec">
            <help short="User telemetry"/>
            <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage" options="storage">
              <help short="Trino user telemetry definition."/>
              <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.hivecatalogName" options="hivecatalog-name">
                <help short="Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created."/>
                <format minLength="1"/>
              </arg>
              <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.hivecatalogSchema" options="hivecatalog-schema">
                <help short="Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs."/>
              </arg>
              <arg nullable="True" type="integer32" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.partitionRetentionInDays" options="partition-retention-in-days">
                <help short="Retention period for query log table partitions, this doesn't have any affect on actual data."/>
              </arg>
              <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.path" options="path">
                <help short="Azure storage location of the blobs."/>
                <format minLength="1"/>
              </arg>
            </arg>
          </arg>
          <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.worker" options="worker">
            <help short="Trino worker."/>
            <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.worker.debug" options="debug" cls="TrinoDebugConfig_update">
              <arg nullable="True" type="boolean" var="@TrinoDebugConfig_update.enable" options="enable">
                <help short="The flag that if enable debug or not."/>
              </arg>
              <arg nullable="True" type="integer32" var="@TrinoDebugConfig_update.port" options="port">
                <help short="The debug port."/>
              </arg>
              <arg nullable="True" type="boolean" var="@TrinoDebugConfig_update.suspend" options="suspend">
                <help short="The flag that if suspend debug or not."/>
              </arg>
            </arg>
          </arg>
        </arg>
      </argGroup>
      <argGroup name="ComputeProfile">
        <arg type="array<object>" var="$HDInsightCluster.properties.computeProfile.nodes" options="nodes" group="ComputeProfile">
          <help short="The nodes definitions."/>
          <item nullable="True" type="object">
            <arg type="integer32" var="$HDInsightCluster.properties.computeProfile.nodes[].count" options="count">
              <help short="The number of virtual machines."/>
              <format minimum="1"/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.computeProfile.nodes[].type" options="type">
              <help short="The node type."/>
              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.computeProfile.nodes[].vmSize" options="vm-size">
              <help short="The virtual machine SKU."/>
              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <argGroup name="FlinkProfile">
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.catalogOptions.hive.metastoreDbConnectionPasswordSecret" options="flink-hive-catalog-db-connection-password-secret" group="FlinkProfile">
          <help short="Secret reference name from secretsProfile.secrets containing password for database connection."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.catalogOptions.hive.metastoreDbConnectionURL" options="flink-hive-catalog-db-connection-url" group="FlinkProfile">
          <help short="Connection string for hive metastore database."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.catalogOptions.hive.metastoreDbConnectionUserName" options="flink-hive-catalog-db-connection-user-name" group="FlinkProfile">
          <help short="User name for database connection."/>
        </arg>
        <arg type="float32" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.historyServer.cpu" options="history-server-cpu" group="FlinkProfile">
          <help short="History server cpu count."/>
        </arg>
        <arg type="integer64" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.historyServer.memory" options="history-server-memory" group="FlinkProfile">
          <help short="History server memory size."/>
        </arg>
        <arg type="float32" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.jobManager.cpu" options="job-manager-cpu" group="FlinkProfile">
          <help short="Job manager CPU count."/>
        </arg>
        <arg type="integer64" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.jobManager.memory" options="job-manager-memory" group="FlinkProfile">
          <help short="Job manager memory size."/>
        </arg>
        <arg nullable="True" type="integer32" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.numReplicas" options="num-replicas" group="FlinkProfile">
          <help short="The number of task managers."/>
        </arg>
        <arg type="string" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.storage.storageUri" options="flink-storage-uri" group="FlinkProfile">
          <help short="Storage account uri which is used for savepoint and checkpoint state."/>
          <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
        </arg>
        <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.storage.storagekey" options="flink-storage-key" group="FlinkProfile">
          <help short="Storage key is only required for wasb(s) storage."/>
        </arg>
        <arg type="float32" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.taskManager.cpu" options="task-manager-cpu" group="FlinkProfile"/>
        <arg type="integer64" var="$HDInsightCluster.properties.clusterProfile.flinkProfile.taskManager.memory" options="task-manager-memory" group="FlinkProfile"/>
      </argGroup>
      <argGroup name="HDInsightCluster">
        <arg nullable="True" type="object" var="$HDInsightCluster.tags" options="tags" group="HDInsightCluster">
          <help short="Resource tags."/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="SecretsProfile">
        <arg type="ResourceId" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.keyVaultResourceId" options="key-vault-id" group="SecretsProfile">
          <help short="Name of the user Key Vault where all the cluster specific user secrets are stored."/>
        </arg>
        <arg nullable="True" type="array<object>" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets" options="secret-reference" group="SecretsProfile">
          <help short="Properties of Key Vault secret."/>
          <item nullable="True" type="object">
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].keyVaultObjectName" options="secret-name" group="HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[]">
              <help short="Object identifier name of the secret in key vault."/>
              <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].referenceName" options="reference-name">
              <help short="Reference name of the secret to be used in service configs."/>
            </arg>
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].type" options="type">
              <help short="Type of key vault object: secret, key or certificate."/>
              <enum>
                <item name="Certificate" value="&quot;Certificate&quot;"/>
                <item name="Key" value="&quot;Key&quot;"/>
                <item name="Secret" value="&quot;Secret&quot;"/>
              </enum>
            </arg>
            <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].version" options="version">
              <help short="Version of the secret in key vault."/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <operation operationId="Clusters_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
          <request method="get">
            <path>
              <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
              <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="Cluster_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="clusterProfile" required="True">
                      <prop type="object" name="authorizationProfile" required="True">
                        <prop type="array<string>" name="groupIds">
                          <item type="string"/>
                        </prop>
                        <prop type="array<string>" name="userIds">
                          <item type="string"/>
                        </prop>
                      </prop>
                      <prop type="object" name="autoscaleProfile">
                        <prop type="string" name="autoscaleType">
                          <enum>
                            <item value="&quot;LoadBased&quot;"/>
                            <item value="&quot;ScheduleBased&quot;"/>
                          </enum>
                        </prop>
                        <prop type="boolean" name="enabled" required="True"/>
                        <prop type="integer32" name="gracefulDecommissionTimeout"/>
                        <prop type="object" name="loadBasedConfig">
                          <prop type="integer32" name="cooldownPeriod"/>
                          <prop type="integer32" name="maxNodes" required="True"/>
                          <prop type="integer32" name="minNodes" required="True"/>
                          <prop type="integer32" name="pollInterval"/>
                          <prop type="array<object>" name="scalingRules" required="True">
                            <item type="object">
                              <prop type="string" name="actionType" required="True">
                                <enum>
                                  <item value="&quot;scaledown&quot;"/>
                                  <item value="&quot;scaleup&quot;"/>
                                </enum>
                              </prop>
                              <prop type="object" name="comparisonRule" required="True">
                                <prop type="string" name="operator" required="True">
                                  <enum>
                                    <item value="&quot;greaterThan&quot;"/>
                                    <item value="&quot;greaterThanOrEqual&quot;"/>
                                    <item value="&quot;lessThan&quot;"/>
                                    <item value="&quot;lessThanOrEqual&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="float" name="threshold" required="True"/>
                              </prop>
                              <prop type="integer32" name="evaluationCount" required="True"/>
                              <prop type="string" name="scalingMetric" required="True"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="object" name="scheduleBasedConfig">
                          <prop type="integer32" name="defaultCount" required="True"/>
                          <prop type="array<object>" name="schedules" required="True">
                            <item type="object">
                              <prop type="integer32" name="count" required="True"/>
                              <prop type="array<string>" name="days" required="True">
                                <item type="string">
                                  <enum>
                                    <item value="&quot;Friday&quot;"/>
                                    <item value="&quot;Monday&quot;"/>
                                    <item value="&quot;Saturday&quot;"/>
                                    <item value="&quot;Sunday&quot;"/>
                                    <item value="&quot;Thursday&quot;"/>
                                    <item value="&quot;Tuesday&quot;"/>
                                    <item value="&quot;Wednesday&quot;"/>
                                  </enum>
                                </item>
                              </prop>
                              <prop type="string" name="endTime" required="True">
                                <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                              </prop>
                              <prop type="string" name="startTime" required="True">
                                <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                              </prop>
                            </item>
                          </prop>
                          <prop type="string" name="timeZone" required="True"/>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterVersion" required="True">
                        <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                      </prop>
                      <prop readOnly="True" type="array<object>" name="components">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="string" name="version"/>
                        </item>
                      </prop>
                      <prop readOnly="True" type="object" name="connectivityProfile">
                        <prop type="array<object>" name="ssh">
                          <item type="object">
                            <prop type="string" name="endpoint" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="web" required="True">
                          <prop type="string" name="fqdn" required="True"/>
                        </prop>
                      </prop>
                      <prop type="object" name="flinkProfile">
                        <prop type="object" name="catalogOptions">
                          <prop type="object" name="hive">
                            <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                            <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                            <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                          </prop>
                        </prop>
                        <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                        <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                          <prop type="float32" name="cpu" required="True"/>
                          <prop type="integer64" name="memory" required="True"/>
                        </prop>
                        <prop type="integer32" name="numReplicas"/>
                        <prop type="object" name="storage" required="True">
                          <prop type="string" name="storageUri" required="True">
                            <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                          </prop>
                          <prop type="string" name="storagekey" secret="True"/>
                        </prop>
                        <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                      </prop>
                      <prop type="object" name="identityProfile" required="True">
                        <prop type="string" name="msiClientId" required="True">
                          <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                        </prop>
                        <prop type="string" name="msiObjectId" required="True">
                          <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                        </prop>
                        <prop type="ResourceId" name="msiResourceId" required="True"/>
                      </prop>
                      <prop type="object" name="kafkaProfile">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="object" name="llapProfile">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="object" name="logAnalyticsProfile">
                        <prop type="object" name="applicationLogs">
                          <prop type="boolean" name="stdErrorEnabled"/>
                          <prop type="boolean" name="stdOutEnabled"/>
                        </prop>
                        <prop type="boolean" name="enabled" required="True"/>
                        <prop type="boolean" name="metricsEnabled"/>
                      </prop>
                      <prop type="string" name="ossVersion" required="True">
                        <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                      </prop>
                      <prop type="object" name="prometheusProfile">
                        <prop type="boolean" name="enabled" required="True">
                          <default value="false"/>
                        </prop>
                      </prop>
                      <prop type="array<object>" name="scriptActionProfiles">
                        <item type="object">
                          <prop type="string" name="name" required="True"/>
                          <prop type="string" name="parameters"/>
                          <prop type="array<string>" name="services" required="True">
                            <item type="string"/>
                          </prop>
                          <prop type="boolean" name="shouldPersist">
                            <default value="true"/>
                          </prop>
                          <prop type="integer32" name="timeoutInMinutes"/>
                          <prop type="string" name="type" required="True"/>
                          <prop type="string" name="url" required="True">
                            <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                          </prop>
                        </item>
                      </prop>
                      <prop type="object" name="secretsProfile">
                        <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                        <prop type="array<object>" name="secrets">
                          <item type="object">
                            <prop type="string" name="keyVaultObjectName" required="True">
                              <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                            </prop>
                            <prop type="string" name="referenceName" required="True"/>
                            <prop type="string" name="type" required="True">
                              <enum>
                                <item value="&quot;Certificate&quot;"/>
                                <item value="&quot;Key&quot;"/>
                                <item value="&quot;Secret&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                      </prop>
                      <prop type="array<object>" name="serviceConfigsProfiles">
                        <item type="object">
                          <prop type="array<object>" name="configs" required="True">
                            <item type="object">
                              <prop type="string" name="component" required="True"/>
                              <prop type="array<object>" name="files" required="True">
                                <item type="object">
                                  <prop type="string" name="content"/>
                                  <prop type="string" name="encoding">
                                    <enum>
                                      <item value="&quot;Base64&quot;"/>
                                      <item value="&quot;None&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="string" name="fileName" required="True"/>
                                  <prop type="string" name="path"/>
                                  <prop type="object" name="values">
                                    <additionalProp>
                                      <item type="string"/>
                                    </additionalProp>
                                  </prop>
                                </item>
                              </prop>
                            </item>
                          </prop>
                          <prop type="string" name="serviceName" required="True"/>
                        </item>
                      </prop>
                      <prop type="object" name="sparkProfile">
                        <prop type="string" name="defaultStorageUrl"/>
                        <prop type="object" name="metastoreSpec">
                          <prop type="string" name="dbName" required="True"/>
                          <prop type="string" name="dbPasswordSecretName" required="True"/>
                          <prop type="string" name="dbServerHost" required="True"/>
                          <prop type="string" name="dbUserName" required="True"/>
                          <prop type="string" name="keyVaultId" required="True"/>
                          <prop type="string" name="thriftUrl"/>
                        </prop>
                        <prop type="object" name="userPluginsSpec">
                          <prop type="array<object>" name="plugins">
                            <item type="object">
                              <prop type="string" name="path" required="True">
                                <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="object" name="sshProfile">
                        <prop type="integer32" name="count" required="True">
                          <format maximum="5" minimum="0"/>
                        </prop>
                        <prop readOnly="True" type="string" name="podPrefix"/>
                      </prop>
                      <prop type="object" name="stubProfile">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="object" name="trinoProfile">
                        <prop type="object" name="catalogOptions">
                          <prop type="array<object>" name="hive">
                            <item type="object">
                              <prop type="string" name="catalogName" required="True">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                              <prop type="string" name="metastoreWarehouseDir" required="True"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="object" name="coordinator">
                          <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                            <prop type="boolean" name="enable">
                              <default value="false"/>
                            </prop>
                            <prop type="integer32" name="port">
                              <default value="8008"/>
                            </prop>
                            <prop type="boolean" name="suspend">
                              <default value="false"/>
                            </prop>
                          </prop>
                          <prop type="boolean" name="highAvailabilityEnabled">
                            <default value="true"/>
                          </prop>
                        </prop>
                        <prop type="object" name="userPluginsSpec">
                          <prop type="array<object>" name="plugins">
                            <item type="object">
                              <prop type="boolean" name="enabled"/>
                              <prop type="string" name="name">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="path">
                                <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                        <prop type="object" name="userTelemetrySpec">
                          <prop type="object" name="storage">
                            <prop type="string" name="hivecatalogName">
                              <format minLength="1"/>
                            </prop>
                            <prop type="string" name="hivecatalogSchema">
                              <default value="&quot;trinologs&quot;"/>
                            </prop>
                            <prop type="integer32" name="partitionRetentionInDays">
                              <default value="365"/>
                            </prop>
                            <prop type="string" name="path">
                              <format minLength="1"/>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="worker">
                          <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="string" name="clusterType" required="True">
                      <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                    </prop>
                    <prop type="object" name="computeProfile" required="True">
                      <prop type="array<object>" name="nodes" required="True">
                        <item type="object">
                          <prop type="integer32" name="count" required="True">
                            <format minimum="1"/>
                          </prop>
                          <prop type="string" name="type" required="True">
                            <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                          </prop>
                          <prop type="string" name="vmSize" required="True">
                            <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                          </prop>
                        </item>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="deploymentId"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="status"/>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="HDInsightCluster" required="True" clientFlatten="True">
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="object" name="clusterProfile" required="True">
                  <prop type="object" name="authorizationProfile" required="True">
                    <prop type="array<string>" name="groupIds" arg="$HDInsightCluster.properties.clusterProfile.authorizationProfile.groupIds">
                      <item type="string"/>
                    </prop>
                    <prop type="array<string>" name="userIds" arg="$HDInsightCluster.properties.clusterProfile.authorizationProfile.userIds">
                      <item type="string"/>
                    </prop>
                  </prop>
                  <prop type="object" name="autoscaleProfile">
                    <prop type="string" name="autoscaleType" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.autoscaleType">
                      <enum>
                        <item value="&quot;LoadBased&quot;"/>
                        <item value="&quot;ScheduleBased&quot;"/>
                      </enum>
                    </prop>
                    <prop type="boolean" name="enabled" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.enabled" required="True"/>
                    <prop type="integer32" name="gracefulDecommissionTimeout" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.gracefulDecommissionTimeout"/>
                    <prop type="object" name="loadBasedConfig">
                      <prop type="integer32" name="cooldownPeriod" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.cooldownPeriod"/>
                      <prop type="integer32" name="maxNodes" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.maxNodes" required="True"/>
                      <prop type="integer32" name="minNodes" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.minNodes" required="True"/>
                      <prop type="integer32" name="pollInterval" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.pollInterval"/>
                      <prop type="array<object>" name="scalingRules" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules" required="True">
                        <item type="object">
                          <prop type="string" name="actionType" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].actionType" required="True">
                            <enum>
                              <item value="&quot;scaledown&quot;"/>
                              <item value="&quot;scaleup&quot;"/>
                            </enum>
                          </prop>
                          <prop type="object" name="comparisonRule" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].comparisonRule" required="True">
                            <prop type="string" name="operator" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].comparisonRule.operator" required="True">
                              <enum>
                                <item value="&quot;greaterThan&quot;"/>
                                <item value="&quot;greaterThanOrEqual&quot;"/>
                                <item value="&quot;lessThan&quot;"/>
                                <item value="&quot;lessThanOrEqual&quot;"/>
                              </enum>
                            </prop>
                            <prop type="float" name="threshold" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].comparisonRule.threshold" required="True"/>
                          </prop>
                          <prop type="integer32" name="evaluationCount" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].evaluationCount" required="True"/>
                          <prop type="string" name="scalingMetric" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.loadBasedConfig.scalingRules[].scalingMetric" required="True"/>
                        </item>
                      </prop>
                    </prop>
                    <prop type="object" name="scheduleBasedConfig">
                      <prop type="integer32" name="defaultCount" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.defaultCount" required="True"/>
                      <prop type="array<object>" name="schedules" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules" required="True">
                        <item type="object">
                          <prop type="integer32" name="count" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].count" required="True"/>
                          <prop type="array<string>" name="days" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].days" required="True">
                            <item type="string">
                              <enum>
                                <item value="&quot;Friday&quot;"/>
                                <item value="&quot;Monday&quot;"/>
                                <item value="&quot;Saturday&quot;"/>
                                <item value="&quot;Sunday&quot;"/>
                                <item value="&quot;Thursday&quot;"/>
                                <item value="&quot;Tuesday&quot;"/>
                                <item value="&quot;Wednesday&quot;"/>
                              </enum>
                            </item>
                          </prop>
                          <prop type="string" name="endTime" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].endTime" required="True">
                            <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                          </prop>
                          <prop type="string" name="startTime" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.schedules[].startTime" required="True">
                            <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                          </prop>
                        </item>
                      </prop>
                      <prop type="string" name="timeZone" arg="$HDInsightCluster.properties.clusterProfile.autoscaleProfile.scheduleBasedConfig.timeZone" required="True"/>
                    </prop>
                  </prop>
                  <prop type="string" name="clusterVersion" arg="$HDInsightCluster.properties.clusterProfile.clusterVersion" required="True">
                    <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                  </prop>
                  <prop type="object" name="flinkProfile">
                    <prop type="object" name="catalogOptions">
                      <prop type="object" name="hive">
                        <prop type="string" name="metastoreDbConnectionPasswordSecret" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.catalogOptions.hive.metastoreDbConnectionPasswordSecret" required="True"/>
                        <prop type="string" name="metastoreDbConnectionURL" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.catalogOptions.hive.metastoreDbConnectionURL" required="True"/>
                        <prop type="string" name="metastoreDbConnectionUserName" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.catalogOptions.hive.metastoreDbConnectionUserName" required="True"/>
                      </prop>
                    </prop>
                    <prop type="object" name="historyServer">
                      <prop type="float32" name="cpu" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.historyServer.cpu" required="True"/>
                      <prop type="integer64" name="memory" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.historyServer.memory" required="True"/>
                    </prop>
                    <prop type="object" name="jobManager" required="True">
                      <prop type="float32" name="cpu" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.jobManager.cpu" required="True"/>
                      <prop type="integer64" name="memory" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.jobManager.memory" required="True"/>
                    </prop>
                    <prop type="integer32" name="numReplicas" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.numReplicas"/>
                    <prop type="object" name="storage" required="True">
                      <prop type="string" name="storageUri" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.storage.storageUri" required="True">
                        <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                      </prop>
                      <prop type="string" name="storagekey" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.storage.storagekey" secret="True"/>
                    </prop>
                    <prop type="object" name="taskManager" required="True">
                      <prop type="float32" name="cpu" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.taskManager.cpu" required="True"/>
                      <prop type="integer64" name="memory" arg="$HDInsightCluster.properties.clusterProfile.flinkProfile.taskManager.memory" required="True"/>
                    </prop>
                  </prop>
                  <prop type="object" name="identityProfile" required="True">
                    <prop type="string" name="msiClientId" arg="$HDInsightCluster.properties.clusterProfile.identityProfile.msiClientId" required="True">
                      <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                    </prop>
                    <prop type="string" name="msiObjectId" arg="$HDInsightCluster.properties.clusterProfile.identityProfile.msiObjectId" required="True">
                      <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                    </prop>
                    <prop type="ResourceId" name="msiResourceId" arg="$HDInsightCluster.properties.clusterProfile.identityProfile.msiResourceId" required="True"/>
                  </prop>
                  <prop type="object" name="kafkaProfile" arg="$HDInsightCluster.properties.clusterProfile.kafkaProfile">
                    <additionalProp anyType="True"/>
                  </prop>
                  <prop type="object" name="llapProfile" arg="$HDInsightCluster.properties.clusterProfile.llapProfile">
                    <additionalProp anyType="True"/>
                  </prop>
                  <prop type="object" name="logAnalyticsProfile">
                    <prop type="object" name="applicationLogs">
                      <prop type="boolean" name="stdErrorEnabled" arg="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.applicationLogs.stdErrorEnabled"/>
                      <prop type="boolean" name="stdOutEnabled" arg="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.applicationLogs.stdOutEnabled"/>
                    </prop>
                    <prop type="boolean" name="enabled" arg="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.enabled" required="True"/>
                    <prop type="boolean" name="metricsEnabled" arg="$HDInsightCluster.properties.clusterProfile.logAnalyticsProfile.metricsEnabled"/>
                  </prop>
                  <prop type="string" name="ossVersion" arg="$HDInsightCluster.properties.clusterProfile.ossVersion" required="True">
                    <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                  </prop>
                  <prop type="object" name="prometheusProfile">
                    <prop type="boolean" name="enabled" arg="$HDInsightCluster.properties.clusterProfile.prometheusProfile.enabled" required="True">
                      <default value="false"/>
                    </prop>
                  </prop>
                  <prop type="array<object>" name="scriptActionProfiles" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles">
                    <item type="object">
                      <prop type="string" name="name" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].name" required="True"/>
                      <prop type="string" name="parameters" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].parameters"/>
                      <prop type="array<string>" name="services" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].services" required="True">
                        <item type="string"/>
                      </prop>
                      <prop type="boolean" name="shouldPersist" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].shouldPersist">
                        <default value="true"/>
                      </prop>
                      <prop type="integer32" name="timeoutInMinutes" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].timeoutInMinutes"/>
                      <prop type="string" name="type" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].type" required="True"/>
                      <prop type="string" name="url" arg="$HDInsightCluster.properties.clusterProfile.scriptActionProfiles[].url" required="True">
                        <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                      </prop>
                    </item>
                  </prop>
                  <prop type="object" name="secretsProfile">
                    <prop type="ResourceId" name="keyVaultResourceId" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.keyVaultResourceId" required="True"/>
                    <prop type="array<object>" name="secrets" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets">
                      <item type="object">
                        <prop type="string" name="keyVaultObjectName" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].keyVaultObjectName" required="True">
                          <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                        </prop>
                        <prop type="string" name="referenceName" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].referenceName" required="True"/>
                        <prop type="string" name="type" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].type" required="True">
                          <enum>
                            <item value="&quot;Certificate&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;Secret&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="version" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].version"/>
                      </item>
                    </prop>
                  </prop>
                  <prop type="array<object>" name="serviceConfigsProfiles" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles">
                    <item type="object">
                      <prop type="array<object>" name="configs" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs" required="True">
                        <item type="object">
                          <prop type="string" name="component" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].component" required="True"/>
                          <prop type="array<object>" name="files" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files" required="True">
                            <item type="object">
                              <prop type="string" name="content" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content"/>
                              <prop type="string" name="encoding" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding">
                                <enum>
                                  <item value="&quot;Base64&quot;"/>
                                  <item value="&quot;None&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="fileName" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" required="True"/>
                              <prop type="string" name="path" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path"/>
                              <prop type="object" name="values" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values">
                                <additionalProp>
                                  <item type="string"/>
                                </additionalProp>
                              </prop>
                            </item>
                          </prop>
                        </item>
                      </prop>
                      <prop type="string" name="serviceName" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].serviceName" required="True"/>
                    </item>
                  </prop>
                  <prop type="object" name="sparkProfile">
                    <prop type="string" name="defaultStorageUrl" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.defaultStorageUrl"/>
                    <prop type="object" name="metastoreSpec">
                      <prop type="string" name="dbName" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbName" required="True"/>
                      <prop type="string" name="dbPasswordSecretName" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbPasswordSecretName" required="True"/>
                      <prop type="string" name="dbServerHost" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbServerHost" required="True"/>
                      <prop type="string" name="dbUserName" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.dbUserName" required="True"/>
                      <prop type="string" name="keyVaultId" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.keyVaultId" required="True"/>
                      <prop type="string" name="thriftUrl" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.metastoreSpec.thriftUrl"/>
                    </prop>
                    <prop type="object" name="userPluginsSpec" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.userPluginsSpec">
                      <prop type="array<object>" name="plugins" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.userPluginsSpec.plugins">
                        <item type="object">
                          <prop type="string" name="path" arg="$HDInsightCluster.properties.clusterProfile.sparkProfile.userPluginsSpec.plugins[].path" required="True">
                            <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                          </prop>
                        </item>
                      </prop>
                    </prop>
                  </prop>
                  <prop type="object" name="sshProfile">
                    <prop type="integer32" name="count" arg="$HDInsightCluster.properties.clusterProfile.sshProfile.count" required="True">
                      <format maximum="5" minimum="0"/>
                    </prop>
                  </prop>
                  <prop type="object" name="stubProfile" arg="$HDInsightCluster.properties.clusterProfile.stubProfile">
                    <additionalProp anyType="True"/>
                  </prop>
                  <prop type="object" name="trinoProfile" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile">
                    <prop type="object" name="catalogOptions" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions">
                      <prop type="array<object>" name="hive" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive">
                        <item type="object">
                          <prop type="string" name="catalogName" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].catalogName" required="True">
                            <format minLength="1"/>
                          </prop>
                          <prop type="string" name="metastoreDbConnectionPasswordSecret" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionPasswordSecret" required="True"/>
                          <prop type="string" name="metastoreDbConnectionURL" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionURL" required="True"/>
                          <prop type="string" name="metastoreDbConnectionUserName" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionUserName" required="True"/>
                          <prop type="string" name="metastoreWarehouseDir" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreWarehouseDir" required="True"/>
                        </item>
                      </prop>
                    </prop>
                    <prop type="object" name="coordinator">
                      <prop type="object" name="debug" clientFlatten="True">
                        <prop type="boolean" name="enable" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.debug.enable">
                          <default value="false"/>
                        </prop>
                        <prop type="integer32" name="port" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.debug.port">
                          <default value="8008"/>
                        </prop>
                        <prop type="boolean" name="suspend" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.debug.suspend">
                          <default value="false"/>
                        </prop>
                      </prop>
                      <prop type="boolean" name="highAvailabilityEnabled" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.coordinator.highAvailabilityEnabled">
                        <default value="true"/>
                      </prop>
                    </prop>
                    <prop type="object" name="userPluginsSpec" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec">
                      <prop type="array<object>" name="plugins" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins">
                        <item type="object">
                          <prop type="boolean" name="enabled" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins[].enabled"/>
                          <prop type="string" name="name" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins[].name">
                            <format minLength="1"/>
                          </prop>
                          <prop type="string" name="path" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userPluginsSpec.plugins[].path">
                            <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                          </prop>
                        </item>
                      </prop>
                    </prop>
                    <prop type="object" name="userTelemetrySpec" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec">
                      <prop type="object" name="storage" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage">
                        <prop type="string" name="hivecatalogName" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.hivecatalogName">
                          <format minLength="1"/>
                        </prop>
                        <prop type="string" name="hivecatalogSchema" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.hivecatalogSchema">
                          <default value="&quot;trinologs&quot;"/>
                        </prop>
                        <prop type="integer32" name="partitionRetentionInDays" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.partitionRetentionInDays">
                          <default value="365"/>
                        </prop>
                        <prop type="string" name="path" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.userTelemetrySpec.storage.path">
                          <format minLength="1"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="object" name="worker" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.worker">
                      <prop type="object" name="debug" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.worker.debug" cls="TrinoDebugConfig_update" clientFlatten="True">
                        <prop type="boolean" name="enable" arg="@TrinoDebugConfig_update.enable">
                          <default value="false"/>
                        </prop>
                        <prop type="integer32" name="port" arg="@TrinoDebugConfig_update.port">
                          <default value="8008"/>
                        </prop>
                        <prop type="boolean" name="suspend" arg="@TrinoDebugConfig_update.suspend">
                          <default value="false"/>
                        </prop>
                      </prop>
                    </prop>
                  </prop>
                </prop>
                <prop type="object" name="computeProfile" required="True">
                  <prop type="array<object>" name="nodes" arg="$HDInsightCluster.properties.computeProfile.nodes" required="True">
                    <item type="object">
                      <prop type="integer32" name="count" arg="$HDInsightCluster.properties.computeProfile.nodes[].count" required="True">
                        <format minimum="1"/>
                      </prop>
                      <prop type="string" name="type" arg="$HDInsightCluster.properties.computeProfile.nodes[].type" required="True">
                        <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                      </prop>
                      <prop type="string" name="vmSize" arg="$HDInsightCluster.properties.computeProfile.nodes[].vmSize" required="True">
                        <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                      </prop>
                    </item>
                  </prop>
                </prop>
              </prop>
              <prop type="object" name="tags" arg="$HDInsightCluster.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="Clusters_Create">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
          <request method="put">
            <path>
              <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
              <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@Cluster_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <commandGroup name="node-profile">
      <command name="create" version="2023-06-01-preview" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.computeProfile.nodes[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.computeProfile.nodes[Index]" options="node-index"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <argGroup name="HDInsightCluster.properties.computeProfile.nodes[]">
          <arg type="integer32" var="$HDInsightCluster.properties.computeProfile.nodes[].count" options="count" required="True" group="HDInsightCluster.properties.computeProfile.nodes[]">
            <help short="The number of virtual machines."/>
            <format minimum="1"/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.computeProfile.nodes[].type" options="type" required="True" group="HDInsightCluster.properties.computeProfile.nodes[]">
            <help short="The node type."/>
            <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.computeProfile.nodes[].vmSize" options="vm-size" required="True" group="HDInsightCluster.properties.computeProfile.nodes[]">
            <help short="The virtual machine SKU."/>
            <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.computeProfile.nodes">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.computeProfile.nodes[Index]"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceCreate ref="$Subresource">
            <json>
              <schema type="object" name="HDInsightCluster.properties.computeProfile.nodes[]" required="True">
                <prop type="integer32" name="count" arg="$HDInsightCluster.properties.computeProfile.nodes[].count" required="True">
                  <format minimum="1"/>
                </prop>
                <prop type="string" name="type" arg="$HDInsightCluster.properties.computeProfile.nodes[].type" required="True">
                  <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                </prop>
                <prop type="string" name="vmSize" arg="$HDInsightCluster.properties.computeProfile.nodes[].vmSize" required="True">
                  <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                </prop>
              </schema>
            </json>
          </instanceCreate>
        </operation>
        <operation operationId="Clusters_Create">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="put">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@Cluster_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="update" version="2023-06-01-preview" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.computeProfile.nodes[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.computeProfile.nodes[Index]" options="node-index" required="True"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <argGroup name="HDInsightCluster.properties.computeProfile.nodes[]">
          <arg type="integer32" var="$HDInsightCluster.properties.computeProfile.nodes[].count" options="count" group="HDInsightCluster.properties.computeProfile.nodes[]">
            <help short="The number of virtual machines."/>
            <format minimum="1"/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.computeProfile.nodes[].type" options="type" group="HDInsightCluster.properties.computeProfile.nodes[]">
            <help short="The node type."/>
            <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.computeProfile.nodes[].vmSize" options="vm-size" group="HDInsightCluster.properties.computeProfile.nodes[]">
            <help short="The virtual machine SKU."/>
            <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.computeProfile.nodes">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.computeProfile.nodes[Index]" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceUpdate ref="$Subresource">
            <json>
              <schema type="object" name="HDInsightCluster.properties.computeProfile.nodes[]" required="True">
                <prop type="integer32" name="count" arg="$HDInsightCluster.properties.computeProfile.nodes[].count" required="True">
                  <format minimum="1"/>
                </prop>
                <prop type="string" name="type" arg="$HDInsightCluster.properties.computeProfile.nodes[].type" required="True">
                  <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                </prop>
                <prop type="string" name="vmSize" arg="$HDInsightCluster.properties.computeProfile.nodes[].vmSize" required="True">
                  <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                </prop>
              </schema>
            </json>
          </instanceUpdate>
        </operation>
        <operation operationId="Clusters_Create">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="put">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@Cluster_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="delete" version="2023-06-01-preview" confirmation="Are you sure you want to perform this operation?">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.computeProfile.nodes[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.computeProfile.nodes[Index]" options="node-index" required="True"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.computeProfile.nodes">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.computeProfile.nodes[Index]" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceDelete ref="$Subresource">
            <json/>
          </instanceDelete>
        </operation>
        <operation operationId="Clusters_Create">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="put">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@Cluster_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
      </command>
      <command name="show" version="2023-06-01-preview" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.computeProfile.nodes[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.computeProfile.nodes[Index]" options="node-index" required="True"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.computeProfile.nodes">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.computeProfile.nodes[Index]" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
    </commandGroup>
    <commandGroup name="secret">
      <command name="create" version="2023-06-01-preview" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.secretsProfile.secrets[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[Index]" options="secret-index"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <argGroup name="HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[]">
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].keyVaultObjectName" options="secret-name" required="True" group="HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[]">
            <help short="Object identifier name of the secret in key vault."/>
            <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].referenceName" options="reference-name" required="True" group="HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[]">
            <help short="Reference name of the secret to be used in service configs."/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].type" options="type" required="True" group="HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[]">
            <help short="Type of key vault object: secret, key or certificate."/>
            <enum>
              <item name="Certificate" value="&quot;Certificate&quot;"/>
              <item name="Key" value="&quot;Key&quot;"/>
              <item name="Secret" value="&quot;Secret&quot;"/>
            </enum>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].version" options="version" group="HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[]">
            <help short="Version of the secret in key vault."/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.clusterProfile.secretsProfile.secrets">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[Index]"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceCreate ref="$Subresource">
            <json>
              <schema type="object" name="HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[]" required="True">
                <prop type="string" name="keyVaultObjectName" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].keyVaultObjectName" required="True">
                  <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                </prop>
                <prop type="string" name="referenceName" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].referenceName" required="True"/>
                <prop type="string" name="type" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].type" required="True">
                  <enum>
                    <item value="&quot;Certificate&quot;"/>
                    <item value="&quot;Key&quot;"/>
                    <item value="&quot;Secret&quot;"/>
                  </enum>
                </prop>
                <prop type="string" name="version" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].version"/>
              </schema>
            </json>
          </instanceCreate>
        </operation>
        <operation operationId="Clusters_Create">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="put">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@Cluster_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="update" version="2023-06-01-preview" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.secretsProfile.secrets[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[Index]" options="secret-index" required="True"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <argGroup name="HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[]">
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].keyVaultObjectName" options="secret-name" group="HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[]">
            <help short="Object identifier name of the secret in key vault."/>
            <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].referenceName" options="reference-name" group="HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[]">
            <help short="Reference name of the secret to be used in service configs."/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].type" options="type" group="HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[]">
            <help short="Type of key vault object: secret, key or certificate."/>
            <enum>
              <item name="Certificate" value="&quot;Certificate&quot;"/>
              <item name="Key" value="&quot;Key&quot;"/>
              <item name="Secret" value="&quot;Secret&quot;"/>
            </enum>
          </arg>
          <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].version" options="version" group="HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[]">
            <help short="Version of the secret in key vault."/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.clusterProfile.secretsProfile.secrets">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[Index]" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceUpdate ref="$Subresource">
            <json>
              <schema type="object" name="HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[]" required="True">
                <prop type="string" name="keyVaultObjectName" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].keyVaultObjectName" required="True">
                  <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                </prop>
                <prop type="string" name="referenceName" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].referenceName" required="True"/>
                <prop type="string" name="type" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].type" required="True">
                  <enum>
                    <item value="&quot;Certificate&quot;"/>
                    <item value="&quot;Key&quot;"/>
                    <item value="&quot;Secret&quot;"/>
                  </enum>
                </prop>
                <prop type="string" name="version" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[].version"/>
              </schema>
            </json>
          </instanceUpdate>
        </operation>
        <operation operationId="Clusters_Create">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="put">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@Cluster_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="delete" version="2023-06-01-preview" confirmation="Are you sure you want to perform this operation?">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.secretsProfile.secrets[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[Index]" options="secret-index" required="True"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.clusterProfile.secretsProfile.secrets">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[Index]" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceDelete ref="$Subresource">
            <json/>
          </instanceDelete>
        </operation>
        <operation operationId="Clusters_Create">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="put">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@Cluster_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
      </command>
      <command name="show" version="2023-06-01-preview" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.secretsProfile.secrets[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[Index]" options="secret-index" required="True"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.clusterProfile.secretsProfile.secrets">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.secretsProfile.secrets[Index]" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
    </commandGroup>
    <commandGroup name="service-configs-profile">
      <command name="create" version="2023-06-01-preview" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.serviceConfigsProfiles[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" options="service-configs-profile-index"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <argGroup name="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[]">
          <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs" options="config" required="True" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[]">
            <help short="List of service configs."/>
            <item type="object">
              <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].component" options="component" required="True">
                <help short="Name of the component the config files should apply to."/>
              </arg>
              <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files" options="files" required="True">
                <help short="List of Config Files."/>
                <item type="object">
                  <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content" options="content">
                    <help short="Free form content of the entire configuration file."/>
                  </arg>
                  <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding" options="encoding">
                    <help short="This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text."/>
                    <enum>
                      <item name="Base64" value="&quot;Base64&quot;"/>
                      <item name="None" value="&quot;None&quot;"/>
                    </enum>
                  </arg>
                  <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" options="file-name" required="True">
                    <help short="Configuration file name."/>
                  </arg>
                  <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path" options="path">
                    <help short="Path of the config file if content is specified."/>
                  </arg>
                  <arg type="object" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values" options="values">
                    <help short="List of key value pairs where key represents a valid service configuration name and value represents the value of the config."/>
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </arg>
                </item>
              </arg>
            </item>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].serviceName" options="service-name" required="True" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[]">
            <help short="Name of the service the configurations should apply to."/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.clusterProfile.serviceConfigsProfiles">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceCreate ref="$Subresource">
            <json>
              <schema type="object" name="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[]" required="True">
                <prop type="array<object>" name="configs" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs" required="True">
                  <item type="object">
                    <prop type="string" name="component" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].component" required="True"/>
                    <prop type="array<object>" name="files" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files" required="True">
                      <item type="object">
                        <prop type="string" name="content" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content"/>
                        <prop type="string" name="encoding" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding">
                          <enum>
                            <item value="&quot;Base64&quot;"/>
                            <item value="&quot;None&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="fileName" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" required="True"/>
                        <prop type="string" name="path" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path"/>
                        <prop type="object" name="values" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                      </item>
                    </prop>
                  </item>
                </prop>
                <prop type="string" name="serviceName" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].serviceName" required="True"/>
              </schema>
            </json>
          </instanceCreate>
        </operation>
        <operation operationId="Clusters_Create">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="put">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@Cluster_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="update" version="2023-06-01-preview" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.serviceConfigsProfiles[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" options="service-configs-profile-index" required="True"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <argGroup name="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[]">
          <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs" options="config" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[]">
            <help short="List of service configs."/>
            <item nullable="True" type="object">
              <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].component" options="component">
                <help short="Name of the component the config files should apply to."/>
              </arg>
              <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files" options="files">
                <help short="List of Config Files."/>
                <item nullable="True" type="object">
                  <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content" options="content">
                    <help short="Free form content of the entire configuration file."/>
                  </arg>
                  <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding" options="encoding">
                    <help short="This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text."/>
                    <enum>
                      <item name="Base64" value="&quot;Base64&quot;"/>
                      <item name="None" value="&quot;None&quot;"/>
                    </enum>
                  </arg>
                  <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" options="file-name">
                    <help short="Configuration file name."/>
                  </arg>
                  <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path" options="path">
                    <help short="Path of the config file if content is specified."/>
                  </arg>
                  <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values" options="values">
                    <help short="List of key value pairs where key represents a valid service configuration name and value represents the value of the config."/>
                    <additionalProp>
                      <item nullable="True" type="string"/>
                    </additionalProp>
                  </arg>
                </item>
              </arg>
            </item>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].serviceName" options="service-name" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[]">
            <help short="Name of the service the configurations should apply to."/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.clusterProfile.serviceConfigsProfiles">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceUpdate ref="$Subresource">
            <json>
              <schema type="object" name="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[]" required="True">
                <prop type="array<object>" name="configs" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs" required="True">
                  <item type="object">
                    <prop type="string" name="component" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].component" required="True"/>
                    <prop type="array<object>" name="files" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files" required="True">
                      <item type="object">
                        <prop type="string" name="content" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content"/>
                        <prop type="string" name="encoding" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding">
                          <enum>
                            <item value="&quot;Base64&quot;"/>
                            <item value="&quot;None&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="fileName" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" required="True"/>
                        <prop type="string" name="path" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path"/>
                        <prop type="object" name="values" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                      </item>
                    </prop>
                  </item>
                </prop>
                <prop type="string" name="serviceName" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].serviceName" required="True"/>
              </schema>
            </json>
          </instanceUpdate>
        </operation>
        <operation operationId="Clusters_Create">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="put">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@Cluster_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="delete" version="2023-06-01-preview" confirmation="Are you sure you want to perform this operation?">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.serviceConfigsProfiles[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" options="service-configs-profile-index" required="True"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.clusterProfile.serviceConfigsProfiles">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceDelete ref="$Subresource">
            <json/>
          </instanceDelete>
        </operation>
        <operation operationId="Clusters_Create">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="put">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@Cluster_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
      </command>
      <command name="show" version="2023-06-01-preview" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.serviceConfigsProfiles[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" options="service-configs-profile-index" required="True"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.clusterProfile.serviceConfigsProfiles">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <commandGroup name="config">
        <command name="create" version="2023-06-01-preview" confirmation="">
          <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.serviceConfigsProfiles[].configs[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
          <argGroup name="">
            <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" options="service-configs-profile-index" required="True"/>
            <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" options="config-index"/>
            <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
              <help short="The name of the HDInsight cluster."/>
            </arg>
            <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
              <help short="The name of the cluster pool."/>
            </arg>
            <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
            <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
          </argGroup>
          <argGroup name="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[]">
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].component" options="component-name" required="True" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[]">
              <help short="Name of the component the config files should apply to."/>
            </arg>
            <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files" options="file" required="True" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[]">
              <help short="List of Config Files."/>
              <item type="object">
                <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content" options="content">
                  <help short="Free form content of the entire configuration file."/>
                </arg>
                <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding" options="encoding">
                  <help short="This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text."/>
                  <enum>
                    <item name="Base64" value="&quot;Base64&quot;"/>
                    <item name="None" value="&quot;None&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" options="file-name" required="True">
                  <help short="Configuration file name."/>
                </arg>
                <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path" options="path">
                  <help short="Path of the config file if content is specified."/>
                </arg>
                <arg type="object" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values" options="values">
                  <help short="List of key value pairs where key represents a valid service configuration name and value represents the value of the config."/>
                  <additionalProp>
                    <item type="string"/>
                  </additionalProp>
                </arg>
              </item>
            </arg>
          </argGroup>
          <subresourceSelector var="$Subresource" ref="$Instance">
            <json type="object" name="HDInsightCluster">
              <prop type="array" name="properties.clusterProfile.serviceConfigsProfiles">
                <item type="object">
                  <prop type="array" name="configs">
                    <item type="object"/>
                    <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]"/>
                  </prop>
                </item>
                <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" required="True"/>
              </prop>
            </json>
          </subresourceSelector>
          <operation operationId="Clusters_Get">
            <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
              <request method="get">
                <path>
                  <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                  <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                  <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                    <format maxLength="90" minLength="1"/>
                  </param>
                  <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
                </path>
                <query>
                  <const readOnly="True" const="True" type="string" name="api-version" required="True">
                    <default value="&quot;2023-06-01-preview&quot;"/>
                    <format minLength="1"/>
                  </const>
                </query>
              </request>
              <response statusCode="200">
                <body>
                  <json var="$Instance">
                    <schema type="object" cls="Cluster_read">
                      <prop readOnly="True" type="ResourceId" name="id">
                        <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                      </prop>
                      <prop type="ResourceLocation" name="location" required="True"/>
                      <prop readOnly="True" type="string" name="name"/>
                      <prop type="object" name="properties" clientFlatten="True">
                        <prop type="object" name="clusterProfile" required="True">
                          <prop type="object" name="authorizationProfile" required="True">
                            <prop type="array<string>" name="groupIds">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="userIds">
                              <item type="string"/>
                            </prop>
                          </prop>
                          <prop type="object" name="autoscaleProfile">
                            <prop type="string" name="autoscaleType">
                              <enum>
                                <item value="&quot;LoadBased&quot;"/>
                                <item value="&quot;ScheduleBased&quot;"/>
                              </enum>
                            </prop>
                            <prop type="boolean" name="enabled" required="True"/>
                            <prop type="integer32" name="gracefulDecommissionTimeout"/>
                            <prop type="object" name="loadBasedConfig">
                              <prop type="integer32" name="cooldownPeriod"/>
                              <prop type="integer32" name="maxNodes" required="True"/>
                              <prop type="integer32" name="minNodes" required="True"/>
                              <prop type="integer32" name="pollInterval"/>
                              <prop type="array<object>" name="scalingRules" required="True">
                                <item type="object">
                                  <prop type="string" name="actionType" required="True">
                                    <enum>
                                      <item value="&quot;scaledown&quot;"/>
                                      <item value="&quot;scaleup&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="object" name="comparisonRule" required="True">
                                    <prop type="string" name="operator" required="True">
                                      <enum>
                                        <item value="&quot;greaterThan&quot;"/>
                                        <item value="&quot;greaterThanOrEqual&quot;"/>
                                        <item value="&quot;lessThan&quot;"/>
                                        <item value="&quot;lessThanOrEqual&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="float" name="threshold" required="True"/>
                                  </prop>
                                  <prop type="integer32" name="evaluationCount" required="True"/>
                                  <prop type="string" name="scalingMetric" required="True"/>
                                </item>
                              </prop>
                            </prop>
                            <prop type="object" name="scheduleBasedConfig">
                              <prop type="integer32" name="defaultCount" required="True"/>
                              <prop type="array<object>" name="schedules" required="True">
                                <item type="object">
                                  <prop type="integer32" name="count" required="True"/>
                                  <prop type="array<string>" name="days" required="True">
                                    <item type="string">
                                      <enum>
                                        <item value="&quot;Friday&quot;"/>
                                        <item value="&quot;Monday&quot;"/>
                                        <item value="&quot;Saturday&quot;"/>
                                        <item value="&quot;Sunday&quot;"/>
                                        <item value="&quot;Thursday&quot;"/>
                                        <item value="&quot;Tuesday&quot;"/>
                                        <item value="&quot;Wednesday&quot;"/>
                                      </enum>
                                    </item>
                                  </prop>
                                  <prop type="string" name="endTime" required="True">
                                    <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                  </prop>
                                  <prop type="string" name="startTime" required="True">
                                    <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                  </prop>
                                </item>
                              </prop>
                              <prop type="string" name="timeZone" required="True"/>
                            </prop>
                          </prop>
                          <prop type="string" name="clusterVersion" required="True">
                            <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                          </prop>
                          <prop readOnly="True" type="array<object>" name="components">
                            <item type="object">
                              <prop type="string" name="name"/>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                          <prop readOnly="True" type="object" name="connectivityProfile">
                            <prop type="array<object>" name="ssh">
                              <item type="object">
                                <prop type="string" name="endpoint" required="True"/>
                              </item>
                            </prop>
                            <prop type="object" name="web" required="True">
                              <prop type="string" name="fqdn" required="True"/>
                            </prop>
                          </prop>
                          <prop type="object" name="flinkProfile">
                            <prop type="object" name="catalogOptions">
                              <prop type="object" name="hive">
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                              </prop>
                            </prop>
                            <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                            <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                              <prop type="float32" name="cpu" required="True"/>
                              <prop type="integer64" name="memory" required="True"/>
                            </prop>
                            <prop type="integer32" name="numReplicas"/>
                            <prop type="object" name="storage" required="True">
                              <prop type="string" name="storageUri" required="True">
                                <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                              </prop>
                              <prop type="string" name="storagekey" secret="True"/>
                            </prop>
                            <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                          </prop>
                          <prop type="object" name="identityProfile" required="True">
                            <prop type="string" name="msiClientId" required="True">
                              <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                            </prop>
                            <prop type="string" name="msiObjectId" required="True">
                              <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                            </prop>
                            <prop type="ResourceId" name="msiResourceId" required="True"/>
                          </prop>
                          <prop type="object" name="kafkaProfile">
                            <additionalProp anyType="True"/>
                          </prop>
                          <prop type="object" name="llapProfile">
                            <additionalProp anyType="True"/>
                          </prop>
                          <prop type="object" name="logAnalyticsProfile">
                            <prop type="object" name="applicationLogs">
                              <prop type="boolean" name="stdErrorEnabled"/>
                              <prop type="boolean" name="stdOutEnabled"/>
                            </prop>
                            <prop type="boolean" name="enabled" required="True"/>
                            <prop type="boolean" name="metricsEnabled"/>
                          </prop>
                          <prop type="string" name="ossVersion" required="True">
                            <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                          </prop>
                          <prop type="object" name="prometheusProfile">
                            <prop type="boolean" name="enabled" required="True">
                              <default value="false"/>
                            </prop>
                          </prop>
                          <prop type="array<object>" name="scriptActionProfiles">
                            <item type="object">
                              <prop type="string" name="name" required="True"/>
                              <prop type="string" name="parameters"/>
                              <prop type="array<string>" name="services" required="True">
                                <item type="string"/>
                              </prop>
                              <prop type="boolean" name="shouldPersist">
                                <default value="true"/>
                              </prop>
                              <prop type="integer32" name="timeoutInMinutes"/>
                              <prop type="string" name="type" required="True"/>
                              <prop type="string" name="url" required="True">
                                <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                              </prop>
                            </item>
                          </prop>
                          <prop type="object" name="secretsProfile">
                            <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                            <prop type="array<object>" name="secrets">
                              <item type="object">
                                <prop type="string" name="keyVaultObjectName" required="True">
                                  <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                                </prop>
                                <prop type="string" name="referenceName" required="True"/>
                                <prop type="string" name="type" required="True">
                                  <enum>
                                    <item value="&quot;Certificate&quot;"/>
                                    <item value="&quot;Key&quot;"/>
                                    <item value="&quot;Secret&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="string" name="version"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="array<object>" name="serviceConfigsProfiles">
                            <item type="object">
                              <prop type="array<object>" name="configs" required="True">
                                <item type="object">
                                  <prop type="string" name="component" required="True"/>
                                  <prop type="array<object>" name="files" required="True">
                                    <item type="object">
                                      <prop type="string" name="content"/>
                                      <prop type="string" name="encoding">
                                        <enum>
                                          <item value="&quot;Base64&quot;"/>
                                          <item value="&quot;None&quot;"/>
                                        </enum>
                                      </prop>
                                      <prop type="string" name="fileName" required="True"/>
                                      <prop type="string" name="path"/>
                                      <prop type="object" name="values">
                                        <additionalProp>
                                          <item type="string"/>
                                        </additionalProp>
                                      </prop>
                                    </item>
                                  </prop>
                                </item>
                              </prop>
                              <prop type="string" name="serviceName" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="sparkProfile">
                            <prop type="string" name="defaultStorageUrl"/>
                            <prop type="object" name="metastoreSpec">
                              <prop type="string" name="dbName" required="True"/>
                              <prop type="string" name="dbPasswordSecretName" required="True"/>
                              <prop type="string" name="dbServerHost" required="True"/>
                              <prop type="string" name="dbUserName" required="True"/>
                              <prop type="string" name="keyVaultId" required="True"/>
                              <prop type="string" name="thriftUrl"/>
                            </prop>
                            <prop type="object" name="userPluginsSpec">
                              <prop type="array<object>" name="plugins">
                                <item type="object">
                                  <prop type="string" name="path" required="True">
                                    <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                  </prop>
                                </item>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="sshProfile">
                            <prop type="integer32" name="count" required="True">
                              <format maximum="5" minimum="0"/>
                            </prop>
                            <prop readOnly="True" type="string" name="podPrefix"/>
                          </prop>
                          <prop type="object" name="stubProfile">
                            <additionalProp anyType="True"/>
                          </prop>
                          <prop type="object" name="trinoProfile">
                            <prop type="object" name="catalogOptions">
                              <prop type="array<object>" name="hive">
                                <item type="object">
                                  <prop type="string" name="catalogName" required="True">
                                    <format minLength="1"/>
                                  </prop>
                                  <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                  <prop type="string" name="metastoreWarehouseDir" required="True"/>
                                </item>
                              </prop>
                            </prop>
                            <prop type="object" name="coordinator">
                              <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                                <prop type="boolean" name="enable">
                                  <default value="false"/>
                                </prop>
                                <prop type="integer32" name="port">
                                  <default value="8008"/>
                                </prop>
                                <prop type="boolean" name="suspend">
                                  <default value="false"/>
                                </prop>
                              </prop>
                              <prop type="boolean" name="highAvailabilityEnabled">
                                <default value="true"/>
                              </prop>
                            </prop>
                            <prop type="object" name="userPluginsSpec">
                              <prop type="array<object>" name="plugins">
                                <item type="object">
                                  <prop type="boolean" name="enabled"/>
                                  <prop type="string" name="name">
                                    <format minLength="1"/>
                                  </prop>
                                  <prop type="string" name="path">
                                    <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                  </prop>
                                </item>
                              </prop>
                            </prop>
                            <prop type="object" name="userTelemetrySpec">
                              <prop type="object" name="storage">
                                <prop type="string" name="hivecatalogName">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="hivecatalogSchema">
                                  <default value="&quot;trinologs&quot;"/>
                                </prop>
                                <prop type="integer32" name="partitionRetentionInDays">
                                  <default value="365"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format minLength="1"/>
                                </prop>
                              </prop>
                            </prop>
                            <prop type="object" name="worker">
                              <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterType" required="True">
                          <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                        </prop>
                        <prop type="object" name="computeProfile" required="True">
                          <prop type="array<object>" name="nodes" required="True">
                            <item type="object">
                              <prop type="integer32" name="count" required="True">
                                <format minimum="1"/>
                              </prop>
                              <prop type="string" name="type" required="True">
                                <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                              </prop>
                              <prop type="string" name="vmSize" required="True">
                                <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                        <prop readOnly="True" type="string" name="deploymentId"/>
                        <prop readOnly="True" type="string" name="provisioningState">
                          <enum>
                            <item value="&quot;Accepted&quot;"/>
                            <item value="&quot;Canceled&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                          </enum>
                        </prop>
                        <prop readOnly="True" type="string" name="status"/>
                      </prop>
                      <prop readOnly="True" type="object" name="systemData">
                        <prop type="dateTime" name="createdAt"/>
                        <prop type="string" name="createdBy"/>
                        <prop type="string" name="createdByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="lastModifiedAt"/>
                        <prop type="string" name="lastModifiedBy"/>
                        <prop type="string" name="lastModifiedByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="object" name="tags">
                        <additionalProp>
                          <item type="string"/>
                        </additionalProp>
                      </prop>
                      <prop readOnly="True" type="string" name="type"/>
                    </schema>
                  </json>
                </body>
              </response>
              <response isError="True">
                <body>
                  <json>
                    <schema type="@MgmtErrorFormat"/>
                  </json>
                </body>
              </response>
            </http>
          </operation>
          <operation>
            <instanceCreate ref="$Subresource">
              <json>
                <schema type="object" name="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[]" required="True">
                  <prop type="string" name="component" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].component" required="True"/>
                  <prop type="array<object>" name="files" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files" required="True">
                    <item type="object">
                      <prop type="string" name="content" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content"/>
                      <prop type="string" name="encoding" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding">
                        <enum>
                          <item value="&quot;Base64&quot;"/>
                          <item value="&quot;None&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="fileName" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" required="True"/>
                      <prop type="string" name="path" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path"/>
                      <prop type="object" name="values" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values">
                        <additionalProp>
                          <item type="string"/>
                        </additionalProp>
                      </prop>
                    </item>
                  </prop>
                </schema>
              </json>
            </instanceCreate>
          </operation>
          <operation operationId="Clusters_Create">
            <longRunning finalStateVia="azure-async-operation"/>
            <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
              <request method="put">
                <path>
                  <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                  <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                  <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                    <format maxLength="90" minLength="1"/>
                  </param>
                  <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
                </path>
                <query>
                  <const readOnly="True" const="True" type="string" name="api-version" required="True">
                    <default value="&quot;2023-06-01-preview&quot;"/>
                    <format minLength="1"/>
                  </const>
                </query>
                <body>
                  <json ref="$Instance"/>
                </body>
              </request>
              <response statusCode="200 201">
                <body>
                  <json var="$Instance">
                    <schema type="@Cluster_read"/>
                  </json>
                </body>
              </response>
              <response isError="True">
                <body>
                  <json>
                    <schema type="@MgmtErrorFormat"/>
                  </json>
                </body>
              </response>
            </http>
          </operation>
          <output type="object" ref="$Subresource" clientFlatten="True"/>
        </command>
        <command name="update" version="2023-06-01-preview" confirmation="">
          <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.serviceConfigsProfiles[].configs[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
          <argGroup name="">
            <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" options="service-configs-profile-index" required="True"/>
            <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" options="config-index" required="True"/>
            <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
              <help short="The name of the HDInsight cluster."/>
            </arg>
            <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
              <help short="The name of the cluster pool."/>
            </arg>
            <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
            <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
          </argGroup>
          <argGroup name="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[]">
            <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].component" options="component-name" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[]">
              <help short="Name of the component the config files should apply to."/>
            </arg>
            <arg type="array<object>" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files" options="file" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[]">
              <help short="List of Config Files."/>
              <item nullable="True" type="object">
                <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content" options="content">
                  <help short="Free form content of the entire configuration file."/>
                </arg>
                <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding" options="encoding">
                  <help short="This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text."/>
                  <enum>
                    <item name="Base64" value="&quot;Base64&quot;"/>
                    <item name="None" value="&quot;None&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" options="file-name">
                  <help short="Configuration file name."/>
                </arg>
                <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path" options="path">
                  <help short="Path of the config file if content is specified."/>
                </arg>
                <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values" options="values">
                  <help short="List of key value pairs where key represents a valid service configuration name and value represents the value of the config."/>
                  <additionalProp>
                    <item nullable="True" type="string"/>
                  </additionalProp>
                </arg>
              </item>
            </arg>
          </argGroup>
          <subresourceSelector var="$Subresource" ref="$Instance">
            <json type="object" name="HDInsightCluster">
              <prop type="array" name="properties.clusterProfile.serviceConfigsProfiles">
                <item type="object">
                  <prop type="array" name="configs">
                    <item type="object"/>
                    <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" required="True"/>
                  </prop>
                </item>
                <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" required="True"/>
              </prop>
            </json>
          </subresourceSelector>
          <operation operationId="Clusters_Get">
            <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
              <request method="get">
                <path>
                  <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                  <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                  <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                    <format maxLength="90" minLength="1"/>
                  </param>
                  <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
                </path>
                <query>
                  <const readOnly="True" const="True" type="string" name="api-version" required="True">
                    <default value="&quot;2023-06-01-preview&quot;"/>
                    <format minLength="1"/>
                  </const>
                </query>
              </request>
              <response statusCode="200">
                <body>
                  <json var="$Instance">
                    <schema type="object" cls="Cluster_read">
                      <prop readOnly="True" type="ResourceId" name="id">
                        <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                      </prop>
                      <prop type="ResourceLocation" name="location" required="True"/>
                      <prop readOnly="True" type="string" name="name"/>
                      <prop type="object" name="properties" clientFlatten="True">
                        <prop type="object" name="clusterProfile" required="True">
                          <prop type="object" name="authorizationProfile" required="True">
                            <prop type="array<string>" name="groupIds">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="userIds">
                              <item type="string"/>
                            </prop>
                          </prop>
                          <prop type="object" name="autoscaleProfile">
                            <prop type="string" name="autoscaleType">
                              <enum>
                                <item value="&quot;LoadBased&quot;"/>
                                <item value="&quot;ScheduleBased&quot;"/>
                              </enum>
                            </prop>
                            <prop type="boolean" name="enabled" required="True"/>
                            <prop type="integer32" name="gracefulDecommissionTimeout"/>
                            <prop type="object" name="loadBasedConfig">
                              <prop type="integer32" name="cooldownPeriod"/>
                              <prop type="integer32" name="maxNodes" required="True"/>
                              <prop type="integer32" name="minNodes" required="True"/>
                              <prop type="integer32" name="pollInterval"/>
                              <prop type="array<object>" name="scalingRules" required="True">
                                <item type="object">
                                  <prop type="string" name="actionType" required="True">
                                    <enum>
                                      <item value="&quot;scaledown&quot;"/>
                                      <item value="&quot;scaleup&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="object" name="comparisonRule" required="True">
                                    <prop type="string" name="operator" required="True">
                                      <enum>
                                        <item value="&quot;greaterThan&quot;"/>
                                        <item value="&quot;greaterThanOrEqual&quot;"/>
                                        <item value="&quot;lessThan&quot;"/>
                                        <item value="&quot;lessThanOrEqual&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="float" name="threshold" required="True"/>
                                  </prop>
                                  <prop type="integer32" name="evaluationCount" required="True"/>
                                  <prop type="string" name="scalingMetric" required="True"/>
                                </item>
                              </prop>
                            </prop>
                            <prop type="object" name="scheduleBasedConfig">
                              <prop type="integer32" name="defaultCount" required="True"/>
                              <prop type="array<object>" name="schedules" required="True">
                                <item type="object">
                                  <prop type="integer32" name="count" required="True"/>
                                  <prop type="array<string>" name="days" required="True">
                                    <item type="string">
                                      <enum>
                                        <item value="&quot;Friday&quot;"/>
                                        <item value="&quot;Monday&quot;"/>
                                        <item value="&quot;Saturday&quot;"/>
                                        <item value="&quot;Sunday&quot;"/>
                                        <item value="&quot;Thursday&quot;"/>
                                        <item value="&quot;Tuesday&quot;"/>
                                        <item value="&quot;Wednesday&quot;"/>
                                      </enum>
                                    </item>
                                  </prop>
                                  <prop type="string" name="endTime" required="True">
                                    <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                  </prop>
                                  <prop type="string" name="startTime" required="True">
                                    <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                  </prop>
                                </item>
                              </prop>
                              <prop type="string" name="timeZone" required="True"/>
                            </prop>
                          </prop>
                          <prop type="string" name="clusterVersion" required="True">
                            <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                          </prop>
                          <prop readOnly="True" type="array<object>" name="components">
                            <item type="object">
                              <prop type="string" name="name"/>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                          <prop readOnly="True" type="object" name="connectivityProfile">
                            <prop type="array<object>" name="ssh">
                              <item type="object">
                                <prop type="string" name="endpoint" required="True"/>
                              </item>
                            </prop>
                            <prop type="object" name="web" required="True">
                              <prop type="string" name="fqdn" required="True"/>
                            </prop>
                          </prop>
                          <prop type="object" name="flinkProfile">
                            <prop type="object" name="catalogOptions">
                              <prop type="object" name="hive">
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                              </prop>
                            </prop>
                            <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                            <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                              <prop type="float32" name="cpu" required="True"/>
                              <prop type="integer64" name="memory" required="True"/>
                            </prop>
                            <prop type="integer32" name="numReplicas"/>
                            <prop type="object" name="storage" required="True">
                              <prop type="string" name="storageUri" required="True">
                                <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                              </prop>
                              <prop type="string" name="storagekey" secret="True"/>
                            </prop>
                            <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                          </prop>
                          <prop type="object" name="identityProfile" required="True">
                            <prop type="string" name="msiClientId" required="True">
                              <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                            </prop>
                            <prop type="string" name="msiObjectId" required="True">
                              <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                            </prop>
                            <prop type="ResourceId" name="msiResourceId" required="True"/>
                          </prop>
                          <prop type="object" name="kafkaProfile">
                            <additionalProp anyType="True"/>
                          </prop>
                          <prop type="object" name="llapProfile">
                            <additionalProp anyType="True"/>
                          </prop>
                          <prop type="object" name="logAnalyticsProfile">
                            <prop type="object" name="applicationLogs">
                              <prop type="boolean" name="stdErrorEnabled"/>
                              <prop type="boolean" name="stdOutEnabled"/>
                            </prop>
                            <prop type="boolean" name="enabled" required="True"/>
                            <prop type="boolean" name="metricsEnabled"/>
                          </prop>
                          <prop type="string" name="ossVersion" required="True">
                            <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                          </prop>
                          <prop type="object" name="prometheusProfile">
                            <prop type="boolean" name="enabled" required="True">
                              <default value="false"/>
                            </prop>
                          </prop>
                          <prop type="array<object>" name="scriptActionProfiles">
                            <item type="object">
                              <prop type="string" name="name" required="True"/>
                              <prop type="string" name="parameters"/>
                              <prop type="array<string>" name="services" required="True">
                                <item type="string"/>
                              </prop>
                              <prop type="boolean" name="shouldPersist">
                                <default value="true"/>
                              </prop>
                              <prop type="integer32" name="timeoutInMinutes"/>
                              <prop type="string" name="type" required="True"/>
                              <prop type="string" name="url" required="True">
                                <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                              </prop>
                            </item>
                          </prop>
                          <prop type="object" name="secretsProfile">
                            <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                            <prop type="array<object>" name="secrets">
                              <item type="object">
                                <prop type="string" name="keyVaultObjectName" required="True">
                                  <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                                </prop>
                                <prop type="string" name="referenceName" required="True"/>
                                <prop type="string" name="type" required="True">
                                  <enum>
                                    <item value="&quot;Certificate&quot;"/>
                                    <item value="&quot;Key&quot;"/>
                                    <item value="&quot;Secret&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="string" name="version"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="array<object>" name="serviceConfigsProfiles">
                            <item type="object">
                              <prop type="array<object>" name="configs" required="True">
                                <item type="object">
                                  <prop type="string" name="component" required="True"/>
                                  <prop type="array<object>" name="files" required="True">
                                    <item type="object">
                                      <prop type="string" name="content"/>
                                      <prop type="string" name="encoding">
                                        <enum>
                                          <item value="&quot;Base64&quot;"/>
                                          <item value="&quot;None&quot;"/>
                                        </enum>
                                      </prop>
                                      <prop type="string" name="fileName" required="True"/>
                                      <prop type="string" name="path"/>
                                      <prop type="object" name="values">
                                        <additionalProp>
                                          <item type="string"/>
                                        </additionalProp>
                                      </prop>
                                    </item>
                                  </prop>
                                </item>
                              </prop>
                              <prop type="string" name="serviceName" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="sparkProfile">
                            <prop type="string" name="defaultStorageUrl"/>
                            <prop type="object" name="metastoreSpec">
                              <prop type="string" name="dbName" required="True"/>
                              <prop type="string" name="dbPasswordSecretName" required="True"/>
                              <prop type="string" name="dbServerHost" required="True"/>
                              <prop type="string" name="dbUserName" required="True"/>
                              <prop type="string" name="keyVaultId" required="True"/>
                              <prop type="string" name="thriftUrl"/>
                            </prop>
                            <prop type="object" name="userPluginsSpec">
                              <prop type="array<object>" name="plugins">
                                <item type="object">
                                  <prop type="string" name="path" required="True">
                                    <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                  </prop>
                                </item>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="sshProfile">
                            <prop type="integer32" name="count" required="True">
                              <format maximum="5" minimum="0"/>
                            </prop>
                            <prop readOnly="True" type="string" name="podPrefix"/>
                          </prop>
                          <prop type="object" name="stubProfile">
                            <additionalProp anyType="True"/>
                          </prop>
                          <prop type="object" name="trinoProfile">
                            <prop type="object" name="catalogOptions">
                              <prop type="array<object>" name="hive">
                                <item type="object">
                                  <prop type="string" name="catalogName" required="True">
                                    <format minLength="1"/>
                                  </prop>
                                  <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                  <prop type="string" name="metastoreWarehouseDir" required="True"/>
                                </item>
                              </prop>
                            </prop>
                            <prop type="object" name="coordinator">
                              <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                                <prop type="boolean" name="enable">
                                  <default value="false"/>
                                </prop>
                                <prop type="integer32" name="port">
                                  <default value="8008"/>
                                </prop>
                                <prop type="boolean" name="suspend">
                                  <default value="false"/>
                                </prop>
                              </prop>
                              <prop type="boolean" name="highAvailabilityEnabled">
                                <default value="true"/>
                              </prop>
                            </prop>
                            <prop type="object" name="userPluginsSpec">
                              <prop type="array<object>" name="plugins">
                                <item type="object">
                                  <prop type="boolean" name="enabled"/>
                                  <prop type="string" name="name">
                                    <format minLength="1"/>
                                  </prop>
                                  <prop type="string" name="path">
                                    <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                  </prop>
                                </item>
                              </prop>
                            </prop>
                            <prop type="object" name="userTelemetrySpec">
                              <prop type="object" name="storage">
                                <prop type="string" name="hivecatalogName">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="hivecatalogSchema">
                                  <default value="&quot;trinologs&quot;"/>
                                </prop>
                                <prop type="integer32" name="partitionRetentionInDays">
                                  <default value="365"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format minLength="1"/>
                                </prop>
                              </prop>
                            </prop>
                            <prop type="object" name="worker">
                              <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterType" required="True">
                          <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                        </prop>
                        <prop type="object" name="computeProfile" required="True">
                          <prop type="array<object>" name="nodes" required="True">
                            <item type="object">
                              <prop type="integer32" name="count" required="True">
                                <format minimum="1"/>
                              </prop>
                              <prop type="string" name="type" required="True">
                                <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                              </prop>
                              <prop type="string" name="vmSize" required="True">
                                <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                        <prop readOnly="True" type="string" name="deploymentId"/>
                        <prop readOnly="True" type="string" name="provisioningState">
                          <enum>
                            <item value="&quot;Accepted&quot;"/>
                            <item value="&quot;Canceled&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                          </enum>
                        </prop>
                        <prop readOnly="True" type="string" name="status"/>
                      </prop>
                      <prop readOnly="True" type="object" name="systemData">
                        <prop type="dateTime" name="createdAt"/>
                        <prop type="string" name="createdBy"/>
                        <prop type="string" name="createdByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="lastModifiedAt"/>
                        <prop type="string" name="lastModifiedBy"/>
                        <prop type="string" name="lastModifiedByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="object" name="tags">
                        <additionalProp>
                          <item type="string"/>
                        </additionalProp>
                      </prop>
                      <prop readOnly="True" type="string" name="type"/>
                    </schema>
                  </json>
                </body>
              </response>
              <response isError="True">
                <body>
                  <json>
                    <schema type="@MgmtErrorFormat"/>
                  </json>
                </body>
              </response>
            </http>
          </operation>
          <operation>
            <instanceUpdate ref="$Subresource">
              <json>
                <schema type="object" name="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[]" required="True">
                  <prop type="string" name="component" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].component" required="True"/>
                  <prop type="array<object>" name="files" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files" required="True">
                    <item type="object">
                      <prop type="string" name="content" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content"/>
                      <prop type="string" name="encoding" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding">
                        <enum>
                          <item value="&quot;Base64&quot;"/>
                          <item value="&quot;None&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="fileName" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" required="True"/>
                      <prop type="string" name="path" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path"/>
                      <prop type="object" name="values" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values">
                        <additionalProp>
                          <item type="string"/>
                        </additionalProp>
                      </prop>
                    </item>
                  </prop>
                </schema>
              </json>
            </instanceUpdate>
          </operation>
          <operation operationId="Clusters_Create">
            <longRunning finalStateVia="azure-async-operation"/>
            <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
              <request method="put">
                <path>
                  <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                  <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                  <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                    <format maxLength="90" minLength="1"/>
                  </param>
                  <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
                </path>
                <query>
                  <const readOnly="True" const="True" type="string" name="api-version" required="True">
                    <default value="&quot;2023-06-01-preview&quot;"/>
                    <format minLength="1"/>
                  </const>
                </query>
                <body>
                  <json ref="$Instance"/>
                </body>
              </request>
              <response statusCode="200 201">
                <body>
                  <json var="$Instance">
                    <schema type="@Cluster_read"/>
                  </json>
                </body>
              </response>
              <response isError="True">
                <body>
                  <json>
                    <schema type="@MgmtErrorFormat"/>
                  </json>
                </body>
              </response>
            </http>
          </operation>
          <output type="object" ref="$Subresource" clientFlatten="True"/>
        </command>
        <command name="delete" version="2023-06-01-preview" confirmation="Are you sure you want to perform this operation?">
          <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.serviceConfigsProfiles[].configs[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
          <argGroup name="">
            <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" options="service-configs-profile-index" required="True"/>
            <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" options="config-index" required="True"/>
            <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
              <help short="The name of the HDInsight cluster."/>
            </arg>
            <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
              <help short="The name of the cluster pool."/>
            </arg>
            <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
            <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
          </argGroup>
          <subresourceSelector var="$Subresource" ref="$Instance">
            <json type="object" name="HDInsightCluster">
              <prop type="array" name="properties.clusterProfile.serviceConfigsProfiles">
                <item type="object">
                  <prop type="array" name="configs">
                    <item type="object"/>
                    <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" required="True"/>
                  </prop>
                </item>
                <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" required="True"/>
              </prop>
            </json>
          </subresourceSelector>
          <operation operationId="Clusters_Get">
            <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
              <request method="get">
                <path>
                  <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                  <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                  <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                    <format maxLength="90" minLength="1"/>
                  </param>
                  <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
                </path>
                <query>
                  <const readOnly="True" const="True" type="string" name="api-version" required="True">
                    <default value="&quot;2023-06-01-preview&quot;"/>
                    <format minLength="1"/>
                  </const>
                </query>
              </request>
              <response statusCode="200">
                <body>
                  <json var="$Instance">
                    <schema type="object" cls="Cluster_read">
                      <prop readOnly="True" type="ResourceId" name="id">
                        <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                      </prop>
                      <prop type="ResourceLocation" name="location" required="True"/>
                      <prop readOnly="True" type="string" name="name"/>
                      <prop type="object" name="properties" clientFlatten="True">
                        <prop type="object" name="clusterProfile" required="True">
                          <prop type="object" name="authorizationProfile" required="True">
                            <prop type="array<string>" name="groupIds">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="userIds">
                              <item type="string"/>
                            </prop>
                          </prop>
                          <prop type="object" name="autoscaleProfile">
                            <prop type="string" name="autoscaleType">
                              <enum>
                                <item value="&quot;LoadBased&quot;"/>
                                <item value="&quot;ScheduleBased&quot;"/>
                              </enum>
                            </prop>
                            <prop type="boolean" name="enabled" required="True"/>
                            <prop type="integer32" name="gracefulDecommissionTimeout"/>
                            <prop type="object" name="loadBasedConfig">
                              <prop type="integer32" name="cooldownPeriod"/>
                              <prop type="integer32" name="maxNodes" required="True"/>
                              <prop type="integer32" name="minNodes" required="True"/>
                              <prop type="integer32" name="pollInterval"/>
                              <prop type="array<object>" name="scalingRules" required="True">
                                <item type="object">
                                  <prop type="string" name="actionType" required="True">
                                    <enum>
                                      <item value="&quot;scaledown&quot;"/>
                                      <item value="&quot;scaleup&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="object" name="comparisonRule" required="True">
                                    <prop type="string" name="operator" required="True">
                                      <enum>
                                        <item value="&quot;greaterThan&quot;"/>
                                        <item value="&quot;greaterThanOrEqual&quot;"/>
                                        <item value="&quot;lessThan&quot;"/>
                                        <item value="&quot;lessThanOrEqual&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="float" name="threshold" required="True"/>
                                  </prop>
                                  <prop type="integer32" name="evaluationCount" required="True"/>
                                  <prop type="string" name="scalingMetric" required="True"/>
                                </item>
                              </prop>
                            </prop>
                            <prop type="object" name="scheduleBasedConfig">
                              <prop type="integer32" name="defaultCount" required="True"/>
                              <prop type="array<object>" name="schedules" required="True">
                                <item type="object">
                                  <prop type="integer32" name="count" required="True"/>
                                  <prop type="array<string>" name="days" required="True">
                                    <item type="string">
                                      <enum>
                                        <item value="&quot;Friday&quot;"/>
                                        <item value="&quot;Monday&quot;"/>
                                        <item value="&quot;Saturday&quot;"/>
                                        <item value="&quot;Sunday&quot;"/>
                                        <item value="&quot;Thursday&quot;"/>
                                        <item value="&quot;Tuesday&quot;"/>
                                        <item value="&quot;Wednesday&quot;"/>
                                      </enum>
                                    </item>
                                  </prop>
                                  <prop type="string" name="endTime" required="True">
                                    <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                  </prop>
                                  <prop type="string" name="startTime" required="True">
                                    <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                  </prop>
                                </item>
                              </prop>
                              <prop type="string" name="timeZone" required="True"/>
                            </prop>
                          </prop>
                          <prop type="string" name="clusterVersion" required="True">
                            <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                          </prop>
                          <prop readOnly="True" type="array<object>" name="components">
                            <item type="object">
                              <prop type="string" name="name"/>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                          <prop readOnly="True" type="object" name="connectivityProfile">
                            <prop type="array<object>" name="ssh">
                              <item type="object">
                                <prop type="string" name="endpoint" required="True"/>
                              </item>
                            </prop>
                            <prop type="object" name="web" required="True">
                              <prop type="string" name="fqdn" required="True"/>
                            </prop>
                          </prop>
                          <prop type="object" name="flinkProfile">
                            <prop type="object" name="catalogOptions">
                              <prop type="object" name="hive">
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                              </prop>
                            </prop>
                            <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                            <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                              <prop type="float32" name="cpu" required="True"/>
                              <prop type="integer64" name="memory" required="True"/>
                            </prop>
                            <prop type="integer32" name="numReplicas"/>
                            <prop type="object" name="storage" required="True">
                              <prop type="string" name="storageUri" required="True">
                                <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                              </prop>
                              <prop type="string" name="storagekey" secret="True"/>
                            </prop>
                            <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                          </prop>
                          <prop type="object" name="identityProfile" required="True">
                            <prop type="string" name="msiClientId" required="True">
                              <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                            </prop>
                            <prop type="string" name="msiObjectId" required="True">
                              <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                            </prop>
                            <prop type="ResourceId" name="msiResourceId" required="True"/>
                          </prop>
                          <prop type="object" name="kafkaProfile">
                            <additionalProp anyType="True"/>
                          </prop>
                          <prop type="object" name="llapProfile">
                            <additionalProp anyType="True"/>
                          </prop>
                          <prop type="object" name="logAnalyticsProfile">
                            <prop type="object" name="applicationLogs">
                              <prop type="boolean" name="stdErrorEnabled"/>
                              <prop type="boolean" name="stdOutEnabled"/>
                            </prop>
                            <prop type="boolean" name="enabled" required="True"/>
                            <prop type="boolean" name="metricsEnabled"/>
                          </prop>
                          <prop type="string" name="ossVersion" required="True">
                            <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                          </prop>
                          <prop type="object" name="prometheusProfile">
                            <prop type="boolean" name="enabled" required="True">
                              <default value="false"/>
                            </prop>
                          </prop>
                          <prop type="array<object>" name="scriptActionProfiles">
                            <item type="object">
                              <prop type="string" name="name" required="True"/>
                              <prop type="string" name="parameters"/>
                              <prop type="array<string>" name="services" required="True">
                                <item type="string"/>
                              </prop>
                              <prop type="boolean" name="shouldPersist">
                                <default value="true"/>
                              </prop>
                              <prop type="integer32" name="timeoutInMinutes"/>
                              <prop type="string" name="type" required="True"/>
                              <prop type="string" name="url" required="True">
                                <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                              </prop>
                            </item>
                          </prop>
                          <prop type="object" name="secretsProfile">
                            <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                            <prop type="array<object>" name="secrets">
                              <item type="object">
                                <prop type="string" name="keyVaultObjectName" required="True">
                                  <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                                </prop>
                                <prop type="string" name="referenceName" required="True"/>
                                <prop type="string" name="type" required="True">
                                  <enum>
                                    <item value="&quot;Certificate&quot;"/>
                                    <item value="&quot;Key&quot;"/>
                                    <item value="&quot;Secret&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="string" name="version"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="array<object>" name="serviceConfigsProfiles">
                            <item type="object">
                              <prop type="array<object>" name="configs" required="True">
                                <item type="object">
                                  <prop type="string" name="component" required="True"/>
                                  <prop type="array<object>" name="files" required="True">
                                    <item type="object">
                                      <prop type="string" name="content"/>
                                      <prop type="string" name="encoding">
                                        <enum>
                                          <item value="&quot;Base64&quot;"/>
                                          <item value="&quot;None&quot;"/>
                                        </enum>
                                      </prop>
                                      <prop type="string" name="fileName" required="True"/>
                                      <prop type="string" name="path"/>
                                      <prop type="object" name="values">
                                        <additionalProp>
                                          <item type="string"/>
                                        </additionalProp>
                                      </prop>
                                    </item>
                                  </prop>
                                </item>
                              </prop>
                              <prop type="string" name="serviceName" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="sparkProfile">
                            <prop type="string" name="defaultStorageUrl"/>
                            <prop type="object" name="metastoreSpec">
                              <prop type="string" name="dbName" required="True"/>
                              <prop type="string" name="dbPasswordSecretName" required="True"/>
                              <prop type="string" name="dbServerHost" required="True"/>
                              <prop type="string" name="dbUserName" required="True"/>
                              <prop type="string" name="keyVaultId" required="True"/>
                              <prop type="string" name="thriftUrl"/>
                            </prop>
                            <prop type="object" name="userPluginsSpec">
                              <prop type="array<object>" name="plugins">
                                <item type="object">
                                  <prop type="string" name="path" required="True">
                                    <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                  </prop>
                                </item>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="sshProfile">
                            <prop type="integer32" name="count" required="True">
                              <format maximum="5" minimum="0"/>
                            </prop>
                            <prop readOnly="True" type="string" name="podPrefix"/>
                          </prop>
                          <prop type="object" name="stubProfile">
                            <additionalProp anyType="True"/>
                          </prop>
                          <prop type="object" name="trinoProfile">
                            <prop type="object" name="catalogOptions">
                              <prop type="array<object>" name="hive">
                                <item type="object">
                                  <prop type="string" name="catalogName" required="True">
                                    <format minLength="1"/>
                                  </prop>
                                  <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                  <prop type="string" name="metastoreWarehouseDir" required="True"/>
                                </item>
                              </prop>
                            </prop>
                            <prop type="object" name="coordinator">
                              <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                                <prop type="boolean" name="enable">
                                  <default value="false"/>
                                </prop>
                                <prop type="integer32" name="port">
                                  <default value="8008"/>
                                </prop>
                                <prop type="boolean" name="suspend">
                                  <default value="false"/>
                                </prop>
                              </prop>
                              <prop type="boolean" name="highAvailabilityEnabled">
                                <default value="true"/>
                              </prop>
                            </prop>
                            <prop type="object" name="userPluginsSpec">
                              <prop type="array<object>" name="plugins">
                                <item type="object">
                                  <prop type="boolean" name="enabled"/>
                                  <prop type="string" name="name">
                                    <format minLength="1"/>
                                  </prop>
                                  <prop type="string" name="path">
                                    <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                  </prop>
                                </item>
                              </prop>
                            </prop>
                            <prop type="object" name="userTelemetrySpec">
                              <prop type="object" name="storage">
                                <prop type="string" name="hivecatalogName">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="hivecatalogSchema">
                                  <default value="&quot;trinologs&quot;"/>
                                </prop>
                                <prop type="integer32" name="partitionRetentionInDays">
                                  <default value="365"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format minLength="1"/>
                                </prop>
                              </prop>
                            </prop>
                            <prop type="object" name="worker">
                              <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterType" required="True">
                          <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                        </prop>
                        <prop type="object" name="computeProfile" required="True">
                          <prop type="array<object>" name="nodes" required="True">
                            <item type="object">
                              <prop type="integer32" name="count" required="True">
                                <format minimum="1"/>
                              </prop>
                              <prop type="string" name="type" required="True">
                                <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                              </prop>
                              <prop type="string" name="vmSize" required="True">
                                <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                        <prop readOnly="True" type="string" name="deploymentId"/>
                        <prop readOnly="True" type="string" name="provisioningState">
                          <enum>
                            <item value="&quot;Accepted&quot;"/>
                            <item value="&quot;Canceled&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                          </enum>
                        </prop>
                        <prop readOnly="True" type="string" name="status"/>
                      </prop>
                      <prop readOnly="True" type="object" name="systemData">
                        <prop type="dateTime" name="createdAt"/>
                        <prop type="string" name="createdBy"/>
                        <prop type="string" name="createdByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="lastModifiedAt"/>
                        <prop type="string" name="lastModifiedBy"/>
                        <prop type="string" name="lastModifiedByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="object" name="tags">
                        <additionalProp>
                          <item type="string"/>
                        </additionalProp>
                      </prop>
                      <prop readOnly="True" type="string" name="type"/>
                    </schema>
                  </json>
                </body>
              </response>
              <response isError="True">
                <body>
                  <json>
                    <schema type="@MgmtErrorFormat"/>
                  </json>
                </body>
              </response>
            </http>
          </operation>
          <operation>
            <instanceDelete ref="$Subresource">
              <json/>
            </instanceDelete>
          </operation>
          <operation operationId="Clusters_Create">
            <longRunning finalStateVia="azure-async-operation"/>
            <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
              <request method="put">
                <path>
                  <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                  <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                  <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                    <format maxLength="90" minLength="1"/>
                  </param>
                  <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
                </path>
                <query>
                  <const readOnly="True" const="True" type="string" name="api-version" required="True">
                    <default value="&quot;2023-06-01-preview&quot;"/>
                    <format minLength="1"/>
                  </const>
                </query>
                <body>
                  <json ref="$Instance"/>
                </body>
              </request>
              <response statusCode="200 201">
                <body>
                  <json var="$Instance">
                    <schema type="@Cluster_read"/>
                  </json>
                </body>
              </response>
              <response isError="True">
                <body>
                  <json>
                    <schema type="@MgmtErrorFormat"/>
                  </json>
                </body>
              </response>
            </http>
          </operation>
        </command>
        <command name="show" version="2023-06-01-preview" confirmation="">
          <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.serviceConfigsProfiles[].configs[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
          <argGroup name="">
            <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" options="service-configs-profile-index" required="True"/>
            <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" options="config-index" required="True"/>
            <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
              <help short="The name of the HDInsight cluster."/>
            </arg>
            <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
              <help short="The name of the cluster pool."/>
            </arg>
            <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
            <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
          </argGroup>
          <subresourceSelector var="$Subresource" ref="$Instance">
            <json type="object" name="HDInsightCluster">
              <prop type="array" name="properties.clusterProfile.serviceConfigsProfiles">
                <item type="object">
                  <prop type="array" name="configs">
                    <item type="object"/>
                    <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" required="True"/>
                  </prop>
                </item>
                <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" required="True"/>
              </prop>
            </json>
          </subresourceSelector>
          <operation operationId="Clusters_Get">
            <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
              <request method="get">
                <path>
                  <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                  <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                  <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                    <format maxLength="90" minLength="1"/>
                  </param>
                  <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
                </path>
                <query>
                  <const readOnly="True" const="True" type="string" name="api-version" required="True">
                    <default value="&quot;2023-06-01-preview&quot;"/>
                    <format minLength="1"/>
                  </const>
                </query>
              </request>
              <response statusCode="200">
                <body>
                  <json var="$Instance">
                    <schema type="object" cls="Cluster_read">
                      <prop readOnly="True" type="ResourceId" name="id">
                        <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                      </prop>
                      <prop type="ResourceLocation" name="location" required="True"/>
                      <prop readOnly="True" type="string" name="name"/>
                      <prop type="object" name="properties" clientFlatten="True">
                        <prop type="object" name="clusterProfile" required="True">
                          <prop type="object" name="authorizationProfile" required="True">
                            <prop type="array<string>" name="groupIds">
                              <item type="string"/>
                            </prop>
                            <prop type="array<string>" name="userIds">
                              <item type="string"/>
                            </prop>
                          </prop>
                          <prop type="object" name="autoscaleProfile">
                            <prop type="string" name="autoscaleType">
                              <enum>
                                <item value="&quot;LoadBased&quot;"/>
                                <item value="&quot;ScheduleBased&quot;"/>
                              </enum>
                            </prop>
                            <prop type="boolean" name="enabled" required="True"/>
                            <prop type="integer32" name="gracefulDecommissionTimeout"/>
                            <prop type="object" name="loadBasedConfig">
                              <prop type="integer32" name="cooldownPeriod"/>
                              <prop type="integer32" name="maxNodes" required="True"/>
                              <prop type="integer32" name="minNodes" required="True"/>
                              <prop type="integer32" name="pollInterval"/>
                              <prop type="array<object>" name="scalingRules" required="True">
                                <item type="object">
                                  <prop type="string" name="actionType" required="True">
                                    <enum>
                                      <item value="&quot;scaledown&quot;"/>
                                      <item value="&quot;scaleup&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="object" name="comparisonRule" required="True">
                                    <prop type="string" name="operator" required="True">
                                      <enum>
                                        <item value="&quot;greaterThan&quot;"/>
                                        <item value="&quot;greaterThanOrEqual&quot;"/>
                                        <item value="&quot;lessThan&quot;"/>
                                        <item value="&quot;lessThanOrEqual&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="float" name="threshold" required="True"/>
                                  </prop>
                                  <prop type="integer32" name="evaluationCount" required="True"/>
                                  <prop type="string" name="scalingMetric" required="True"/>
                                </item>
                              </prop>
                            </prop>
                            <prop type="object" name="scheduleBasedConfig">
                              <prop type="integer32" name="defaultCount" required="True"/>
                              <prop type="array<object>" name="schedules" required="True">
                                <item type="object">
                                  <prop type="integer32" name="count" required="True"/>
                                  <prop type="array<string>" name="days" required="True">
                                    <item type="string">
                                      <enum>
                                        <item value="&quot;Friday&quot;"/>
                                        <item value="&quot;Monday&quot;"/>
                                        <item value="&quot;Saturday&quot;"/>
                                        <item value="&quot;Sunday&quot;"/>
                                        <item value="&quot;Thursday&quot;"/>
                                        <item value="&quot;Tuesday&quot;"/>
                                        <item value="&quot;Wednesday&quot;"/>
                                      </enum>
                                    </item>
                                  </prop>
                                  <prop type="string" name="endTime" required="True">
                                    <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                  </prop>
                                  <prop type="string" name="startTime" required="True">
                                    <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                  </prop>
                                </item>
                              </prop>
                              <prop type="string" name="timeZone" required="True"/>
                            </prop>
                          </prop>
                          <prop type="string" name="clusterVersion" required="True">
                            <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                          </prop>
                          <prop readOnly="True" type="array<object>" name="components">
                            <item type="object">
                              <prop type="string" name="name"/>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                          <prop readOnly="True" type="object" name="connectivityProfile">
                            <prop type="array<object>" name="ssh">
                              <item type="object">
                                <prop type="string" name="endpoint" required="True"/>
                              </item>
                            </prop>
                            <prop type="object" name="web" required="True">
                              <prop type="string" name="fqdn" required="True"/>
                            </prop>
                          </prop>
                          <prop type="object" name="flinkProfile">
                            <prop type="object" name="catalogOptions">
                              <prop type="object" name="hive">
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                              </prop>
                            </prop>
                            <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                            <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                              <prop type="float32" name="cpu" required="True"/>
                              <prop type="integer64" name="memory" required="True"/>
                            </prop>
                            <prop type="integer32" name="numReplicas"/>
                            <prop type="object" name="storage" required="True">
                              <prop type="string" name="storageUri" required="True">
                                <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                              </prop>
                              <prop type="string" name="storagekey" secret="True"/>
                            </prop>
                            <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                          </prop>
                          <prop type="object" name="identityProfile" required="True">
                            <prop type="string" name="msiClientId" required="True">
                              <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                            </prop>
                            <prop type="string" name="msiObjectId" required="True">
                              <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                            </prop>
                            <prop type="ResourceId" name="msiResourceId" required="True"/>
                          </prop>
                          <prop type="object" name="kafkaProfile">
                            <additionalProp anyType="True"/>
                          </prop>
                          <prop type="object" name="llapProfile">
                            <additionalProp anyType="True"/>
                          </prop>
                          <prop type="object" name="logAnalyticsProfile">
                            <prop type="object" name="applicationLogs">
                              <prop type="boolean" name="stdErrorEnabled"/>
                              <prop type="boolean" name="stdOutEnabled"/>
                            </prop>
                            <prop type="boolean" name="enabled" required="True"/>
                            <prop type="boolean" name="metricsEnabled"/>
                          </prop>
                          <prop type="string" name="ossVersion" required="True">
                            <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                          </prop>
                          <prop type="object" name="prometheusProfile">
                            <prop type="boolean" name="enabled" required="True">
                              <default value="false"/>
                            </prop>
                          </prop>
                          <prop type="array<object>" name="scriptActionProfiles">
                            <item type="object">
                              <prop type="string" name="name" required="True"/>
                              <prop type="string" name="parameters"/>
                              <prop type="array<string>" name="services" required="True">
                                <item type="string"/>
                              </prop>
                              <prop type="boolean" name="shouldPersist">
                                <default value="true"/>
                              </prop>
                              <prop type="integer32" name="timeoutInMinutes"/>
                              <prop type="string" name="type" required="True"/>
                              <prop type="string" name="url" required="True">
                                <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                              </prop>
                            </item>
                          </prop>
                          <prop type="object" name="secretsProfile">
                            <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                            <prop type="array<object>" name="secrets">
                              <item type="object">
                                <prop type="string" name="keyVaultObjectName" required="True">
                                  <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                                </prop>
                                <prop type="string" name="referenceName" required="True"/>
                                <prop type="string" name="type" required="True">
                                  <enum>
                                    <item value="&quot;Certificate&quot;"/>
                                    <item value="&quot;Key&quot;"/>
                                    <item value="&quot;Secret&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="string" name="version"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="array<object>" name="serviceConfigsProfiles">
                            <item type="object">
                              <prop type="array<object>" name="configs" required="True">
                                <item type="object">
                                  <prop type="string" name="component" required="True"/>
                                  <prop type="array<object>" name="files" required="True">
                                    <item type="object">
                                      <prop type="string" name="content"/>
                                      <prop type="string" name="encoding">
                                        <enum>
                                          <item value="&quot;Base64&quot;"/>
                                          <item value="&quot;None&quot;"/>
                                        </enum>
                                      </prop>
                                      <prop type="string" name="fileName" required="True"/>
                                      <prop type="string" name="path"/>
                                      <prop type="object" name="values">
                                        <additionalProp>
                                          <item type="string"/>
                                        </additionalProp>
                                      </prop>
                                    </item>
                                  </prop>
                                </item>
                              </prop>
                              <prop type="string" name="serviceName" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="sparkProfile">
                            <prop type="string" name="defaultStorageUrl"/>
                            <prop type="object" name="metastoreSpec">
                              <prop type="string" name="dbName" required="True"/>
                              <prop type="string" name="dbPasswordSecretName" required="True"/>
                              <prop type="string" name="dbServerHost" required="True"/>
                              <prop type="string" name="dbUserName" required="True"/>
                              <prop type="string" name="keyVaultId" required="True"/>
                              <prop type="string" name="thriftUrl"/>
                            </prop>
                            <prop type="object" name="userPluginsSpec">
                              <prop type="array<object>" name="plugins">
                                <item type="object">
                                  <prop type="string" name="path" required="True">
                                    <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                  </prop>
                                </item>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="sshProfile">
                            <prop type="integer32" name="count" required="True">
                              <format maximum="5" minimum="0"/>
                            </prop>
                            <prop readOnly="True" type="string" name="podPrefix"/>
                          </prop>
                          <prop type="object" name="stubProfile">
                            <additionalProp anyType="True"/>
                          </prop>
                          <prop type="object" name="trinoProfile">
                            <prop type="object" name="catalogOptions">
                              <prop type="array<object>" name="hive">
                                <item type="object">
                                  <prop type="string" name="catalogName" required="True">
                                    <format minLength="1"/>
                                  </prop>
                                  <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                  <prop type="string" name="metastoreWarehouseDir" required="True"/>
                                </item>
                              </prop>
                            </prop>
                            <prop type="object" name="coordinator">
                              <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                                <prop type="boolean" name="enable">
                                  <default value="false"/>
                                </prop>
                                <prop type="integer32" name="port">
                                  <default value="8008"/>
                                </prop>
                                <prop type="boolean" name="suspend">
                                  <default value="false"/>
                                </prop>
                              </prop>
                              <prop type="boolean" name="highAvailabilityEnabled">
                                <default value="true"/>
                              </prop>
                            </prop>
                            <prop type="object" name="userPluginsSpec">
                              <prop type="array<object>" name="plugins">
                                <item type="object">
                                  <prop type="boolean" name="enabled"/>
                                  <prop type="string" name="name">
                                    <format minLength="1"/>
                                  </prop>
                                  <prop type="string" name="path">
                                    <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                  </prop>
                                </item>
                              </prop>
                            </prop>
                            <prop type="object" name="userTelemetrySpec">
                              <prop type="object" name="storage">
                                <prop type="string" name="hivecatalogName">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="hivecatalogSchema">
                                  <default value="&quot;trinologs&quot;"/>
                                </prop>
                                <prop type="integer32" name="partitionRetentionInDays">
                                  <default value="365"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format minLength="1"/>
                                </prop>
                              </prop>
                            </prop>
                            <prop type="object" name="worker">
                              <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterType" required="True">
                          <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                        </prop>
                        <prop type="object" name="computeProfile" required="True">
                          <prop type="array<object>" name="nodes" required="True">
                            <item type="object">
                              <prop type="integer32" name="count" required="True">
                                <format minimum="1"/>
                              </prop>
                              <prop type="string" name="type" required="True">
                                <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                              </prop>
                              <prop type="string" name="vmSize" required="True">
                                <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                              </prop>
                            </item>
                          </prop>
                        </prop>
                        <prop readOnly="True" type="string" name="deploymentId"/>
                        <prop readOnly="True" type="string" name="provisioningState">
                          <enum>
                            <item value="&quot;Accepted&quot;"/>
                            <item value="&quot;Canceled&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                          </enum>
                        </prop>
                        <prop readOnly="True" type="string" name="status"/>
                      </prop>
                      <prop readOnly="True" type="object" name="systemData">
                        <prop type="dateTime" name="createdAt"/>
                        <prop type="string" name="createdBy"/>
                        <prop type="string" name="createdByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="lastModifiedAt"/>
                        <prop type="string" name="lastModifiedBy"/>
                        <prop type="string" name="lastModifiedByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="object" name="tags">
                        <additionalProp>
                          <item type="string"/>
                        </additionalProp>
                      </prop>
                      <prop readOnly="True" type="string" name="type"/>
                    </schema>
                  </json>
                </body>
              </response>
              <response isError="True">
                <body>
                  <json>
                    <schema type="@MgmtErrorFormat"/>
                  </json>
                </body>
              </response>
            </http>
          </operation>
          <output type="object" ref="$Subresource" clientFlatten="True"/>
        </command>
        <commandGroup name="file">
          <command name="create" version="2023-06-01-preview" confirmation="">
            <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
            <argGroup name="">
              <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" options="service-configs-profile-index" required="True"/>
              <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" options="config-index" required="True"/>
              <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[Index]" options="file-index"/>
              <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
                <help short="The name of the HDInsight cluster."/>
              </arg>
              <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
                <help short="The name of the cluster pool."/>
              </arg>
              <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
              <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
            </argGroup>
            <argGroup name="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]">
              <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content" options="content" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]">
                <help short="Free form content of the entire configuration file."/>
              </arg>
              <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding" options="encoding" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]">
                <help short="This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text."/>
                <enum>
                  <item name="Base64" value="&quot;Base64&quot;"/>
                  <item name="None" value="&quot;None&quot;"/>
                </enum>
              </arg>
              <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" options="file-name" required="True" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]">
                <help short="Configuration file name."/>
              </arg>
              <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path" options="path" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]">
                <help short="Path of the config file if content is specified."/>
              </arg>
              <arg type="object" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values" options="value" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]">
                <help short="List of key value pairs where key represents a valid service configuration name and value represents the value of the config."/>
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </arg>
            </argGroup>
            <subresourceSelector var="$Subresource" ref="$Instance">
              <json type="object" name="HDInsightCluster">
                <prop type="array" name="properties.clusterProfile.serviceConfigsProfiles">
                  <item type="object">
                    <prop type="array" name="configs">
                      <item type="object">
                        <prop type="array" name="files">
                          <item type="object"/>
                          <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[Index]"/>
                        </prop>
                      </item>
                      <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" required="True"/>
                    </prop>
                  </item>
                  <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" required="True"/>
                </prop>
              </json>
            </subresourceSelector>
            <operation operationId="Clusters_Get">
              <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
                <request method="get">
                  <path>
                    <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                    <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                    <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                      <format maxLength="90" minLength="1"/>
                    </param>
                    <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
                  </path>
                  <query>
                    <const readOnly="True" const="True" type="string" name="api-version" required="True">
                      <default value="&quot;2023-06-01-preview&quot;"/>
                      <format minLength="1"/>
                    </const>
                  </query>
                </request>
                <response statusCode="200">
                  <body>
                    <json var="$Instance">
                      <schema type="object" cls="Cluster_read">
                        <prop readOnly="True" type="ResourceId" name="id">
                          <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                        </prop>
                        <prop type="ResourceLocation" name="location" required="True"/>
                        <prop readOnly="True" type="string" name="name"/>
                        <prop type="object" name="properties" clientFlatten="True">
                          <prop type="object" name="clusterProfile" required="True">
                            <prop type="object" name="authorizationProfile" required="True">
                              <prop type="array<string>" name="groupIds">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="userIds">
                                <item type="string"/>
                              </prop>
                            </prop>
                            <prop type="object" name="autoscaleProfile">
                              <prop type="string" name="autoscaleType">
                                <enum>
                                  <item value="&quot;LoadBased&quot;"/>
                                  <item value="&quot;ScheduleBased&quot;"/>
                                </enum>
                              </prop>
                              <prop type="boolean" name="enabled" required="True"/>
                              <prop type="integer32" name="gracefulDecommissionTimeout"/>
                              <prop type="object" name="loadBasedConfig">
                                <prop type="integer32" name="cooldownPeriod"/>
                                <prop type="integer32" name="maxNodes" required="True"/>
                                <prop type="integer32" name="minNodes" required="True"/>
                                <prop type="integer32" name="pollInterval"/>
                                <prop type="array<object>" name="scalingRules" required="True">
                                  <item type="object">
                                    <prop type="string" name="actionType" required="True">
                                      <enum>
                                        <item value="&quot;scaledown&quot;"/>
                                        <item value="&quot;scaleup&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="object" name="comparisonRule" required="True">
                                      <prop type="string" name="operator" required="True">
                                        <enum>
                                          <item value="&quot;greaterThan&quot;"/>
                                          <item value="&quot;greaterThanOrEqual&quot;"/>
                                          <item value="&quot;lessThan&quot;"/>
                                          <item value="&quot;lessThanOrEqual&quot;"/>
                                        </enum>
                                      </prop>
                                      <prop type="float" name="threshold" required="True"/>
                                    </prop>
                                    <prop type="integer32" name="evaluationCount" required="True"/>
                                    <prop type="string" name="scalingMetric" required="True"/>
                                  </item>
                                </prop>
                              </prop>
                              <prop type="object" name="scheduleBasedConfig">
                                <prop type="integer32" name="defaultCount" required="True"/>
                                <prop type="array<object>" name="schedules" required="True">
                                  <item type="object">
                                    <prop type="integer32" name="count" required="True"/>
                                    <prop type="array<string>" name="days" required="True">
                                      <item type="string">
                                        <enum>
                                          <item value="&quot;Friday&quot;"/>
                                          <item value="&quot;Monday&quot;"/>
                                          <item value="&quot;Saturday&quot;"/>
                                          <item value="&quot;Sunday&quot;"/>
                                          <item value="&quot;Thursday&quot;"/>
                                          <item value="&quot;Tuesday&quot;"/>
                                          <item value="&quot;Wednesday&quot;"/>
                                        </enum>
                                      </item>
                                    </prop>
                                    <prop type="string" name="endTime" required="True">
                                      <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                    </prop>
                                    <prop type="string" name="startTime" required="True">
                                      <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                    </prop>
                                  </item>
                                </prop>
                                <prop type="string" name="timeZone" required="True"/>
                              </prop>
                            </prop>
                            <prop type="string" name="clusterVersion" required="True">
                              <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                            </prop>
                            <prop readOnly="True" type="array<object>" name="components">
                              <item type="object">
                                <prop type="string" name="name"/>
                                <prop type="string" name="version"/>
                              </item>
                            </prop>
                            <prop readOnly="True" type="object" name="connectivityProfile">
                              <prop type="array<object>" name="ssh">
                                <item type="object">
                                  <prop type="string" name="endpoint" required="True"/>
                                </item>
                              </prop>
                              <prop type="object" name="web" required="True">
                                <prop type="string" name="fqdn" required="True"/>
                              </prop>
                            </prop>
                            <prop type="object" name="flinkProfile">
                              <prop type="object" name="catalogOptions">
                                <prop type="object" name="hive">
                                  <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                </prop>
                              </prop>
                              <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                              <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                                <prop type="float32" name="cpu" required="True"/>
                                <prop type="integer64" name="memory" required="True"/>
                              </prop>
                              <prop type="integer32" name="numReplicas"/>
                              <prop type="object" name="storage" required="True">
                                <prop type="string" name="storageUri" required="True">
                                  <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                                </prop>
                                <prop type="string" name="storagekey" secret="True"/>
                              </prop>
                              <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                            </prop>
                            <prop type="object" name="identityProfile" required="True">
                              <prop type="string" name="msiClientId" required="True">
                                <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                              </prop>
                              <prop type="string" name="msiObjectId" required="True">
                                <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                              </prop>
                              <prop type="ResourceId" name="msiResourceId" required="True"/>
                            </prop>
                            <prop type="object" name="kafkaProfile">
                              <additionalProp anyType="True"/>
                            </prop>
                            <prop type="object" name="llapProfile">
                              <additionalProp anyType="True"/>
                            </prop>
                            <prop type="object" name="logAnalyticsProfile">
                              <prop type="object" name="applicationLogs">
                                <prop type="boolean" name="stdErrorEnabled"/>
                                <prop type="boolean" name="stdOutEnabled"/>
                              </prop>
                              <prop type="boolean" name="enabled" required="True"/>
                              <prop type="boolean" name="metricsEnabled"/>
                            </prop>
                            <prop type="string" name="ossVersion" required="True">
                              <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                            </prop>
                            <prop type="object" name="prometheusProfile">
                              <prop type="boolean" name="enabled" required="True">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="array<object>" name="scriptActionProfiles">
                              <item type="object">
                                <prop type="string" name="name" required="True"/>
                                <prop type="string" name="parameters"/>
                                <prop type="array<string>" name="services" required="True">
                                  <item type="string"/>
                                </prop>
                                <prop type="boolean" name="shouldPersist">
                                  <default value="true"/>
                                </prop>
                                <prop type="integer32" name="timeoutInMinutes"/>
                                <prop type="string" name="type" required="True"/>
                                <prop type="string" name="url" required="True">
                                  <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="object" name="secretsProfile">
                              <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                              <prop type="array<object>" name="secrets">
                                <item type="object">
                                  <prop type="string" name="keyVaultObjectName" required="True">
                                    <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                                  </prop>
                                  <prop type="string" name="referenceName" required="True"/>
                                  <prop type="string" name="type" required="True">
                                    <enum>
                                      <item value="&quot;Certificate&quot;"/>
                                      <item value="&quot;Key&quot;"/>
                                      <item value="&quot;Secret&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="string" name="version"/>
                                </item>
                              </prop>
                            </prop>
                            <prop type="array<object>" name="serviceConfigsProfiles">
                              <item type="object">
                                <prop type="array<object>" name="configs" required="True">
                                  <item type="object">
                                    <prop type="string" name="component" required="True"/>
                                    <prop type="array<object>" name="files" required="True">
                                      <item type="object">
                                        <prop type="string" name="content"/>
                                        <prop type="string" name="encoding">
                                          <enum>
                                            <item value="&quot;Base64&quot;"/>
                                            <item value="&quot;None&quot;"/>
                                          </enum>
                                        </prop>
                                        <prop type="string" name="fileName" required="True"/>
                                        <prop type="string" name="path"/>
                                        <prop type="object" name="values">
                                          <additionalProp>
                                            <item type="string"/>
                                          </additionalProp>
                                        </prop>
                                      </item>
                                    </prop>
                                  </item>
                                </prop>
                                <prop type="string" name="serviceName" required="True"/>
                              </item>
                            </prop>
                            <prop type="object" name="sparkProfile">
                              <prop type="string" name="defaultStorageUrl"/>
                              <prop type="object" name="metastoreSpec">
                                <prop type="string" name="dbName" required="True"/>
                                <prop type="string" name="dbPasswordSecretName" required="True"/>
                                <prop type="string" name="dbServerHost" required="True"/>
                                <prop type="string" name="dbUserName" required="True"/>
                                <prop type="string" name="keyVaultId" required="True"/>
                                <prop type="string" name="thriftUrl"/>
                              </prop>
                              <prop type="object" name="userPluginsSpec">
                                <prop type="array<object>" name="plugins">
                                  <item type="object">
                                    <prop type="string" name="path" required="True">
                                      <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                    </prop>
                                  </item>
                                </prop>
                              </prop>
                            </prop>
                            <prop type="object" name="sshProfile">
                              <prop type="integer32" name="count" required="True">
                                <format maximum="5" minimum="0"/>
                              </prop>
                              <prop readOnly="True" type="string" name="podPrefix"/>
                            </prop>
                            <prop type="object" name="stubProfile">
                              <additionalProp anyType="True"/>
                            </prop>
                            <prop type="object" name="trinoProfile">
                              <prop type="object" name="catalogOptions">
                                <prop type="array<object>" name="hive">
                                  <item type="object">
                                    <prop type="string" name="catalogName" required="True">
                                      <format minLength="1"/>
                                    </prop>
                                    <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                    <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                    <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                    <prop type="string" name="metastoreWarehouseDir" required="True"/>
                                  </item>
                                </prop>
                              </prop>
                              <prop type="object" name="coordinator">
                                <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                                  <prop type="boolean" name="enable">
                                    <default value="false"/>
                                  </prop>
                                  <prop type="integer32" name="port">
                                    <default value="8008"/>
                                  </prop>
                                  <prop type="boolean" name="suspend">
                                    <default value="false"/>
                                  </prop>
                                </prop>
                                <prop type="boolean" name="highAvailabilityEnabled">
                                  <default value="true"/>
                                </prop>
                              </prop>
                              <prop type="object" name="userPluginsSpec">
                                <prop type="array<object>" name="plugins">
                                  <item type="object">
                                    <prop type="boolean" name="enabled"/>
                                    <prop type="string" name="name">
                                      <format minLength="1"/>
                                    </prop>
                                    <prop type="string" name="path">
                                      <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                    </prop>
                                  </item>
                                </prop>
                              </prop>
                              <prop type="object" name="userTelemetrySpec">
                                <prop type="object" name="storage">
                                  <prop type="string" name="hivecatalogName">
                                    <format minLength="1"/>
                                  </prop>
                                  <prop type="string" name="hivecatalogSchema">
                                    <default value="&quot;trinologs&quot;"/>
                                  </prop>
                                  <prop type="integer32" name="partitionRetentionInDays">
                                    <default value="365"/>
                                  </prop>
                                  <prop type="string" name="path">
                                    <format minLength="1"/>
                                  </prop>
                                </prop>
                              </prop>
                              <prop type="object" name="worker">
                                <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="string" name="clusterType" required="True">
                            <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                          </prop>
                          <prop type="object" name="computeProfile" required="True">
                            <prop type="array<object>" name="nodes" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True">
                                  <format minimum="1"/>
                                </prop>
                                <prop type="string" name="type" required="True">
                                  <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                                </prop>
                                <prop type="string" name="vmSize" required="True">
                                  <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop readOnly="True" type="string" name="deploymentId"/>
                          <prop readOnly="True" type="string" name="provisioningState">
                            <enum>
                              <item value="&quot;Accepted&quot;"/>
                              <item value="&quot;Canceled&quot;"/>
                              <item value="&quot;Failed&quot;"/>
                              <item value="&quot;Succeeded&quot;"/>
                            </enum>
                          </prop>
                          <prop readOnly="True" type="string" name="status"/>
                        </prop>
                        <prop readOnly="True" type="object" name="systemData">
                          <prop type="dateTime" name="createdAt"/>
                          <prop type="string" name="createdBy"/>
                          <prop type="string" name="createdByType">
                            <enum>
                              <item value="&quot;Application&quot;"/>
                              <item value="&quot;Key&quot;"/>
                              <item value="&quot;ManagedIdentity&quot;"/>
                              <item value="&quot;User&quot;"/>
                            </enum>
                          </prop>
                          <prop type="dateTime" name="lastModifiedAt"/>
                          <prop type="string" name="lastModifiedBy"/>
                          <prop type="string" name="lastModifiedByType">
                            <enum>
                              <item value="&quot;Application&quot;"/>
                              <item value="&quot;Key&quot;"/>
                              <item value="&quot;ManagedIdentity&quot;"/>
                              <item value="&quot;User&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                        <prop type="object" name="tags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop readOnly="True" type="string" name="type"/>
                      </schema>
                    </json>
                  </body>
                </response>
                <response isError="True">
                  <body>
                    <json>
                      <schema type="@MgmtErrorFormat"/>
                    </json>
                  </body>
                </response>
              </http>
            </operation>
            <operation>
              <instanceCreate ref="$Subresource">
                <json>
                  <schema type="object" name="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]" required="True">
                    <prop type="string" name="content" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content"/>
                    <prop type="string" name="encoding" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding">
                      <enum>
                        <item value="&quot;Base64&quot;"/>
                        <item value="&quot;None&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="fileName" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" required="True"/>
                    <prop type="string" name="path" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path"/>
                    <prop type="object" name="values" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                  </schema>
                </json>
              </instanceCreate>
            </operation>
            <operation operationId="Clusters_Create">
              <longRunning finalStateVia="azure-async-operation"/>
              <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
                <request method="put">
                  <path>
                    <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                    <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                    <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                      <format maxLength="90" minLength="1"/>
                    </param>
                    <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
                  </path>
                  <query>
                    <const readOnly="True" const="True" type="string" name="api-version" required="True">
                      <default value="&quot;2023-06-01-preview&quot;"/>
                      <format minLength="1"/>
                    </const>
                  </query>
                  <body>
                    <json ref="$Instance"/>
                  </body>
                </request>
                <response statusCode="200 201">
                  <body>
                    <json var="$Instance">
                      <schema type="@Cluster_read"/>
                    </json>
                  </body>
                </response>
                <response isError="True">
                  <body>
                    <json>
                      <schema type="@MgmtErrorFormat"/>
                    </json>
                  </body>
                </response>
              </http>
            </operation>
            <output type="object" ref="$Subresource" clientFlatten="True"/>
          </command>
          <command name="update" version="2023-06-01-preview" confirmation="">
            <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
            <argGroup name="">
              <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" options="service-configs-profile-index" required="True"/>
              <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" options="config-index" required="True"/>
              <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[Index]" options="file-index" required="True"/>
              <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
                <help short="The name of the HDInsight cluster."/>
              </arg>
              <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
                <help short="The name of the cluster pool."/>
              </arg>
              <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
              <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
            </argGroup>
            <argGroup name="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]">
              <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content" options="content" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]">
                <help short="Free form content of the entire configuration file."/>
              </arg>
              <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding" options="encoding" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]">
                <help short="This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text."/>
                <enum>
                  <item name="Base64" value="&quot;Base64&quot;"/>
                  <item name="None" value="&quot;None&quot;"/>
                </enum>
              </arg>
              <arg type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" options="file-name" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]">
                <help short="Configuration file name."/>
              </arg>
              <arg nullable="True" type="string" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path" options="path" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]">
                <help short="Path of the config file if content is specified."/>
              </arg>
              <arg nullable="True" type="object" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values" options="value" group="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]">
                <help short="List of key value pairs where key represents a valid service configuration name and value represents the value of the config."/>
                <additionalProp>
                  <item nullable="True" type="string"/>
                </additionalProp>
              </arg>
            </argGroup>
            <subresourceSelector var="$Subresource" ref="$Instance">
              <json type="object" name="HDInsightCluster">
                <prop type="array" name="properties.clusterProfile.serviceConfigsProfiles">
                  <item type="object">
                    <prop type="array" name="configs">
                      <item type="object">
                        <prop type="array" name="files">
                          <item type="object"/>
                          <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[Index]" required="True"/>
                        </prop>
                      </item>
                      <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" required="True"/>
                    </prop>
                  </item>
                  <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" required="True"/>
                </prop>
              </json>
            </subresourceSelector>
            <operation operationId="Clusters_Get">
              <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
                <request method="get">
                  <path>
                    <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                    <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                    <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                      <format maxLength="90" minLength="1"/>
                    </param>
                    <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
                  </path>
                  <query>
                    <const readOnly="True" const="True" type="string" name="api-version" required="True">
                      <default value="&quot;2023-06-01-preview&quot;"/>
                      <format minLength="1"/>
                    </const>
                  </query>
                </request>
                <response statusCode="200">
                  <body>
                    <json var="$Instance">
                      <schema type="object" cls="Cluster_read">
                        <prop readOnly="True" type="ResourceId" name="id">
                          <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                        </prop>
                        <prop type="ResourceLocation" name="location" required="True"/>
                        <prop readOnly="True" type="string" name="name"/>
                        <prop type="object" name="properties" clientFlatten="True">
                          <prop type="object" name="clusterProfile" required="True">
                            <prop type="object" name="authorizationProfile" required="True">
                              <prop type="array<string>" name="groupIds">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="userIds">
                                <item type="string"/>
                              </prop>
                            </prop>
                            <prop type="object" name="autoscaleProfile">
                              <prop type="string" name="autoscaleType">
                                <enum>
                                  <item value="&quot;LoadBased&quot;"/>
                                  <item value="&quot;ScheduleBased&quot;"/>
                                </enum>
                              </prop>
                              <prop type="boolean" name="enabled" required="True"/>
                              <prop type="integer32" name="gracefulDecommissionTimeout"/>
                              <prop type="object" name="loadBasedConfig">
                                <prop type="integer32" name="cooldownPeriod"/>
                                <prop type="integer32" name="maxNodes" required="True"/>
                                <prop type="integer32" name="minNodes" required="True"/>
                                <prop type="integer32" name="pollInterval"/>
                                <prop type="array<object>" name="scalingRules" required="True">
                                  <item type="object">
                                    <prop type="string" name="actionType" required="True">
                                      <enum>
                                        <item value="&quot;scaledown&quot;"/>
                                        <item value="&quot;scaleup&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="object" name="comparisonRule" required="True">
                                      <prop type="string" name="operator" required="True">
                                        <enum>
                                          <item value="&quot;greaterThan&quot;"/>
                                          <item value="&quot;greaterThanOrEqual&quot;"/>
                                          <item value="&quot;lessThan&quot;"/>
                                          <item value="&quot;lessThanOrEqual&quot;"/>
                                        </enum>
                                      </prop>
                                      <prop type="float" name="threshold" required="True"/>
                                    </prop>
                                    <prop type="integer32" name="evaluationCount" required="True"/>
                                    <prop type="string" name="scalingMetric" required="True"/>
                                  </item>
                                </prop>
                              </prop>
                              <prop type="object" name="scheduleBasedConfig">
                                <prop type="integer32" name="defaultCount" required="True"/>
                                <prop type="array<object>" name="schedules" required="True">
                                  <item type="object">
                                    <prop type="integer32" name="count" required="True"/>
                                    <prop type="array<string>" name="days" required="True">
                                      <item type="string">
                                        <enum>
                                          <item value="&quot;Friday&quot;"/>
                                          <item value="&quot;Monday&quot;"/>
                                          <item value="&quot;Saturday&quot;"/>
                                          <item value="&quot;Sunday&quot;"/>
                                          <item value="&quot;Thursday&quot;"/>
                                          <item value="&quot;Tuesday&quot;"/>
                                          <item value="&quot;Wednesday&quot;"/>
                                        </enum>
                                      </item>
                                    </prop>
                                    <prop type="string" name="endTime" required="True">
                                      <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                    </prop>
                                    <prop type="string" name="startTime" required="True">
                                      <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                    </prop>
                                  </item>
                                </prop>
                                <prop type="string" name="timeZone" required="True"/>
                              </prop>
                            </prop>
                            <prop type="string" name="clusterVersion" required="True">
                              <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                            </prop>
                            <prop readOnly="True" type="array<object>" name="components">
                              <item type="object">
                                <prop type="string" name="name"/>
                                <prop type="string" name="version"/>
                              </item>
                            </prop>
                            <prop readOnly="True" type="object" name="connectivityProfile">
                              <prop type="array<object>" name="ssh">
                                <item type="object">
                                  <prop type="string" name="endpoint" required="True"/>
                                </item>
                              </prop>
                              <prop type="object" name="web" required="True">
                                <prop type="string" name="fqdn" required="True"/>
                              </prop>
                            </prop>
                            <prop type="object" name="flinkProfile">
                              <prop type="object" name="catalogOptions">
                                <prop type="object" name="hive">
                                  <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                </prop>
                              </prop>
                              <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                              <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                                <prop type="float32" name="cpu" required="True"/>
                                <prop type="integer64" name="memory" required="True"/>
                              </prop>
                              <prop type="integer32" name="numReplicas"/>
                              <prop type="object" name="storage" required="True">
                                <prop type="string" name="storageUri" required="True">
                                  <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                                </prop>
                                <prop type="string" name="storagekey" secret="True"/>
                              </prop>
                              <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                            </prop>
                            <prop type="object" name="identityProfile" required="True">
                              <prop type="string" name="msiClientId" required="True">
                                <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                              </prop>
                              <prop type="string" name="msiObjectId" required="True">
                                <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                              </prop>
                              <prop type="ResourceId" name="msiResourceId" required="True"/>
                            </prop>
                            <prop type="object" name="kafkaProfile">
                              <additionalProp anyType="True"/>
                            </prop>
                            <prop type="object" name="llapProfile">
                              <additionalProp anyType="True"/>
                            </prop>
                            <prop type="object" name="logAnalyticsProfile">
                              <prop type="object" name="applicationLogs">
                                <prop type="boolean" name="stdErrorEnabled"/>
                                <prop type="boolean" name="stdOutEnabled"/>
                              </prop>
                              <prop type="boolean" name="enabled" required="True"/>
                              <prop type="boolean" name="metricsEnabled"/>
                            </prop>
                            <prop type="string" name="ossVersion" required="True">
                              <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                            </prop>
                            <prop type="object" name="prometheusProfile">
                              <prop type="boolean" name="enabled" required="True">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="array<object>" name="scriptActionProfiles">
                              <item type="object">
                                <prop type="string" name="name" required="True"/>
                                <prop type="string" name="parameters"/>
                                <prop type="array<string>" name="services" required="True">
                                  <item type="string"/>
                                </prop>
                                <prop type="boolean" name="shouldPersist">
                                  <default value="true"/>
                                </prop>
                                <prop type="integer32" name="timeoutInMinutes"/>
                                <prop type="string" name="type" required="True"/>
                                <prop type="string" name="url" required="True">
                                  <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="object" name="secretsProfile">
                              <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                              <prop type="array<object>" name="secrets">
                                <item type="object">
                                  <prop type="string" name="keyVaultObjectName" required="True">
                                    <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                                  </prop>
                                  <prop type="string" name="referenceName" required="True"/>
                                  <prop type="string" name="type" required="True">
                                    <enum>
                                      <item value="&quot;Certificate&quot;"/>
                                      <item value="&quot;Key&quot;"/>
                                      <item value="&quot;Secret&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="string" name="version"/>
                                </item>
                              </prop>
                            </prop>
                            <prop type="array<object>" name="serviceConfigsProfiles">
                              <item type="object">
                                <prop type="array<object>" name="configs" required="True">
                                  <item type="object">
                                    <prop type="string" name="component" required="True"/>
                                    <prop type="array<object>" name="files" required="True">
                                      <item type="object">
                                        <prop type="string" name="content"/>
                                        <prop type="string" name="encoding">
                                          <enum>
                                            <item value="&quot;Base64&quot;"/>
                                            <item value="&quot;None&quot;"/>
                                          </enum>
                                        </prop>
                                        <prop type="string" name="fileName" required="True"/>
                                        <prop type="string" name="path"/>
                                        <prop type="object" name="values">
                                          <additionalProp>
                                            <item type="string"/>
                                          </additionalProp>
                                        </prop>
                                      </item>
                                    </prop>
                                  </item>
                                </prop>
                                <prop type="string" name="serviceName" required="True"/>
                              </item>
                            </prop>
                            <prop type="object" name="sparkProfile">
                              <prop type="string" name="defaultStorageUrl"/>
                              <prop type="object" name="metastoreSpec">
                                <prop type="string" name="dbName" required="True"/>
                                <prop type="string" name="dbPasswordSecretName" required="True"/>
                                <prop type="string" name="dbServerHost" required="True"/>
                                <prop type="string" name="dbUserName" required="True"/>
                                <prop type="string" name="keyVaultId" required="True"/>
                                <prop type="string" name="thriftUrl"/>
                              </prop>
                              <prop type="object" name="userPluginsSpec">
                                <prop type="array<object>" name="plugins">
                                  <item type="object">
                                    <prop type="string" name="path" required="True">
                                      <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                    </prop>
                                  </item>
                                </prop>
                              </prop>
                            </prop>
                            <prop type="object" name="sshProfile">
                              <prop type="integer32" name="count" required="True">
                                <format maximum="5" minimum="0"/>
                              </prop>
                              <prop readOnly="True" type="string" name="podPrefix"/>
                            </prop>
                            <prop type="object" name="stubProfile">
                              <additionalProp anyType="True"/>
                            </prop>
                            <prop type="object" name="trinoProfile">
                              <prop type="object" name="catalogOptions">
                                <prop type="array<object>" name="hive">
                                  <item type="object">
                                    <prop type="string" name="catalogName" required="True">
                                      <format minLength="1"/>
                                    </prop>
                                    <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                    <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                    <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                    <prop type="string" name="metastoreWarehouseDir" required="True"/>
                                  </item>
                                </prop>
                              </prop>
                              <prop type="object" name="coordinator">
                                <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                                  <prop type="boolean" name="enable">
                                    <default value="false"/>
                                  </prop>
                                  <prop type="integer32" name="port">
                                    <default value="8008"/>
                                  </prop>
                                  <prop type="boolean" name="suspend">
                                    <default value="false"/>
                                  </prop>
                                </prop>
                                <prop type="boolean" name="highAvailabilityEnabled">
                                  <default value="true"/>
                                </prop>
                              </prop>
                              <prop type="object" name="userPluginsSpec">
                                <prop type="array<object>" name="plugins">
                                  <item type="object">
                                    <prop type="boolean" name="enabled"/>
                                    <prop type="string" name="name">
                                      <format minLength="1"/>
                                    </prop>
                                    <prop type="string" name="path">
                                      <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                    </prop>
                                  </item>
                                </prop>
                              </prop>
                              <prop type="object" name="userTelemetrySpec">
                                <prop type="object" name="storage">
                                  <prop type="string" name="hivecatalogName">
                                    <format minLength="1"/>
                                  </prop>
                                  <prop type="string" name="hivecatalogSchema">
                                    <default value="&quot;trinologs&quot;"/>
                                  </prop>
                                  <prop type="integer32" name="partitionRetentionInDays">
                                    <default value="365"/>
                                  </prop>
                                  <prop type="string" name="path">
                                    <format minLength="1"/>
                                  </prop>
                                </prop>
                              </prop>
                              <prop type="object" name="worker">
                                <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="string" name="clusterType" required="True">
                            <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                          </prop>
                          <prop type="object" name="computeProfile" required="True">
                            <prop type="array<object>" name="nodes" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True">
                                  <format minimum="1"/>
                                </prop>
                                <prop type="string" name="type" required="True">
                                  <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                                </prop>
                                <prop type="string" name="vmSize" required="True">
                                  <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop readOnly="True" type="string" name="deploymentId"/>
                          <prop readOnly="True" type="string" name="provisioningState">
                            <enum>
                              <item value="&quot;Accepted&quot;"/>
                              <item value="&quot;Canceled&quot;"/>
                              <item value="&quot;Failed&quot;"/>
                              <item value="&quot;Succeeded&quot;"/>
                            </enum>
                          </prop>
                          <prop readOnly="True" type="string" name="status"/>
                        </prop>
                        <prop readOnly="True" type="object" name="systemData">
                          <prop type="dateTime" name="createdAt"/>
                          <prop type="string" name="createdBy"/>
                          <prop type="string" name="createdByType">
                            <enum>
                              <item value="&quot;Application&quot;"/>
                              <item value="&quot;Key&quot;"/>
                              <item value="&quot;ManagedIdentity&quot;"/>
                              <item value="&quot;User&quot;"/>
                            </enum>
                          </prop>
                          <prop type="dateTime" name="lastModifiedAt"/>
                          <prop type="string" name="lastModifiedBy"/>
                          <prop type="string" name="lastModifiedByType">
                            <enum>
                              <item value="&quot;Application&quot;"/>
                              <item value="&quot;Key&quot;"/>
                              <item value="&quot;ManagedIdentity&quot;"/>
                              <item value="&quot;User&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                        <prop type="object" name="tags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop readOnly="True" type="string" name="type"/>
                      </schema>
                    </json>
                  </body>
                </response>
                <response isError="True">
                  <body>
                    <json>
                      <schema type="@MgmtErrorFormat"/>
                    </json>
                  </body>
                </response>
              </http>
            </operation>
            <operation>
              <instanceUpdate ref="$Subresource">
                <json>
                  <schema type="object" name="HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]" required="True">
                    <prop type="string" name="content" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].content"/>
                    <prop type="string" name="encoding" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].encoding">
                      <enum>
                        <item value="&quot;Base64&quot;"/>
                        <item value="&quot;None&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="fileName" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].fileName" required="True"/>
                    <prop type="string" name="path" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].path"/>
                    <prop type="object" name="values" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[].values">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                  </schema>
                </json>
              </instanceUpdate>
            </operation>
            <operation operationId="Clusters_Create">
              <longRunning finalStateVia="azure-async-operation"/>
              <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
                <request method="put">
                  <path>
                    <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                    <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                    <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                      <format maxLength="90" minLength="1"/>
                    </param>
                    <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
                  </path>
                  <query>
                    <const readOnly="True" const="True" type="string" name="api-version" required="True">
                      <default value="&quot;2023-06-01-preview&quot;"/>
                      <format minLength="1"/>
                    </const>
                  </query>
                  <body>
                    <json ref="$Instance"/>
                  </body>
                </request>
                <response statusCode="200 201">
                  <body>
                    <json var="$Instance">
                      <schema type="@Cluster_read"/>
                    </json>
                  </body>
                </response>
                <response isError="True">
                  <body>
                    <json>
                      <schema type="@MgmtErrorFormat"/>
                    </json>
                  </body>
                </response>
              </http>
            </operation>
            <output type="object" ref="$Subresource" clientFlatten="True"/>
          </command>
          <command name="delete" version="2023-06-01-preview" confirmation="Are you sure you want to perform this operation?">
            <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
            <argGroup name="">
              <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" options="service-configs-profile-index" required="True"/>
              <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" options="config-index" required="True"/>
              <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[Index]" options="file-index" required="True"/>
              <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
                <help short="The name of the HDInsight cluster."/>
              </arg>
              <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
                <help short="The name of the cluster pool."/>
              </arg>
              <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
              <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
            </argGroup>
            <subresourceSelector var="$Subresource" ref="$Instance">
              <json type="object" name="HDInsightCluster">
                <prop type="array" name="properties.clusterProfile.serviceConfigsProfiles">
                  <item type="object">
                    <prop type="array" name="configs">
                      <item type="object">
                        <prop type="array" name="files">
                          <item type="object"/>
                          <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[Index]" required="True"/>
                        </prop>
                      </item>
                      <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" required="True"/>
                    </prop>
                  </item>
                  <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" required="True"/>
                </prop>
              </json>
            </subresourceSelector>
            <operation operationId="Clusters_Get">
              <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
                <request method="get">
                  <path>
                    <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                    <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                    <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                      <format maxLength="90" minLength="1"/>
                    </param>
                    <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
                  </path>
                  <query>
                    <const readOnly="True" const="True" type="string" name="api-version" required="True">
                      <default value="&quot;2023-06-01-preview&quot;"/>
                      <format minLength="1"/>
                    </const>
                  </query>
                </request>
                <response statusCode="200">
                  <body>
                    <json var="$Instance">
                      <schema type="object" cls="Cluster_read">
                        <prop readOnly="True" type="ResourceId" name="id">
                          <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                        </prop>
                        <prop type="ResourceLocation" name="location" required="True"/>
                        <prop readOnly="True" type="string" name="name"/>
                        <prop type="object" name="properties" clientFlatten="True">
                          <prop type="object" name="clusterProfile" required="True">
                            <prop type="object" name="authorizationProfile" required="True">
                              <prop type="array<string>" name="groupIds">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="userIds">
                                <item type="string"/>
                              </prop>
                            </prop>
                            <prop type="object" name="autoscaleProfile">
                              <prop type="string" name="autoscaleType">
                                <enum>
                                  <item value="&quot;LoadBased&quot;"/>
                                  <item value="&quot;ScheduleBased&quot;"/>
                                </enum>
                              </prop>
                              <prop type="boolean" name="enabled" required="True"/>
                              <prop type="integer32" name="gracefulDecommissionTimeout"/>
                              <prop type="object" name="loadBasedConfig">
                                <prop type="integer32" name="cooldownPeriod"/>
                                <prop type="integer32" name="maxNodes" required="True"/>
                                <prop type="integer32" name="minNodes" required="True"/>
                                <prop type="integer32" name="pollInterval"/>
                                <prop type="array<object>" name="scalingRules" required="True">
                                  <item type="object">
                                    <prop type="string" name="actionType" required="True">
                                      <enum>
                                        <item value="&quot;scaledown&quot;"/>
                                        <item value="&quot;scaleup&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="object" name="comparisonRule" required="True">
                                      <prop type="string" name="operator" required="True">
                                        <enum>
                                          <item value="&quot;greaterThan&quot;"/>
                                          <item value="&quot;greaterThanOrEqual&quot;"/>
                                          <item value="&quot;lessThan&quot;"/>
                                          <item value="&quot;lessThanOrEqual&quot;"/>
                                        </enum>
                                      </prop>
                                      <prop type="float" name="threshold" required="True"/>
                                    </prop>
                                    <prop type="integer32" name="evaluationCount" required="True"/>
                                    <prop type="string" name="scalingMetric" required="True"/>
                                  </item>
                                </prop>
                              </prop>
                              <prop type="object" name="scheduleBasedConfig">
                                <prop type="integer32" name="defaultCount" required="True"/>
                                <prop type="array<object>" name="schedules" required="True">
                                  <item type="object">
                                    <prop type="integer32" name="count" required="True"/>
                                    <prop type="array<string>" name="days" required="True">
                                      <item type="string">
                                        <enum>
                                          <item value="&quot;Friday&quot;"/>
                                          <item value="&quot;Monday&quot;"/>
                                          <item value="&quot;Saturday&quot;"/>
                                          <item value="&quot;Sunday&quot;"/>
                                          <item value="&quot;Thursday&quot;"/>
                                          <item value="&quot;Tuesday&quot;"/>
                                          <item value="&quot;Wednesday&quot;"/>
                                        </enum>
                                      </item>
                                    </prop>
                                    <prop type="string" name="endTime" required="True">
                                      <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                    </prop>
                                    <prop type="string" name="startTime" required="True">
                                      <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                    </prop>
                                  </item>
                                </prop>
                                <prop type="string" name="timeZone" required="True"/>
                              </prop>
                            </prop>
                            <prop type="string" name="clusterVersion" required="True">
                              <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                            </prop>
                            <prop readOnly="True" type="array<object>" name="components">
                              <item type="object">
                                <prop type="string" name="name"/>
                                <prop type="string" name="version"/>
                              </item>
                            </prop>
                            <prop readOnly="True" type="object" name="connectivityProfile">
                              <prop type="array<object>" name="ssh">
                                <item type="object">
                                  <prop type="string" name="endpoint" required="True"/>
                                </item>
                              </prop>
                              <prop type="object" name="web" required="True">
                                <prop type="string" name="fqdn" required="True"/>
                              </prop>
                            </prop>
                            <prop type="object" name="flinkProfile">
                              <prop type="object" name="catalogOptions">
                                <prop type="object" name="hive">
                                  <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                </prop>
                              </prop>
                              <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                              <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                                <prop type="float32" name="cpu" required="True"/>
                                <prop type="integer64" name="memory" required="True"/>
                              </prop>
                              <prop type="integer32" name="numReplicas"/>
                              <prop type="object" name="storage" required="True">
                                <prop type="string" name="storageUri" required="True">
                                  <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                                </prop>
                                <prop type="string" name="storagekey" secret="True"/>
                              </prop>
                              <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                            </prop>
                            <prop type="object" name="identityProfile" required="True">
                              <prop type="string" name="msiClientId" required="True">
                                <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                              </prop>
                              <prop type="string" name="msiObjectId" required="True">
                                <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                              </prop>
                              <prop type="ResourceId" name="msiResourceId" required="True"/>
                            </prop>
                            <prop type="object" name="kafkaProfile">
                              <additionalProp anyType="True"/>
                            </prop>
                            <prop type="object" name="llapProfile">
                              <additionalProp anyType="True"/>
                            </prop>
                            <prop type="object" name="logAnalyticsProfile">
                              <prop type="object" name="applicationLogs">
                                <prop type="boolean" name="stdErrorEnabled"/>
                                <prop type="boolean" name="stdOutEnabled"/>
                              </prop>
                              <prop type="boolean" name="enabled" required="True"/>
                              <prop type="boolean" name="metricsEnabled"/>
                            </prop>
                            <prop type="string" name="ossVersion" required="True">
                              <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                            </prop>
                            <prop type="object" name="prometheusProfile">
                              <prop type="boolean" name="enabled" required="True">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="array<object>" name="scriptActionProfiles">
                              <item type="object">
                                <prop type="string" name="name" required="True"/>
                                <prop type="string" name="parameters"/>
                                <prop type="array<string>" name="services" required="True">
                                  <item type="string"/>
                                </prop>
                                <prop type="boolean" name="shouldPersist">
                                  <default value="true"/>
                                </prop>
                                <prop type="integer32" name="timeoutInMinutes"/>
                                <prop type="string" name="type" required="True"/>
                                <prop type="string" name="url" required="True">
                                  <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="object" name="secretsProfile">
                              <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                              <prop type="array<object>" name="secrets">
                                <item type="object">
                                  <prop type="string" name="keyVaultObjectName" required="True">
                                    <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                                  </prop>
                                  <prop type="string" name="referenceName" required="True"/>
                                  <prop type="string" name="type" required="True">
                                    <enum>
                                      <item value="&quot;Certificate&quot;"/>
                                      <item value="&quot;Key&quot;"/>
                                      <item value="&quot;Secret&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="string" name="version"/>
                                </item>
                              </prop>
                            </prop>
                            <prop type="array<object>" name="serviceConfigsProfiles">
                              <item type="object">
                                <prop type="array<object>" name="configs" required="True">
                                  <item type="object">
                                    <prop type="string" name="component" required="True"/>
                                    <prop type="array<object>" name="files" required="True">
                                      <item type="object">
                                        <prop type="string" name="content"/>
                                        <prop type="string" name="encoding">
                                          <enum>
                                            <item value="&quot;Base64&quot;"/>
                                            <item value="&quot;None&quot;"/>
                                          </enum>
                                        </prop>
                                        <prop type="string" name="fileName" required="True"/>
                                        <prop type="string" name="path"/>
                                        <prop type="object" name="values">
                                          <additionalProp>
                                            <item type="string"/>
                                          </additionalProp>
                                        </prop>
                                      </item>
                                    </prop>
                                  </item>
                                </prop>
                                <prop type="string" name="serviceName" required="True"/>
                              </item>
                            </prop>
                            <prop type="object" name="sparkProfile">
                              <prop type="string" name="defaultStorageUrl"/>
                              <prop type="object" name="metastoreSpec">
                                <prop type="string" name="dbName" required="True"/>
                                <prop type="string" name="dbPasswordSecretName" required="True"/>
                                <prop type="string" name="dbServerHost" required="True"/>
                                <prop type="string" name="dbUserName" required="True"/>
                                <prop type="string" name="keyVaultId" required="True"/>
                                <prop type="string" name="thriftUrl"/>
                              </prop>
                              <prop type="object" name="userPluginsSpec">
                                <prop type="array<object>" name="plugins">
                                  <item type="object">
                                    <prop type="string" name="path" required="True">
                                      <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                    </prop>
                                  </item>
                                </prop>
                              </prop>
                            </prop>
                            <prop type="object" name="sshProfile">
                              <prop type="integer32" name="count" required="True">
                                <format maximum="5" minimum="0"/>
                              </prop>
                              <prop readOnly="True" type="string" name="podPrefix"/>
                            </prop>
                            <prop type="object" name="stubProfile">
                              <additionalProp anyType="True"/>
                            </prop>
                            <prop type="object" name="trinoProfile">
                              <prop type="object" name="catalogOptions">
                                <prop type="array<object>" name="hive">
                                  <item type="object">
                                    <prop type="string" name="catalogName" required="True">
                                      <format minLength="1"/>
                                    </prop>
                                    <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                    <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                    <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                    <prop type="string" name="metastoreWarehouseDir" required="True"/>
                                  </item>
                                </prop>
                              </prop>
                              <prop type="object" name="coordinator">
                                <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                                  <prop type="boolean" name="enable">
                                    <default value="false"/>
                                  </prop>
                                  <prop type="integer32" name="port">
                                    <default value="8008"/>
                                  </prop>
                                  <prop type="boolean" name="suspend">
                                    <default value="false"/>
                                  </prop>
                                </prop>
                                <prop type="boolean" name="highAvailabilityEnabled">
                                  <default value="true"/>
                                </prop>
                              </prop>
                              <prop type="object" name="userPluginsSpec">
                                <prop type="array<object>" name="plugins">
                                  <item type="object">
                                    <prop type="boolean" name="enabled"/>
                                    <prop type="string" name="name">
                                      <format minLength="1"/>
                                    </prop>
                                    <prop type="string" name="path">
                                      <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                    </prop>
                                  </item>
                                </prop>
                              </prop>
                              <prop type="object" name="userTelemetrySpec">
                                <prop type="object" name="storage">
                                  <prop type="string" name="hivecatalogName">
                                    <format minLength="1"/>
                                  </prop>
                                  <prop type="string" name="hivecatalogSchema">
                                    <default value="&quot;trinologs&quot;"/>
                                  </prop>
                                  <prop type="integer32" name="partitionRetentionInDays">
                                    <default value="365"/>
                                  </prop>
                                  <prop type="string" name="path">
                                    <format minLength="1"/>
                                  </prop>
                                </prop>
                              </prop>
                              <prop type="object" name="worker">
                                <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="string" name="clusterType" required="True">
                            <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                          </prop>
                          <prop type="object" name="computeProfile" required="True">
                            <prop type="array<object>" name="nodes" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True">
                                  <format minimum="1"/>
                                </prop>
                                <prop type="string" name="type" required="True">
                                  <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                                </prop>
                                <prop type="string" name="vmSize" required="True">
                                  <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop readOnly="True" type="string" name="deploymentId"/>
                          <prop readOnly="True" type="string" name="provisioningState">
                            <enum>
                              <item value="&quot;Accepted&quot;"/>
                              <item value="&quot;Canceled&quot;"/>
                              <item value="&quot;Failed&quot;"/>
                              <item value="&quot;Succeeded&quot;"/>
                            </enum>
                          </prop>
                          <prop readOnly="True" type="string" name="status"/>
                        </prop>
                        <prop readOnly="True" type="object" name="systemData">
                          <prop type="dateTime" name="createdAt"/>
                          <prop type="string" name="createdBy"/>
                          <prop type="string" name="createdByType">
                            <enum>
                              <item value="&quot;Application&quot;"/>
                              <item value="&quot;Key&quot;"/>
                              <item value="&quot;ManagedIdentity&quot;"/>
                              <item value="&quot;User&quot;"/>
                            </enum>
                          </prop>
                          <prop type="dateTime" name="lastModifiedAt"/>
                          <prop type="string" name="lastModifiedBy"/>
                          <prop type="string" name="lastModifiedByType">
                            <enum>
                              <item value="&quot;Application&quot;"/>
                              <item value="&quot;Key&quot;"/>
                              <item value="&quot;ManagedIdentity&quot;"/>
                              <item value="&quot;User&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                        <prop type="object" name="tags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop readOnly="True" type="string" name="type"/>
                      </schema>
                    </json>
                  </body>
                </response>
                <response isError="True">
                  <body>
                    <json>
                      <schema type="@MgmtErrorFormat"/>
                    </json>
                  </body>
                </response>
              </http>
            </operation>
            <operation>
              <instanceDelete ref="$Subresource">
                <json/>
              </instanceDelete>
            </operation>
            <operation operationId="Clusters_Create">
              <longRunning finalStateVia="azure-async-operation"/>
              <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
                <request method="put">
                  <path>
                    <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                    <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                    <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                      <format maxLength="90" minLength="1"/>
                    </param>
                    <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
                  </path>
                  <query>
                    <const readOnly="True" const="True" type="string" name="api-version" required="True">
                      <default value="&quot;2023-06-01-preview&quot;"/>
                      <format minLength="1"/>
                    </const>
                  </query>
                  <body>
                    <json ref="$Instance"/>
                  </body>
                </request>
                <response statusCode="200 201">
                  <body>
                    <json var="$Instance">
                      <schema type="@Cluster_read"/>
                    </json>
                  </body>
                </response>
                <response isError="True">
                  <body>
                    <json>
                      <schema type="@MgmtErrorFormat"/>
                    </json>
                  </body>
                </response>
              </http>
            </operation>
          </command>
          <command name="show" version="2023-06-01-preview" confirmation="">
            <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.serviceConfigsProfiles[].configs[].files[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
            <argGroup name="">
              <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" options="service-configs-profile-index" required="True"/>
              <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" options="config-index" required="True"/>
              <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[Index]" options="file-index" required="True"/>
              <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
                <help short="The name of the HDInsight cluster."/>
              </arg>
              <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
                <help short="The name of the cluster pool."/>
              </arg>
              <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
              <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
            </argGroup>
            <subresourceSelector var="$Subresource" ref="$Instance">
              <json type="object" name="HDInsightCluster">
                <prop type="array" name="properties.clusterProfile.serviceConfigsProfiles">
                  <item type="object">
                    <prop type="array" name="configs">
                      <item type="object">
                        <prop type="array" name="files">
                          <item type="object"/>
                          <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[].files[Index]" required="True"/>
                        </prop>
                      </item>
                      <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[].configs[Index]" required="True"/>
                    </prop>
                  </item>
                  <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.serviceConfigsProfiles[Index]" required="True"/>
                </prop>
              </json>
            </subresourceSelector>
            <operation operationId="Clusters_Get">
              <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
                <request method="get">
                  <path>
                    <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                    <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                    <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                      <format maxLength="90" minLength="1"/>
                    </param>
                    <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
                  </path>
                  <query>
                    <const readOnly="True" const="True" type="string" name="api-version" required="True">
                      <default value="&quot;2023-06-01-preview&quot;"/>
                      <format minLength="1"/>
                    </const>
                  </query>
                </request>
                <response statusCode="200">
                  <body>
                    <json var="$Instance">
                      <schema type="object" cls="Cluster_read">
                        <prop readOnly="True" type="ResourceId" name="id">
                          <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                        </prop>
                        <prop type="ResourceLocation" name="location" required="True"/>
                        <prop readOnly="True" type="string" name="name"/>
                        <prop type="object" name="properties" clientFlatten="True">
                          <prop type="object" name="clusterProfile" required="True">
                            <prop type="object" name="authorizationProfile" required="True">
                              <prop type="array<string>" name="groupIds">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="userIds">
                                <item type="string"/>
                              </prop>
                            </prop>
                            <prop type="object" name="autoscaleProfile">
                              <prop type="string" name="autoscaleType">
                                <enum>
                                  <item value="&quot;LoadBased&quot;"/>
                                  <item value="&quot;ScheduleBased&quot;"/>
                                </enum>
                              </prop>
                              <prop type="boolean" name="enabled" required="True"/>
                              <prop type="integer32" name="gracefulDecommissionTimeout"/>
                              <prop type="object" name="loadBasedConfig">
                                <prop type="integer32" name="cooldownPeriod"/>
                                <prop type="integer32" name="maxNodes" required="True"/>
                                <prop type="integer32" name="minNodes" required="True"/>
                                <prop type="integer32" name="pollInterval"/>
                                <prop type="array<object>" name="scalingRules" required="True">
                                  <item type="object">
                                    <prop type="string" name="actionType" required="True">
                                      <enum>
                                        <item value="&quot;scaledown&quot;"/>
                                        <item value="&quot;scaleup&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="object" name="comparisonRule" required="True">
                                      <prop type="string" name="operator" required="True">
                                        <enum>
                                          <item value="&quot;greaterThan&quot;"/>
                                          <item value="&quot;greaterThanOrEqual&quot;"/>
                                          <item value="&quot;lessThan&quot;"/>
                                          <item value="&quot;lessThanOrEqual&quot;"/>
                                        </enum>
                                      </prop>
                                      <prop type="float" name="threshold" required="True"/>
                                    </prop>
                                    <prop type="integer32" name="evaluationCount" required="True"/>
                                    <prop type="string" name="scalingMetric" required="True"/>
                                  </item>
                                </prop>
                              </prop>
                              <prop type="object" name="scheduleBasedConfig">
                                <prop type="integer32" name="defaultCount" required="True"/>
                                <prop type="array<object>" name="schedules" required="True">
                                  <item type="object">
                                    <prop type="integer32" name="count" required="True"/>
                                    <prop type="array<string>" name="days" required="True">
                                      <item type="string">
                                        <enum>
                                          <item value="&quot;Friday&quot;"/>
                                          <item value="&quot;Monday&quot;"/>
                                          <item value="&quot;Saturday&quot;"/>
                                          <item value="&quot;Sunday&quot;"/>
                                          <item value="&quot;Thursday&quot;"/>
                                          <item value="&quot;Tuesday&quot;"/>
                                          <item value="&quot;Wednesday&quot;"/>
                                        </enum>
                                      </item>
                                    </prop>
                                    <prop type="string" name="endTime" required="True">
                                      <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                    </prop>
                                    <prop type="string" name="startTime" required="True">
                                      <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                    </prop>
                                  </item>
                                </prop>
                                <prop type="string" name="timeZone" required="True"/>
                              </prop>
                            </prop>
                            <prop type="string" name="clusterVersion" required="True">
                              <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                            </prop>
                            <prop readOnly="True" type="array<object>" name="components">
                              <item type="object">
                                <prop type="string" name="name"/>
                                <prop type="string" name="version"/>
                              </item>
                            </prop>
                            <prop readOnly="True" type="object" name="connectivityProfile">
                              <prop type="array<object>" name="ssh">
                                <item type="object">
                                  <prop type="string" name="endpoint" required="True"/>
                                </item>
                              </prop>
                              <prop type="object" name="web" required="True">
                                <prop type="string" name="fqdn" required="True"/>
                              </prop>
                            </prop>
                            <prop type="object" name="flinkProfile">
                              <prop type="object" name="catalogOptions">
                                <prop type="object" name="hive">
                                  <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                  <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                </prop>
                              </prop>
                              <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                              <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                                <prop type="float32" name="cpu" required="True"/>
                                <prop type="integer64" name="memory" required="True"/>
                              </prop>
                              <prop type="integer32" name="numReplicas"/>
                              <prop type="object" name="storage" required="True">
                                <prop type="string" name="storageUri" required="True">
                                  <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                                </prop>
                                <prop type="string" name="storagekey" secret="True"/>
                              </prop>
                              <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                            </prop>
                            <prop type="object" name="identityProfile" required="True">
                              <prop type="string" name="msiClientId" required="True">
                                <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                              </prop>
                              <prop type="string" name="msiObjectId" required="True">
                                <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                              </prop>
                              <prop type="ResourceId" name="msiResourceId" required="True"/>
                            </prop>
                            <prop type="object" name="kafkaProfile">
                              <additionalProp anyType="True"/>
                            </prop>
                            <prop type="object" name="llapProfile">
                              <additionalProp anyType="True"/>
                            </prop>
                            <prop type="object" name="logAnalyticsProfile">
                              <prop type="object" name="applicationLogs">
                                <prop type="boolean" name="stdErrorEnabled"/>
                                <prop type="boolean" name="stdOutEnabled"/>
                              </prop>
                              <prop type="boolean" name="enabled" required="True"/>
                              <prop type="boolean" name="metricsEnabled"/>
                            </prop>
                            <prop type="string" name="ossVersion" required="True">
                              <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                            </prop>
                            <prop type="object" name="prometheusProfile">
                              <prop type="boolean" name="enabled" required="True">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="array<object>" name="scriptActionProfiles">
                              <item type="object">
                                <prop type="string" name="name" required="True"/>
                                <prop type="string" name="parameters"/>
                                <prop type="array<string>" name="services" required="True">
                                  <item type="string"/>
                                </prop>
                                <prop type="boolean" name="shouldPersist">
                                  <default value="true"/>
                                </prop>
                                <prop type="integer32" name="timeoutInMinutes"/>
                                <prop type="string" name="type" required="True"/>
                                <prop type="string" name="url" required="True">
                                  <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="object" name="secretsProfile">
                              <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                              <prop type="array<object>" name="secrets">
                                <item type="object">
                                  <prop type="string" name="keyVaultObjectName" required="True">
                                    <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                                  </prop>
                                  <prop type="string" name="referenceName" required="True"/>
                                  <prop type="string" name="type" required="True">
                                    <enum>
                                      <item value="&quot;Certificate&quot;"/>
                                      <item value="&quot;Key&quot;"/>
                                      <item value="&quot;Secret&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="string" name="version"/>
                                </item>
                              </prop>
                            </prop>
                            <prop type="array<object>" name="serviceConfigsProfiles">
                              <item type="object">
                                <prop type="array<object>" name="configs" required="True">
                                  <item type="object">
                                    <prop type="string" name="component" required="True"/>
                                    <prop type="array<object>" name="files" required="True">
                                      <item type="object">
                                        <prop type="string" name="content"/>
                                        <prop type="string" name="encoding">
                                          <enum>
                                            <item value="&quot;Base64&quot;"/>
                                            <item value="&quot;None&quot;"/>
                                          </enum>
                                        </prop>
                                        <prop type="string" name="fileName" required="True"/>
                                        <prop type="string" name="path"/>
                                        <prop type="object" name="values">
                                          <additionalProp>
                                            <item type="string"/>
                                          </additionalProp>
                                        </prop>
                                      </item>
                                    </prop>
                                  </item>
                                </prop>
                                <prop type="string" name="serviceName" required="True"/>
                              </item>
                            </prop>
                            <prop type="object" name="sparkProfile">
                              <prop type="string" name="defaultStorageUrl"/>
                              <prop type="object" name="metastoreSpec">
                                <prop type="string" name="dbName" required="True"/>
                                <prop type="string" name="dbPasswordSecretName" required="True"/>
                                <prop type="string" name="dbServerHost" required="True"/>
                                <prop type="string" name="dbUserName" required="True"/>
                                <prop type="string" name="keyVaultId" required="True"/>
                                <prop type="string" name="thriftUrl"/>
                              </prop>
                              <prop type="object" name="userPluginsSpec">
                                <prop type="array<object>" name="plugins">
                                  <item type="object">
                                    <prop type="string" name="path" required="True">
                                      <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                    </prop>
                                  </item>
                                </prop>
                              </prop>
                            </prop>
                            <prop type="object" name="sshProfile">
                              <prop type="integer32" name="count" required="True">
                                <format maximum="5" minimum="0"/>
                              </prop>
                              <prop readOnly="True" type="string" name="podPrefix"/>
                            </prop>
                            <prop type="object" name="stubProfile">
                              <additionalProp anyType="True"/>
                            </prop>
                            <prop type="object" name="trinoProfile">
                              <prop type="object" name="catalogOptions">
                                <prop type="array<object>" name="hive">
                                  <item type="object">
                                    <prop type="string" name="catalogName" required="True">
                                      <format minLength="1"/>
                                    </prop>
                                    <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                    <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                    <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                    <prop type="string" name="metastoreWarehouseDir" required="True"/>
                                  </item>
                                </prop>
                              </prop>
                              <prop type="object" name="coordinator">
                                <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                                  <prop type="boolean" name="enable">
                                    <default value="false"/>
                                  </prop>
                                  <prop type="integer32" name="port">
                                    <default value="8008"/>
                                  </prop>
                                  <prop type="boolean" name="suspend">
                                    <default value="false"/>
                                  </prop>
                                </prop>
                                <prop type="boolean" name="highAvailabilityEnabled">
                                  <default value="true"/>
                                </prop>
                              </prop>
                              <prop type="object" name="userPluginsSpec">
                                <prop type="array<object>" name="plugins">
                                  <item type="object">
                                    <prop type="boolean" name="enabled"/>
                                    <prop type="string" name="name">
                                      <format minLength="1"/>
                                    </prop>
                                    <prop type="string" name="path">
                                      <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                    </prop>
                                  </item>
                                </prop>
                              </prop>
                              <prop type="object" name="userTelemetrySpec">
                                <prop type="object" name="storage">
                                  <prop type="string" name="hivecatalogName">
                                    <format minLength="1"/>
                                  </prop>
                                  <prop type="string" name="hivecatalogSchema">
                                    <default value="&quot;trinologs&quot;"/>
                                  </prop>
                                  <prop type="integer32" name="partitionRetentionInDays">
                                    <default value="365"/>
                                  </prop>
                                  <prop type="string" name="path">
                                    <format minLength="1"/>
                                  </prop>
                                </prop>
                              </prop>
                              <prop type="object" name="worker">
                                <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="string" name="clusterType" required="True">
                            <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                          </prop>
                          <prop type="object" name="computeProfile" required="True">
                            <prop type="array<object>" name="nodes" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True">
                                  <format minimum="1"/>
                                </prop>
                                <prop type="string" name="type" required="True">
                                  <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                                </prop>
                                <prop type="string" name="vmSize" required="True">
                                  <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop readOnly="True" type="string" name="deploymentId"/>
                          <prop readOnly="True" type="string" name="provisioningState">
                            <enum>
                              <item value="&quot;Accepted&quot;"/>
                              <item value="&quot;Canceled&quot;"/>
                              <item value="&quot;Failed&quot;"/>
                              <item value="&quot;Succeeded&quot;"/>
                            </enum>
                          </prop>
                          <prop readOnly="True" type="string" name="status"/>
                        </prop>
                        <prop readOnly="True" type="object" name="systemData">
                          <prop type="dateTime" name="createdAt"/>
                          <prop type="string" name="createdBy"/>
                          <prop type="string" name="createdByType">
                            <enum>
                              <item value="&quot;Application&quot;"/>
                              <item value="&quot;Key&quot;"/>
                              <item value="&quot;ManagedIdentity&quot;"/>
                              <item value="&quot;User&quot;"/>
                            </enum>
                          </prop>
                          <prop type="dateTime" name="lastModifiedAt"/>
                          <prop type="string" name="lastModifiedBy"/>
                          <prop type="string" name="lastModifiedByType">
                            <enum>
                              <item value="&quot;Application&quot;"/>
                              <item value="&quot;Key&quot;"/>
                              <item value="&quot;ManagedIdentity&quot;"/>
                              <item value="&quot;User&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                        <prop type="object" name="tags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop readOnly="True" type="string" name="type"/>
                      </schema>
                    </json>
                  </body>
                </response>
                <response isError="True">
                  <body>
                    <json>
                      <schema type="@MgmtErrorFormat"/>
                    </json>
                  </body>
                </response>
              </http>
            </operation>
            <output type="object" ref="$Subresource" clientFlatten="True"/>
          </command>
        </commandGroup>
      </commandGroup>
    </commandGroup>
    <commandGroup name="trino-hive-catalog">
      <command name="create" version="2023-06-01-preview" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.trinoProfile.catalogOptions.hive[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[Index]" options="false-index"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <argGroup name="HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[]">
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].catalogName" options="catalog-name" required="True" group="HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[]">
            <help short="Name of trino catalog which should use specified hive metastore."/>
            <format minLength="1"/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionPasswordSecret" options="metastore-db-connection-password-secret" required="True" group="HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[]">
            <help short="Secret reference name from secretsProfile.secrets containing password for database connection."/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionURL" options="metastore-db-connection-url" required="True" group="HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[]">
            <help short="Connection string for hive metastore database."/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionUserName" options="metastore-db-connection-user-name" required="True" group="HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[]">
            <help short="User name for database connection."/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreWarehouseDir" options="metastore-warehouse-dir" required="True" group="HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[]">
            <help short="Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri"/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.clusterProfile.trinoProfile.catalogOptions.hive">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[Index]"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceCreate ref="$Subresource">
            <json>
              <schema type="object" name="HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[]" required="True">
                <prop type="string" name="catalogName" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].catalogName" required="True">
                  <format minLength="1"/>
                </prop>
                <prop type="string" name="metastoreDbConnectionPasswordSecret" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionPasswordSecret" required="True"/>
                <prop type="string" name="metastoreDbConnectionURL" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionURL" required="True"/>
                <prop type="string" name="metastoreDbConnectionUserName" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionUserName" required="True"/>
                <prop type="string" name="metastoreWarehouseDir" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreWarehouseDir" required="True"/>
              </schema>
            </json>
          </instanceCreate>
        </operation>
        <operation operationId="Clusters_Create">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="put">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@Cluster_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="update" version="2023-06-01-preview" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.trinoProfile.catalogOptions.hive[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[Index]" options="false-index" required="True"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <argGroup name="HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[]">
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].catalogName" options="catalog-name" group="HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[]">
            <help short="Name of trino catalog which should use specified hive metastore."/>
            <format minLength="1"/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionPasswordSecret" options="metastore-db-connection-password-secret" group="HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[]">
            <help short="Secret reference name from secretsProfile.secrets containing password for database connection."/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionURL" options="metastore-db-connection-url" group="HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[]">
            <help short="Connection string for hive metastore database."/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionUserName" options="metastore-db-connection-user-name" group="HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[]">
            <help short="User name for database connection."/>
          </arg>
          <arg type="string" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreWarehouseDir" options="metastore-warehouse-dir" group="HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[]">
            <help short="Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri"/>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.clusterProfile.trinoProfile.catalogOptions.hive">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[Index]" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceUpdate ref="$Subresource">
            <json>
              <schema type="object" name="HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[]" required="True">
                <prop type="string" name="catalogName" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].catalogName" required="True">
                  <format minLength="1"/>
                </prop>
                <prop type="string" name="metastoreDbConnectionPasswordSecret" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionPasswordSecret" required="True"/>
                <prop type="string" name="metastoreDbConnectionURL" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionURL" required="True"/>
                <prop type="string" name="metastoreDbConnectionUserName" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreDbConnectionUserName" required="True"/>
                <prop type="string" name="metastoreWarehouseDir" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[].metastoreWarehouseDir" required="True"/>
              </schema>
            </json>
          </instanceUpdate>
        </operation>
        <operation operationId="Clusters_Create">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="put">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@Cluster_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="delete" version="2023-06-01-preview" confirmation="Are you sure you want to perform this operation?">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.trinoProfile.catalogOptions.hive[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[Index]" options="false-index" required="True"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.clusterProfile.trinoProfile.catalogOptions.hive">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[Index]" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceDelete ref="$Subresource">
            <json/>
          </instanceDelete>
        </operation>
        <operation operationId="Clusters_Create">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="put">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@Cluster_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
      </command>
      <command name="show" version="2023-06-01-preview" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hdinsight/clusterpools/{}/clusters/{}" version="2023-06-01-preview" subresource="properties.clusterProfile.trinoProfile.catalogOptions.hive[]" swagger="mgmt-plane/hdinsight/ResourceProviders/Microsoft.HDInsight/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSERJbnNpZ2h0L2NsdXN0ZXJwb29scy97Y2x1c3RlclBvb2xOYW1lfS9jbHVzdGVycy97Y2x1c3Rlck5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
        <argGroup name="">
          <arg type="integer" var="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[Index]" options="false-index" required="True"/>
          <arg type="string" var="$Path.clusterName" options="cluster-name" required="True" idPart="child_name_1">
            <help short="The name of the HDInsight cluster."/>
          </arg>
          <arg type="string" var="$Path.clusterPoolName" options="cluster-pool-name" required="True" idPart="name">
            <help short="The name of the cluster pool."/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="HDInsightCluster">
            <prop type="array" name="properties.clusterProfile.trinoProfile.catalogOptions.hive">
              <item type="object"/>
              <identifier type="integer" name="[Index]" arg="$HDInsightCluster.properties.clusterProfile.trinoProfile.catalogOptions.hive[Index]" required="True"/>
            </prop>
          </json>
        </subresourceSelector>
        <operation operationId="Clusters_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}">
            <request method="get">
              <path>
                <param type="string" name="clusterName" arg="$Path.clusterName" required="True"/>
                <param type="string" name="clusterPoolName" arg="$Path.clusterPoolName" required="True"/>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                  <format maxLength="90" minLength="1"/>
                </param>
                <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2023-06-01-preview&quot;"/>
                  <format minLength="1"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="Cluster_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.HDInsight/clusterpools/{}/clusters/{}"/>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="object" name="clusterProfile" required="True">
                        <prop type="object" name="authorizationProfile" required="True">
                          <prop type="array<string>" name="groupIds">
                            <item type="string"/>
                          </prop>
                          <prop type="array<string>" name="userIds">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop type="object" name="autoscaleProfile">
                          <prop type="string" name="autoscaleType">
                            <enum>
                              <item value="&quot;LoadBased&quot;"/>
                              <item value="&quot;ScheduleBased&quot;"/>
                            </enum>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="integer32" name="gracefulDecommissionTimeout"/>
                          <prop type="object" name="loadBasedConfig">
                            <prop type="integer32" name="cooldownPeriod"/>
                            <prop type="integer32" name="maxNodes" required="True"/>
                            <prop type="integer32" name="minNodes" required="True"/>
                            <prop type="integer32" name="pollInterval"/>
                            <prop type="array<object>" name="scalingRules" required="True">
                              <item type="object">
                                <prop type="string" name="actionType" required="True">
                                  <enum>
                                    <item value="&quot;scaledown&quot;"/>
                                    <item value="&quot;scaleup&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="comparisonRule" required="True">
                                  <prop type="string" name="operator" required="True">
                                    <enum>
                                      <item value="&quot;greaterThan&quot;"/>
                                      <item value="&quot;greaterThanOrEqual&quot;"/>
                                      <item value="&quot;lessThan&quot;"/>
                                      <item value="&quot;lessThanOrEqual&quot;"/>
                                    </enum>
                                  </prop>
                                  <prop type="float" name="threshold" required="True"/>
                                </prop>
                                <prop type="integer32" name="evaluationCount" required="True"/>
                                <prop type="string" name="scalingMetric" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="scheduleBasedConfig">
                            <prop type="integer32" name="defaultCount" required="True"/>
                            <prop type="array<object>" name="schedules" required="True">
                              <item type="object">
                                <prop type="integer32" name="count" required="True"/>
                                <prop type="array<string>" name="days" required="True">
                                  <item type="string">
                                    <enum>
                                      <item value="&quot;Friday&quot;"/>
                                      <item value="&quot;Monday&quot;"/>
                                      <item value="&quot;Saturday&quot;"/>
                                      <item value="&quot;Sunday&quot;"/>
                                      <item value="&quot;Thursday&quot;"/>
                                      <item value="&quot;Tuesday&quot;"/>
                                      <item value="&quot;Wednesday&quot;"/>
                                    </enum>
                                  </item>
                                </prop>
                                <prop type="string" name="endTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                                <prop type="string" name="startTime" required="True">
                                  <format pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"/>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="timeZone" required="True"/>
                          </prop>
                        </prop>
                        <prop type="string" name="clusterVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})(?:\.(0|[1-9][0-9]{0,18}))?$"/>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="components">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="version"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="object" name="connectivityProfile">
                          <prop type="array<object>" name="ssh">
                            <item type="object">
                              <prop type="string" name="endpoint" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="web" required="True">
                            <prop type="string" name="fqdn" required="True"/>
                          </prop>
                        </prop>
                        <prop type="object" name="flinkProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="object" name="hive">
                              <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                              <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                              <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                            </prop>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="historyServer"/>
                          <prop type="object" name="jobManager" required="True" cls="ComputeResourceDefinition_read">
                            <prop type="float32" name="cpu" required="True"/>
                            <prop type="integer64" name="memory" required="True"/>
                          </prop>
                          <prop type="integer32" name="numReplicas"/>
                          <prop type="object" name="storage" required="True">
                            <prop type="string" name="storageUri" required="True">
                              <format pattern="^(\w{4,5})://(.*)@(.*).\b(blob|dfs)\b\.core\.windows\.net$"/>
                            </prop>
                            <prop type="string" name="storagekey" secret="True"/>
                          </prop>
                          <prop type="@ComputeResourceDefinition_read" name="taskManager" required="True"/>
                        </prop>
                        <prop type="object" name="identityProfile" required="True">
                          <prop type="string" name="msiClientId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="string" name="msiObjectId" required="True">
                            <format pattern="^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$"/>
                          </prop>
                          <prop type="ResourceId" name="msiResourceId" required="True"/>
                        </prop>
                        <prop type="object" name="kafkaProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="llapProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="logAnalyticsProfile">
                          <prop type="object" name="applicationLogs">
                            <prop type="boolean" name="stdErrorEnabled"/>
                            <prop type="boolean" name="stdOutEnabled"/>
                          </prop>
                          <prop type="boolean" name="enabled" required="True"/>
                          <prop type="boolean" name="metricsEnabled"/>
                        </prop>
                        <prop type="string" name="ossVersion" required="True">
                          <format pattern="^(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})\.(0|[1-9][0-9]{0,18})$"/>
                        </prop>
                        <prop type="object" name="prometheusProfile">
                          <prop type="boolean" name="enabled" required="True">
                            <default value="false"/>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="scriptActionProfiles">
                          <item type="object">
                            <prop type="string" name="name" required="True"/>
                            <prop type="string" name="parameters"/>
                            <prop type="array<string>" name="services" required="True">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="shouldPersist">
                              <default value="true"/>
                            </prop>
                            <prop type="integer32" name="timeoutInMinutes"/>
                            <prop type="string" name="type" required="True"/>
                            <prop type="string" name="url" required="True">
                              <format pattern="^(https)|(http)|(abfss)|(abfs)|(wasbs)|(wasb)://.*$"/>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="secretsProfile">
                          <prop type="ResourceId" name="keyVaultResourceId" required="True"/>
                          <prop type="array<object>" name="secrets">
                            <item type="object">
                              <prop type="string" name="keyVaultObjectName" required="True">
                                <format pattern="^[a-zA-Z][a-zA-Z0-9-]{1,126}$"/>
                              </prop>
                              <prop type="string" name="referenceName" required="True"/>
                              <prop type="string" name="type" required="True">
                                <enum>
                                  <item value="&quot;Certificate&quot;"/>
                                  <item value="&quot;Key&quot;"/>
                                  <item value="&quot;Secret&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="version"/>
                            </item>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="serviceConfigsProfiles">
                          <item type="object">
                            <prop type="array<object>" name="configs" required="True">
                              <item type="object">
                                <prop type="string" name="component" required="True"/>
                                <prop type="array<object>" name="files" required="True">
                                  <item type="object">
                                    <prop type="string" name="content"/>
                                    <prop type="string" name="encoding">
                                      <enum>
                                        <item value="&quot;Base64&quot;"/>
                                        <item value="&quot;None&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="string" name="fileName" required="True"/>
                                    <prop type="string" name="path"/>
                                    <prop type="object" name="values">
                                      <additionalProp>
                                        <item type="string"/>
                                      </additionalProp>
                                    </prop>
                                  </item>
                                </prop>
                              </item>
                            </prop>
                            <prop type="string" name="serviceName" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="sparkProfile">
                          <prop type="string" name="defaultStorageUrl"/>
                          <prop type="object" name="metastoreSpec">
                            <prop type="string" name="dbName" required="True"/>
                            <prop type="string" name="dbPasswordSecretName" required="True"/>
                            <prop type="string" name="dbServerHost" required="True"/>
                            <prop type="string" name="dbUserName" required="True"/>
                            <prop type="string" name="keyVaultId" required="True"/>
                            <prop type="string" name="thriftUrl"/>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="string" name="path" required="True">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sshProfile">
                          <prop type="integer32" name="count" required="True">
                            <format maximum="5" minimum="0"/>
                          </prop>
                          <prop readOnly="True" type="string" name="podPrefix"/>
                        </prop>
                        <prop type="object" name="stubProfile">
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="object" name="trinoProfile">
                          <prop type="object" name="catalogOptions">
                            <prop type="array<object>" name="hive">
                              <item type="object">
                                <prop type="string" name="catalogName" required="True">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="metastoreDbConnectionPasswordSecret" required="True"/>
                                <prop type="string" name="metastoreDbConnectionURL" required="True"/>
                                <prop type="string" name="metastoreDbConnectionUserName" required="True"/>
                                <prop type="string" name="metastoreWarehouseDir" required="True"/>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="coordinator">
                            <prop type="object" name="debug" cls="TrinoDebugConfig_read" clientFlatten="True">
                              <prop type="boolean" name="enable">
                                <default value="false"/>
                              </prop>
                              <prop type="integer32" name="port">
                                <default value="8008"/>
                              </prop>
                              <prop type="boolean" name="suspend">
                                <default value="false"/>
                              </prop>
                            </prop>
                            <prop type="boolean" name="highAvailabilityEnabled">
                              <default value="true"/>
                            </prop>
                          </prop>
                          <prop type="object" name="userPluginsSpec">
                            <prop type="array<object>" name="plugins">
                              <item type="object">
                                <prop type="boolean" name="enabled"/>
                                <prop type="string" name="name">
                                  <format minLength="1"/>
                                </prop>
                                <prop type="string" name="path">
                                  <format pattern="^(https)|(abfss)://.*$" minLength="1"/>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                          <prop type="object" name="userTelemetrySpec">
                            <prop type="object" name="storage">
                              <prop type="string" name="hivecatalogName">
                                <format minLength="1"/>
                              </prop>
                              <prop type="string" name="hivecatalogSchema">
                                <default value="&quot;trinologs&quot;"/>
                              </prop>
                              <prop type="integer32" name="partitionRetentionInDays">
                                <default value="365"/>
                              </prop>
                              <prop type="string" name="path">
                                <format minLength="1"/>
                              </prop>
                            </prop>
                          </prop>
                          <prop type="object" name="worker">
                            <prop type="@TrinoDebugConfig_read" name="debug" clientFlatten="True"/>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="clusterType" required="True">
                        <format pattern="^[a-zA-Z][a-zA-Z0-9]{0,31}$"/>
                      </prop>
                      <prop type="object" name="computeProfile" required="True">
                        <prop type="array<object>" name="nodes" required="True">
                          <item type="object">
                            <prop type="integer32" name="count" required="True">
                              <format minimum="1"/>
                            </prop>
                            <prop type="string" name="type" required="True">
                              <format pattern="^(head|Head|HEAD|worker|Worker|WORKER)$"/>
                            </prop>
                            <prop type="string" name="vmSize" required="True">
                              <format pattern="^[a-zA-Z0-9_\-]{0,256}$"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="deploymentId"/>
                      <prop readOnly="True" type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Accepted&quot;"/>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop readOnly="True" type="string" name="status"/>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@MgmtErrorFormat"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
    </commandGroup>
  </commandGroup>
</CodeGen>
