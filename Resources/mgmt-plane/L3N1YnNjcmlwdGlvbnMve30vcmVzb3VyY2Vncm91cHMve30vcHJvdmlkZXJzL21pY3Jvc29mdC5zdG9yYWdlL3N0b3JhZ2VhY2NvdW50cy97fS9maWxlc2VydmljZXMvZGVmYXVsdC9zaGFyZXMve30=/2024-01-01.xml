<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.storage/storageaccounts/{}/fileservices/default/shares/{}" version="2024-01-01" swagger="mgmt-plane/storage/ResourceProviders/Microsoft.Storage/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMve2FjY291bnROYW1lfS9maWxlU2VydmljZXMvZGVmYXVsdC9zaGFyZXMve3NoYXJlTmFtZX0=/V/MjAyNC0wMS0wMQ=="/>
  <commandGroup name="storage share-rm">
    <command name="show" version="2024-01-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.storage/storageaccounts/{}/fileservices/default/shares/{}" version="2024-01-01" swagger="mgmt-plane/storage/ResourceProviders/Microsoft.Storage/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMve2FjY291bnROYW1lfS9maWxlU2VydmljZXMvZGVmYXVsdC9zaGFyZXMve3NoYXJlTmFtZX0=/V/MjAyNC0wMS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Header.x-ms-snapshot" options="snapshot" group="">
          <help short="Optional, used to delete a snapshot.The DateTime value that specifies the share snapshot to retrieve."/>
        </arg>
        <arg type="string" var="$Path.accountName" options="storage-account account-name" required="True" group="" idPart="name">
          <help short="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only."/>
          <format pattern="^[a-z0-9]+$" maxLength="24" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.shareName" options="share-name name n" required="True" group="" idPart="child_name_2">
          <help short="The name of the file share within the specified storage account. File share names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number."/>
          <format maxLength="63" minLength="3"/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Query.expand" options="expand" group="">
          <help short="Optional, used to expand the properties within share's properties. Valid values are: deleted, snapshots. Should be passed as a string with delimiter ','"/>
        </arg>
      </argGroup>
      <operation operationId="FileShares_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}">
          <request method="get">
            <path>
              <param type="string" name="accountName" arg="$Path.accountName" required="True">
                <format pattern="^[a-z0-9]+$" maxLength="24" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="shareName" arg="$Path.shareName" required="True">
                <format maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <param type="string" name="$expand" arg="$Query.expand"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-01-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <header>
              <param type="string" name="x-ms-snapshot" arg="$Header.x-ms-snapshot"/>
            </header>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="string" name="etag"/>
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/fileServices/default/shares/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="string" name="accessTier">
                      <enum>
                        <item value="&quot;Cool&quot;"/>
                        <item value="&quot;Hot&quot;"/>
                        <item value="&quot;Premium&quot;"/>
                        <item value="&quot;TransactionOptimized&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="accessTierChangeTime"/>
                    <prop readOnly="True" type="string" name="accessTierStatus"/>
                    <prop readOnly="True" type="boolean" name="deleted"/>
                    <prop readOnly="True" type="dateTime" name="deletedTime"/>
                    <prop type="string" name="enabledProtocols">
                      <enum>
                        <item value="&quot;NFS&quot;"/>
                        <item value="&quot;SMB&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="fileSharePaidBursting">
                      <prop type="boolean" name="paidBurstingEnabled"/>
                      <prop type="integer32" name="paidBurstingMaxBandwidthMibps"/>
                      <prop type="integer32" name="paidBurstingMaxIops"/>
                    </prop>
                    <prop readOnly="True" type="integer32" name="includedBurstIops"/>
                    <prop readOnly="True" type="dateTime" name="lastModifiedTime"/>
                    <prop readOnly="True" type="string" name="leaseDuration">
                      <enum>
                        <item value="&quot;Fixed&quot;"/>
                        <item value="&quot;Infinite&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="leaseState">
                      <enum>
                        <item value="&quot;Available&quot;"/>
                        <item value="&quot;Breaking&quot;"/>
                        <item value="&quot;Broken&quot;"/>
                        <item value="&quot;Expired&quot;"/>
                        <item value="&quot;Leased&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="leaseStatus">
                      <enum>
                        <item value="&quot;Locked&quot;"/>
                        <item value="&quot;Unlocked&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="integer64" name="maxBurstCreditsForIops"/>
                    <prop type="object" name="metadata">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="nextAllowedProvisionedBandwidthDowngradeTime"/>
                    <prop readOnly="True" type="dateTime" name="nextAllowedProvisionedIopsDowngradeTime"/>
                    <prop readOnly="True" type="dateTime" name="nextAllowedQuotaDowngradeTime"/>
                    <prop type="integer32" name="provisionedBandwidthMibps"/>
                    <prop type="integer32" name="provisionedIops"/>
                    <prop readOnly="True" type="integer" name="remainingRetentionDays"/>
                    <prop type="string" name="rootSquash">
                      <enum>
                        <item value="&quot;AllSquash&quot;"/>
                        <item value="&quot;NoRootSquash&quot;"/>
                        <item value="&quot;RootSquash&quot;"/>
                      </enum>
                    </prop>
                    <prop type="integer32" name="shareQuota"/>
                    <prop readOnly="True" type="integer64" name="shareUsageBytes"/>
                    <prop type="array<object>" name="signedIdentifiers">
                      <item type="object">
                        <prop type="object" name="accessPolicy">
                          <prop type="dateTime" name="expiryTime"/>
                          <prop type="string" name="permission"/>
                          <prop type="dateTime" name="startTime"/>
                        </prop>
                        <prop type="string" name="id"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="snapshotTime"/>
                    <prop readOnly="True" type="string" name="version"/>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2024-01-01" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.storage/storageaccounts/{}/fileservices/default/shares/{}" version="2024-01-01" swagger="mgmt-plane/storage/ResourceProviders/Microsoft.Storage/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMve2FjY291bnROYW1lfS9maWxlU2VydmljZXMvZGVmYXVsdC9zaGFyZXMve3NoYXJlTmFtZX0=/V/MjAyNC0wMS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Header.x-ms-snapshot" options="snapshot" group="">
          <help short="Optional, used to delete a snapshot.The DateTime value that specifies the share snapshot to retrieve."/>
        </arg>
        <arg type="string" var="$Path.accountName" options="storage-account account-name" required="True" group="" idPart="name">
          <help short="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only."/>
          <format pattern="^[a-z0-9]+$" maxLength="24" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.shareName" options="share-name name n" required="True" group="" idPart="child_name_2">
          <help short="The name of the file share within the specified storage account. File share names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number."/>
          <format maxLength="63" minLength="3"/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Query.include" options="include" group="">
          <help short="Optional. Valid values are: snapshots, leased-snapshots, none. The default value is none. For 'snapshots', the file share is deleted including all of its file share snapshots. If the file share contains leased-snapshots, the deletion fails. For 'leased-snapshots', the file share is deleted included all of its file share snapshots (leased/unleased). For 'none', the file share is deleted if it has no share snapshots. If the file share contains any snapshots (leased or unleased), the deletion fails."/>
          <default value="&quot;none&quot;"/>
        </arg>
      </argGroup>
      <operation operationId="FileShares_Delete">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}">
          <request method="delete">
            <path>
              <param type="string" name="accountName" arg="$Path.accountName" required="True">
                <format pattern="^[a-z0-9]+$" maxLength="24" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="shareName" arg="$Path.shareName" required="True">
                <format maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <param type="string" name="$include" arg="$Query.include"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-01-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <header>
              <param type="string" name="x-ms-snapshot" arg="$Header.x-ms-snapshot"/>
            </header>
          </request>
          <response statusCode="200"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2024-01-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.storage/storageaccounts/{}/fileservices/default/shares/{}" version="2024-01-01" swagger="mgmt-plane/storage/ResourceProviders/Microsoft.Storage/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMve2FjY291bnROYW1lfS9maWxlU2VydmljZXMvZGVmYXVsdC9zaGFyZXMve3NoYXJlTmFtZX0=/V/MjAyNC0wMS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.accountName" options="storage-account account-name" required="True" group="" idPart="name">
          <help short="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only."/>
          <format pattern="^[a-z0-9]+$" maxLength="24" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.shareName" options="share-name name n" required="True" group="" idPart="child_name_2">
          <help short="The name of the file share within the specified storage account. File share names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number."/>
          <format maxLength="63" minLength="3"/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Query.expand" options="expand" hide="True" group="">
          <help short="Optional, used to expand the properties within share's properties. Valid values are: snapshots. Should be passed as a string with delimiter ','"/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$fileShare.properties.accessTier" options="access-tier" group="Properties">
          <help short="Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium."/>
          <enum>
            <item name="Cool" value="&quot;Cool&quot;"/>
            <item name="Hot" value="&quot;Hot&quot;"/>
            <item name="Premium" value="&quot;Premium&quot;"/>
            <item name="TransactionOptimized" value="&quot;TransactionOptimized&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$fileShare.properties.enabledProtocols" options="enabled-protocols" group="Properties">
          <help short="The authentication protocol that is used for the file share. NFS protocol will be                                    only available for premium file shares (file shares in the FileStorage account type). Can only be specified when creating a share."/>
          <enum>
            <item name="NFS" value="&quot;NFS&quot;"/>
            <item name="SMB" value="&quot;SMB&quot;"/>
          </enum>
        </arg>
        <arg type="object" var="$fileShare.properties.metadata" options="metadata" group="Properties">
          <help short="A name-value pair to associate with the share as metadata."/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
        <arg type="string" var="$fileShare.properties.rootSquash" options="root-squash" group="Properties">
          <help short="Reduction of the access rights for the remote superuser. The property is for NFS share only. The default is NoRootSquash."/>
          <enum>
            <item name="AllSquash" value="&quot;AllSquash&quot;"/>
            <item name="NoRootSquash" value="&quot;NoRootSquash&quot;"/>
            <item name="RootSquash" value="&quot;RootSquash&quot;"/>
          </enum>
        </arg>
        <arg type="integer32" var="$fileShare.properties.shareQuota" options="quota q" group="Properties">
          <help short="The provisioned size of the share, in gibibytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400. For file shares created under Files Provisioned v2 account type, please refer to the GetFileServiceUsage API response for the minimum and maximum allowed provisioned storage size."/>
        </arg>
        <arg type="array<object>" var="$fileShare.properties.signedIdentifiers" options="signed-identifiers" hide="True" group="Properties">
          <help short="List of stored access policies specified on the share."/>
          <item type="object">
            <arg type="object" var="$fileShare.properties.signedIdentifiers[].accessPolicy" options="access-policy">
              <help short="Access policy"/>
              <arg type="dateTime" var="$fileShare.properties.signedIdentifiers[].accessPolicy.expiryTime" options="expiry-time">
                <help short="Expiry time of the access policy"/>
              </arg>
              <arg type="string" var="$fileShare.properties.signedIdentifiers[].accessPolicy.permission" options="permission">
                <help short="List of abbreviated permissions."/>
              </arg>
              <arg type="dateTime" var="$fileShare.properties.signedIdentifiers[].accessPolicy.startTime" options="start-time">
                <help short="Start time of the access policy"/>
              </arg>
            </arg>
            <arg type="string" var="$fileShare.properties.signedIdentifiers[].id" options="id">
              <help short="An unique identifier of the stored access policy."/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <argGroup name="Provisioned V1 Paid Bursting">
        <arg type="boolean" var="$fileShare.properties.fileSharePaidBursting.paidBurstingEnabled" options="paid-bursting-enabled" group="Provisioned V1 Paid Bursting">
          <help short="Indicates whether paid bursting is enabled for the share. This property is only for file shares created under Files Provisioned v1 SSD account type."/>
        </arg>
        <arg type="integer32" var="$fileShare.properties.fileSharePaidBursting.paidBurstingMaxBandwidthMibps" options="paid-bursting-max-bandwidth-mibps bursting-max-mibps" group="Provisioned V1 Paid Bursting">
          <help short="The maximum paid bursting bandwidth for the share, in mebibytes per second. This property is only for file shares created under Files Provisioned v1 SSD account type. The maximum allowed value is 10340 which is the maximum allowed bandwidth for a share."/>
        </arg>
        <arg type="integer32" var="$fileShare.properties.fileSharePaidBursting.paidBurstingMaxIops" options="paid-bursting-max-iops" group="Provisioned V1 Paid Bursting">
          <help short="The maximum paid bursting IOPS for the share. This property is only for file shares created under Files Provisioned v1 SSD account type. The maximum allowed value is 102400 which is the maximum allowed IOPS for a share."/>
        </arg>
      </argGroup>
      <argGroup name="Provisioned V2">
        <arg type="integer32" var="$fileShare.properties.provisionedBandwidthMibps" options="provisioned-bandwidth-mibps provisioned-bandwidth" group="Provisioned V2">
          <help short="The provisioned bandwidth of the share, in mebibytes per second. This property is only for file shares created under Files Provisioned v2 account type. Please refer to the GetFileServiceUsage API response for the minimum and maximum allowed value for provisioned bandwidth."/>
        </arg>
        <arg type="integer32" var="$fileShare.properties.provisionedIops" options="provisioned-iops" group="Provisioned V2">
          <help short="The provisioned IOPS of the share. This property is only for file shares created under Files Provisioned v2 account type. Please refer to the GetFileServiceUsage API response for the minimum and maximum allowed value for provisioned IOPS."/>
        </arg>
      </argGroup>
      <operation operationId="FileShares_Create">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}">
          <request method="put">
            <path>
              <param type="string" name="accountName" arg="$Path.accountName" required="True">
                <format pattern="^[a-z0-9]+$" maxLength="24" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="shareName" arg="$Path.shareName" required="True">
                <format maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <param type="string" name="$expand" arg="$Query.expand"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-01-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="fileShare" required="True" clientFlatten="True">
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="string" name="accessTier" arg="$fileShare.properties.accessTier">
                      <enum>
                        <item value="&quot;Cool&quot;"/>
                        <item value="&quot;Hot&quot;"/>
                        <item value="&quot;Premium&quot;"/>
                        <item value="&quot;TransactionOptimized&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="enabledProtocols" arg="$fileShare.properties.enabledProtocols">
                      <enum>
                        <item value="&quot;NFS&quot;"/>
                        <item value="&quot;SMB&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="fileSharePaidBursting">
                      <prop type="boolean" name="paidBurstingEnabled" arg="$fileShare.properties.fileSharePaidBursting.paidBurstingEnabled"/>
                      <prop type="integer32" name="paidBurstingMaxBandwidthMibps" arg="$fileShare.properties.fileSharePaidBursting.paidBurstingMaxBandwidthMibps"/>
                      <prop type="integer32" name="paidBurstingMaxIops" arg="$fileShare.properties.fileSharePaidBursting.paidBurstingMaxIops"/>
                    </prop>
                    <prop type="object" name="metadata" arg="$fileShare.properties.metadata">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop type="integer32" name="provisionedBandwidthMibps" arg="$fileShare.properties.provisionedBandwidthMibps"/>
                    <prop type="integer32" name="provisionedIops" arg="$fileShare.properties.provisionedIops"/>
                    <prop type="string" name="rootSquash" arg="$fileShare.properties.rootSquash">
                      <enum>
                        <item value="&quot;AllSquash&quot;"/>
                        <item value="&quot;NoRootSquash&quot;"/>
                        <item value="&quot;RootSquash&quot;"/>
                      </enum>
                    </prop>
                    <prop type="integer32" name="shareQuota" arg="$fileShare.properties.shareQuota"/>
                    <prop type="array<object>" name="signedIdentifiers" arg="$fileShare.properties.signedIdentifiers">
                      <item type="object">
                        <prop type="object" name="accessPolicy" arg="$fileShare.properties.signedIdentifiers[].accessPolicy">
                          <prop type="dateTime" name="expiryTime" arg="$fileShare.properties.signedIdentifiers[].accessPolicy.expiryTime"/>
                          <prop type="string" name="permission" arg="$fileShare.properties.signedIdentifiers[].accessPolicy.permission"/>
                          <prop type="dateTime" name="startTime" arg="$fileShare.properties.signedIdentifiers[].accessPolicy.startTime"/>
                        </prop>
                        <prop type="string" name="id" arg="$fileShare.properties.signedIdentifiers[].id"/>
                      </item>
                    </prop>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="string" name="etag"/>
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/fileServices/default/shares/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="string" name="accessTier">
                      <enum>
                        <item value="&quot;Cool&quot;"/>
                        <item value="&quot;Hot&quot;"/>
                        <item value="&quot;Premium&quot;"/>
                        <item value="&quot;TransactionOptimized&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="accessTierChangeTime"/>
                    <prop readOnly="True" type="string" name="accessTierStatus"/>
                    <prop readOnly="True" type="boolean" name="deleted"/>
                    <prop readOnly="True" type="dateTime" name="deletedTime"/>
                    <prop type="string" name="enabledProtocols">
                      <enum>
                        <item value="&quot;NFS&quot;"/>
                        <item value="&quot;SMB&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="fileSharePaidBursting">
                      <prop type="boolean" name="paidBurstingEnabled"/>
                      <prop type="integer32" name="paidBurstingMaxBandwidthMibps"/>
                      <prop type="integer32" name="paidBurstingMaxIops"/>
                    </prop>
                    <prop readOnly="True" type="integer32" name="includedBurstIops"/>
                    <prop readOnly="True" type="dateTime" name="lastModifiedTime"/>
                    <prop readOnly="True" type="string" name="leaseDuration">
                      <enum>
                        <item value="&quot;Fixed&quot;"/>
                        <item value="&quot;Infinite&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="leaseState">
                      <enum>
                        <item value="&quot;Available&quot;"/>
                        <item value="&quot;Breaking&quot;"/>
                        <item value="&quot;Broken&quot;"/>
                        <item value="&quot;Expired&quot;"/>
                        <item value="&quot;Leased&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="leaseStatus">
                      <enum>
                        <item value="&quot;Locked&quot;"/>
                        <item value="&quot;Unlocked&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="integer64" name="maxBurstCreditsForIops"/>
                    <prop type="object" name="metadata">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="nextAllowedProvisionedBandwidthDowngradeTime"/>
                    <prop readOnly="True" type="dateTime" name="nextAllowedProvisionedIopsDowngradeTime"/>
                    <prop readOnly="True" type="dateTime" name="nextAllowedQuotaDowngradeTime"/>
                    <prop type="integer32" name="provisionedBandwidthMibps"/>
                    <prop type="integer32" name="provisionedIops"/>
                    <prop readOnly="True" type="integer" name="remainingRetentionDays"/>
                    <prop type="string" name="rootSquash">
                      <enum>
                        <item value="&quot;AllSquash&quot;"/>
                        <item value="&quot;NoRootSquash&quot;"/>
                        <item value="&quot;RootSquash&quot;"/>
                      </enum>
                    </prop>
                    <prop type="integer32" name="shareQuota"/>
                    <prop readOnly="True" type="integer64" name="shareUsageBytes"/>
                    <prop type="array<object>" name="signedIdentifiers">
                      <item type="object">
                        <prop type="object" name="accessPolicy">
                          <prop type="dateTime" name="expiryTime"/>
                          <prop type="string" name="permission"/>
                          <prop type="dateTime" name="startTime"/>
                        </prop>
                        <prop type="string" name="id"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="snapshotTime"/>
                    <prop readOnly="True" type="string" name="version"/>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2024-01-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.storage/storageaccounts/{}/fileservices/default/shares/{}" version="2024-01-01" swagger="mgmt-plane/storage/ResourceProviders/Microsoft.Storage/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMve2FjY291bnROYW1lfS9maWxlU2VydmljZXMvZGVmYXVsdC9zaGFyZXMve3NoYXJlTmFtZX0=/V/MjAyNC0wMS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.accountName" options="storage-account account-name" required="True" group="" idPart="name">
          <help short="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only."/>
          <format pattern="^[a-z0-9]+$" maxLength="24" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.shareName" options="share-name name n" required="True" group="" idPart="child_name_2">
          <help short="The name of the file share within the specified storage account. File share names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number."/>
          <format maxLength="63" minLength="3"/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Query.expand" options="expand" hide="True" group="">
          <help short="Optional, used to expand the properties within share's properties. Valid values are: snapshots. Should be passed as a string with delimiter ','"/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="string" var="$fileShare.properties.accessTier" options="access-tier" group="Properties">
          <help short="Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium."/>
          <enum>
            <item name="Cool" value="&quot;Cool&quot;"/>
            <item name="Hot" value="&quot;Hot&quot;"/>
            <item name="Premium" value="&quot;Premium&quot;"/>
            <item name="TransactionOptimized" value="&quot;TransactionOptimized&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="object" var="$fileShare.properties.metadata" options="metadata" group="Properties">
          <help short="A name-value pair to associate with the share as metadata."/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
        <arg nullable="True" type="string" var="$fileShare.properties.rootSquash" options="root-squash" group="Properties">
          <help short="Reduction of the access rights for the remote superuser. The property is for NFS share only. The default is NoRootSquash."/>
          <enum>
            <item name="AllSquash" value="&quot;AllSquash&quot;"/>
            <item name="NoRootSquash" value="&quot;NoRootSquash&quot;"/>
            <item name="RootSquash" value="&quot;RootSquash&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="integer32" var="$fileShare.properties.shareQuota" options="quota q" group="Properties">
          <help short="The provisioned size of the share, in gibibytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400. For file shares created under Files Provisioned v2 account type, please refer to the GetFileServiceUsage API response for the minimum and maximum allowed provisioned storage size."/>
        </arg>
        <arg nullable="True" type="array<object>" var="$fileShare.properties.signedIdentifiers" options="signed-identifiers" hide="True" group="Properties">
          <help short="List of stored access policies specified on the share."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="object" var="$fileShare.properties.signedIdentifiers[].accessPolicy" options="access-policy">
              <help short="Access policy"/>
              <arg nullable="True" type="dateTime" var="$fileShare.properties.signedIdentifiers[].accessPolicy.expiryTime" options="expiry-time">
                <help short="Expiry time of the access policy"/>
              </arg>
              <arg nullable="True" type="string" var="$fileShare.properties.signedIdentifiers[].accessPolicy.permission" options="permission">
                <help short="List of abbreviated permissions."/>
              </arg>
              <arg nullable="True" type="dateTime" var="$fileShare.properties.signedIdentifiers[].accessPolicy.startTime" options="start-time">
                <help short="Start time of the access policy"/>
              </arg>
            </arg>
            <arg nullable="True" type="string" var="$fileShare.properties.signedIdentifiers[].id" options="id">
              <help short="An unique identifier of the stored access policy."/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <argGroup name="Provisioned V1 Paid Bursting">
        <arg nullable="True" type="boolean" var="$fileShare.properties.fileSharePaidBursting.paidBurstingEnabled" options="paid-bursting-enabled" group="Provisioned V1 Paid Bursting">
          <help short="Indicates whether paid bursting is enabled for the share. This property is only for file shares created under Files Provisioned v1 SSD account type."/>
        </arg>
        <arg nullable="True" type="integer32" var="$fileShare.properties.fileSharePaidBursting.paidBurstingMaxBandwidthMibps" options="paid-bursting-max-bandwidth-mibps bursting-max-mibps" group="Provisioned V1 Paid Bursting">
          <help short="The maximum paid bursting bandwidth for the share, in mebibytes per second. This property is only for file shares created under Files Provisioned v1 SSD account type. The maximum allowed value is 10340 which is the maximum allowed bandwidth for a share."/>
        </arg>
        <arg nullable="True" type="integer32" var="$fileShare.properties.fileSharePaidBursting.paidBurstingMaxIops" options="paid-bursting-max-iops" group="Provisioned V1 Paid Bursting">
          <help short="The maximum paid bursting IOPS for the share. This property is only for file shares created under Files Provisioned v1 SSD account type. The maximum allowed value is 102400 which is the maximum allowed IOPS for a share."/>
        </arg>
      </argGroup>
      <argGroup name="Provisioned V2">
        <arg nullable="True" type="integer32" var="$fileShare.properties.provisionedBandwidthMibps" options="provisioned-bandwidth-mibps provisioned-bandwidth" group="Provisioned V2">
          <help short="The provisioned bandwidth of the share, in mebibytes per second. This property is only for file shares created under Files Provisioned v2 account type. Please refer to the GetFileServiceUsage API response for the minimum and maximum allowed value for provisioned bandwidth."/>
        </arg>
        <arg nullable="True" type="integer32" var="$fileShare.properties.provisionedIops" options="provisioned-iops" group="Provisioned V2">
          <help short="The provisioned IOPS of the share. This property is only for file shares created under Files Provisioned v2 account type. Please refer to the GetFileServiceUsage API response for the minimum and maximum allowed value for provisioned IOPS."/>
        </arg>
      </argGroup>
      <operation operationId="FileShares_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}">
          <request method="get">
            <path>
              <param type="string" name="accountName" arg="$Path.accountName" required="True">
                <format pattern="^[a-z0-9]+$" maxLength="24" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="shareName" arg="$Path.shareName" required="True">
                <format maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <param type="string" name="$expand" arg="$Query.expand"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-01-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="FileShare_read">
                  <prop readOnly="True" type="string" name="etag"/>
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Storage/storageAccounts/{}/fileServices/default/shares/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="string" name="accessTier">
                      <enum>
                        <item value="&quot;Cool&quot;"/>
                        <item value="&quot;Hot&quot;"/>
                        <item value="&quot;Premium&quot;"/>
                        <item value="&quot;TransactionOptimized&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="accessTierChangeTime"/>
                    <prop readOnly="True" type="string" name="accessTierStatus"/>
                    <prop readOnly="True" type="boolean" name="deleted"/>
                    <prop readOnly="True" type="dateTime" name="deletedTime"/>
                    <prop type="string" name="enabledProtocols">
                      <enum>
                        <item value="&quot;NFS&quot;"/>
                        <item value="&quot;SMB&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="fileSharePaidBursting">
                      <prop type="boolean" name="paidBurstingEnabled"/>
                      <prop type="integer32" name="paidBurstingMaxBandwidthMibps"/>
                      <prop type="integer32" name="paidBurstingMaxIops"/>
                    </prop>
                    <prop readOnly="True" type="integer32" name="includedBurstIops"/>
                    <prop readOnly="True" type="dateTime" name="lastModifiedTime"/>
                    <prop readOnly="True" type="string" name="leaseDuration">
                      <enum>
                        <item value="&quot;Fixed&quot;"/>
                        <item value="&quot;Infinite&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="leaseState">
                      <enum>
                        <item value="&quot;Available&quot;"/>
                        <item value="&quot;Breaking&quot;"/>
                        <item value="&quot;Broken&quot;"/>
                        <item value="&quot;Expired&quot;"/>
                        <item value="&quot;Leased&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="leaseStatus">
                      <enum>
                        <item value="&quot;Locked&quot;"/>
                        <item value="&quot;Unlocked&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="integer64" name="maxBurstCreditsForIops"/>
                    <prop type="object" name="metadata">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="nextAllowedProvisionedBandwidthDowngradeTime"/>
                    <prop readOnly="True" type="dateTime" name="nextAllowedProvisionedIopsDowngradeTime"/>
                    <prop readOnly="True" type="dateTime" name="nextAllowedQuotaDowngradeTime"/>
                    <prop type="integer32" name="provisionedBandwidthMibps"/>
                    <prop type="integer32" name="provisionedIops"/>
                    <prop readOnly="True" type="integer" name="remainingRetentionDays"/>
                    <prop type="string" name="rootSquash">
                      <enum>
                        <item value="&quot;AllSquash&quot;"/>
                        <item value="&quot;NoRootSquash&quot;"/>
                        <item value="&quot;RootSquash&quot;"/>
                      </enum>
                    </prop>
                    <prop type="integer32" name="shareQuota"/>
                    <prop readOnly="True" type="integer64" name="shareUsageBytes"/>
                    <prop type="array<object>" name="signedIdentifiers">
                      <item type="object">
                        <prop type="object" name="accessPolicy">
                          <prop type="dateTime" name="expiryTime"/>
                          <prop type="string" name="permission"/>
                          <prop type="dateTime" name="startTime"/>
                        </prop>
                        <prop type="string" name="id"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="snapshotTime"/>
                    <prop readOnly="True" type="string" name="version"/>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="fileShare" required="True" clientFlatten="True">
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="string" name="accessTier" arg="$fileShare.properties.accessTier">
                  <enum>
                    <item value="&quot;Cool&quot;"/>
                    <item value="&quot;Hot&quot;"/>
                    <item value="&quot;Premium&quot;"/>
                    <item value="&quot;TransactionOptimized&quot;"/>
                  </enum>
                </prop>
                <prop type="object" name="fileSharePaidBursting">
                  <prop type="boolean" name="paidBurstingEnabled" arg="$fileShare.properties.fileSharePaidBursting.paidBurstingEnabled"/>
                  <prop type="integer32" name="paidBurstingMaxBandwidthMibps" arg="$fileShare.properties.fileSharePaidBursting.paidBurstingMaxBandwidthMibps"/>
                  <prop type="integer32" name="paidBurstingMaxIops" arg="$fileShare.properties.fileSharePaidBursting.paidBurstingMaxIops"/>
                </prop>
                <prop type="object" name="metadata" arg="$fileShare.properties.metadata">
                  <additionalProp>
                    <item type="string"/>
                  </additionalProp>
                </prop>
                <prop type="integer32" name="provisionedBandwidthMibps" arg="$fileShare.properties.provisionedBandwidthMibps"/>
                <prop type="integer32" name="provisionedIops" arg="$fileShare.properties.provisionedIops"/>
                <prop type="string" name="rootSquash" arg="$fileShare.properties.rootSquash">
                  <enum>
                    <item value="&quot;AllSquash&quot;"/>
                    <item value="&quot;NoRootSquash&quot;"/>
                    <item value="&quot;RootSquash&quot;"/>
                  </enum>
                </prop>
                <prop type="integer32" name="shareQuota" arg="$fileShare.properties.shareQuota"/>
                <prop type="array<object>" name="signedIdentifiers" arg="$fileShare.properties.signedIdentifiers">
                  <item type="object">
                    <prop type="object" name="accessPolicy" arg="$fileShare.properties.signedIdentifiers[].accessPolicy">
                      <prop type="dateTime" name="expiryTime" arg="$fileShare.properties.signedIdentifiers[].accessPolicy.expiryTime"/>
                      <prop type="string" name="permission" arg="$fileShare.properties.signedIdentifiers[].accessPolicy.permission"/>
                      <prop type="dateTime" name="startTime" arg="$fileShare.properties.signedIdentifiers[].accessPolicy.startTime"/>
                    </prop>
                    <prop type="string" name="id" arg="$fileShare.properties.signedIdentifiers[].id"/>
                  </item>
                </prop>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="FileShares_Create">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}">
          <request method="put">
            <path>
              <param type="string" name="accountName" arg="$Path.accountName" required="True">
                <format pattern="^[a-z0-9]+$" maxLength="24" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="shareName" arg="$Path.shareName" required="True">
                <format maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <param type="string" name="$expand" arg="$Query.expand"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-01-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@FileShare_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
