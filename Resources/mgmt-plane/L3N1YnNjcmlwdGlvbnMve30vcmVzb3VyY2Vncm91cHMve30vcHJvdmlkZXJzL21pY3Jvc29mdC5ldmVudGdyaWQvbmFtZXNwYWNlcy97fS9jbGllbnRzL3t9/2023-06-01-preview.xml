<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/clients/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L2NsaWVudHMve2NsaWVudE5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
  <commandGroup name="eventgrid namespace client">
    <command name="show" version="2023-06-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/clients/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L2NsaWVudHMve2NsaWVudE5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.clientName" options="client-name name n" required="True" idPart="child_name_1">
          <help short="Name of the client."/>
          <format pattern="^[-a-zA-Z0-9:\._]*$" maxLength="128" minLength="1"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="Name of the namespace."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Clients_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/clients/{clientName}">
          <request method="get">
            <path>
              <param type="string" name="clientName" arg="$Path.clientName" required="True">
                <format pattern="^[-a-zA-Z0-9:\._]*$" maxLength="128" minLength="1"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EventGrid/namespaces/{}/clients/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="attributes">
                      <additionalProp anyType="True"/>
                    </prop>
                    <prop type="object" name="authentication">
                      <prop type="object" name="certificateSubject">
                        <prop type="string" name="commonName">
                          <format maxLength="64" minLength="0"/>
                        </prop>
                        <prop type="string" name="countryCode">
                          <format maxLength="2" minLength="2"/>
                        </prop>
                        <prop type="string" name="organization">
                          <format maxLength="64" minLength="0"/>
                        </prop>
                        <prop type="string" name="organizationUnit">
                          <format maxLength="32" minLength="0"/>
                        </prop>
                      </prop>
                      <prop type="object" name="certificateThumbprint">
                        <prop type="string" name="primary"/>
                        <prop type="string" name="secondary"/>
                      </prop>
                    </prop>
                    <prop type="string" name="authenticationName"/>
                    <prop type="object" name="clientCertificateAuthentication">
                      <prop type="array<string>" name="allowedThumbprints">
                        <item type="string"/>
                      </prop>
                      <prop type="string" name="validationScheme">
                        <enum>
                          <item value="&quot;DnsMatchesAuthenticationName&quot;"/>
                          <item value="&quot;EmailMatchesAuthenticationName&quot;"/>
                          <item value="&quot;IpMatchesAuthenticationName&quot;"/>
                          <item value="&quot;SubjectMatchesAuthenticationName&quot;"/>
                          <item value="&quot;ThumbprintMatch&quot;"/>
                          <item value="&quot;UriMatchesAuthenticationName&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="state">
                      <default value="&quot;Enabled&quot;"/>
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2023-06-01-preview" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/clients/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L2NsaWVudHMve2NsaWVudE5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.clientName" options="client-name name n" required="True" idPart="child_name_1">
          <help short="Name of the client."/>
          <format pattern="^[-a-zA-Z0-9:\._]*$" maxLength="128" minLength="1"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="Name of the namespace."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Clients_Delete">
        <longRunning finalStateVia="location"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/clients/{clientName}">
          <request method="delete">
            <path>
              <param type="string" name="clientName" arg="$Path.clientName" required="True">
                <format pattern="^[-a-zA-Z0-9:\._]*$" maxLength="128" minLength="1"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="202">
            <header>
              <item name="Location"/>
            </header>
          </response>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2023-06-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/clients/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L2NsaWVudHMve2NsaWVudE5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.clientName" options="client-name name n" required="True" idPart="child_name_1">
          <help short="The client name."/>
          <format pattern="^[-a-zA-Z0-9:\._]*$" maxLength="128" minLength="1"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="Name of the namespace."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Properties">
        <arg type="object" var="$clientInfo.properties.attributes" options="attributes" group="Properties">
          <help short="Attributes for the client."/>
          <additionalProp anyType="True"/>
        </arg>
        <arg type="object" var="$clientInfo.properties.authentication" options="authentication" group="Properties">
          <help short="Authentication information for the client."/>
          <arg type="object" var="$clientInfo.properties.authentication.certificateSubject" options="certificate-subject">
            <help short="The CA certificate subject name used for authentication."/>
            <arg type="string" var="$clientInfo.properties.authentication.certificateSubject.commonName" options="common-name">
              <help short="The common name field in the subject name. The allowed limit is 64 characters and it should be specified."/>
              <format maxLength="64" minLength="0"/>
            </arg>
            <arg type="string" var="$clientInfo.properties.authentication.certificateSubject.countryCode" options="country-code">
              <help short="The country code field in the subject name. If present, the country code should be represented by two-letter code defined in ISO 2166-1 (alpha-2). For example: 'US'."/>
              <format maxLength="2" minLength="2"/>
            </arg>
            <arg type="string" var="$clientInfo.properties.authentication.certificateSubject.organization" options="organization">
              <help short="The organization field in the subject name. If present, the allowed limit is 64 characters."/>
              <format maxLength="64" minLength="0"/>
            </arg>
            <arg type="string" var="$clientInfo.properties.authentication.certificateSubject.organizationUnit" options="organization-unit">
              <help short="The organization unit field in the subject name. If present, the allowed limit is 32 characters."/>
              <format maxLength="32" minLength="0"/>
            </arg>
          </arg>
          <arg type="object" var="$clientInfo.properties.authentication.certificateThumbprint" options="certificate-thumbprint">
            <help short="The self signed certificate's thumbprints data used for authentication."/>
            <arg type="string" var="$clientInfo.properties.authentication.certificateThumbprint.primary" options="primary">
              <help short="The primary thumbprint used for validation."/>
            </arg>
            <arg type="string" var="$clientInfo.properties.authentication.certificateThumbprint.secondary" options="secondary">
              <help short="The secondary thumbprint used for validation."/>
            </arg>
          </arg>
        </arg>
        <arg type="string" var="$clientInfo.properties.authenticationName" options="authentication-name" group="Properties">
          <help short="The name presented by the client for authentication. The default value is the name of the resource."/>
        </arg>
        <arg type="object" var="$clientInfo.properties.clientCertificateAuthentication" options="client-certificate-authentication" group="Properties">
          <help short="The client certificate authentication information."/>
          <arg type="array<string>" var="$clientInfo.properties.clientCertificateAuthentication.allowedThumbprints" options="allowed-thumbprints">
            <help short="The list of thumbprints that are allowed during client authentication. This property is required only if the validationScheme is 'ThumbprintMatch'."/>
            <item type="string"/>
          </arg>
          <arg type="string" var="$clientInfo.properties.clientCertificateAuthentication.validationScheme" options="validation-scheme">
            <help short="The validation scheme used to authenticate the client. Default value is SubjectMatchesAuthenticationName."/>
            <enum>
              <item name="DnsMatchesAuthenticationName" value="&quot;DnsMatchesAuthenticationName&quot;"/>
              <item name="EmailMatchesAuthenticationName" value="&quot;EmailMatchesAuthenticationName&quot;"/>
              <item name="IpMatchesAuthenticationName" value="&quot;IpMatchesAuthenticationName&quot;"/>
              <item name="SubjectMatchesAuthenticationName" value="&quot;SubjectMatchesAuthenticationName&quot;"/>
              <item name="ThumbprintMatch" value="&quot;ThumbprintMatch&quot;"/>
              <item name="UriMatchesAuthenticationName" value="&quot;UriMatchesAuthenticationName&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg type="string" var="$clientInfo.properties.description" options="description" group="Properties">
          <help short="Description for the Client resource."/>
        </arg>
        <arg type="string" var="$clientInfo.properties.state" options="state" group="Properties">
          <help short="Indicates if the client is enabled or not. Default value is Enabled."/>
          <default value="&quot;Enabled&quot;"/>
          <enum>
            <item name="Disabled" value="&quot;Disabled&quot;"/>
            <item name="Enabled" value="&quot;Enabled&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <operation operationId="Clients_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/clients/{clientName}">
          <request method="put">
            <path>
              <param type="string" name="clientName" arg="$Path.clientName" required="True">
                <format pattern="^[-a-zA-Z0-9:\._]*$" maxLength="128" minLength="1"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="clientInfo" required="True" clientFlatten="True">
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="attributes" arg="$clientInfo.properties.attributes">
                      <additionalProp anyType="True"/>
                    </prop>
                    <prop type="object" name="authentication" arg="$clientInfo.properties.authentication">
                      <prop type="object" name="certificateSubject" arg="$clientInfo.properties.authentication.certificateSubject">
                        <prop type="string" name="commonName" arg="$clientInfo.properties.authentication.certificateSubject.commonName">
                          <format maxLength="64" minLength="0"/>
                        </prop>
                        <prop type="string" name="countryCode" arg="$clientInfo.properties.authentication.certificateSubject.countryCode">
                          <format maxLength="2" minLength="2"/>
                        </prop>
                        <prop type="string" name="organization" arg="$clientInfo.properties.authentication.certificateSubject.organization">
                          <format maxLength="64" minLength="0"/>
                        </prop>
                        <prop type="string" name="organizationUnit" arg="$clientInfo.properties.authentication.certificateSubject.organizationUnit">
                          <format maxLength="32" minLength="0"/>
                        </prop>
                      </prop>
                      <prop type="object" name="certificateThumbprint" arg="$clientInfo.properties.authentication.certificateThumbprint">
                        <prop type="string" name="primary" arg="$clientInfo.properties.authentication.certificateThumbprint.primary"/>
                        <prop type="string" name="secondary" arg="$clientInfo.properties.authentication.certificateThumbprint.secondary"/>
                      </prop>
                    </prop>
                    <prop type="string" name="authenticationName" arg="$clientInfo.properties.authenticationName"/>
                    <prop type="object" name="clientCertificateAuthentication" arg="$clientInfo.properties.clientCertificateAuthentication">
                      <prop type="array<string>" name="allowedThumbprints" arg="$clientInfo.properties.clientCertificateAuthentication.allowedThumbprints">
                        <item type="string"/>
                      </prop>
                      <prop type="string" name="validationScheme" arg="$clientInfo.properties.clientCertificateAuthentication.validationScheme">
                        <enum>
                          <item value="&quot;DnsMatchesAuthenticationName&quot;"/>
                          <item value="&quot;EmailMatchesAuthenticationName&quot;"/>
                          <item value="&quot;IpMatchesAuthenticationName&quot;"/>
                          <item value="&quot;SubjectMatchesAuthenticationName&quot;"/>
                          <item value="&quot;ThumbprintMatch&quot;"/>
                          <item value="&quot;UriMatchesAuthenticationName&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="string" name="description" arg="$clientInfo.properties.description"/>
                    <prop type="string" name="state" arg="$clientInfo.properties.state">
                      <default value="&quot;Enabled&quot;"/>
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EventGrid/namespaces/{}/clients/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="attributes">
                      <additionalProp anyType="True"/>
                    </prop>
                    <prop type="object" name="authentication">
                      <prop type="object" name="certificateSubject">
                        <prop type="string" name="commonName">
                          <format maxLength="64" minLength="0"/>
                        </prop>
                        <prop type="string" name="countryCode">
                          <format maxLength="2" minLength="2"/>
                        </prop>
                        <prop type="string" name="organization">
                          <format maxLength="64" minLength="0"/>
                        </prop>
                        <prop type="string" name="organizationUnit">
                          <format maxLength="32" minLength="0"/>
                        </prop>
                      </prop>
                      <prop type="object" name="certificateThumbprint">
                        <prop type="string" name="primary"/>
                        <prop type="string" name="secondary"/>
                      </prop>
                    </prop>
                    <prop type="string" name="authenticationName"/>
                    <prop type="object" name="clientCertificateAuthentication">
                      <prop type="array<string>" name="allowedThumbprints">
                        <item type="string"/>
                      </prop>
                      <prop type="string" name="validationScheme">
                        <enum>
                          <item value="&quot;DnsMatchesAuthenticationName&quot;"/>
                          <item value="&quot;EmailMatchesAuthenticationName&quot;"/>
                          <item value="&quot;IpMatchesAuthenticationName&quot;"/>
                          <item value="&quot;SubjectMatchesAuthenticationName&quot;"/>
                          <item value="&quot;ThumbprintMatch&quot;"/>
                          <item value="&quot;UriMatchesAuthenticationName&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="state">
                      <default value="&quot;Enabled&quot;"/>
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2023-06-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/clients/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L2NsaWVudHMve2NsaWVudE5hbWV9/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.clientName" options="client-name name n" required="True" idPart="child_name_1">
          <help short="Name of the client."/>
          <format pattern="^[-a-zA-Z0-9:\._]*$" maxLength="128" minLength="1"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="Name of the namespace."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="object" var="$clientInfo.properties.attributes" options="attributes" group="Properties">
          <help short="Attributes for the client."/>
          <additionalProp anyType="True"/>
        </arg>
        <arg nullable="True" type="object" var="$clientInfo.properties.authentication" options="authentication" group="Properties">
          <help short="Authentication information for the client."/>
          <arg nullable="True" type="object" var="$clientInfo.properties.authentication.certificateSubject" options="certificate-subject">
            <help short="The CA certificate subject name used for authentication."/>
            <arg nullable="True" type="string" var="$clientInfo.properties.authentication.certificateSubject.commonName" options="common-name">
              <help short="The common name field in the subject name. The allowed limit is 64 characters and it should be specified."/>
              <format maxLength="64" minLength="0"/>
            </arg>
            <arg nullable="True" type="string" var="$clientInfo.properties.authentication.certificateSubject.countryCode" options="country-code">
              <help short="The country code field in the subject name. If present, the country code should be represented by two-letter code defined in ISO 2166-1 (alpha-2). For example: 'US'."/>
              <format maxLength="2" minLength="2"/>
            </arg>
            <arg nullable="True" type="string" var="$clientInfo.properties.authentication.certificateSubject.organization" options="organization">
              <help short="The organization field in the subject name. If present, the allowed limit is 64 characters."/>
              <format maxLength="64" minLength="0"/>
            </arg>
            <arg nullable="True" type="string" var="$clientInfo.properties.authentication.certificateSubject.organizationUnit" options="organization-unit">
              <help short="The organization unit field in the subject name. If present, the allowed limit is 32 characters."/>
              <format maxLength="32" minLength="0"/>
            </arg>
          </arg>
          <arg nullable="True" type="object" var="$clientInfo.properties.authentication.certificateThumbprint" options="certificate-thumbprint">
            <help short="The self signed certificate's thumbprints data used for authentication."/>
            <arg nullable="True" type="string" var="$clientInfo.properties.authentication.certificateThumbprint.primary" options="primary">
              <help short="The primary thumbprint used for validation."/>
            </arg>
            <arg nullable="True" type="string" var="$clientInfo.properties.authentication.certificateThumbprint.secondary" options="secondary">
              <help short="The secondary thumbprint used for validation."/>
            </arg>
          </arg>
        </arg>
        <arg nullable="True" type="string" var="$clientInfo.properties.authenticationName" options="authentication-name" hide="True" group="Properties">
          <help short="The name presented by the client for authentication. The default value is the name of the resource."/>
        </arg>
        <arg nullable="True" type="object" var="$clientInfo.properties.clientCertificateAuthentication" options="client-certificate-authentication" group="Properties">
          <help short="The client certificate authentication information."/>
          <arg nullable="True" type="array<string>" var="$clientInfo.properties.clientCertificateAuthentication.allowedThumbprints" options="allowed-thumbprints">
            <help short="The list of thumbprints that are allowed during client authentication. This property is required only if the validationScheme is 'ThumbprintMatch'."/>
            <item nullable="True" type="string"/>
          </arg>
          <arg nullable="True" type="string" var="$clientInfo.properties.clientCertificateAuthentication.validationScheme" options="validation-scheme">
            <help short="The validation scheme used to authenticate the client. Default value is SubjectMatchesAuthenticationName."/>
            <enum>
              <item name="DnsMatchesAuthenticationName" value="&quot;DnsMatchesAuthenticationName&quot;"/>
              <item name="EmailMatchesAuthenticationName" value="&quot;EmailMatchesAuthenticationName&quot;"/>
              <item name="IpMatchesAuthenticationName" value="&quot;IpMatchesAuthenticationName&quot;"/>
              <item name="SubjectMatchesAuthenticationName" value="&quot;SubjectMatchesAuthenticationName&quot;"/>
              <item name="ThumbprintMatch" value="&quot;ThumbprintMatch&quot;"/>
              <item name="UriMatchesAuthenticationName" value="&quot;UriMatchesAuthenticationName&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg nullable="True" type="string" var="$clientInfo.properties.description" options="description" group="Properties">
          <help short="Description for the Client resource."/>
        </arg>
        <arg nullable="True" type="string" var="$clientInfo.properties.state" options="state" group="Properties">
          <help short="Indicates if the client is enabled or not. Default value is Enabled."/>
          <enum>
            <item name="Disabled" value="&quot;Disabled&quot;"/>
            <item name="Enabled" value="&quot;Enabled&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <operation operationId="Clients_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/clients/{clientName}">
          <request method="get">
            <path>
              <param type="string" name="clientName" arg="$Path.clientName" required="True">
                <format pattern="^[-a-zA-Z0-9:\._]*$" maxLength="128" minLength="1"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="Client_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EventGrid/namespaces/{}/clients/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="attributes">
                      <additionalProp anyType="True"/>
                    </prop>
                    <prop type="object" name="authentication">
                      <prop type="object" name="certificateSubject">
                        <prop type="string" name="commonName">
                          <format maxLength="64" minLength="0"/>
                        </prop>
                        <prop type="string" name="countryCode">
                          <format maxLength="2" minLength="2"/>
                        </prop>
                        <prop type="string" name="organization">
                          <format maxLength="64" minLength="0"/>
                        </prop>
                        <prop type="string" name="organizationUnit">
                          <format maxLength="32" minLength="0"/>
                        </prop>
                      </prop>
                      <prop type="object" name="certificateThumbprint">
                        <prop type="string" name="primary"/>
                        <prop type="string" name="secondary"/>
                      </prop>
                    </prop>
                    <prop type="string" name="authenticationName"/>
                    <prop type="object" name="clientCertificateAuthentication">
                      <prop type="array<string>" name="allowedThumbprints">
                        <item type="string"/>
                      </prop>
                      <prop type="string" name="validationScheme">
                        <enum>
                          <item value="&quot;DnsMatchesAuthenticationName&quot;"/>
                          <item value="&quot;EmailMatchesAuthenticationName&quot;"/>
                          <item value="&quot;IpMatchesAuthenticationName&quot;"/>
                          <item value="&quot;SubjectMatchesAuthenticationName&quot;"/>
                          <item value="&quot;ThumbprintMatch&quot;"/>
                          <item value="&quot;UriMatchesAuthenticationName&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="state">
                      <default value="&quot;Enabled&quot;"/>
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="clientInfo" required="True" clientFlatten="True">
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="object" name="attributes" arg="$clientInfo.properties.attributes">
                  <additionalProp anyType="True"/>
                </prop>
                <prop type="object" name="authentication" arg="$clientInfo.properties.authentication">
                  <prop type="object" name="certificateSubject" arg="$clientInfo.properties.authentication.certificateSubject">
                    <prop type="string" name="commonName" arg="$clientInfo.properties.authentication.certificateSubject.commonName">
                      <format maxLength="64" minLength="0"/>
                    </prop>
                    <prop type="string" name="countryCode" arg="$clientInfo.properties.authentication.certificateSubject.countryCode">
                      <format maxLength="2" minLength="2"/>
                    </prop>
                    <prop type="string" name="organization" arg="$clientInfo.properties.authentication.certificateSubject.organization">
                      <format maxLength="64" minLength="0"/>
                    </prop>
                    <prop type="string" name="organizationUnit" arg="$clientInfo.properties.authentication.certificateSubject.organizationUnit">
                      <format maxLength="32" minLength="0"/>
                    </prop>
                  </prop>
                  <prop type="object" name="certificateThumbprint" arg="$clientInfo.properties.authentication.certificateThumbprint">
                    <prop type="string" name="primary" arg="$clientInfo.properties.authentication.certificateThumbprint.primary"/>
                    <prop type="string" name="secondary" arg="$clientInfo.properties.authentication.certificateThumbprint.secondary"/>
                  </prop>
                </prop>
                <prop type="string" name="authenticationName" arg="$clientInfo.properties.authenticationName"/>
                <prop type="object" name="clientCertificateAuthentication" arg="$clientInfo.properties.clientCertificateAuthentication">
                  <prop type="array<string>" name="allowedThumbprints" arg="$clientInfo.properties.clientCertificateAuthentication.allowedThumbprints">
                    <item type="string"/>
                  </prop>
                  <prop type="string" name="validationScheme" arg="$clientInfo.properties.clientCertificateAuthentication.validationScheme">
                    <enum>
                      <item value="&quot;DnsMatchesAuthenticationName&quot;"/>
                      <item value="&quot;EmailMatchesAuthenticationName&quot;"/>
                      <item value="&quot;IpMatchesAuthenticationName&quot;"/>
                      <item value="&quot;SubjectMatchesAuthenticationName&quot;"/>
                      <item value="&quot;ThumbprintMatch&quot;"/>
                      <item value="&quot;UriMatchesAuthenticationName&quot;"/>
                    </enum>
                  </prop>
                </prop>
                <prop type="string" name="description" arg="$clientInfo.properties.description"/>
                <prop type="string" name="state" arg="$clientInfo.properties.state">
                  <default value="&quot;Enabled&quot;"/>
                  <enum>
                    <item value="&quot;Disabled&quot;"/>
                    <item value="&quot;Enabled&quot;"/>
                  </enum>
                </prop>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="Clients_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/clients/{clientName}">
          <request method="put">
            <path>
              <param type="string" name="clientName" arg="$Path.clientName" required="True">
                <format pattern="^[-a-zA-Z0-9:\._]*$" maxLength="128" minLength="1"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@Client_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
