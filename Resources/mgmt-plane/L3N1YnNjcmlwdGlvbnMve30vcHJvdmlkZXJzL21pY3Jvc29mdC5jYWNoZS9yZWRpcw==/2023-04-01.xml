<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/providers/microsoft.cache/redis" version="2023-04-01" swagger="mgmt-plane/redis/ResourceProviders/Microsoft.Cache/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9wcm92aWRlcnMvTWljcm9zb2Z0LkNhY2hlL3JlZGlz/V/MjAyMy0wNC0wMQ=="/>
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.cache/redis" version="2023-04-01" swagger="mgmt-plane/redis/ResourceProviders/Microsoft.Cache/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ2FjaGUvcmVkaXM=/V/MjAyMy0wNC0wMQ=="/>
  <commandGroup name="cache redis">
    <command name="list" version="2023-04-01">
      <resource id="/subscriptions/{}/providers/microsoft.cache/redis" version="2023-04-01" swagger="mgmt-plane/redis/ResourceProviders/Microsoft.Cache/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9wcm92aWRlcnMvTWljcm9zb2Z0LkNhY2hlL3JlZGlz/V/MjAyMy0wNC0wMQ=="/>
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.cache/redis" version="2023-04-01" swagger="mgmt-plane/redis/ResourceProviders/Microsoft.Cache/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ2FjaGUvcmVkaXM=/V/MjAyMy0wNC0wMQ=="/>
      <argGroup name="">
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <condition var="$Condition_Redis_ListByResourceGroup">
        <operator type="and">
          <operator type="hasValue" arg="$Path.resourceGroupName"/>
          <operator type="hasValue" arg="$Path.subscriptionId"/>
        </operator>
      </condition>
      <condition var="$Condition_Redis_ListBySubscription">
        <operator type="and">
          <operator type="hasValue" arg="$Path.subscriptionId"/>
          <operator type="not">
            <operator type="hasValue" arg="$Path.resourceGroupName"/>
          </operator>
        </operator>
      </condition>
      <operation when="$Condition_Redis_ListByResourceGroup" operationId="Redis_ListByResourceGroup">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis">
          <request method="get">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-04-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="string" name="nextLink"/>
                  <prop type="array<object>" name="value">
                    <item type="object">
                      <prop readOnly="True" type="ResourceId" name="id">
                        <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Cache/redis/{}"/>
                      </prop>
                      <prop type="IdentityObject" name="identity">
                        <prop readOnly="True" type="uuid" name="principalId"/>
                        <prop readOnly="True" type="uuid" name="tenantId"/>
                        <prop type="string" name="type" required="True">
                          <enum>
                            <item value="&quot;None&quot;"/>
                            <item value="&quot;SystemAssigned&quot;"/>
                            <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                            <item value="&quot;UserAssigned&quot;"/>
                          </enum>
                        </prop>
                        <prop type="object" name="userAssignedIdentities">
                          <additionalProp>
                            <item type="object">
                              <prop readOnly="True" type="uuid" name="clientId"/>
                              <prop readOnly="True" type="uuid" name="principalId"/>
                            </item>
                          </additionalProp>
                        </prop>
                      </prop>
                      <prop type="ResourceLocation" name="location" required="True"/>
                      <prop readOnly="True" type="string" name="name"/>
                      <prop type="object" name="properties" required="True" clientFlatten="True">
                        <prop type="object" name="accessKeys">
                          <prop readOnly="True" type="string" name="primaryKey"/>
                          <prop readOnly="True" type="string" name="secondaryKey"/>
                        </prop>
                        <prop type="boolean" name="enableNonSslPort">
                          <default value="false"/>
                        </prop>
                        <prop readOnly="True" type="string" name="hostName"/>
                        <prop readOnly="True" type="array<object>" name="instances" identifiers="shardId">
                          <item type="object">
                            <prop readOnly="True" type="boolean" name="isMaster"/>
                            <prop readOnly="True" type="boolean" name="isPrimary"/>
                            <prop readOnly="True" type="integer32" name="nonSslPort"/>
                            <prop readOnly="True" type="integer32" name="shardId"/>
                            <prop readOnly="True" type="integer32" name="sslPort"/>
                            <prop readOnly="True" type="string" name="zone"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="linkedServers">
                          <item type="object">
                            <prop readOnly="True" type="string" name="id"/>
                          </item>
                        </prop>
                        <prop type="string" name="minimumTlsVersion">
                          <enum>
                            <item value="&quot;1.0&quot;"/>
                            <item value="&quot;1.1&quot;"/>
                            <item value="&quot;1.2&quot;"/>
                          </enum>
                        </prop>
                        <prop readOnly="True" type="integer32" name="port"/>
                        <prop readOnly="True" type="array<object>" name="privateEndpointConnections">
                          <item type="object">
                            <prop readOnly="True" type="ResourceId" name="id">
                              <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Cache/redis/{}/privateEndpointConnections/{}"/>
                            </prop>
                            <prop readOnly="True" type="string" name="name"/>
                            <prop type="object" name="properties" clientFlatten="True">
                              <prop type="object" name="privateEndpoint">
                                <prop readOnly="True" type="string" name="id"/>
                              </prop>
                              <prop type="object" name="privateLinkServiceConnectionState" required="True">
                                <prop type="string" name="actionsRequired"/>
                                <prop type="string" name="description"/>
                                <prop type="string" name="status">
                                  <enum>
                                    <item value="&quot;Approved&quot;"/>
                                    <item value="&quot;Pending&quot;"/>
                                    <item value="&quot;Rejected&quot;"/>
                                  </enum>
                                </prop>
                              </prop>
                              <prop readOnly="True" type="string" name="provisioningState">
                                <enum>
                                  <item value="&quot;Creating&quot;"/>
                                  <item value="&quot;Deleting&quot;"/>
                                  <item value="&quot;Failed&quot;"/>
                                  <item value="&quot;Succeeded&quot;"/>
                                </enum>
                              </prop>
                            </prop>
                            <prop readOnly="True" type="string" name="type"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="string" name="provisioningState">
                          <enum>
                            <item value="&quot;Creating&quot;"/>
                            <item value="&quot;Deleting&quot;"/>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;Linking&quot;"/>
                            <item value="&quot;Provisioning&quot;"/>
                            <item value="&quot;RecoveringScaleFailure&quot;"/>
                            <item value="&quot;Scaling&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                            <item value="&quot;Unlinking&quot;"/>
                            <item value="&quot;Unprovisioning&quot;"/>
                            <item value="&quot;Updating&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="publicNetworkAccess">
                          <default value="&quot;Enabled&quot;"/>
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                        <prop type="object" name="redisConfiguration">
                          <prop type="string" name="aof-backup-enabled"/>
                          <prop type="string" name="aof-storage-connection-string-0"/>
                          <prop type="string" name="aof-storage-connection-string-1"/>
                          <prop type="string" name="authnotrequired"/>
                          <prop readOnly="True" type="string" name="maxclients"/>
                          <prop type="string" name="maxfragmentationmemory-reserved"/>
                          <prop type="string" name="maxmemory-delta"/>
                          <prop type="string" name="maxmemory-policy"/>
                          <prop type="string" name="maxmemory-reserved"/>
                          <prop readOnly="True" type="string" name="preferred-data-archive-auth-method"/>
                          <prop type="string" name="preferred-data-persistence-auth-method"/>
                          <prop type="string" name="rdb-backup-enabled"/>
                          <prop type="string" name="rdb-backup-frequency"/>
                          <prop type="string" name="rdb-backup-max-snapshot-count"/>
                          <prop type="string" name="rdb-storage-connection-string"/>
                          <prop type="string" name="storage-subscription-id"/>
                          <prop readOnly="True" type="string" name="zonal-configuration"/>
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="string" name="redisVersion"/>
                        <prop type="integer32" name="replicasPerMaster"/>
                        <prop type="integer32" name="replicasPerPrimary"/>
                        <prop type="integer32" name="shardCount"/>
                        <prop type="object" name="sku" required="True">
                          <prop type="integer32" name="capacity" required="True"/>
                          <prop type="string" name="family" required="True">
                            <enum>
                              <item value="&quot;C&quot;"/>
                              <item value="&quot;P&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="name" required="True">
                            <enum>
                              <item value="&quot;Basic&quot;"/>
                              <item value="&quot;Premium&quot;"/>
                              <item value="&quot;Standard&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                        <prop readOnly="True" type="integer32" name="sslPort"/>
                        <prop type="string" name="staticIP">
                          <format pattern="^\d+\.\d+\.\d+\.\d+$"/>
                        </prop>
                        <prop type="string" name="subnetId">
                          <format pattern="^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"/>
                        </prop>
                        <prop type="object" name="tenantSettings">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                      </prop>
                      <prop type="object" name="tags">
                        <additionalProp>
                          <item type="string"/>
                        </additionalProp>
                      </prop>
                      <prop readOnly="True" type="string" name="type"/>
                      <prop type="array<string>" name="zones">
                        <item type="string"/>
                      </prop>
                    </item>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation when="$Condition_Redis_ListBySubscription" operationId="Redis_ListBySubscription">
        <http path="/subscriptions/{subscriptionId}/providers/Microsoft.Cache/redis">
          <request method="get">
            <path>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-04-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="string" name="nextLink"/>
                  <prop type="array<object>" name="value">
                    <item type="object">
                      <prop readOnly="True" type="ResourceId" name="id">
                        <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Cache/redis/{}"/>
                      </prop>
                      <prop type="IdentityObject" name="identity">
                        <prop readOnly="True" type="uuid" name="principalId"/>
                        <prop readOnly="True" type="uuid" name="tenantId"/>
                        <prop type="string" name="type" required="True">
                          <enum>
                            <item value="&quot;None&quot;"/>
                            <item value="&quot;SystemAssigned&quot;"/>
                            <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                            <item value="&quot;UserAssigned&quot;"/>
                          </enum>
                        </prop>
                        <prop type="object" name="userAssignedIdentities">
                          <additionalProp>
                            <item type="object">
                              <prop readOnly="True" type="uuid" name="clientId"/>
                              <prop readOnly="True" type="uuid" name="principalId"/>
                            </item>
                          </additionalProp>
                        </prop>
                      </prop>
                      <prop type="ResourceLocation" name="location" required="True"/>
                      <prop readOnly="True" type="string" name="name"/>
                      <prop type="object" name="properties" required="True" clientFlatten="True">
                        <prop type="object" name="accessKeys">
                          <prop readOnly="True" type="string" name="primaryKey"/>
                          <prop readOnly="True" type="string" name="secondaryKey"/>
                        </prop>
                        <prop type="boolean" name="enableNonSslPort">
                          <default value="false"/>
                        </prop>
                        <prop readOnly="True" type="string" name="hostName"/>
                        <prop readOnly="True" type="array<object>" name="instances" identifiers="shardId">
                          <item type="object">
                            <prop readOnly="True" type="boolean" name="isMaster"/>
                            <prop readOnly="True" type="boolean" name="isPrimary"/>
                            <prop readOnly="True" type="integer32" name="nonSslPort"/>
                            <prop readOnly="True" type="integer32" name="shardId"/>
                            <prop readOnly="True" type="integer32" name="sslPort"/>
                            <prop readOnly="True" type="string" name="zone"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="array<object>" name="linkedServers">
                          <item type="object">
                            <prop readOnly="True" type="string" name="id"/>
                          </item>
                        </prop>
                        <prop type="string" name="minimumTlsVersion">
                          <enum>
                            <item value="&quot;1.0&quot;"/>
                            <item value="&quot;1.1&quot;"/>
                            <item value="&quot;1.2&quot;"/>
                          </enum>
                        </prop>
                        <prop readOnly="True" type="integer32" name="port"/>
                        <prop readOnly="True" type="array<object>" name="privateEndpointConnections">
                          <item type="object">
                            <prop readOnly="True" type="ResourceId" name="id">
                              <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Cache/redis/{}/privateEndpointConnections/{}"/>
                            </prop>
                            <prop readOnly="True" type="string" name="name"/>
                            <prop type="object" name="properties" clientFlatten="True">
                              <prop type="object" name="privateEndpoint">
                                <prop readOnly="True" type="string" name="id"/>
                              </prop>
                              <prop type="object" name="privateLinkServiceConnectionState" required="True">
                                <prop type="string" name="actionsRequired"/>
                                <prop type="string" name="description"/>
                                <prop type="string" name="status">
                                  <enum>
                                    <item value="&quot;Approved&quot;"/>
                                    <item value="&quot;Pending&quot;"/>
                                    <item value="&quot;Rejected&quot;"/>
                                  </enum>
                                </prop>
                              </prop>
                              <prop readOnly="True" type="string" name="provisioningState">
                                <enum>
                                  <item value="&quot;Creating&quot;"/>
                                  <item value="&quot;Deleting&quot;"/>
                                  <item value="&quot;Failed&quot;"/>
                                  <item value="&quot;Succeeded&quot;"/>
                                </enum>
                              </prop>
                            </prop>
                            <prop readOnly="True" type="string" name="type"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="string" name="provisioningState">
                          <enum>
                            <item value="&quot;Creating&quot;"/>
                            <item value="&quot;Deleting&quot;"/>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;Linking&quot;"/>
                            <item value="&quot;Provisioning&quot;"/>
                            <item value="&quot;RecoveringScaleFailure&quot;"/>
                            <item value="&quot;Scaling&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                            <item value="&quot;Unlinking&quot;"/>
                            <item value="&quot;Unprovisioning&quot;"/>
                            <item value="&quot;Updating&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="publicNetworkAccess">
                          <default value="&quot;Enabled&quot;"/>
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                        <prop type="object" name="redisConfiguration">
                          <prop type="string" name="aof-backup-enabled"/>
                          <prop type="string" name="aof-storage-connection-string-0"/>
                          <prop type="string" name="aof-storage-connection-string-1"/>
                          <prop type="string" name="authnotrequired"/>
                          <prop readOnly="True" type="string" name="maxclients"/>
                          <prop type="string" name="maxfragmentationmemory-reserved"/>
                          <prop type="string" name="maxmemory-delta"/>
                          <prop type="string" name="maxmemory-policy"/>
                          <prop type="string" name="maxmemory-reserved"/>
                          <prop readOnly="True" type="string" name="preferred-data-archive-auth-method"/>
                          <prop type="string" name="preferred-data-persistence-auth-method"/>
                          <prop type="string" name="rdb-backup-enabled"/>
                          <prop type="string" name="rdb-backup-frequency"/>
                          <prop type="string" name="rdb-backup-max-snapshot-count"/>
                          <prop type="string" name="rdb-storage-connection-string"/>
                          <prop type="string" name="storage-subscription-id"/>
                          <prop readOnly="True" type="string" name="zonal-configuration"/>
                          <additionalProp anyType="True"/>
                        </prop>
                        <prop type="string" name="redisVersion"/>
                        <prop type="integer32" name="replicasPerMaster"/>
                        <prop type="integer32" name="replicasPerPrimary"/>
                        <prop type="integer32" name="shardCount"/>
                        <prop type="object" name="sku" required="True">
                          <prop type="integer32" name="capacity" required="True"/>
                          <prop type="string" name="family" required="True">
                            <enum>
                              <item value="&quot;C&quot;"/>
                              <item value="&quot;P&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="name" required="True">
                            <enum>
                              <item value="&quot;Basic&quot;"/>
                              <item value="&quot;Premium&quot;"/>
                              <item value="&quot;Standard&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                        <prop readOnly="True" type="integer32" name="sslPort"/>
                        <prop type="string" name="staticIP">
                          <format pattern="^\d+\.\d+\.\d+\.\d+$"/>
                        </prop>
                        <prop type="string" name="subnetId">
                          <format pattern="^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"/>
                        </prop>
                        <prop type="object" name="tenantSettings">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                      </prop>
                      <prop type="object" name="tags">
                        <additionalProp>
                          <item type="string"/>
                        </additionalProp>
                      </prop>
                      <prop readOnly="True" type="string" name="type"/>
                      <prop type="array<string>" name="zones">
                        <item type="string"/>
                      </prop>
                    </item>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="array" ref="$Instance.value" clientFlatten="True" nextLink="$Instance.nextLink"/>
    </command>
  </commandGroup>
</CodeGen>
