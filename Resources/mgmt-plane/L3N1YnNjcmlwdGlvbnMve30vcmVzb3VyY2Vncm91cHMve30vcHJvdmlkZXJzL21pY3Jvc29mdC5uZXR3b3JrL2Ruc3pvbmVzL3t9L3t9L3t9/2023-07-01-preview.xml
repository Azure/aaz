<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/dnszones/{}/{}/{}" version="2023-07-01-preview" swagger="mgmt-plane/dns/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9kbnNab25lcy97em9uZU5hbWV9L3tyZWNvcmRUeXBlfS97cmVsYXRpdmVSZWNvcmRTZXROYW1lfQ==/V/MjAyMy0wNy0wMS1wcmV2aWV3"/>
  <commandGroup name="network dns record-set">
    <command name="show" version="2023-07-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/dnszones/{}/{}/{}" version="2023-07-01-preview" swagger="mgmt-plane/dns/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9kbnNab25lcy97em9uZU5hbWV9L3tyZWNvcmRUeXBlfS97cmVsYXRpdmVSZWNvcmRTZXROYW1lfQ==/V/MjAyMy0wNy0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.recordType" options="record-type" required="True" idPart="child_type_1">
          <help short="The type of DNS record in this record set."/>
          <enum>
            <item name="A" value="&quot;A&quot;"/>
            <item name="AAAA" value="&quot;AAAA&quot;"/>
            <item name="CAA" value="&quot;CAA&quot;"/>
            <item name="CNAME" value="&quot;CNAME&quot;"/>
            <item name="DS" value="&quot;DS&quot;"/>
            <item name="MX" value="&quot;MX&quot;"/>
            <item name="NAPTR" value="&quot;NAPTR&quot;"/>
            <item name="NS" value="&quot;NS&quot;"/>
            <item name="PTR" value="&quot;PTR&quot;"/>
            <item name="SOA" value="&quot;SOA&quot;"/>
            <item name="SRV" value="&quot;SRV&quot;"/>
            <item name="TLSA" value="&quot;TLSA&quot;"/>
            <item name="TXT" value="&quot;TXT&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$Path.relativeRecordSetName" options="name n" required="True" group="" idPart="child_name_1">
          <help short="Name of the record set, relative to the name of the zone."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Path.zoneName" options="zone-name z" required="True" group="" idPart="name">
          <help short="Name of the DNS zone."/>
        </arg>
      </argGroup>
      <operation operationId="RecordSets_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}">
          <request method="get">
            <path>
              <param type="string" name="recordType" arg="$Path.recordType" required="True">
                <enum>
                  <item value="&quot;A&quot;"/>
                  <item value="&quot;AAAA&quot;"/>
                  <item value="&quot;CAA&quot;"/>
                  <item value="&quot;CNAME&quot;"/>
                  <item value="&quot;DS&quot;"/>
                  <item value="&quot;MX&quot;"/>
                  <item value="&quot;NAPTR&quot;"/>
                  <item value="&quot;NS&quot;"/>
                  <item value="&quot;PTR&quot;"/>
                  <item value="&quot;SOA&quot;"/>
                  <item value="&quot;SRV&quot;"/>
                  <item value="&quot;TLSA&quot;"/>
                  <item value="&quot;TXT&quot;"/>
                </enum>
              </param>
              <param type="string" name="relativeRecordSetName" arg="$Path.relativeRecordSetName" required="True" skipUrlEncoding="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
              <param type="string" name="zoneName" arg="$Path.zoneName" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-07-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop type="string" name="etag"/>
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/dnsZones/{}/{}/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="array<object>" name="AAAARecords">
                      <item type="object">
                        <prop type="string" name="ipv6Address"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="ARecords">
                      <item type="object">
                        <prop type="string" name="ipv4Address"/>
                      </item>
                    </prop>
                    <prop type="object" name="CNAMERecord">
                      <prop type="string" name="cname"/>
                    </prop>
                    <prop type="array<object>" name="DSRecords">
                      <item type="object">
                        <prop type="integer32" name="algorithm"/>
                        <prop type="object" name="digest">
                          <prop type="integer32" name="algorithmType"/>
                          <prop type="string" name="value"/>
                        </prop>
                        <prop type="integer32" name="keyTag"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="MXRecords">
                      <item type="object">
                        <prop type="string" name="exchange"/>
                        <prop type="integer32" name="preference"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="NAPTRRecords">
                      <item type="object">
                        <prop type="string" name="flags"/>
                        <prop type="integer32" name="order"/>
                        <prop type="integer32" name="preference"/>
                        <prop type="string" name="regexp"/>
                        <prop type="string" name="replacement"/>
                        <prop type="string" name="services"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="NSRecords">
                      <item type="object">
                        <prop type="string" name="nsdname"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="PTRRecords">
                      <item type="object">
                        <prop type="string" name="ptrdname"/>
                      </item>
                    </prop>
                    <prop type="object" name="SOARecord">
                      <prop type="string" name="email"/>
                      <prop type="integer64" name="expireTime"/>
                      <prop type="string" name="host"/>
                      <prop type="integer64" name="minimumTTL"/>
                      <prop type="integer64" name="refreshTime"/>
                      <prop type="integer64" name="retryTime"/>
                      <prop type="integer64" name="serialNumber"/>
                    </prop>
                    <prop type="array<object>" name="SRVRecords">
                      <item type="object">
                        <prop type="integer32" name="port"/>
                        <prop type="integer32" name="priority"/>
                        <prop type="string" name="target"/>
                        <prop type="integer32" name="weight"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="TLSARecords">
                      <item type="object">
                        <prop type="string" name="certAssociationData"/>
                        <prop type="integer32" name="matchingType"/>
                        <prop type="integer32" name="selector"/>
                        <prop type="integer32" name="usage"/>
                      </item>
                    </prop>
                    <prop type="integer64" name="TTL"/>
                    <prop type="array<object>" name="TXTRecords">
                      <item type="object">
                        <prop type="array<string>" name="value">
                          <item type="string"/>
                        </prop>
                      </item>
                    </prop>
                    <prop type="array<object>" name="caaRecords">
                      <item type="object">
                        <prop type="integer32" name="flags"/>
                        <prop type="string" name="tag"/>
                        <prop type="string" name="value"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="fqdn"/>
                    <prop type="object" name="metadata">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop type="object" name="targetResource" cls="SubResource_read">
                      <prop type="string" name="id"/>
                    </prop>
                    <prop type="@SubResource_read" name="trafficManagementProfile"/>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2023-07-01-preview" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/dnszones/{}/{}/{}" version="2023-07-01-preview" swagger="mgmt-plane/dns/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9kbnNab25lcy97em9uZU5hbWV9L3tyZWNvcmRUeXBlfS97cmVsYXRpdmVSZWNvcmRTZXROYW1lfQ==/V/MjAyMy0wNy0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Header.If-Match" options="if-match" group="">
          <help short="Etag of the record set. Omit this value to always delete the current record set. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes."/>
        </arg>
        <arg type="string" var="$Path.recordType" options="record-type" required="True" idPart="child_type_1">
          <help short="The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are deleted when the DNS zone is deleted)."/>
          <enum>
            <item name="A" value="&quot;A&quot;"/>
            <item name="AAAA" value="&quot;AAAA&quot;"/>
            <item name="CAA" value="&quot;CAA&quot;"/>
            <item name="CNAME" value="&quot;CNAME&quot;"/>
            <item name="DS" value="&quot;DS&quot;"/>
            <item name="MX" value="&quot;MX&quot;"/>
            <item name="NAPTR" value="&quot;NAPTR&quot;"/>
            <item name="NS" value="&quot;NS&quot;"/>
            <item name="PTR" value="&quot;PTR&quot;"/>
            <item name="SOA" value="&quot;SOA&quot;"/>
            <item name="SRV" value="&quot;SRV&quot;"/>
            <item name="TLSA" value="&quot;TLSA&quot;"/>
            <item name="TXT" value="&quot;TXT&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$Path.relativeRecordSetName" options="name n" required="True" group="" idPart="child_name_1">
          <help short="Name of the record set, relative to the name of the zone."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Path.zoneName" options="zone-name z" required="True" group="" idPart="name">
          <help short="Name of the DNS zone."/>
        </arg>
      </argGroup>
      <operation operationId="RecordSets_Delete">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}">
          <request method="delete">
            <path>
              <param type="string" name="recordType" arg="$Path.recordType" required="True">
                <enum>
                  <item value="&quot;A&quot;"/>
                  <item value="&quot;AAAA&quot;"/>
                  <item value="&quot;CAA&quot;"/>
                  <item value="&quot;CNAME&quot;"/>
                  <item value="&quot;DS&quot;"/>
                  <item value="&quot;MX&quot;"/>
                  <item value="&quot;NAPTR&quot;"/>
                  <item value="&quot;NS&quot;"/>
                  <item value="&quot;PTR&quot;"/>
                  <item value="&quot;SOA&quot;"/>
                  <item value="&quot;SRV&quot;"/>
                  <item value="&quot;TLSA&quot;"/>
                  <item value="&quot;TXT&quot;"/>
                </enum>
              </param>
              <param type="string" name="relativeRecordSetName" arg="$Path.relativeRecordSetName" required="True" skipUrlEncoding="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
              <param type="string" name="zoneName" arg="$Path.zoneName" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-07-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <header>
              <param type="string" name="If-Match" arg="$Header.If-Match"/>
            </header>
          </request>
          <response statusCode="200"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2023-07-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/dnszones/{}/{}/{}" version="2023-07-01-preview" swagger="mgmt-plane/dns/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9kbnNab25lcy97em9uZU5hbWV9L3tyZWNvcmRUeXBlfS97cmVsYXRpdmVSZWNvcmRTZXROYW1lfQ==/V/MjAyMy0wNy0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Header.If-Match" options="if-match">
          <help short="The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes."/>
        </arg>
        <arg type="string" var="$Header.If-None-Match" options="if-none-match">
          <help short="Set to '*' to allow a new record set to be created, but to prevent updating an existing record set. Other values will be ignored."/>
        </arg>
        <arg type="string" var="$Path.recordType" options="record-type" required="True" idPart="child_type_1">
          <help short="The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the DNS zone is created)."/>
          <enum>
            <item name="A" value="&quot;A&quot;"/>
            <item name="AAAA" value="&quot;AAAA&quot;"/>
            <item name="CAA" value="&quot;CAA&quot;"/>
            <item name="CNAME" value="&quot;CNAME&quot;"/>
            <item name="DS" value="&quot;DS&quot;"/>
            <item name="MX" value="&quot;MX&quot;"/>
            <item name="NAPTR" value="&quot;NAPTR&quot;"/>
            <item name="NS" value="&quot;NS&quot;"/>
            <item name="PTR" value="&quot;PTR&quot;"/>
            <item name="SOA" value="&quot;SOA&quot;"/>
            <item name="SRV" value="&quot;SRV&quot;"/>
            <item name="TLSA" value="&quot;TLSA&quot;"/>
            <item name="TXT" value="&quot;TXT&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$Path.relativeRecordSetName" options="name n" required="True" group="" idPart="child_name_1">
          <help short="The name of the record set, relative to the name of the zone."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Path.zoneName" options="zone-name z" required="True" group="" idPart="name">
          <help short="The name of the DNS zone (without a terminating dot)."/>
        </arg>
        <arg type="string" var="$parameters.properties.targetResource.id" options="target-resource" group="">
          <help short="ID of an Azure resource from which the DNS resource value is taken."/>
        </arg>
        <arg type="string" var="$parameters.properties.trafficManagementProfile.id" options="traffic-management-profile tm-profile" stage="Experimental" group="">
          <help short="A reference to an Azure Traffic Manager Profile resource from where the DNS resource value is taken."/>
        </arg>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="string" var="$parameters.etag" options="etag" hide="True" group="Parameters">
          <help short="The etag of the record set."/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="array<object>" var="$parameters.properties.AAAARecords" options="aaaa-records" group="Properties">
          <help short="The list of AAAA records in the record set."/>
          <item type="object">
            <arg type="string" var="$parameters.properties.AAAARecords[].ipv6Address" options="ipv6-address">
              <help short="The IPv6 address of this AAAA record."/>
            </arg>
          </item>
        </arg>
        <arg type="array<object>" var="$parameters.properties.ARecords" options="a-records" group="Properties">
          <help short="The list of A records in the record set."/>
          <item type="object">
            <arg type="string" var="$parameters.properties.ARecords[].ipv4Address" options="ipv4-address">
              <help short="The IPv4 address of this A record."/>
            </arg>
          </item>
        </arg>
        <arg type="object" var="$parameters.properties.CNAMERecord" options="cname-record" group="Properties">
          <help short="The CNAME record in the  record set."/>
          <arg type="string" var="$parameters.properties.CNAMERecord.cname" options="cname">
            <help short="The canonical name for this CNAME record."/>
          </arg>
        </arg>
        <arg type="array<object>" var="$parameters.properties.DSRecords" options="ds-records" stage="Experimental" group="Properties">
          <help short="The list of DS records in the record set."/>
          <item type="object">
            <arg type="integer32" var="$parameters.properties.DSRecords[].algorithm" options="algorithm">
              <help short="The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml"/>
            </arg>
            <arg type="object" var="$parameters.properties.DSRecords[].digest" options="digest">
              <help short="The digest entity."/>
              <arg type="integer32" var="$parameters.properties.DSRecords[].digest.algorithmType" options="algorithm-type">
                <help short="The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml"/>
              </arg>
              <arg type="string" var="$parameters.properties.DSRecords[].digest.value" options="value">
                <help short="The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record."/>
              </arg>
            </arg>
            <arg type="integer32" var="$parameters.properties.DSRecords[].keyTag" options="key-tag">
              <help short="The key tag value is used to determine which DNSKEY Resource Record is used for signature verification."/>
            </arg>
          </item>
        </arg>
        <arg type="array<object>" var="$parameters.properties.MXRecords" options="mx-records" group="Properties">
          <help short="The list of MX records in the record set."/>
          <item type="object">
            <arg type="string" var="$parameters.properties.MXRecords[].exchange" options="exchange">
              <help short="The domain name of the mail host for this MX record."/>
            </arg>
            <arg type="integer32" var="$parameters.properties.MXRecords[].preference" options="preference">
              <help short="The preference value for this MX record."/>
            </arg>
          </item>
        </arg>
        <arg type="array<object>" var="$parameters.properties.NAPTRRecords" options="naptr-records" stage="Experimental" group="Properties">
          <help short="The list of NAPTR records in the record set."/>
          <item type="object">
            <arg type="string" var="$parameters.properties.NAPTRRecords[].flags" options="flags">
              <help short="The flags specific to DDDS applications. Values currently defined in RFC 3404 are uppercase and lowercase letters &quot;A&quot;, &quot;P&quot;, &quot;S&quot;, and &quot;U&quot;, and the empty string, &quot;&quot;. Enclose Flags in quotation marks."/>
            </arg>
            <arg type="integer32" var="$parameters.properties.NAPTRRecords[].order" options="order">
              <help short="The order in which the NAPTR records MUST be processed in order to accurately represent the ordered list of rules. The ordering is from lowest to highest. Valid values: 0-65535."/>
            </arg>
            <arg type="integer32" var="$parameters.properties.NAPTRRecords[].preference" options="preference">
              <help short="The preference specifies the order in which NAPTR records with equal 'order' values should be processed, low numbers being processed before high numbers. Valid values: 0-65535."/>
            </arg>
            <arg type="string" var="$parameters.properties.NAPTRRecords[].regexp" options="regexp">
              <help short="The regular expression that the DDDS application uses to convert an input value into an output value. For example: an IP phone system might use a regular expression to convert a phone number that is entered by a user into a SIP URI. Enclose the regular expression in quotation marks. Specify either a value for 'regexp' or a value for 'replacement'."/>
            </arg>
            <arg type="string" var="$parameters.properties.NAPTRRecords[].replacement" options="replacement">
              <help short="The replacement is a fully qualified domain name (FQDN) of the next domain name that you want the DDDS application to submit a DNS query for. The DDDS application replaces the input value with the value specified for replacement. Specify either a value for 'regexp' or a value for 'replacement'. If you specify a value for 'regexp', specify a dot (.) for 'replacement'."/>
            </arg>
            <arg type="string" var="$parameters.properties.NAPTRRecords[].services" options="services">
              <help short="The services specific to DDDS applications. Enclose Services in quotation marks."/>
            </arg>
          </item>
        </arg>
        <arg type="array<object>" var="$parameters.properties.NSRecords" options="ns-records" group="Properties">
          <help short="The list of NS records in the record set."/>
          <item type="object">
            <arg type="string" var="$parameters.properties.NSRecords[].nsdname" options="nsdname">
              <help short="The name server name for this NS record."/>
            </arg>
          </item>
        </arg>
        <arg type="array<object>" var="$parameters.properties.PTRRecords" options="ptr-records" group="Properties">
          <help short="The list of PTR records in the record set."/>
          <item type="object">
            <arg type="string" var="$parameters.properties.PTRRecords[].ptrdname" options="ptrdname">
              <help short="The PTR target domain name for this PTR record."/>
            </arg>
          </item>
        </arg>
        <arg type="object" var="$parameters.properties.SOARecord" options="soa-record" group="Properties">
          <help short="The SOA record in the record set."/>
          <arg type="string" var="$parameters.properties.SOARecord.email" options="email">
            <help short="The email contact for this SOA record."/>
          </arg>
          <arg type="integer64" var="$parameters.properties.SOARecord.expireTime" options="expire-time">
            <help short="The expire time for this SOA record."/>
          </arg>
          <arg type="string" var="$parameters.properties.SOARecord.host" options="host">
            <help short="The domain name of the authoritative name server for this SOA record."/>
          </arg>
          <arg type="integer64" var="$parameters.properties.SOARecord.minimumTTL" options="minimum-ttl">
            <help short="The minimum value for this SOA record. By convention this is used to determine the negative caching duration."/>
          </arg>
          <arg type="integer64" var="$parameters.properties.SOARecord.refreshTime" options="refresh-time">
            <help short="The refresh value for this SOA record."/>
          </arg>
          <arg type="integer64" var="$parameters.properties.SOARecord.retryTime" options="retry-time">
            <help short="The retry time for this SOA record."/>
          </arg>
          <arg type="integer64" var="$parameters.properties.SOARecord.serialNumber" options="serial-number">
            <help short="The serial number for this SOA record."/>
          </arg>
        </arg>
        <arg type="array<object>" var="$parameters.properties.SRVRecords" options="srv-records" group="Properties">
          <help short="The list of SRV records in the record set."/>
          <item type="object">
            <arg type="integer32" var="$parameters.properties.SRVRecords[].port" options="port">
              <help short="The port value for this SRV record."/>
            </arg>
            <arg type="integer32" var="$parameters.properties.SRVRecords[].priority" options="priority">
              <help short="The priority value for this SRV record."/>
            </arg>
            <arg type="string" var="$parameters.properties.SRVRecords[].target" options="target">
              <help short="The target domain name for this SRV record."/>
            </arg>
            <arg type="integer32" var="$parameters.properties.SRVRecords[].weight" options="weight">
              <help short="The weight value for this SRV record."/>
            </arg>
          </item>
        </arg>
        <arg type="array<object>" var="$parameters.properties.TLSARecords" options="tlsa-records" stage="Experimental" group="Properties">
          <help short="The list of TLSA records in the record set."/>
          <item type="object">
            <arg type="string" var="$parameters.properties.TLSARecords[].certAssociationData" options="cert-association-data">
              <help short="This specifies the certificate association data to be matched."/>
            </arg>
            <arg type="integer32" var="$parameters.properties.TLSARecords[].matchingType" options="matching-type">
              <help short="The matching type specifies how the certificate association is presented."/>
            </arg>
            <arg type="integer32" var="$parameters.properties.TLSARecords[].selector" options="selector">
              <help short="The selector specifies which part of the TLS certificate presented by the server will be matched against the association data."/>
            </arg>
            <arg type="integer32" var="$parameters.properties.TLSARecords[].usage" options="usage">
              <help short="The usage specifies the provided association that will be used to match the certificate presented in the TLS handshake."/>
            </arg>
          </item>
        </arg>
        <arg type="integer64" var="$parameters.properties.TTL" options="ttl" group="Properties">
          <help short="The TTL (time-to-live) of the records in the record set."/>
          <default value="3600"/>
        </arg>
        <arg type="array<object>" var="$parameters.properties.TXTRecords" options="txt-records" group="Properties">
          <help short="The list of TXT records in the record set."/>
          <item type="object">
            <arg type="array<string>" var="$parameters.properties.TXTRecords[].value" options="value">
              <help short="The text value of this TXT record."/>
              <item type="string"/>
            </arg>
          </item>
        </arg>
        <arg type="array<object>" var="$parameters.properties.caaRecords" options="caa-records" group="Properties">
          <help short="The list of CAA records in the record set."/>
          <item type="object">
            <arg type="integer32" var="$parameters.properties.caaRecords[].flags" options="flags">
              <help short="The flags for this CAA record as an integer between 0 and 255."/>
            </arg>
            <arg type="string" var="$parameters.properties.caaRecords[].tag" options="tag">
              <help short="The tag for this CAA record."/>
            </arg>
            <arg type="string" var="$parameters.properties.caaRecords[].value" options="value">
              <help short="The value for this CAA record."/>
            </arg>
          </item>
        </arg>
        <arg type="object" var="$parameters.properties.metadata" options="metadata" group="Properties">
          <help short="The metadata attached to the record set."/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <operation operationId="RecordSets_CreateOrUpdate">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}">
          <request method="put">
            <path>
              <param type="string" name="recordType" arg="$Path.recordType" required="True">
                <enum>
                  <item value="&quot;A&quot;"/>
                  <item value="&quot;AAAA&quot;"/>
                  <item value="&quot;CAA&quot;"/>
                  <item value="&quot;CNAME&quot;"/>
                  <item value="&quot;DS&quot;"/>
                  <item value="&quot;MX&quot;"/>
                  <item value="&quot;NAPTR&quot;"/>
                  <item value="&quot;NS&quot;"/>
                  <item value="&quot;PTR&quot;"/>
                  <item value="&quot;SOA&quot;"/>
                  <item value="&quot;SRV&quot;"/>
                  <item value="&quot;TLSA&quot;"/>
                  <item value="&quot;TXT&quot;"/>
                </enum>
              </param>
              <param type="string" name="relativeRecordSetName" arg="$Path.relativeRecordSetName" required="True" skipUrlEncoding="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
              <param type="string" name="zoneName" arg="$Path.zoneName" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-07-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <header>
              <param type="string" name="If-Match" arg="$Header.If-Match"/>
              <param type="string" name="If-None-Match" arg="$Header.If-None-Match"/>
            </header>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="string" name="etag" arg="$parameters.etag"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="array<object>" name="AAAARecords" arg="$parameters.properties.AAAARecords">
                      <item type="object">
                        <prop type="string" name="ipv6Address" arg="$parameters.properties.AAAARecords[].ipv6Address"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="ARecords" arg="$parameters.properties.ARecords">
                      <item type="object">
                        <prop type="string" name="ipv4Address" arg="$parameters.properties.ARecords[].ipv4Address"/>
                      </item>
                    </prop>
                    <prop type="object" name="CNAMERecord" arg="$parameters.properties.CNAMERecord">
                      <prop type="string" name="cname" arg="$parameters.properties.CNAMERecord.cname"/>
                    </prop>
                    <prop type="array<object>" name="DSRecords" arg="$parameters.properties.DSRecords">
                      <item type="object">
                        <prop type="integer32" name="algorithm" arg="$parameters.properties.DSRecords[].algorithm"/>
                        <prop type="object" name="digest" arg="$parameters.properties.DSRecords[].digest">
                          <prop type="integer32" name="algorithmType" arg="$parameters.properties.DSRecords[].digest.algorithmType"/>
                          <prop type="string" name="value" arg="$parameters.properties.DSRecords[].digest.value"/>
                        </prop>
                        <prop type="integer32" name="keyTag" arg="$parameters.properties.DSRecords[].keyTag"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="MXRecords" arg="$parameters.properties.MXRecords">
                      <item type="object">
                        <prop type="string" name="exchange" arg="$parameters.properties.MXRecords[].exchange"/>
                        <prop type="integer32" name="preference" arg="$parameters.properties.MXRecords[].preference"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="NAPTRRecords" arg="$parameters.properties.NAPTRRecords">
                      <item type="object">
                        <prop type="string" name="flags" arg="$parameters.properties.NAPTRRecords[].flags"/>
                        <prop type="integer32" name="order" arg="$parameters.properties.NAPTRRecords[].order"/>
                        <prop type="integer32" name="preference" arg="$parameters.properties.NAPTRRecords[].preference"/>
                        <prop type="string" name="regexp" arg="$parameters.properties.NAPTRRecords[].regexp"/>
                        <prop type="string" name="replacement" arg="$parameters.properties.NAPTRRecords[].replacement"/>
                        <prop type="string" name="services" arg="$parameters.properties.NAPTRRecords[].services"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="NSRecords" arg="$parameters.properties.NSRecords">
                      <item type="object">
                        <prop type="string" name="nsdname" arg="$parameters.properties.NSRecords[].nsdname"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="PTRRecords" arg="$parameters.properties.PTRRecords">
                      <item type="object">
                        <prop type="string" name="ptrdname" arg="$parameters.properties.PTRRecords[].ptrdname"/>
                      </item>
                    </prop>
                    <prop type="object" name="SOARecord" arg="$parameters.properties.SOARecord">
                      <prop type="string" name="email" arg="$parameters.properties.SOARecord.email"/>
                      <prop type="integer64" name="expireTime" arg="$parameters.properties.SOARecord.expireTime"/>
                      <prop type="string" name="host" arg="$parameters.properties.SOARecord.host"/>
                      <prop type="integer64" name="minimumTTL" arg="$parameters.properties.SOARecord.minimumTTL"/>
                      <prop type="integer64" name="refreshTime" arg="$parameters.properties.SOARecord.refreshTime"/>
                      <prop type="integer64" name="retryTime" arg="$parameters.properties.SOARecord.retryTime"/>
                      <prop type="integer64" name="serialNumber" arg="$parameters.properties.SOARecord.serialNumber"/>
                    </prop>
                    <prop type="array<object>" name="SRVRecords" arg="$parameters.properties.SRVRecords">
                      <item type="object">
                        <prop type="integer32" name="port" arg="$parameters.properties.SRVRecords[].port"/>
                        <prop type="integer32" name="priority" arg="$parameters.properties.SRVRecords[].priority"/>
                        <prop type="string" name="target" arg="$parameters.properties.SRVRecords[].target"/>
                        <prop type="integer32" name="weight" arg="$parameters.properties.SRVRecords[].weight"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="TLSARecords" arg="$parameters.properties.TLSARecords">
                      <item type="object">
                        <prop type="string" name="certAssociationData" arg="$parameters.properties.TLSARecords[].certAssociationData"/>
                        <prop type="integer32" name="matchingType" arg="$parameters.properties.TLSARecords[].matchingType"/>
                        <prop type="integer32" name="selector" arg="$parameters.properties.TLSARecords[].selector"/>
                        <prop type="integer32" name="usage" arg="$parameters.properties.TLSARecords[].usage"/>
                      </item>
                    </prop>
                    <prop type="integer64" name="TTL" arg="$parameters.properties.TTL"/>
                    <prop type="array<object>" name="TXTRecords" arg="$parameters.properties.TXTRecords">
                      <item type="object">
                        <prop type="array<string>" name="value" arg="$parameters.properties.TXTRecords[].value">
                          <item type="string"/>
                        </prop>
                      </item>
                    </prop>
                    <prop type="array<object>" name="caaRecords" arg="$parameters.properties.caaRecords">
                      <item type="object">
                        <prop type="integer32" name="flags" arg="$parameters.properties.caaRecords[].flags"/>
                        <prop type="string" name="tag" arg="$parameters.properties.caaRecords[].tag"/>
                        <prop type="string" name="value" arg="$parameters.properties.caaRecords[].value"/>
                      </item>
                    </prop>
                    <prop type="object" name="metadata" arg="$parameters.properties.metadata">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop type="object" name="targetResource">
                      <prop type="string" name="id" arg="$parameters.properties.targetResource.id"/>
                    </prop>
                    <prop type="object" name="trafficManagementProfile">
                      <prop type="string" name="id" arg="$parameters.properties.trafficManagementProfile.id"/>
                    </prop>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop type="string" name="etag"/>
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/dnsZones/{}/{}/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="array<object>" name="AAAARecords">
                      <item type="object">
                        <prop type="string" name="ipv6Address"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="ARecords">
                      <item type="object">
                        <prop type="string" name="ipv4Address"/>
                      </item>
                    </prop>
                    <prop type="object" name="CNAMERecord">
                      <prop type="string" name="cname"/>
                    </prop>
                    <prop type="array<object>" name="DSRecords">
                      <item type="object">
                        <prop type="integer32" name="algorithm"/>
                        <prop type="object" name="digest">
                          <prop type="integer32" name="algorithmType"/>
                          <prop type="string" name="value"/>
                        </prop>
                        <prop type="integer32" name="keyTag"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="MXRecords">
                      <item type="object">
                        <prop type="string" name="exchange"/>
                        <prop type="integer32" name="preference"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="NAPTRRecords">
                      <item type="object">
                        <prop type="string" name="flags"/>
                        <prop type="integer32" name="order"/>
                        <prop type="integer32" name="preference"/>
                        <prop type="string" name="regexp"/>
                        <prop type="string" name="replacement"/>
                        <prop type="string" name="services"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="NSRecords">
                      <item type="object">
                        <prop type="string" name="nsdname"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="PTRRecords">
                      <item type="object">
                        <prop type="string" name="ptrdname"/>
                      </item>
                    </prop>
                    <prop type="object" name="SOARecord">
                      <prop type="string" name="email"/>
                      <prop type="integer64" name="expireTime"/>
                      <prop type="string" name="host"/>
                      <prop type="integer64" name="minimumTTL"/>
                      <prop type="integer64" name="refreshTime"/>
                      <prop type="integer64" name="retryTime"/>
                      <prop type="integer64" name="serialNumber"/>
                    </prop>
                    <prop type="array<object>" name="SRVRecords">
                      <item type="object">
                        <prop type="integer32" name="port"/>
                        <prop type="integer32" name="priority"/>
                        <prop type="string" name="target"/>
                        <prop type="integer32" name="weight"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="TLSARecords">
                      <item type="object">
                        <prop type="string" name="certAssociationData"/>
                        <prop type="integer32" name="matchingType"/>
                        <prop type="integer32" name="selector"/>
                        <prop type="integer32" name="usage"/>
                      </item>
                    </prop>
                    <prop type="integer64" name="TTL"/>
                    <prop type="array<object>" name="TXTRecords">
                      <item type="object">
                        <prop type="array<string>" name="value">
                          <item type="string"/>
                        </prop>
                      </item>
                    </prop>
                    <prop type="array<object>" name="caaRecords">
                      <item type="object">
                        <prop type="integer32" name="flags"/>
                        <prop type="string" name="tag"/>
                        <prop type="string" name="value"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="fqdn"/>
                    <prop type="object" name="metadata">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop type="object" name="targetResource" cls="SubResource_read">
                      <prop type="string" name="id"/>
                    </prop>
                    <prop type="@SubResource_read" name="trafficManagementProfile"/>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2023-07-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/dnszones/{}/{}/{}" version="2023-07-01-preview" swagger="mgmt-plane/dns/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9kbnNab25lcy97em9uZU5hbWV9L3tyZWNvcmRUeXBlfS97cmVsYXRpdmVSZWNvcmRTZXROYW1lfQ==/V/MjAyMy0wNy0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Header.If-Match" options="if-match" group="">
          <help short="Etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes."/>
        </arg>
        <arg type="string" var="$Header.If-None-Match" options="if-none-match" group="">
          <help short="Set to `*` to allow a new record set to be created, but to prevent updating an existing record set. Other values will be ignored."/>
        </arg>
        <arg type="string" var="$Path.recordType" options="record-type" required="True" group="" idPart="child_type_1">
          <help short="Type of DNS record in this record set."/>
          <enum>
            <item name="A" value="&quot;A&quot;"/>
            <item name="AAAA" value="&quot;AAAA&quot;"/>
            <item name="CAA" value="&quot;CAA&quot;"/>
            <item name="CNAME" value="&quot;CNAME&quot;"/>
            <item name="DS" value="&quot;DS&quot;"/>
            <item name="MX" value="&quot;MX&quot;"/>
            <item name="NAPTR" value="&quot;NAPTR&quot;"/>
            <item name="NS" value="&quot;NS&quot;"/>
            <item name="PTR" value="&quot;PTR&quot;"/>
            <item name="SOA" value="&quot;SOA&quot;"/>
            <item name="SRV" value="&quot;SRV&quot;"/>
            <item name="TLSA" value="&quot;TLSA&quot;"/>
            <item name="TXT" value="&quot;TXT&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$Path.relativeRecordSetName" options="name n" required="True" group="" idPart="child_name_1">
          <help short="Name of the record set, relative to the name of the zone."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Path.zoneName" options="zone-name z" required="True" group="" idPart="name">
          <help short="Name of the DNS zone."/>
        </arg>
        <arg nullable="True" type="integer64" var="$parameters.properties.TTL" options="ttl" group="">
          <help short="TTL of the records in the record set."/>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.metadata" options="metadata" group="">
          <help short="Metadata in space-separated key=value pairs. This overwrites any existing metadata."/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.targetResource.id" options="target-resource" group="">
          <help short="ID of an Azure resource from which the DNS resource value is taken."/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.trafficManagementProfile.id" options="traffic-management-profile tm-profile" stage="Experimental" group="">
          <help short="A reference to an Azure Traffic Manager Profile resource from where the DNS resource value is taken."/>
        </arg>
      </argGroup>
      <argGroup name="Parameters">
        <arg nullable="True" type="string" var="$parameters.etag" options="etag" hide="True" group="Parameters">
          <help short="The etag of the record set."/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="array<object>" var="$parameters.properties.AAAARecords" options="aaaa-records" group="Properties">
          <help short="The list of AAAA records in the record set."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$parameters.properties.AAAARecords[].ipv6Address" options="ipv6-address">
              <help short="The IPv6 address of this AAAA record."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="array<object>" var="$parameters.properties.ARecords" options="a-records" group="Properties">
          <help short="The list of A records in the record set."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$parameters.properties.ARecords[].ipv4Address" options="ipv4-address">
              <help short="The IPv4 address of this A record."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.CNAMERecord" options="cname-record" group="Properties">
          <help short="The CNAME record in the  record set."/>
          <arg nullable="True" type="string" var="$parameters.properties.CNAMERecord.cname" options="cname">
            <help short="The canonical name for this CNAME record."/>
          </arg>
        </arg>
        <arg nullable="True" type="array<object>" var="$parameters.properties.DSRecords" options="ds-records" stage="Experimental" group="Properties">
          <help short="The list of DS records in the record set."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="integer32" var="$parameters.properties.DSRecords[].algorithm" options="algorithm">
              <help short="The security algorithm type represents the standard security algorithm number of the DNSKEY Resource Record. See: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml"/>
            </arg>
            <arg nullable="True" type="object" var="$parameters.properties.DSRecords[].digest" options="digest">
              <help short="The digest entity."/>
              <arg nullable="True" type="integer32" var="$parameters.properties.DSRecords[].digest.algorithmType" options="algorithm-type">
                <help short="The digest algorithm type represents the standard digest algorithm number used to construct the digest. See: https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml"/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.DSRecords[].digest.value" options="value">
                <help short="The digest value is a cryptographic hash value of the referenced DNSKEY Resource Record."/>
              </arg>
            </arg>
            <arg nullable="True" type="integer32" var="$parameters.properties.DSRecords[].keyTag" options="key-tag">
              <help short="The key tag value is used to determine which DNSKEY Resource Record is used for signature verification."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="array<object>" var="$parameters.properties.MXRecords" options="mx-records" group="Properties">
          <help short="The list of MX records in the record set."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$parameters.properties.MXRecords[].exchange" options="exchange">
              <help short="The domain name of the mail host for this MX record."/>
            </arg>
            <arg nullable="True" type="integer32" var="$parameters.properties.MXRecords[].preference" options="preference">
              <help short="The preference value for this MX record."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="array<object>" var="$parameters.properties.NAPTRRecords" options="naptr-records" stage="Experimental" group="Properties">
          <help short="The list of NAPTR records in the record set."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$parameters.properties.NAPTRRecords[].flags" options="flags">
              <help short="The flags specific to DDDS applications. Values currently defined in RFC 3404 are uppercase and lowercase letters &quot;A&quot;, &quot;P&quot;, &quot;S&quot;, and &quot;U&quot;, and the empty string, &quot;&quot;. Enclose Flags in quotation marks."/>
            </arg>
            <arg nullable="True" type="integer32" var="$parameters.properties.NAPTRRecords[].order" options="order">
              <help short="The order in which the NAPTR records MUST be processed in order to accurately represent the ordered list of rules. The ordering is from lowest to highest. Valid values: 0-65535."/>
            </arg>
            <arg nullable="True" type="integer32" var="$parameters.properties.NAPTRRecords[].preference" options="preference">
              <help short="The preference specifies the order in which NAPTR records with equal 'order' values should be processed, low numbers being processed before high numbers. Valid values: 0-65535."/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.NAPTRRecords[].regexp" options="regexp">
              <help short="The regular expression that the DDDS application uses to convert an input value into an output value. For example: an IP phone system might use a regular expression to convert a phone number that is entered by a user into a SIP URI. Enclose the regular expression in quotation marks. Specify either a value for 'regexp' or a value for 'replacement'."/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.NAPTRRecords[].replacement" options="replacement">
              <help short="The replacement is a fully qualified domain name (FQDN) of the next domain name that you want the DDDS application to submit a DNS query for. The DDDS application replaces the input value with the value specified for replacement. Specify either a value for 'regexp' or a value for 'replacement'. If you specify a value for 'regexp', specify a dot (.) for 'replacement'."/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.NAPTRRecords[].services" options="services">
              <help short="The services specific to DDDS applications. Enclose Services in quotation marks."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="array<object>" var="$parameters.properties.NSRecords" options="ns-records" group="Properties">
          <help short="The list of NS records in the record set."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$parameters.properties.NSRecords[].nsdname" options="nsdname">
              <help short="The name server name for this NS record."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="array<object>" var="$parameters.properties.PTRRecords" options="ptr-records" group="Properties">
          <help short="The list of PTR records in the record set."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$parameters.properties.PTRRecords[].ptrdname" options="ptrdname">
              <help short="The PTR target domain name for this PTR record."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.SOARecord" options="soa-record" group="Properties">
          <help short="The SOA record in the record set."/>
          <arg nullable="True" type="string" var="$parameters.properties.SOARecord.email" options="email">
            <help short="The email contact for this SOA record."/>
          </arg>
          <arg nullable="True" type="integer64" var="$parameters.properties.SOARecord.expireTime" options="expire-time">
            <help short="The expire time for this SOA record."/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.SOARecord.host" options="host">
            <help short="The domain name of the authoritative name server for this SOA record."/>
          </arg>
          <arg nullable="True" type="integer64" var="$parameters.properties.SOARecord.minimumTTL" options="minimum-ttl">
            <help short="The minimum value for this SOA record. By convention this is used to determine the negative caching duration."/>
          </arg>
          <arg nullable="True" type="integer64" var="$parameters.properties.SOARecord.refreshTime" options="refresh-time">
            <help short="The refresh value for this SOA record."/>
          </arg>
          <arg nullable="True" type="integer64" var="$parameters.properties.SOARecord.retryTime" options="retry-time">
            <help short="The retry time for this SOA record."/>
          </arg>
          <arg nullable="True" type="integer64" var="$parameters.properties.SOARecord.serialNumber" options="serial-number">
            <help short="The serial number for this SOA record."/>
          </arg>
        </arg>
        <arg nullable="True" type="array<object>" var="$parameters.properties.SRVRecords" options="srv-records" group="Properties">
          <help short="The list of SRV records in the record set."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="integer32" var="$parameters.properties.SRVRecords[].port" options="port">
              <help short="The port value for this SRV record."/>
            </arg>
            <arg nullable="True" type="integer32" var="$parameters.properties.SRVRecords[].priority" options="priority">
              <help short="The priority value for this SRV record."/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.SRVRecords[].target" options="target">
              <help short="The target domain name for this SRV record."/>
            </arg>
            <arg nullable="True" type="integer32" var="$parameters.properties.SRVRecords[].weight" options="weight">
              <help short="The weight value for this SRV record."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="array<object>" var="$parameters.properties.TLSARecords" options="tlsa-records" stage="Experimental" group="Properties">
          <help short="The list of TLSA records in the record set."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$parameters.properties.TLSARecords[].certAssociationData" options="cert-association-data">
              <help short="This specifies the certificate association data to be matched."/>
            </arg>
            <arg nullable="True" type="integer32" var="$parameters.properties.TLSARecords[].matchingType" options="matching-type">
              <help short="The matching type specifies how the certificate association is presented."/>
            </arg>
            <arg nullable="True" type="integer32" var="$parameters.properties.TLSARecords[].selector" options="selector">
              <help short="The selector specifies which part of the TLS certificate presented by the server will be matched against the association data."/>
            </arg>
            <arg nullable="True" type="integer32" var="$parameters.properties.TLSARecords[].usage" options="usage">
              <help short="The usage specifies the provided association that will be used to match the certificate presented in the TLS handshake."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="array<object>" var="$parameters.properties.TXTRecords" options="txt-records" group="Properties">
          <help short="The list of TXT records in the record set."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="array<string>" var="$parameters.properties.TXTRecords[].value" options="value">
              <help short="The text value of this TXT record."/>
              <item nullable="True" type="string"/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="array<object>" var="$parameters.properties.caaRecords" options="caa-records" group="Properties">
          <help short="The list of CAA records in the record set."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="integer32" var="$parameters.properties.caaRecords[].flags" options="flags">
              <help short="The flags for this CAA record as an integer between 0 and 255."/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.caaRecords[].tag" options="tag">
              <help short="The tag for this CAA record."/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.caaRecords[].value" options="value">
              <help short="The value for this CAA record."/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <operation operationId="RecordSets_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}">
          <request method="get">
            <path>
              <param type="string" name="recordType" arg="$Path.recordType" required="True">
                <enum>
                  <item value="&quot;A&quot;"/>
                  <item value="&quot;AAAA&quot;"/>
                  <item value="&quot;CAA&quot;"/>
                  <item value="&quot;CNAME&quot;"/>
                  <item value="&quot;DS&quot;"/>
                  <item value="&quot;MX&quot;"/>
                  <item value="&quot;NAPTR&quot;"/>
                  <item value="&quot;NS&quot;"/>
                  <item value="&quot;PTR&quot;"/>
                  <item value="&quot;SOA&quot;"/>
                  <item value="&quot;SRV&quot;"/>
                  <item value="&quot;TLSA&quot;"/>
                  <item value="&quot;TXT&quot;"/>
                </enum>
              </param>
              <param type="string" name="relativeRecordSetName" arg="$Path.relativeRecordSetName" required="True" skipUrlEncoding="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
              <param type="string" name="zoneName" arg="$Path.zoneName" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-07-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="RecordSet_read">
                  <prop type="string" name="etag"/>
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/dnsZones/{}/{}/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="array<object>" name="AAAARecords">
                      <item type="object">
                        <prop type="string" name="ipv6Address"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="ARecords">
                      <item type="object">
                        <prop type="string" name="ipv4Address"/>
                      </item>
                    </prop>
                    <prop type="object" name="CNAMERecord">
                      <prop type="string" name="cname"/>
                    </prop>
                    <prop type="array<object>" name="DSRecords">
                      <item type="object">
                        <prop type="integer32" name="algorithm"/>
                        <prop type="object" name="digest">
                          <prop type="integer32" name="algorithmType"/>
                          <prop type="string" name="value"/>
                        </prop>
                        <prop type="integer32" name="keyTag"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="MXRecords">
                      <item type="object">
                        <prop type="string" name="exchange"/>
                        <prop type="integer32" name="preference"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="NAPTRRecords">
                      <item type="object">
                        <prop type="string" name="flags"/>
                        <prop type="integer32" name="order"/>
                        <prop type="integer32" name="preference"/>
                        <prop type="string" name="regexp"/>
                        <prop type="string" name="replacement"/>
                        <prop type="string" name="services"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="NSRecords">
                      <item type="object">
                        <prop type="string" name="nsdname"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="PTRRecords">
                      <item type="object">
                        <prop type="string" name="ptrdname"/>
                      </item>
                    </prop>
                    <prop type="object" name="SOARecord">
                      <prop type="string" name="email"/>
                      <prop type="integer64" name="expireTime"/>
                      <prop type="string" name="host"/>
                      <prop type="integer64" name="minimumTTL"/>
                      <prop type="integer64" name="refreshTime"/>
                      <prop type="integer64" name="retryTime"/>
                      <prop type="integer64" name="serialNumber"/>
                    </prop>
                    <prop type="array<object>" name="SRVRecords">
                      <item type="object">
                        <prop type="integer32" name="port"/>
                        <prop type="integer32" name="priority"/>
                        <prop type="string" name="target"/>
                        <prop type="integer32" name="weight"/>
                      </item>
                    </prop>
                    <prop type="array<object>" name="TLSARecords">
                      <item type="object">
                        <prop type="string" name="certAssociationData"/>
                        <prop type="integer32" name="matchingType"/>
                        <prop type="integer32" name="selector"/>
                        <prop type="integer32" name="usage"/>
                      </item>
                    </prop>
                    <prop type="integer64" name="TTL"/>
                    <prop type="array<object>" name="TXTRecords">
                      <item type="object">
                        <prop type="array<string>" name="value">
                          <item type="string"/>
                        </prop>
                      </item>
                    </prop>
                    <prop type="array<object>" name="caaRecords">
                      <item type="object">
                        <prop type="integer32" name="flags"/>
                        <prop type="string" name="tag"/>
                        <prop type="string" name="value"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="fqdn"/>
                    <prop type="object" name="metadata">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop type="object" name="targetResource" cls="SubResource_read">
                      <prop type="string" name="id"/>
                    </prop>
                    <prop type="@SubResource_read" name="trafficManagementProfile"/>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="parameters" required="True" clientFlatten="True">
              <prop type="string" name="etag" arg="$parameters.etag"/>
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="array<object>" name="AAAARecords" arg="$parameters.properties.AAAARecords">
                  <item type="object">
                    <prop type="string" name="ipv6Address" arg="$parameters.properties.AAAARecords[].ipv6Address"/>
                  </item>
                </prop>
                <prop type="array<object>" name="ARecords" arg="$parameters.properties.ARecords">
                  <item type="object">
                    <prop type="string" name="ipv4Address" arg="$parameters.properties.ARecords[].ipv4Address"/>
                  </item>
                </prop>
                <prop type="object" name="CNAMERecord" arg="$parameters.properties.CNAMERecord">
                  <prop type="string" name="cname" arg="$parameters.properties.CNAMERecord.cname"/>
                </prop>
                <prop type="array<object>" name="DSRecords" arg="$parameters.properties.DSRecords">
                  <item type="object">
                    <prop type="integer32" name="algorithm" arg="$parameters.properties.DSRecords[].algorithm"/>
                    <prop type="object" name="digest" arg="$parameters.properties.DSRecords[].digest">
                      <prop type="integer32" name="algorithmType" arg="$parameters.properties.DSRecords[].digest.algorithmType"/>
                      <prop type="string" name="value" arg="$parameters.properties.DSRecords[].digest.value"/>
                    </prop>
                    <prop type="integer32" name="keyTag" arg="$parameters.properties.DSRecords[].keyTag"/>
                  </item>
                </prop>
                <prop type="array<object>" name="MXRecords" arg="$parameters.properties.MXRecords">
                  <item type="object">
                    <prop type="string" name="exchange" arg="$parameters.properties.MXRecords[].exchange"/>
                    <prop type="integer32" name="preference" arg="$parameters.properties.MXRecords[].preference"/>
                  </item>
                </prop>
                <prop type="array<object>" name="NAPTRRecords" arg="$parameters.properties.NAPTRRecords">
                  <item type="object">
                    <prop type="string" name="flags" arg="$parameters.properties.NAPTRRecords[].flags"/>
                    <prop type="integer32" name="order" arg="$parameters.properties.NAPTRRecords[].order"/>
                    <prop type="integer32" name="preference" arg="$parameters.properties.NAPTRRecords[].preference"/>
                    <prop type="string" name="regexp" arg="$parameters.properties.NAPTRRecords[].regexp"/>
                    <prop type="string" name="replacement" arg="$parameters.properties.NAPTRRecords[].replacement"/>
                    <prop type="string" name="services" arg="$parameters.properties.NAPTRRecords[].services"/>
                  </item>
                </prop>
                <prop type="array<object>" name="NSRecords" arg="$parameters.properties.NSRecords">
                  <item type="object">
                    <prop type="string" name="nsdname" arg="$parameters.properties.NSRecords[].nsdname"/>
                  </item>
                </prop>
                <prop type="array<object>" name="PTRRecords" arg="$parameters.properties.PTRRecords">
                  <item type="object">
                    <prop type="string" name="ptrdname" arg="$parameters.properties.PTRRecords[].ptrdname"/>
                  </item>
                </prop>
                <prop type="object" name="SOARecord" arg="$parameters.properties.SOARecord">
                  <prop type="string" name="email" arg="$parameters.properties.SOARecord.email"/>
                  <prop type="integer64" name="expireTime" arg="$parameters.properties.SOARecord.expireTime"/>
                  <prop type="string" name="host" arg="$parameters.properties.SOARecord.host"/>
                  <prop type="integer64" name="minimumTTL" arg="$parameters.properties.SOARecord.minimumTTL"/>
                  <prop type="integer64" name="refreshTime" arg="$parameters.properties.SOARecord.refreshTime"/>
                  <prop type="integer64" name="retryTime" arg="$parameters.properties.SOARecord.retryTime"/>
                  <prop type="integer64" name="serialNumber" arg="$parameters.properties.SOARecord.serialNumber"/>
                </prop>
                <prop type="array<object>" name="SRVRecords" arg="$parameters.properties.SRVRecords">
                  <item type="object">
                    <prop type="integer32" name="port" arg="$parameters.properties.SRVRecords[].port"/>
                    <prop type="integer32" name="priority" arg="$parameters.properties.SRVRecords[].priority"/>
                    <prop type="string" name="target" arg="$parameters.properties.SRVRecords[].target"/>
                    <prop type="integer32" name="weight" arg="$parameters.properties.SRVRecords[].weight"/>
                  </item>
                </prop>
                <prop type="array<object>" name="TLSARecords" arg="$parameters.properties.TLSARecords">
                  <item type="object">
                    <prop type="string" name="certAssociationData" arg="$parameters.properties.TLSARecords[].certAssociationData"/>
                    <prop type="integer32" name="matchingType" arg="$parameters.properties.TLSARecords[].matchingType"/>
                    <prop type="integer32" name="selector" arg="$parameters.properties.TLSARecords[].selector"/>
                    <prop type="integer32" name="usage" arg="$parameters.properties.TLSARecords[].usage"/>
                  </item>
                </prop>
                <prop type="integer64" name="TTL" arg="$parameters.properties.TTL"/>
                <prop type="array<object>" name="TXTRecords" arg="$parameters.properties.TXTRecords">
                  <item type="object">
                    <prop type="array<string>" name="value" arg="$parameters.properties.TXTRecords[].value">
                      <item type="string"/>
                    </prop>
                  </item>
                </prop>
                <prop type="array<object>" name="caaRecords" arg="$parameters.properties.caaRecords">
                  <item type="object">
                    <prop type="integer32" name="flags" arg="$parameters.properties.caaRecords[].flags"/>
                    <prop type="string" name="tag" arg="$parameters.properties.caaRecords[].tag"/>
                    <prop type="string" name="value" arg="$parameters.properties.caaRecords[].value"/>
                  </item>
                </prop>
                <prop type="object" name="metadata" arg="$parameters.properties.metadata">
                  <additionalProp>
                    <item type="string"/>
                  </additionalProp>
                </prop>
                <prop type="object" name="targetResource">
                  <prop type="string" name="id" arg="$parameters.properties.targetResource.id"/>
                </prop>
                <prop type="object" name="trafficManagementProfile">
                  <prop type="string" name="id" arg="$parameters.properties.trafficManagementProfile.id"/>
                </prop>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="RecordSets_CreateOrUpdate">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}">
          <request method="put">
            <path>
              <param type="string" name="recordType" arg="$Path.recordType" required="True">
                <enum>
                  <item value="&quot;A&quot;"/>
                  <item value="&quot;AAAA&quot;"/>
                  <item value="&quot;CAA&quot;"/>
                  <item value="&quot;CNAME&quot;"/>
                  <item value="&quot;DS&quot;"/>
                  <item value="&quot;MX&quot;"/>
                  <item value="&quot;NAPTR&quot;"/>
                  <item value="&quot;NS&quot;"/>
                  <item value="&quot;PTR&quot;"/>
                  <item value="&quot;SOA&quot;"/>
                  <item value="&quot;SRV&quot;"/>
                  <item value="&quot;TLSA&quot;"/>
                  <item value="&quot;TXT&quot;"/>
                </enum>
              </param>
              <param type="string" name="relativeRecordSetName" arg="$Path.relativeRecordSetName" required="True" skipUrlEncoding="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
              <param type="string" name="zoneName" arg="$Path.zoneName" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-07-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <header>
              <param type="string" name="If-Match" arg="$Header.If-Match"/>
              <param type="string" name="If-None-Match" arg="$Header.If-None-Match"/>
            </header>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@RecordSet_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
