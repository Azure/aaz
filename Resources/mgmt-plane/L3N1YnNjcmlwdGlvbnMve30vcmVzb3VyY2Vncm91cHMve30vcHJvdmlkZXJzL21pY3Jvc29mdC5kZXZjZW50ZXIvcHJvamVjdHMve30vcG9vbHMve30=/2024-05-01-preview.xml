<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devcenter/projects/{}/pools/{}" version="2024-05-01-preview" swagger="mgmt-plane/devcenter/ResourceProviders/Microsoft.DevCenter/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2Q2VudGVyL3Byb2plY3RzL3twcm9qZWN0TmFtZX0vcG9vbHMve3Bvb2xOYW1lfQ==/V/MjAyNC0wNS0wMS1wcmV2aWV3"/>
  <commandGroup name="devcenter admin pool">
    <command name="show" version="2024-05-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devcenter/projects/{}/pools/{}" version="2024-05-01-preview" swagger="mgmt-plane/devcenter/ResourceProviders/Microsoft.DevCenter/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2Q2VudGVyL3Byb2plY3RzL3twcm9qZWN0TmFtZX0vcG9vbHMve3Bvb2xOYW1lfQ==/V/MjAyNC0wNS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.poolName" options="pool-name name n" required="True" idPart="child_name_1">
          <help short="Name of the pool."/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
        </arg>
        <arg type="string" var="$Path.projectName" options="project-name project" required="True" group="" idPart="name">
          <help short="The name of the project. Use `az configure -d project=<project_name>` to configure a default."/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Pools_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/pools/{poolName}">
          <request method="get">
            <path>
              <param type="string" name="poolName" arg="$Path.poolName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="projectName" arg="$Path.projectName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-05-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevCenter/projects/{}/pools/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop readOnly="True" type="integer32" name="devBoxCount"/>
                    <prop type="string" name="devBoxDefinitionName" required="True"/>
                    <prop type="string" name="displayName"/>
                    <prop type="string" name="healthStatus">
                      <enum>
                        <item value="&quot;Healthy&quot;"/>
                        <item value="&quot;Pending&quot;"/>
                        <item value="&quot;Unhealthy&quot;"/>
                        <item value="&quot;Unknown&quot;"/>
                        <item value="&quot;Warning&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="healthStatusDetails" identifiers="code">
                      <item type="object">
                        <prop readOnly="True" type="string" name="code"/>
                        <prop readOnly="True" type="string" name="message"/>
                      </item>
                    </prop>
                    <prop type="string" name="licenseType" required="True">
                      <enum>
                        <item value="&quot;Windows_Client&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="localAdministrator" required="True">
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="array<string>" name="managedVirtualNetworkRegions">
                      <item type="string"/>
                    </prop>
                    <prop type="string" name="networkConnectionName" required="True"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Created&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;MovingResources&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;RolloutInProgress&quot;"/>
                        <item value="&quot;Running&quot;"/>
                        <item value="&quot;StorageProvisioningFailed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;TransientFailure&quot;"/>
                        <item value="&quot;Updated&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="singleSignOnStatus">
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="stopOnDisconnect">
                      <prop type="integer32" name="gracePeriodMinutes"/>
                      <prop type="string" name="status">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="string" name="virtualNetworkType">
                      <enum>
                        <item value="&quot;Managed&quot;"/>
                        <item value="&quot;Unmanaged&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2024-05-01-preview" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devcenter/projects/{}/pools/{}" version="2024-05-01-preview" swagger="mgmt-plane/devcenter/ResourceProviders/Microsoft.DevCenter/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2Q2VudGVyL3Byb2plY3RzL3twcm9qZWN0TmFtZX0vcG9vbHMve3Bvb2xOYW1lfQ==/V/MjAyNC0wNS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.poolName" options="pool-name name n" required="True" idPart="child_name_1">
          <help short="Name of the pool."/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
        </arg>
        <arg type="string" var="$Path.projectName" options="project-name project" required="True" group="" idPart="name">
          <help short="The name of the project. Use `az configure -d project=<project_name>` to configure a default."/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Pools_Delete">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/pools/{poolName}">
          <request method="delete">
            <path>
              <param type="string" name="poolName" arg="$Path.poolName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="projectName" arg="$Path.projectName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-05-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="202">
            <header>
              <item name="Location"/>
            </header>
          </response>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2024-05-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devcenter/projects/{}/pools/{}" version="2024-05-01-preview" swagger="mgmt-plane/devcenter/ResourceProviders/Microsoft.DevCenter/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2Q2VudGVyL3Byb2plY3RzL3twcm9qZWN0TmFtZX0vcG9vbHMve3Bvb2xOYW1lfQ==/V/MjAyNC0wNS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.poolName" options="pool-name name n" required="True" idPart="child_name_1">
          <help short="Name of the pool."/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
        </arg>
        <arg type="string" var="$Path.projectName" options="project-name project" required="True" group="" idPart="name">
          <help short="The name of the project. Use `az configure -d project=<project_name>` to configure a default."/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Body">
        <arg type="ResourceLocation" var="$body.location" options="location l" required="True" group="Body">
          <help short="The geo-location where the resource lives. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=<location>`."/>
        </arg>
        <arg type="object" var="$body.tags" options="tags" group="Body">
          <help short="Resource tags."/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$body.properties.devBoxDefinitionName" options="devbox-definition-name d" group="Properties">
          <help short="Name of a dev box definition in parent project of this pool."/>
        </arg>
        <arg type="string" var="$body.properties.displayName" options="display-name" group="Properties">
          <help short="The display name of the pool."/>
        </arg>
        <arg type="string" var="$body.properties.licenseType" options="license-type" group="Properties">
          <help short="Specifies the license type indicating the caller has already acquired licenses for the dev boxes that will be created."/>
          <default value="&quot;Windows_Client&quot;"/>
          <enum>
            <item name="Windows_Client" value="&quot;Windows_Client&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$body.properties.localAdministrator" options="local-administrator" group="Properties">
          <help short="Indicates whether owners of dev boxes in this pool are added as local administrators on the dev box."/>
          <enum>
            <item name="Disabled" value="&quot;Disabled&quot;"/>
            <item name="Enabled" value="&quot;Enabled&quot;"/>
          </enum>
        </arg>
        <arg type="array<string>" var="$body.properties.managedVirtualNetworkRegions" options="managed-virtual-network-regions" group="Properties">
          <help short="The regions of the managed virtual network (required when managedNetworkType is Managed)."/>
          <item type="string"/>
        </arg>
        <arg type="string" var="$body.properties.networkConnectionName" options="network-connection-name c" group="Properties">
          <help short="Name of a network connection in parent project of this pool."/>
        </arg>
        <arg type="string" var="$body.properties.singleSignOnStatus" options="single-sign-on-status" group="Properties">
          <help short="Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single sign on be enabled on the tenant."/>
          <enum>
            <item name="Disabled" value="&quot;Disabled&quot;"/>
            <item name="Enabled" value="&quot;Enabled&quot;"/>
          </enum>
        </arg>
        <arg type="object" var="$body.properties.stopOnDisconnect" options="stop-on-disconnect" stage="Preview" group="Properties">
          <help short="Stop on disconnect configuration settings for dev boxes created in this pool."/>
          <arg type="integer32" var="$body.properties.stopOnDisconnect.gracePeriodMinutes" options="grace-period-minutes" group="">
            <help short="The specified time in minutes to wait before stopping a dev box once disconnect is detected."/>
          </arg>
          <arg type="string" var="$body.properties.stopOnDisconnect.status" options="status" group="">
            <help short="Whether the feature to stop the dev box on disconnect once the grace period has lapsed is enabled."/>
            <enum>
              <item name="Disabled" value="&quot;Disabled&quot;"/>
              <item name="Enabled" value="&quot;Enabled&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg type="string" var="$body.properties.virtualNetworkType" options="virtual-network-type" group="Properties">
          <help short="Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network."/>
          <enum>
            <item name="Managed" value="&quot;Managed&quot;"/>
            <item name="Unmanaged" value="&quot;Unmanaged&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <operation operationId="Pools_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/pools/{poolName}">
          <request method="put">
            <path>
              <param type="string" name="poolName" arg="$Path.poolName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="projectName" arg="$Path.projectName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-05-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="body" required="True" clientFlatten="True">
                  <prop type="ResourceLocation" name="location" arg="$body.location" required="True"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="string" name="devBoxDefinitionName" arg="$body.properties.devBoxDefinitionName" required="True"/>
                    <prop type="string" name="displayName" arg="$body.properties.displayName"/>
                    <prop type="string" name="licenseType" arg="$body.properties.licenseType" required="True">
                      <enum>
                        <item value="&quot;Windows_Client&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="localAdministrator" arg="$body.properties.localAdministrator" required="True">
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="array<string>" name="managedVirtualNetworkRegions" arg="$body.properties.managedVirtualNetworkRegions">
                      <item type="string"/>
                    </prop>
                    <prop type="string" name="networkConnectionName" arg="$body.properties.networkConnectionName" required="True"/>
                    <prop type="string" name="singleSignOnStatus" arg="$body.properties.singleSignOnStatus">
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="stopOnDisconnect" arg="$body.properties.stopOnDisconnect">
                      <prop type="integer32" name="gracePeriodMinutes" arg="$body.properties.stopOnDisconnect.gracePeriodMinutes"/>
                      <prop type="string" name="status" arg="$body.properties.stopOnDisconnect.status">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="string" name="virtualNetworkType" arg="$body.properties.virtualNetworkType">
                      <enum>
                        <item value="&quot;Managed&quot;"/>
                        <item value="&quot;Unmanaged&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$body.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevCenter/projects/{}/pools/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop readOnly="True" type="integer32" name="devBoxCount"/>
                    <prop type="string" name="devBoxDefinitionName" required="True"/>
                    <prop type="string" name="displayName"/>
                    <prop type="string" name="healthStatus">
                      <enum>
                        <item value="&quot;Healthy&quot;"/>
                        <item value="&quot;Pending&quot;"/>
                        <item value="&quot;Unhealthy&quot;"/>
                        <item value="&quot;Unknown&quot;"/>
                        <item value="&quot;Warning&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="healthStatusDetails" identifiers="code">
                      <item type="object">
                        <prop readOnly="True" type="string" name="code"/>
                        <prop readOnly="True" type="string" name="message"/>
                      </item>
                    </prop>
                    <prop type="string" name="licenseType" required="True">
                      <enum>
                        <item value="&quot;Windows_Client&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="localAdministrator" required="True">
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="array<string>" name="managedVirtualNetworkRegions">
                      <item type="string"/>
                    </prop>
                    <prop type="string" name="networkConnectionName" required="True"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Created&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;MovingResources&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;RolloutInProgress&quot;"/>
                        <item value="&quot;Running&quot;"/>
                        <item value="&quot;StorageProvisioningFailed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;TransientFailure&quot;"/>
                        <item value="&quot;Updated&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="singleSignOnStatus">
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="stopOnDisconnect">
                      <prop type="integer32" name="gracePeriodMinutes"/>
                      <prop type="string" name="status">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="string" name="virtualNetworkType">
                      <enum>
                        <item value="&quot;Managed&quot;"/>
                        <item value="&quot;Unmanaged&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2024-05-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devcenter/projects/{}/pools/{}" version="2024-05-01-preview" swagger="mgmt-plane/devcenter/ResourceProviders/Microsoft.DevCenter/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2Q2VudGVyL3Byb2plY3RzL3twcm9qZWN0TmFtZX0vcG9vbHMve3Bvb2xOYW1lfQ==/V/MjAyNC0wNS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.poolName" options="pool-name name n" required="True" idPart="child_name_1">
          <help short="Name of the pool."/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
        </arg>
        <arg type="string" var="$Path.projectName" options="project-name project" required="True" group="" idPart="name">
          <help short="The name of the project. Use `az configure -d project=<project_name>` to configure a default."/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Body">
        <arg nullable="True" type="object" var="$body.tags" options="tags" group="Body">
          <help short="Resource tags."/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$body.properties.devBoxDefinitionName" options="devbox-definition-name d" group="Properties">
          <help short="Name of a dev box definition in parent project of this pool."/>
        </arg>
        <arg nullable="True" type="string" var="$body.properties.displayName" options="display-name" group="Properties">
          <help short="The display name of the pool."/>
        </arg>
        <arg type="string" var="$body.properties.licenseType" options="license-type" hide="True" group="Properties">
          <help short="Specifies the license type indicating the caller has already acquired licenses for the dev boxes that will be created."/>
          <default value="&quot;Windows_Client&quot;"/>
          <enum>
            <item name="Windows_Client" value="&quot;Windows_Client&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$body.properties.localAdministrator" options="local-administrator" group="Properties">
          <help short="Indicates whether owners of dev boxes in this pool are added as local administrators on the dev box."/>
          <enum>
            <item name="Disabled" value="&quot;Disabled&quot;"/>
            <item name="Enabled" value="&quot;Enabled&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="array<string>" var="$body.properties.managedVirtualNetworkRegions" options="managed-virtual-network-regions" group="Properties">
          <help short="The regions of the managed virtual network (required when managedNetworkType is Managed)."/>
          <item nullable="True" type="string"/>
        </arg>
        <arg type="string" var="$body.properties.networkConnectionName" options="network-connection-name c" group="Properties">
          <help short="Name of a network connection in parent project of this pool."/>
        </arg>
        <arg nullable="True" type="string" var="$body.properties.singleSignOnStatus" options="single-sign-on-status" group="Properties">
          <help short="Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single sign on be enabled on the tenant."/>
          <enum>
            <item name="Disabled" value="&quot;Disabled&quot;"/>
            <item name="Enabled" value="&quot;Enabled&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="object" var="$body.properties.stopOnDisconnect" options="stop-on-disconnect" stage="Preview" group="Properties">
          <help short="Stop on disconnect configuration settings for dev boxes created in this pool."/>
          <arg nullable="True" type="integer32" var="$body.properties.stopOnDisconnect.gracePeriodMinutes" options="grace-period-minutes" group="">
            <help short="The specified time in minutes to wait before stopping a dev box once disconnect is detected."/>
          </arg>
          <arg nullable="True" type="string" var="$body.properties.stopOnDisconnect.status" options="status" group="">
            <help short="Whether the feature to stop the dev box on disconnect once the grace period has lapsed is enabled."/>
            <enum>
              <item name="Disabled" value="&quot;Disabled&quot;"/>
              <item name="Enabled" value="&quot;Enabled&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg nullable="True" type="string" var="$body.properties.virtualNetworkType" options="virtual-network-type" group="Properties">
          <help short="Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network."/>
          <enum>
            <item name="Managed" value="&quot;Managed&quot;"/>
            <item name="Unmanaged" value="&quot;Unmanaged&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <operation operationId="Pools_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/pools/{poolName}">
          <request method="get">
            <path>
              <param type="string" name="poolName" arg="$Path.poolName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="projectName" arg="$Path.projectName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-05-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="Pool_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevCenter/projects/{}/pools/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop readOnly="True" type="integer32" name="devBoxCount"/>
                    <prop type="string" name="devBoxDefinitionName" required="True"/>
                    <prop type="string" name="displayName"/>
                    <prop type="string" name="healthStatus">
                      <enum>
                        <item value="&quot;Healthy&quot;"/>
                        <item value="&quot;Pending&quot;"/>
                        <item value="&quot;Unhealthy&quot;"/>
                        <item value="&quot;Unknown&quot;"/>
                        <item value="&quot;Warning&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="healthStatusDetails" identifiers="code">
                      <item type="object">
                        <prop readOnly="True" type="string" name="code"/>
                        <prop readOnly="True" type="string" name="message"/>
                      </item>
                    </prop>
                    <prop type="string" name="licenseType" required="True">
                      <enum>
                        <item value="&quot;Windows_Client&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="localAdministrator" required="True">
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="array<string>" name="managedVirtualNetworkRegions">
                      <item type="string"/>
                    </prop>
                    <prop type="string" name="networkConnectionName" required="True"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Created&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;MovingResources&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;RolloutInProgress&quot;"/>
                        <item value="&quot;Running&quot;"/>
                        <item value="&quot;StorageProvisioningFailed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;TransientFailure&quot;"/>
                        <item value="&quot;Updated&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="singleSignOnStatus">
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="stopOnDisconnect">
                      <prop type="integer32" name="gracePeriodMinutes"/>
                      <prop type="string" name="status">
                        <enum>
                          <item value="&quot;Disabled&quot;"/>
                          <item value="&quot;Enabled&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="string" name="virtualNetworkType">
                      <enum>
                        <item value="&quot;Managed&quot;"/>
                        <item value="&quot;Unmanaged&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="body" required="True" clientFlatten="True">
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="string" name="devBoxDefinitionName" arg="$body.properties.devBoxDefinitionName" required="True"/>
                <prop type="string" name="displayName" arg="$body.properties.displayName"/>
                <prop type="string" name="licenseType" arg="$body.properties.licenseType" required="True">
                  <enum>
                    <item value="&quot;Windows_Client&quot;"/>
                  </enum>
                </prop>
                <prop type="string" name="localAdministrator" arg="$body.properties.localAdministrator" required="True">
                  <enum>
                    <item value="&quot;Disabled&quot;"/>
                    <item value="&quot;Enabled&quot;"/>
                  </enum>
                </prop>
                <prop type="array<string>" name="managedVirtualNetworkRegions" arg="$body.properties.managedVirtualNetworkRegions">
                  <item type="string"/>
                </prop>
                <prop type="string" name="networkConnectionName" arg="$body.properties.networkConnectionName" required="True"/>
                <prop type="string" name="singleSignOnStatus" arg="$body.properties.singleSignOnStatus">
                  <enum>
                    <item value="&quot;Disabled&quot;"/>
                    <item value="&quot;Enabled&quot;"/>
                  </enum>
                </prop>
                <prop type="object" name="stopOnDisconnect" arg="$body.properties.stopOnDisconnect">
                  <prop type="integer32" name="gracePeriodMinutes" arg="$body.properties.stopOnDisconnect.gracePeriodMinutes"/>
                  <prop type="string" name="status" arg="$body.properties.stopOnDisconnect.status">
                    <enum>
                      <item value="&quot;Disabled&quot;"/>
                      <item value="&quot;Enabled&quot;"/>
                    </enum>
                  </prop>
                </prop>
                <prop type="string" name="virtualNetworkType" arg="$body.properties.virtualNetworkType">
                  <enum>
                    <item value="&quot;Managed&quot;"/>
                    <item value="&quot;Unmanaged&quot;"/>
                  </enum>
                </prop>
              </prop>
              <prop type="object" name="tags" arg="$body.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="Pools_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/pools/{poolName}">
          <request method="put">
            <path>
              <param type="string" name="poolName" arg="$Path.poolName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="projectName" arg="$Path.projectName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$" maxLength="63" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-05-01-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@Pool_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
