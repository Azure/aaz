<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.servicefabricmesh/applications/{}" version="2018-09-01-preview" swagger="mgmt-plane/servicefabricmesh/ResourceProviders/Microsoft.ServiceFabricMesh/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU2VydmljZUZhYnJpY01lc2gvYXBwbGljYXRpb25zL3thcHBsaWNhdGlvblJlc291cmNlTmFtZX0=/V/MjAxOC0wOS0wMS1wcmV2aWV3"/>
  <commandGroup name="mesh app">
    <command name="show" version="2018-09-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.servicefabricmesh/applications/{}" version="2018-09-01-preview" swagger="mgmt-plane/servicefabricmesh/ResourceProviders/Microsoft.ServiceFabricMesh/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU2VydmljZUZhYnJpY01lc2gvYXBwbGljYXRpb25zL3thcHBsaWNhdGlvblJlc291cmNlTmFtZX0=/V/MjAxOC0wOS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.applicationResourceName" options="name n" required="True" group="" idPart="name">
          <help short="The name of the application."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Application_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}">
          <request method="get">
            <path>
              <param type="string" name="applicationResourceName" arg="$Path.applicationResourceName" required="True" skipUrlEncoding="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2018-09-01-preview&quot;"/>
                <enum>
                  <item value="&quot;2018-09-01-preview&quot;"/>
                </enum>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.ServiceFabricMesh/applications/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="string" name="debugParams"/>
                    <prop type="string" name="description"/>
                    <prop type="object" name="diagnostics">
                      <prop type="array<string>" name="defaultSinkRefs">
                        <item type="string"/>
                      </prop>
                      <prop type="boolean" name="enabled"/>
                      <prop type="array<object>" name="sinks">
                        <item type="object">
                          <prop type="string" name="description"/>
                          <prop type="string" name="kind" required="True">
                            <enum>
                              <item value="&quot;AzureInternalMonitoringPipeline&quot;"/>
                              <item value="&quot;Invalid&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="name"/>
                          <discriminator property="kind" value="AzureInternalMonitoringPipeline">
                            <prop type="string" name="accountName"/>
                            <prop type="string" name="autoKeyConfigUrl"/>
                            <prop type="string" name="fluentdConfigUrl"/>
                            <prop type="string" name="maConfigUrl"/>
                            <prop type="string" name="namespace"/>
                          </discriminator>
                        </item>
                      </prop>
                    </prop>
                    <prop type="string" name="healthState">
                      <enum>
                        <item value="&quot;Error&quot;"/>
                        <item value="&quot;Invalid&quot;"/>
                        <item value="&quot;Ok&quot;"/>
                        <item value="&quot;Unknown&quot;"/>
                        <item value="&quot;Warning&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop readOnly="True" type="array<string>" name="serviceNames">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="services">
                      <item type="object">
                        <prop readOnly="True" type="ResourceId" name="id">
                          <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.ServiceFabricMesh/applications/{}/services/{}"/>
                        </prop>
                        <prop type="string" name="name"/>
                        <prop type="object" name="properties" required="True" clientFlatten="True">
                          <prop type="array<object>" name="autoScalingPolicies">
                            <item type="object">
                              <prop type="object" name="mechanism" required="True">
                                <prop type="string" name="kind" required="True">
                                  <enum>
                                    <item value="&quot;AddRemoveReplica&quot;"/>
                                  </enum>
                                </prop>
                                <discriminator property="kind" value="AddRemoveReplica">
                                  <prop type="integer" name="maxCount" required="True"/>
                                  <prop type="integer" name="minCount" required="True"/>
                                  <prop type="integer" name="scaleIncrement" required="True"/>
                                </discriminator>
                              </prop>
                              <prop type="string" name="name" required="True"/>
                              <prop type="object" name="trigger" required="True">
                                <prop type="string" name="kind" required="True">
                                  <enum>
                                    <item value="&quot;AverageLoad&quot;"/>
                                  </enum>
                                </prop>
                                <discriminator property="kind" value="AverageLoad">
                                  <prop type="float64" name="lowerLoadThreshold" required="True"/>
                                  <prop type="object" name="metric" required="True">
                                    <prop type="string" name="kind" required="True">
                                      <enum>
                                        <item value="&quot;Resource&quot;"/>
                                      </enum>
                                    </prop>
                                    <discriminator property="kind" value="Resource">
                                      <prop type="string" name="name" required="True">
                                        <enum>
                                          <item value="&quot;cpu&quot;"/>
                                          <item value="&quot;memoryInGB&quot;"/>
                                        </enum>
                                      </prop>
                                    </discriminator>
                                  </prop>
                                  <prop type="integer" name="scaleIntervalInSeconds" required="True">
                                    <format minimum="60"/>
                                  </prop>
                                  <prop type="float64" name="upperLoadThreshold" required="True"/>
                                </discriminator>
                              </prop>
                            </item>
                          </prop>
                          <prop type="array<object>" name="codePackages" required="True">
                            <item type="object">
                              <prop type="array<string>" name="commands">
                                <item type="string"/>
                              </prop>
                              <prop type="object" name="diagnostics" cls="DiagnosticsRef_read">
                                <prop type="boolean" name="enabled"/>
                                <prop type="array<string>" name="sinkRefs">
                                  <item type="string"/>
                                </prop>
                              </prop>
                              <prop type="array<object>" name="endpoints">
                                <item type="object">
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="integer" name="port"/>
                                </item>
                              </prop>
                              <prop type="string" name="entrypoint"/>
                              <prop type="array<object>" name="environmentVariables">
                                <item type="object">
                                  <prop type="string" name="name"/>
                                  <prop type="string" name="value"/>
                                </item>
                              </prop>
                              <prop type="string" name="image" required="True"/>
                              <prop type="object" name="imageRegistryCredential">
                                <prop type="string" name="password"/>
                                <prop type="string" name="server" required="True"/>
                                <prop type="string" name="username" required="True"/>
                              </prop>
                              <prop type="object" name="instanceView">
                                <prop type="object" name="currentState" cls="ContainerState_read">
                                  <prop type="string" name="detailStatus"/>
                                  <prop type="string" name="exitCode"/>
                                  <prop type="dateTime" name="finishTime"/>
                                  <prop type="dateTime" name="startTime"/>
                                  <prop type="string" name="state"/>
                                </prop>
                                <prop type="array<object>" name="events">
                                  <item type="object">
                                    <prop type="integer" name="count"/>
                                    <prop type="string" name="firstTimestamp"/>
                                    <prop type="string" name="lastTimestamp"/>
                                    <prop type="string" name="message"/>
                                    <prop type="string" name="name"/>
                                    <prop type="string" name="type"/>
                                  </item>
                                </prop>
                                <prop type="@ContainerState_read" name="previousState"/>
                                <prop type="integer" name="restartCount"/>
                              </prop>
                              <prop type="array<object>" name="labels">
                                <item type="object">
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="string" name="value" required="True"/>
                                </item>
                              </prop>
                              <prop type="string" name="name" required="True"/>
                              <prop type="array<object>" name="reliableCollectionsRefs">
                                <item type="object">
                                  <prop type="boolean" name="doNotPersistState"/>
                                  <prop type="string" name="name" required="True"/>
                                </item>
                              </prop>
                              <prop type="object" name="resources" required="True">
                                <prop type="object" name="limits">
                                  <prop type="float64" name="cpu"/>
                                  <prop type="float64" name="memoryInGB"/>
                                </prop>
                                <prop type="object" name="requests" required="True">
                                  <prop type="float64" name="cpu" required="True"/>
                                  <prop type="float64" name="memoryInGB" required="True"/>
                                </prop>
                              </prop>
                              <prop type="array<object>" name="settings">
                                <item type="object">
                                  <prop type="string" name="name"/>
                                  <prop type="string" name="value"/>
                                </item>
                              </prop>
                              <prop type="array<object>" name="volumeRefs">
                                <item type="object">
                                  <prop type="string" name="destinationPath" required="True"/>
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="boolean" name="readOnly"/>
                                </item>
                              </prop>
                              <prop type="array<object>" name="volumes">
                                <item type="object">
                                  <prop type="object" name="creationParameters" required="True">
                                    <prop type="string" name="description"/>
                                    <prop type="string" name="kind" required="True">
                                      <enum>
                                        <item value="&quot;ServiceFabricVolumeDisk&quot;"/>
                                      </enum>
                                    </prop>
                                    <discriminator property="kind" value="ServiceFabricVolumeDisk">
                                      <prop type="string" name="sizeDisk" required="True">
                                        <enum>
                                          <item value="&quot;Large&quot;"/>
                                          <item value="&quot;Medium&quot;"/>
                                          <item value="&quot;Small&quot;"/>
                                        </enum>
                                      </prop>
                                    </discriminator>
                                  </prop>
                                  <prop type="string" name="destinationPath" required="True"/>
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="boolean" name="readOnly"/>
                                </item>
                              </prop>
                            </item>
                          </prop>
                          <prop type="string" name="description"/>
                          <prop type="@DiagnosticsRef_read" name="diagnostics"/>
                          <prop type="string" name="healthState">
                            <enum>
                              <item value="&quot;Error&quot;"/>
                              <item value="&quot;Invalid&quot;"/>
                              <item value="&quot;Ok&quot;"/>
                              <item value="&quot;Unknown&quot;"/>
                              <item value="&quot;Warning&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<object>" name="networkRefs">
                            <item type="object">
                              <prop type="array<object>" name="endpointRefs">
                                <item type="object">
                                  <prop type="string" name="name"/>
                                </item>
                              </prop>
                              <prop type="string" name="name"/>
                            </item>
                          </prop>
                          <prop type="string" name="osType" required="True">
                            <enum>
                              <item value="&quot;Linux&quot;"/>
                              <item value="&quot;Windows&quot;"/>
                            </enum>
                          </prop>
                          <prop readOnly="True" type="string" name="provisioningState"/>
                          <prop type="integer" name="replicaCount"/>
                          <prop type="string" name="status">
                            <enum>
                              <item value="&quot;Creating&quot;"/>
                              <item value="&quot;Deleting&quot;"/>
                              <item value="&quot;Failed&quot;"/>
                              <item value="&quot;Ready&quot;"/>
                              <item value="&quot;Unknown&quot;"/>
                              <item value="&quot;Upgrading&quot;"/>
                            </enum>
                          </prop>
                          <prop readOnly="True" type="string" name="statusDetails"/>
                          <prop readOnly="True" type="string" name="unhealthyEvaluation"/>
                        </prop>
                        <prop readOnly="True" type="string" name="type"/>
                      </item>
                    </prop>
                    <prop type="string" name="status">
                      <enum>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Ready&quot;"/>
                        <item value="&quot;Unknown&quot;"/>
                        <item value="&quot;Upgrading&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="statusDetails"/>
                    <prop readOnly="True" type="string" name="unhealthyEvaluation"/>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2018-09-01-preview" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.servicefabricmesh/applications/{}" version="2018-09-01-preview" swagger="mgmt-plane/servicefabricmesh/ResourceProviders/Microsoft.ServiceFabricMesh/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU2VydmljZUZhYnJpY01lc2gvYXBwbGljYXRpb25zL3thcHBsaWNhdGlvblJlc291cmNlTmFtZX0=/V/MjAxOC0wOS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.applicationResourceName" options="name n" required="True" group="" idPart="name">
          <help short="The name of the application."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Application_Delete">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}">
          <request method="delete">
            <path>
              <param type="string" name="applicationResourceName" arg="$Path.applicationResourceName" required="True" skipUrlEncoding="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2018-09-01-preview&quot;"/>
                <enum>
                  <item value="&quot;2018-09-01-preview&quot;"/>
                </enum>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="202"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2018-09-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.servicefabricmesh/applications/{}" version="2018-09-01-preview" swagger="mgmt-plane/servicefabricmesh/ResourceProviders/Microsoft.ServiceFabricMesh/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU2VydmljZUZhYnJpY01lc2gvYXBwbGljYXRpb25zL3thcHBsaWNhdGlvblJlc291cmNlTmFtZX0=/V/MjAxOC0wOS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.applicationResourceName" options="name n" required="True" group="" idPart="name">
          <help short="The name of the application."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="ApplicationResourceDescription">
        <arg type="ResourceLocation" var="$applicationResourceDescription.location" options="location l" required="True" group="ApplicationResourceDescription">
          <help short="The geo-location where the resource lives"/>
        </arg>
        <arg type="object" var="$applicationResourceDescription.tags" options="tags" group="ApplicationResourceDescription">
          <help short="Resource tags."/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$applicationResourceDescription.properties.debugParams" options="debug-params" group="Properties">
          <help short="Internal - used by Visual Studio to setup the debugging session on the local development environment."/>
        </arg>
        <arg type="string" var="$applicationResourceDescription.properties.description" options="description" group="Properties">
          <help short="User readable description of the application."/>
        </arg>
        <arg type="object" var="$applicationResourceDescription.properties.diagnostics" options="diagnostics" group="Properties">
          <help short="Describes the diagnostics definition and usage for an application resource."/>
          <arg type="array<string>" var="$applicationResourceDescription.properties.diagnostics.defaultSinkRefs" options="default-sink-refs">
            <help short="The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level."/>
            <item type="string"/>
          </arg>
          <arg type="boolean" var="$applicationResourceDescription.properties.diagnostics.enabled" options="enabled">
            <help short="Status of whether or not sinks are enabled."/>
          </arg>
          <arg type="array<object>" var="$applicationResourceDescription.properties.diagnostics.sinks" options="sinks">
            <help short="List of supported sinks that can be referenced."/>
            <item type="object">
              <arg type="object" var="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline" options="azure-internal-monitoring-pipeline">
                <arg type="string" var="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.accountName" options="account-name">
                  <help short="Azure Internal monitoring pipeline account."/>
                </arg>
                <arg type="string" var="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.autoKeyConfigUrl" options="auto-key-config-url">
                  <help short="Azure Internal monitoring pipeline autokey associated with the certificate."/>
                </arg>
                <arg type="string" var="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.fluentdConfigUrl" options="fluentd-config-url">
                  <help short="Azure Internal monitoring agent fluentd configuration."/>
                </arg>
                <arg type="string" var="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.maConfigUrl" options="ma-config-url">
                  <help short="Azure Internal monitoring agent configuration."/>
                </arg>
                <arg type="string" var="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.namespace" options="namespace">
                  <help short="Azure Internal monitoring pipeline account namespace."/>
                </arg>
              </arg>
              <arg type="string" var="$applicationResourceDescription.properties.diagnostics.sinks[].description" options="description">
                <help short="A description of the sink."/>
              </arg>
              <arg type="string" var="$applicationResourceDescription.properties.diagnostics.sinks[].name" options="name">
                <help short="Name of the sink. This value is referenced by DiagnosticsReferenceDescription"/>
              </arg>
            </item>
          </arg>
        </arg>
        <arg type="array<object>" var="$applicationResourceDescription.properties.services" options="services" group="Properties">
          <help short="Describes the services in the application. This property is used to create or modify services of the application. On get only the name of the service is returned. The service description can be obtained by querying for the service resource."/>
          <item type="object">
            <arg type="string" var="$applicationResourceDescription.properties.services[].name" options="name">
              <help short="The name of the resource"/>
            </arg>
            <arg type="array<object>" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies" options="auto-scaling-policies" group="Properties">
              <help short="Auto scaling policies"/>
              <item type="object">
                <arg type="object" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism" options="mechanism" required="True">
                  <help short="The mechanism that is used to scale when auto scaling operation is invoked."/>
                  <arg type="object" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica" options="add-remove-replica">
                    <arg type="integer" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica.maxCount" options="max-count" required="True">
                      <help short="Maximum number of containers (scale up won't be performed above this number)."/>
                    </arg>
                    <arg type="integer" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica.minCount" options="min-count" required="True">
                      <help short="Minimum number of containers (scale down won't be performed below this number)."/>
                    </arg>
                    <arg type="integer" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica.scaleIncrement" options="scale-increment" required="True">
                      <help short="Each time auto scaling is performed, this number of containers will be added or removed."/>
                    </arg>
                  </arg>
                </arg>
                <arg type="string" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].name" options="name" required="True">
                  <help short="The name of the auto scaling policy."/>
                </arg>
                <arg type="object" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger" options="trigger" required="True">
                  <help short="Determines when auto scaling operation will be invoked."/>
                  <arg type="object" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad" options="average-load">
                    <arg type="float64" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.lowerLoadThreshold" options="lower-load-threshold" required="True">
                      <help short="Lower load threshold (if average load is below this threshold, service will scale down)."/>
                    </arg>
                    <arg type="object" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.metric" options="metric" required="True">
                      <help short="Description of the metric that is used for scaling."/>
                      <arg type="object" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.metric.Resource" options="resource">
                        <arg type="string" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.metric.Resource.name" options="name" required="True">
                          <help short="Name of the resource."/>
                          <enum>
                            <item name="cpu" value="&quot;cpu&quot;"/>
                            <item name="memoryInGB" value="&quot;memoryInGB&quot;"/>
                          </enum>
                        </arg>
                      </arg>
                    </arg>
                    <arg type="integer" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.scaleIntervalInSeconds" options="scale-interval-in-seconds" required="True">
                      <help short="Scale interval that indicates how often will this trigger be checked."/>
                      <format minimum="60"/>
                    </arg>
                    <arg type="float64" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.upperLoadThreshold" options="upper-load-threshold" required="True">
                      <help short="Upper load threshold (if average load is above this threshold, service will scale up)."/>
                    </arg>
                  </arg>
                </arg>
              </item>
            </arg>
            <arg type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages" options="code-packages" required="True" group="Properties">
              <help short="Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.)."/>
              <item type="object">
                <arg type="array<string>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].commands" options="commands">
                  <help short="Command array to execute within the container in exec form."/>
                  <item type="string"/>
                </arg>
                <arg type="object" var="$applicationResourceDescription.properties.services[].properties.codePackages[].diagnostics" options="diagnostics" cls="DiagnosticsRef_create">
                  <help short="Reference to sinks in DiagnosticsDescription."/>
                  <arg type="boolean" var="@DiagnosticsRef_create.enabled" options="enabled">
                    <help short="Status of whether or not sinks are enabled."/>
                  </arg>
                  <arg type="array<string>" var="@DiagnosticsRef_create.sinkRefs" options="sink-refs">
                    <help short="List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription."/>
                    <item type="string"/>
                  </arg>
                </arg>
                <arg type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].endpoints" options="endpoints">
                  <help short="The endpoints exposed by this container."/>
                  <item type="object">
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].endpoints[].name" options="name" required="True">
                      <help short="The name of the endpoint."/>
                    </arg>
                    <arg type="integer" var="$applicationResourceDescription.properties.services[].properties.codePackages[].endpoints[].port" options="port">
                      <help short="Port used by the container."/>
                    </arg>
                  </item>
                </arg>
                <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].entrypoint" options="entrypoint">
                  <help short="Override for the default entry point in the container."/>
                </arg>
                <arg type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].environmentVariables" options="environment-variables">
                  <help short="The environment variables to set in this container"/>
                  <item type="object">
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].environmentVariables[].name" options="name">
                      <help short="The name of the environment variable."/>
                    </arg>
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].environmentVariables[].value" options="value">
                      <help short="The value of the environment variable."/>
                    </arg>
                  </item>
                </arg>
                <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].image" options="image" required="True">
                  <help short="The Container image to use."/>
                </arg>
                <arg type="object" var="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential" options="image-registry-credential">
                  <help short="Image registry credential."/>
                  <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential.password" options="password">
                    <help short="The password for the private registry. The password is required for create or update operations, however it is not returned in the get or list operations."/>
                  </arg>
                  <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential.server" options="server" required="True">
                    <help short="Docker image registry server, without protocol such as `http` and `https`."/>
                  </arg>
                  <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential.username" options="username" required="True">
                    <help short="The username for the private registry."/>
                  </arg>
                </arg>
                <arg type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].labels" options="labels">
                  <help short="The labels to set in this container."/>
                  <item type="object">
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].labels[].name" options="name" required="True">
                      <help short="The name of the container label."/>
                    </arg>
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].labels[].value" options="value" required="True">
                      <help short="The value of the container label."/>
                    </arg>
                  </item>
                </arg>
                <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].name" options="name" required="True">
                  <help short="The name of the code package."/>
                </arg>
                <arg type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].reliableCollectionsRefs" options="reliable-collections-refs">
                  <help short="A list of ReliableCollection resources used by this particular code package. Please refer to ReliableCollectionsRef for more details."/>
                  <item type="object">
                    <arg type="boolean" var="$applicationResourceDescription.properties.services[].properties.codePackages[].reliableCollectionsRefs[].doNotPersistState" options="do-not-persist-state">
                      <help short="False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache."/>
                    </arg>
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].reliableCollectionsRefs[].name" options="name" required="True">
                      <help short="Name of ReliableCollection resource. Right now it's not used and you can use any string."/>
                    </arg>
                  </item>
                </arg>
                <arg type="object" var="$applicationResourceDescription.properties.services[].properties.codePackages[].resources" options="resources" required="True">
                  <help short="The resources required by this container."/>
                  <arg type="object" var="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.limits" options="limits">
                    <help short="Describes the maximum limits on the resources for a given container."/>
                    <arg type="float64" var="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.limits.cpu" options="cpu">
                      <help short="CPU limits in cores. At present, only full cores are supported."/>
                    </arg>
                    <arg type="float64" var="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.limits.memoryInGB" options="memory-in-gb">
                      <help short="The memory limit in GB."/>
                    </arg>
                  </arg>
                  <arg type="object" var="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.requests" options="requests" required="True">
                    <help short="Describes the requested resources for a given container."/>
                    <arg type="float64" var="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.requests.cpu" options="cpu" required="True">
                      <help short="Requested number of CPU cores. At present, only full cores are supported."/>
                    </arg>
                    <arg type="float64" var="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.requests.memoryInGB" options="memory-in-gb" required="True">
                      <help short="The memory request in GB for this container."/>
                    </arg>
                  </arg>
                </arg>
                <arg type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].settings" options="settings">
                  <help short="The settings to set in this container. The setting file path can be fetched from environment variable &quot;Fabric_SettingPath&quot;. The path for Windows container is &quot;C:\\secrets&quot;. The path for Linux container is &quot;/var/secrets&quot;."/>
                  <item type="object">
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].settings[].name" options="name">
                      <help short="The name of the setting."/>
                    </arg>
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].settings[].value" options="value">
                      <help short="The value of the setting."/>
                    </arg>
                  </item>
                </arg>
                <arg type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs" options="volume-refs">
                  <help short="Volumes to be attached to the container. The lifetime of these volumes is independent of the application's lifetime."/>
                  <item type="object">
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs[].destinationPath" options="destination-path" required="True">
                      <help short="The path within the container at which the volume should be mounted. Only valid path characters are allowed."/>
                    </arg>
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs[].name" options="name" required="True">
                      <help short="Name of the volume being referenced."/>
                    </arg>
                    <arg type="boolean" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs[].readOnly" options="read-only">
                      <help short="The flag indicating whether the volume is read only. Default is 'false'."/>
                    </arg>
                  </item>
                </arg>
                <arg type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes" options="volumes">
                  <help short="Volumes to be attached to the container. The lifetime of these volumes is scoped to the application's lifetime."/>
                  <item type="object">
                    <arg type="object" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters" options="creation-parameters" required="True">
                      <help short="Describes parameters for creating application-scoped volumes."/>
                      <arg type="object" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters.ServiceFabricVolumeDisk" options="service-fabric-volume-disk">
                        <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters.ServiceFabricVolumeDisk.sizeDisk" options="size-disk" required="True">
                          <help short="Volume size"/>
                          <enum>
                            <item name="Large" value="&quot;Large&quot;"/>
                            <item name="Medium" value="&quot;Medium&quot;"/>
                            <item name="Small" value="&quot;Small&quot;"/>
                          </enum>
                        </arg>
                      </arg>
                      <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters.description" options="description">
                        <help short="User readable description of the volume."/>
                      </arg>
                    </arg>
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].destinationPath" options="destination-path" required="True">
                      <help short="The path within the container at which the volume should be mounted. Only valid path characters are allowed."/>
                    </arg>
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].name" options="name" required="True">
                      <help short="Name of the volume being referenced."/>
                    </arg>
                    <arg type="boolean" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].readOnly" options="read-only">
                      <help short="The flag indicating whether the volume is read only. Default is 'false'."/>
                    </arg>
                  </item>
                </arg>
              </item>
            </arg>
            <arg type="string" var="$applicationResourceDescription.properties.services[].properties.description" options="description" group="Properties">
              <help short="User readable description of the service."/>
            </arg>
            <arg type="@DiagnosticsRef_create" var="$applicationResourceDescription.properties.services[].properties.diagnostics" options="diagnostics" group="Properties">
              <help short="Reference to sinks in DiagnosticsDescription."/>
            </arg>
            <arg type="array<object>" var="$applicationResourceDescription.properties.services[].properties.networkRefs" options="network-refs" group="Properties">
              <help short="The names of the private networks that this service needs to be part of."/>
              <item type="object">
                <arg type="array<object>" var="$applicationResourceDescription.properties.services[].properties.networkRefs[].endpointRefs" options="endpoint-refs">
                  <help short="A list of endpoints that are exposed on this network."/>
                  <item type="object">
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.networkRefs[].endpointRefs[].name" options="name">
                      <help short="Name of the endpoint."/>
                    </arg>
                  </item>
                </arg>
                <arg type="string" var="$applicationResourceDescription.properties.services[].properties.networkRefs[].name" options="name">
                  <help short="Name of the network"/>
                </arg>
              </item>
            </arg>
            <arg type="string" var="$applicationResourceDescription.properties.services[].properties.osType" options="os-type" required="True" group="Properties">
              <help short="The operation system required by the code in service."/>
              <enum>
                <item name="Linux" value="&quot;Linux&quot;"/>
                <item name="Windows" value="&quot;Windows&quot;"/>
              </enum>
            </arg>
            <arg type="integer" var="$applicationResourceDescription.properties.services[].properties.replicaCount" options="replica-count" group="Properties">
              <help short="The number of replicas of the service to create. Defaults to 1 if not specified."/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <operation operationId="Application_Create">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}">
          <request method="put">
            <path>
              <param type="string" name="applicationResourceName" arg="$Path.applicationResourceName" required="True" skipUrlEncoding="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2018-09-01-preview&quot;"/>
                <enum>
                  <item value="&quot;2018-09-01-preview&quot;"/>
                </enum>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="applicationResourceDescription" required="True" clientFlatten="True">
                  <prop type="ResourceLocation" name="location" arg="$applicationResourceDescription.location" required="True"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="string" name="debugParams" arg="$applicationResourceDescription.properties.debugParams"/>
                    <prop type="string" name="description" arg="$applicationResourceDescription.properties.description"/>
                    <prop type="object" name="diagnostics" arg="$applicationResourceDescription.properties.diagnostics">
                      <prop type="array<string>" name="defaultSinkRefs" arg="$applicationResourceDescription.properties.diagnostics.defaultSinkRefs">
                        <item type="string"/>
                      </prop>
                      <prop type="boolean" name="enabled" arg="$applicationResourceDescription.properties.diagnostics.enabled"/>
                      <prop type="array<object>" name="sinks" arg="$applicationResourceDescription.properties.diagnostics.sinks">
                        <item type="object">
                          <prop type="string" name="description" arg="$applicationResourceDescription.properties.diagnostics.sinks[].description"/>
                          <prop type="string" name="kind" required="True">
                            <enum>
                              <item arg="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline" value="&quot;AzureInternalMonitoringPipeline&quot;"/>
                              <item value="&quot;Invalid&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="name" arg="$applicationResourceDescription.properties.diagnostics.sinks[].name"/>
                          <discriminator property="kind" value="AzureInternalMonitoringPipeline">
                            <prop type="string" name="accountName" arg="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.accountName"/>
                            <prop type="string" name="autoKeyConfigUrl" arg="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.autoKeyConfigUrl"/>
                            <prop type="string" name="fluentdConfigUrl" arg="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.fluentdConfigUrl"/>
                            <prop type="string" name="maConfigUrl" arg="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.maConfigUrl"/>
                            <prop type="string" name="namespace" arg="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.namespace"/>
                          </discriminator>
                        </item>
                      </prop>
                    </prop>
                    <prop type="array<object>" name="services" arg="$applicationResourceDescription.properties.services">
                      <item type="object">
                        <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].name"/>
                        <prop type="object" name="properties" required="True" clientFlatten="True">
                          <prop type="array<object>" name="autoScalingPolicies" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies">
                            <item type="object">
                              <prop type="object" name="mechanism" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism" required="True">
                                <prop type="string" name="kind" required="True">
                                  <enum>
                                    <item arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica" value="&quot;AddRemoveReplica&quot;"/>
                                  </enum>
                                </prop>
                                <discriminator property="kind" value="AddRemoveReplica">
                                  <prop type="integer" name="maxCount" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica.maxCount" required="True"/>
                                  <prop type="integer" name="minCount" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica.minCount" required="True"/>
                                  <prop type="integer" name="scaleIncrement" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica.scaleIncrement" required="True"/>
                                </discriminator>
                              </prop>
                              <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].name" required="True"/>
                              <prop type="object" name="trigger" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger" required="True">
                                <prop type="string" name="kind" required="True">
                                  <enum>
                                    <item arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad" value="&quot;AverageLoad&quot;"/>
                                  </enum>
                                </prop>
                                <discriminator property="kind" value="AverageLoad">
                                  <prop type="float64" name="lowerLoadThreshold" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.lowerLoadThreshold" required="True"/>
                                  <prop type="object" name="metric" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.metric" required="True">
                                    <prop type="string" name="kind" required="True">
                                      <enum>
                                        <item arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.metric.Resource" value="&quot;Resource&quot;"/>
                                      </enum>
                                    </prop>
                                    <discriminator property="kind" value="Resource">
                                      <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.metric.Resource.name" required="True">
                                        <enum>
                                          <item value="&quot;cpu&quot;"/>
                                          <item value="&quot;memoryInGB&quot;"/>
                                        </enum>
                                      </prop>
                                    </discriminator>
                                  </prop>
                                  <prop type="integer" name="scaleIntervalInSeconds" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.scaleIntervalInSeconds" required="True">
                                    <format minimum="60"/>
                                  </prop>
                                  <prop type="float64" name="upperLoadThreshold" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.upperLoadThreshold" required="True"/>
                                </discriminator>
                              </prop>
                            </item>
                          </prop>
                          <prop type="array<object>" name="codePackages" arg="$applicationResourceDescription.properties.services[].properties.codePackages" required="True">
                            <item type="object">
                              <prop type="array<string>" name="commands" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].commands">
                                <item type="string"/>
                              </prop>
                              <prop type="object" name="diagnostics" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].diagnostics" cls="DiagnosticsRef_create">
                                <prop type="boolean" name="enabled" arg="@DiagnosticsRef_create.enabled"/>
                                <prop type="array<string>" name="sinkRefs" arg="@DiagnosticsRef_create.sinkRefs">
                                  <item type="string"/>
                                </prop>
                              </prop>
                              <prop type="array<object>" name="endpoints" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].endpoints">
                                <item type="object">
                                  <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].endpoints[].name" required="True"/>
                                  <prop type="integer" name="port" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].endpoints[].port"/>
                                </item>
                              </prop>
                              <prop type="string" name="entrypoint" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].entrypoint"/>
                              <prop type="array<object>" name="environmentVariables" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].environmentVariables">
                                <item type="object">
                                  <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].environmentVariables[].name"/>
                                  <prop type="string" name="value" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].environmentVariables[].value"/>
                                </item>
                              </prop>
                              <prop type="string" name="image" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].image" required="True"/>
                              <prop type="object" name="imageRegistryCredential" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential">
                                <prop type="string" name="password" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential.password"/>
                                <prop type="string" name="server" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential.server" required="True"/>
                                <prop type="string" name="username" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential.username" required="True"/>
                              </prop>
                              <prop type="array<object>" name="labels" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].labels">
                                <item type="object">
                                  <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].labels[].name" required="True"/>
                                  <prop type="string" name="value" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].labels[].value" required="True"/>
                                </item>
                              </prop>
                              <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].name" required="True"/>
                              <prop type="array<object>" name="reliableCollectionsRefs" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].reliableCollectionsRefs">
                                <item type="object">
                                  <prop type="boolean" name="doNotPersistState" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].reliableCollectionsRefs[].doNotPersistState"/>
                                  <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].reliableCollectionsRefs[].name" required="True"/>
                                </item>
                              </prop>
                              <prop type="object" name="resources" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].resources" required="True">
                                <prop type="object" name="limits" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.limits">
                                  <prop type="float64" name="cpu" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.limits.cpu"/>
                                  <prop type="float64" name="memoryInGB" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.limits.memoryInGB"/>
                                </prop>
                                <prop type="object" name="requests" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.requests" required="True">
                                  <prop type="float64" name="cpu" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.requests.cpu" required="True"/>
                                  <prop type="float64" name="memoryInGB" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.requests.memoryInGB" required="True"/>
                                </prop>
                              </prop>
                              <prop type="array<object>" name="settings" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].settings">
                                <item type="object">
                                  <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].settings[].name"/>
                                  <prop type="string" name="value" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].settings[].value"/>
                                </item>
                              </prop>
                              <prop type="array<object>" name="volumeRefs" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs">
                                <item type="object">
                                  <prop type="string" name="destinationPath" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs[].destinationPath" required="True"/>
                                  <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs[].name" required="True"/>
                                  <prop type="boolean" name="readOnly" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs[].readOnly"/>
                                </item>
                              </prop>
                              <prop type="array<object>" name="volumes" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes">
                                <item type="object">
                                  <prop type="object" name="creationParameters" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters" required="True">
                                    <prop type="string" name="description" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters.description"/>
                                    <prop type="string" name="kind" required="True">
                                      <enum>
                                        <item arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters.ServiceFabricVolumeDisk" value="&quot;ServiceFabricVolumeDisk&quot;"/>
                                      </enum>
                                    </prop>
                                    <discriminator property="kind" value="ServiceFabricVolumeDisk">
                                      <prop type="string" name="sizeDisk" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters.ServiceFabricVolumeDisk.sizeDisk" required="True">
                                        <enum>
                                          <item value="&quot;Large&quot;"/>
                                          <item value="&quot;Medium&quot;"/>
                                          <item value="&quot;Small&quot;"/>
                                        </enum>
                                      </prop>
                                    </discriminator>
                                  </prop>
                                  <prop type="string" name="destinationPath" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].destinationPath" required="True"/>
                                  <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].name" required="True"/>
                                  <prop type="boolean" name="readOnly" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].readOnly"/>
                                </item>
                              </prop>
                            </item>
                          </prop>
                          <prop type="string" name="description" arg="$applicationResourceDescription.properties.services[].properties.description"/>
                          <prop type="@DiagnosticsRef_create" name="diagnostics" arg="$applicationResourceDescription.properties.services[].properties.diagnostics"/>
                          <prop type="array<object>" name="networkRefs" arg="$applicationResourceDescription.properties.services[].properties.networkRefs">
                            <item type="object">
                              <prop type="array<object>" name="endpointRefs" arg="$applicationResourceDescription.properties.services[].properties.networkRefs[].endpointRefs">
                                <item type="object">
                                  <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.networkRefs[].endpointRefs[].name"/>
                                </item>
                              </prop>
                              <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.networkRefs[].name"/>
                            </item>
                          </prop>
                          <prop type="string" name="osType" arg="$applicationResourceDescription.properties.services[].properties.osType" required="True">
                            <enum>
                              <item value="&quot;Linux&quot;"/>
                              <item value="&quot;Windows&quot;"/>
                            </enum>
                          </prop>
                          <prop type="integer" name="replicaCount" arg="$applicationResourceDescription.properties.services[].properties.replicaCount"/>
                        </prop>
                      </item>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$applicationResourceDescription.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.ServiceFabricMesh/applications/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="string" name="debugParams"/>
                    <prop type="string" name="description"/>
                    <prop type="object" name="diagnostics">
                      <prop type="array<string>" name="defaultSinkRefs">
                        <item type="string"/>
                      </prop>
                      <prop type="boolean" name="enabled"/>
                      <prop type="array<object>" name="sinks">
                        <item type="object">
                          <prop type="string" name="description"/>
                          <prop type="string" name="kind" required="True">
                            <enum>
                              <item value="&quot;AzureInternalMonitoringPipeline&quot;"/>
                              <item value="&quot;Invalid&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="name"/>
                          <discriminator property="kind" value="AzureInternalMonitoringPipeline">
                            <prop type="string" name="accountName"/>
                            <prop type="string" name="autoKeyConfigUrl"/>
                            <prop type="string" name="fluentdConfigUrl"/>
                            <prop type="string" name="maConfigUrl"/>
                            <prop type="string" name="namespace"/>
                          </discriminator>
                        </item>
                      </prop>
                    </prop>
                    <prop type="string" name="healthState">
                      <enum>
                        <item value="&quot;Error&quot;"/>
                        <item value="&quot;Invalid&quot;"/>
                        <item value="&quot;Ok&quot;"/>
                        <item value="&quot;Unknown&quot;"/>
                        <item value="&quot;Warning&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop readOnly="True" type="array<string>" name="serviceNames">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="services">
                      <item type="object">
                        <prop readOnly="True" type="ResourceId" name="id">
                          <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.ServiceFabricMesh/applications/{}/services/{}"/>
                        </prop>
                        <prop type="string" name="name"/>
                        <prop type="object" name="properties" required="True" clientFlatten="True">
                          <prop type="array<object>" name="autoScalingPolicies">
                            <item type="object">
                              <prop type="object" name="mechanism" required="True">
                                <prop type="string" name="kind" required="True">
                                  <enum>
                                    <item value="&quot;AddRemoveReplica&quot;"/>
                                  </enum>
                                </prop>
                                <discriminator property="kind" value="AddRemoveReplica">
                                  <prop type="integer" name="maxCount" required="True"/>
                                  <prop type="integer" name="minCount" required="True"/>
                                  <prop type="integer" name="scaleIncrement" required="True"/>
                                </discriminator>
                              </prop>
                              <prop type="string" name="name" required="True"/>
                              <prop type="object" name="trigger" required="True">
                                <prop type="string" name="kind" required="True">
                                  <enum>
                                    <item value="&quot;AverageLoad&quot;"/>
                                  </enum>
                                </prop>
                                <discriminator property="kind" value="AverageLoad">
                                  <prop type="float64" name="lowerLoadThreshold" required="True"/>
                                  <prop type="object" name="metric" required="True">
                                    <prop type="string" name="kind" required="True">
                                      <enum>
                                        <item value="&quot;Resource&quot;"/>
                                      </enum>
                                    </prop>
                                    <discriminator property="kind" value="Resource">
                                      <prop type="string" name="name" required="True">
                                        <enum>
                                          <item value="&quot;cpu&quot;"/>
                                          <item value="&quot;memoryInGB&quot;"/>
                                        </enum>
                                      </prop>
                                    </discriminator>
                                  </prop>
                                  <prop type="integer" name="scaleIntervalInSeconds" required="True">
                                    <format minimum="60"/>
                                  </prop>
                                  <prop type="float64" name="upperLoadThreshold" required="True"/>
                                </discriminator>
                              </prop>
                            </item>
                          </prop>
                          <prop type="array<object>" name="codePackages" required="True">
                            <item type="object">
                              <prop type="array<string>" name="commands">
                                <item type="string"/>
                              </prop>
                              <prop type="object" name="diagnostics" cls="DiagnosticsRef_read">
                                <prop type="boolean" name="enabled"/>
                                <prop type="array<string>" name="sinkRefs">
                                  <item type="string"/>
                                </prop>
                              </prop>
                              <prop type="array<object>" name="endpoints">
                                <item type="object">
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="integer" name="port"/>
                                </item>
                              </prop>
                              <prop type="string" name="entrypoint"/>
                              <prop type="array<object>" name="environmentVariables">
                                <item type="object">
                                  <prop type="string" name="name"/>
                                  <prop type="string" name="value"/>
                                </item>
                              </prop>
                              <prop type="string" name="image" required="True"/>
                              <prop type="object" name="imageRegistryCredential">
                                <prop type="string" name="password"/>
                                <prop type="string" name="server" required="True"/>
                                <prop type="string" name="username" required="True"/>
                              </prop>
                              <prop type="object" name="instanceView">
                                <prop type="object" name="currentState" cls="ContainerState_read">
                                  <prop type="string" name="detailStatus"/>
                                  <prop type="string" name="exitCode"/>
                                  <prop type="dateTime" name="finishTime"/>
                                  <prop type="dateTime" name="startTime"/>
                                  <prop type="string" name="state"/>
                                </prop>
                                <prop type="array<object>" name="events">
                                  <item type="object">
                                    <prop type="integer" name="count"/>
                                    <prop type="string" name="firstTimestamp"/>
                                    <prop type="string" name="lastTimestamp"/>
                                    <prop type="string" name="message"/>
                                    <prop type="string" name="name"/>
                                    <prop type="string" name="type"/>
                                  </item>
                                </prop>
                                <prop type="@ContainerState_read" name="previousState"/>
                                <prop type="integer" name="restartCount"/>
                              </prop>
                              <prop type="array<object>" name="labels">
                                <item type="object">
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="string" name="value" required="True"/>
                                </item>
                              </prop>
                              <prop type="string" name="name" required="True"/>
                              <prop type="array<object>" name="reliableCollectionsRefs">
                                <item type="object">
                                  <prop type="boolean" name="doNotPersistState"/>
                                  <prop type="string" name="name" required="True"/>
                                </item>
                              </prop>
                              <prop type="object" name="resources" required="True">
                                <prop type="object" name="limits">
                                  <prop type="float64" name="cpu"/>
                                  <prop type="float64" name="memoryInGB"/>
                                </prop>
                                <prop type="object" name="requests" required="True">
                                  <prop type="float64" name="cpu" required="True"/>
                                  <prop type="float64" name="memoryInGB" required="True"/>
                                </prop>
                              </prop>
                              <prop type="array<object>" name="settings">
                                <item type="object">
                                  <prop type="string" name="name"/>
                                  <prop type="string" name="value"/>
                                </item>
                              </prop>
                              <prop type="array<object>" name="volumeRefs">
                                <item type="object">
                                  <prop type="string" name="destinationPath" required="True"/>
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="boolean" name="readOnly"/>
                                </item>
                              </prop>
                              <prop type="array<object>" name="volumes">
                                <item type="object">
                                  <prop type="object" name="creationParameters" required="True">
                                    <prop type="string" name="description"/>
                                    <prop type="string" name="kind" required="True">
                                      <enum>
                                        <item value="&quot;ServiceFabricVolumeDisk&quot;"/>
                                      </enum>
                                    </prop>
                                    <discriminator property="kind" value="ServiceFabricVolumeDisk">
                                      <prop type="string" name="sizeDisk" required="True">
                                        <enum>
                                          <item value="&quot;Large&quot;"/>
                                          <item value="&quot;Medium&quot;"/>
                                          <item value="&quot;Small&quot;"/>
                                        </enum>
                                      </prop>
                                    </discriminator>
                                  </prop>
                                  <prop type="string" name="destinationPath" required="True"/>
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="boolean" name="readOnly"/>
                                </item>
                              </prop>
                            </item>
                          </prop>
                          <prop type="string" name="description"/>
                          <prop type="@DiagnosticsRef_read" name="diagnostics"/>
                          <prop type="string" name="healthState">
                            <enum>
                              <item value="&quot;Error&quot;"/>
                              <item value="&quot;Invalid&quot;"/>
                              <item value="&quot;Ok&quot;"/>
                              <item value="&quot;Unknown&quot;"/>
                              <item value="&quot;Warning&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<object>" name="networkRefs">
                            <item type="object">
                              <prop type="array<object>" name="endpointRefs">
                                <item type="object">
                                  <prop type="string" name="name"/>
                                </item>
                              </prop>
                              <prop type="string" name="name"/>
                            </item>
                          </prop>
                          <prop type="string" name="osType" required="True">
                            <enum>
                              <item value="&quot;Linux&quot;"/>
                              <item value="&quot;Windows&quot;"/>
                            </enum>
                          </prop>
                          <prop readOnly="True" type="string" name="provisioningState"/>
                          <prop type="integer" name="replicaCount"/>
                          <prop type="string" name="status">
                            <enum>
                              <item value="&quot;Creating&quot;"/>
                              <item value="&quot;Deleting&quot;"/>
                              <item value="&quot;Failed&quot;"/>
                              <item value="&quot;Ready&quot;"/>
                              <item value="&quot;Unknown&quot;"/>
                              <item value="&quot;Upgrading&quot;"/>
                            </enum>
                          </prop>
                          <prop readOnly="True" type="string" name="statusDetails"/>
                          <prop readOnly="True" type="string" name="unhealthyEvaluation"/>
                        </prop>
                        <prop readOnly="True" type="string" name="type"/>
                      </item>
                    </prop>
                    <prop type="string" name="status">
                      <enum>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Ready&quot;"/>
                        <item value="&quot;Unknown&quot;"/>
                        <item value="&quot;Upgrading&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="statusDetails"/>
                    <prop readOnly="True" type="string" name="unhealthyEvaluation"/>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response statusCode="202"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2018-09-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.servicefabricmesh/applications/{}" version="2018-09-01-preview" swagger="mgmt-plane/servicefabricmesh/ResourceProviders/Microsoft.ServiceFabricMesh/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU2VydmljZUZhYnJpY01lc2gvYXBwbGljYXRpb25zL3thcHBsaWNhdGlvblJlc291cmNlTmFtZX0=/V/MjAxOC0wOS0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.applicationResourceName" options="name n" required="True" group="" idPart="name">
          <help short="The name of the application."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="ApplicationResourceDescription">
        <arg nullable="True" type="object" var="$applicationResourceDescription.tags" options="tags" group="ApplicationResourceDescription">
          <help short="Resource tags."/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="string" var="$applicationResourceDescription.properties.debugParams" options="debug-params" group="Properties">
          <help short="Internal - used by Visual Studio to setup the debugging session on the local development environment."/>
        </arg>
        <arg nullable="True" type="string" var="$applicationResourceDescription.properties.description" options="description" group="Properties">
          <help short="User readable description of the application."/>
        </arg>
        <arg nullable="True" type="object" var="$applicationResourceDescription.properties.diagnostics" options="diagnostics" group="Properties">
          <help short="Describes the diagnostics definition and usage for an application resource."/>
          <arg nullable="True" type="array<string>" var="$applicationResourceDescription.properties.diagnostics.defaultSinkRefs" options="default-sink-refs">
            <help short="The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level."/>
            <item nullable="True" type="string"/>
          </arg>
          <arg nullable="True" type="boolean" var="$applicationResourceDescription.properties.diagnostics.enabled" options="enabled">
            <help short="Status of whether or not sinks are enabled."/>
          </arg>
          <arg nullable="True" type="array<object>" var="$applicationResourceDescription.properties.diagnostics.sinks" options="sinks">
            <help short="List of supported sinks that can be referenced."/>
            <item nullable="True" type="object">
              <arg type="object" var="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline" options="azure-internal-monitoring-pipeline">
                <arg nullable="True" type="string" var="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.accountName" options="account-name">
                  <help short="Azure Internal monitoring pipeline account."/>
                </arg>
                <arg nullable="True" type="string" var="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.autoKeyConfigUrl" options="auto-key-config-url">
                  <help short="Azure Internal monitoring pipeline autokey associated with the certificate."/>
                </arg>
                <arg nullable="True" type="string" var="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.fluentdConfigUrl" options="fluentd-config-url">
                  <help short="Azure Internal monitoring agent fluentd configuration."/>
                </arg>
                <arg nullable="True" type="string" var="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.maConfigUrl" options="ma-config-url">
                  <help short="Azure Internal monitoring agent configuration."/>
                </arg>
                <arg nullable="True" type="string" var="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.namespace" options="namespace">
                  <help short="Azure Internal monitoring pipeline account namespace."/>
                </arg>
              </arg>
              <arg nullable="True" type="string" var="$applicationResourceDescription.properties.diagnostics.sinks[].description" options="description">
                <help short="A description of the sink."/>
              </arg>
              <arg nullable="True" type="string" var="$applicationResourceDescription.properties.diagnostics.sinks[].name" options="name">
                <help short="Name of the sink. This value is referenced by DiagnosticsReferenceDescription"/>
              </arg>
            </item>
          </arg>
        </arg>
        <arg nullable="True" type="array<object>" var="$applicationResourceDescription.properties.services" options="services" group="Properties">
          <help short="Describes the services in the application. This property is used to create or modify services of the application. On get only the name of the service is returned. The service description can be obtained by querying for the service resource."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$applicationResourceDescription.properties.services[].name" options="name">
              <help short="The name of the resource"/>
            </arg>
            <arg nullable="True" type="array<object>" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies" options="auto-scaling-policies" group="Properties">
              <help short="Auto scaling policies"/>
              <item nullable="True" type="object">
                <arg type="object" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism" options="mechanism">
                  <help short="The mechanism that is used to scale when auto scaling operation is invoked."/>
                  <arg type="object" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica" options="add-remove-replica">
                    <arg type="integer" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica.maxCount" options="max-count">
                      <help short="Maximum number of containers (scale up won't be performed above this number)."/>
                    </arg>
                    <arg type="integer" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica.minCount" options="min-count">
                      <help short="Minimum number of containers (scale down won't be performed below this number)."/>
                    </arg>
                    <arg type="integer" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica.scaleIncrement" options="scale-increment">
                      <help short="Each time auto scaling is performed, this number of containers will be added or removed."/>
                    </arg>
                  </arg>
                </arg>
                <arg type="string" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].name" options="name">
                  <help short="The name of the auto scaling policy."/>
                </arg>
                <arg type="object" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger" options="trigger">
                  <help short="Determines when auto scaling operation will be invoked."/>
                  <arg type="object" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad" options="average-load">
                    <arg type="float64" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.lowerLoadThreshold" options="lower-load-threshold">
                      <help short="Lower load threshold (if average load is below this threshold, service will scale down)."/>
                    </arg>
                    <arg type="object" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.metric" options="metric">
                      <help short="Description of the metric that is used for scaling."/>
                      <arg type="object" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.metric.Resource" options="resource">
                        <arg type="string" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.metric.Resource.name" options="name">
                          <help short="Name of the resource."/>
                          <enum>
                            <item name="cpu" value="&quot;cpu&quot;"/>
                            <item name="memoryInGB" value="&quot;memoryInGB&quot;"/>
                          </enum>
                        </arg>
                      </arg>
                    </arg>
                    <arg type="integer" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.scaleIntervalInSeconds" options="scale-interval-in-seconds">
                      <help short="Scale interval that indicates how often will this trigger be checked."/>
                      <format minimum="60"/>
                    </arg>
                    <arg type="float64" var="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.upperLoadThreshold" options="upper-load-threshold">
                      <help short="Upper load threshold (if average load is above this threshold, service will scale up)."/>
                    </arg>
                  </arg>
                </arg>
              </item>
            </arg>
            <arg type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages" options="code-packages" group="Properties">
              <help short="Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.)."/>
              <item nullable="True" type="object">
                <arg nullable="True" type="array<string>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].commands" options="commands">
                  <help short="Command array to execute within the container in exec form."/>
                  <item nullable="True" type="string"/>
                </arg>
                <arg nullable="True" type="object" var="$applicationResourceDescription.properties.services[].properties.codePackages[].diagnostics" options="diagnostics" cls="DiagnosticsRef_update">
                  <help short="Reference to sinks in DiagnosticsDescription."/>
                  <arg nullable="True" type="boolean" var="@DiagnosticsRef_update.enabled" options="enabled">
                    <help short="Status of whether or not sinks are enabled."/>
                  </arg>
                  <arg nullable="True" type="array<string>" var="@DiagnosticsRef_update.sinkRefs" options="sink-refs">
                    <help short="List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription."/>
                    <item nullable="True" type="string"/>
                  </arg>
                </arg>
                <arg nullable="True" type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].endpoints" options="endpoints">
                  <help short="The endpoints exposed by this container."/>
                  <item nullable="True" type="object">
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].endpoints[].name" options="name">
                      <help short="The name of the endpoint."/>
                    </arg>
                    <arg nullable="True" type="integer" var="$applicationResourceDescription.properties.services[].properties.codePackages[].endpoints[].port" options="port">
                      <help short="Port used by the container."/>
                    </arg>
                  </item>
                </arg>
                <arg nullable="True" type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].entrypoint" options="entrypoint">
                  <help short="Override for the default entry point in the container."/>
                </arg>
                <arg nullable="True" type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].environmentVariables" options="environment-variables">
                  <help short="The environment variables to set in this container"/>
                  <item nullable="True" type="object">
                    <arg nullable="True" type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].environmentVariables[].name" options="name">
                      <help short="The name of the environment variable."/>
                    </arg>
                    <arg nullable="True" type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].environmentVariables[].value" options="value">
                      <help short="The value of the environment variable."/>
                    </arg>
                  </item>
                </arg>
                <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].image" options="image">
                  <help short="The Container image to use."/>
                </arg>
                <arg nullable="True" type="object" var="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential" options="image-registry-credential">
                  <help short="Image registry credential."/>
                  <arg nullable="True" type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential.password" options="password">
                    <help short="The password for the private registry. The password is required for create or update operations, however it is not returned in the get or list operations."/>
                  </arg>
                  <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential.server" options="server">
                    <help short="Docker image registry server, without protocol such as `http` and `https`."/>
                  </arg>
                  <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential.username" options="username">
                    <help short="The username for the private registry."/>
                  </arg>
                </arg>
                <arg nullable="True" type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].labels" options="labels">
                  <help short="The labels to set in this container."/>
                  <item nullable="True" type="object">
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].labels[].name" options="name">
                      <help short="The name of the container label."/>
                    </arg>
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].labels[].value" options="value">
                      <help short="The value of the container label."/>
                    </arg>
                  </item>
                </arg>
                <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].name" options="name">
                  <help short="The name of the code package."/>
                </arg>
                <arg nullable="True" type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].reliableCollectionsRefs" options="reliable-collections-refs">
                  <help short="A list of ReliableCollection resources used by this particular code package. Please refer to ReliableCollectionsRef for more details."/>
                  <item nullable="True" type="object">
                    <arg nullable="True" type="boolean" var="$applicationResourceDescription.properties.services[].properties.codePackages[].reliableCollectionsRefs[].doNotPersistState" options="do-not-persist-state">
                      <help short="False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache."/>
                    </arg>
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].reliableCollectionsRefs[].name" options="name">
                      <help short="Name of ReliableCollection resource. Right now it's not used and you can use any string."/>
                    </arg>
                  </item>
                </arg>
                <arg type="object" var="$applicationResourceDescription.properties.services[].properties.codePackages[].resources" options="resources">
                  <help short="The resources required by this container."/>
                  <arg nullable="True" type="object" var="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.limits" options="limits">
                    <help short="Describes the maximum limits on the resources for a given container."/>
                    <arg nullable="True" type="float64" var="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.limits.cpu" options="cpu">
                      <help short="CPU limits in cores. At present, only full cores are supported."/>
                    </arg>
                    <arg nullable="True" type="float64" var="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.limits.memoryInGB" options="memory-in-gb">
                      <help short="The memory limit in GB."/>
                    </arg>
                  </arg>
                  <arg type="object" var="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.requests" options="requests">
                    <help short="Describes the requested resources for a given container."/>
                    <arg type="float64" var="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.requests.cpu" options="cpu">
                      <help short="Requested number of CPU cores. At present, only full cores are supported."/>
                    </arg>
                    <arg type="float64" var="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.requests.memoryInGB" options="memory-in-gb">
                      <help short="The memory request in GB for this container."/>
                    </arg>
                  </arg>
                </arg>
                <arg nullable="True" type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].settings" options="settings">
                  <help short="The settings to set in this container. The setting file path can be fetched from environment variable &quot;Fabric_SettingPath&quot;. The path for Windows container is &quot;C:\\secrets&quot;. The path for Linux container is &quot;/var/secrets&quot;."/>
                  <item nullable="True" type="object">
                    <arg nullable="True" type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].settings[].name" options="name">
                      <help short="The name of the setting."/>
                    </arg>
                    <arg nullable="True" type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].settings[].value" options="value">
                      <help short="The value of the setting."/>
                    </arg>
                  </item>
                </arg>
                <arg nullable="True" type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs" options="volume-refs">
                  <help short="Volumes to be attached to the container. The lifetime of these volumes is independent of the application's lifetime."/>
                  <item nullable="True" type="object">
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs[].destinationPath" options="destination-path">
                      <help short="The path within the container at which the volume should be mounted. Only valid path characters are allowed."/>
                    </arg>
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs[].name" options="name">
                      <help short="Name of the volume being referenced."/>
                    </arg>
                    <arg nullable="True" type="boolean" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs[].readOnly" options="read-only">
                      <help short="The flag indicating whether the volume is read only. Default is 'false'."/>
                    </arg>
                  </item>
                </arg>
                <arg nullable="True" type="array<object>" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes" options="volumes">
                  <help short="Volumes to be attached to the container. The lifetime of these volumes is scoped to the application's lifetime."/>
                  <item nullable="True" type="object">
                    <arg type="object" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters" options="creation-parameters">
                      <help short="Describes parameters for creating application-scoped volumes."/>
                      <arg type="object" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters.ServiceFabricVolumeDisk" options="service-fabric-volume-disk">
                        <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters.ServiceFabricVolumeDisk.sizeDisk" options="size-disk">
                          <help short="Volume size"/>
                          <enum>
                            <item name="Large" value="&quot;Large&quot;"/>
                            <item name="Medium" value="&quot;Medium&quot;"/>
                            <item name="Small" value="&quot;Small&quot;"/>
                          </enum>
                        </arg>
                      </arg>
                      <arg nullable="True" type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters.description" options="description">
                        <help short="User readable description of the volume."/>
                      </arg>
                    </arg>
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].destinationPath" options="destination-path">
                      <help short="The path within the container at which the volume should be mounted. Only valid path characters are allowed."/>
                    </arg>
                    <arg type="string" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].name" options="name">
                      <help short="Name of the volume being referenced."/>
                    </arg>
                    <arg nullable="True" type="boolean" var="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].readOnly" options="read-only">
                      <help short="The flag indicating whether the volume is read only. Default is 'false'."/>
                    </arg>
                  </item>
                </arg>
              </item>
            </arg>
            <arg nullable="True" type="string" var="$applicationResourceDescription.properties.services[].properties.description" options="description" group="Properties">
              <help short="User readable description of the service."/>
            </arg>
            <arg nullable="True" type="@DiagnosticsRef_update" var="$applicationResourceDescription.properties.services[].properties.diagnostics" options="diagnostics" group="Properties">
              <help short="Reference to sinks in DiagnosticsDescription."/>
            </arg>
            <arg nullable="True" type="array<object>" var="$applicationResourceDescription.properties.services[].properties.networkRefs" options="network-refs" group="Properties">
              <help short="The names of the private networks that this service needs to be part of."/>
              <item nullable="True" type="object">
                <arg nullable="True" type="array<object>" var="$applicationResourceDescription.properties.services[].properties.networkRefs[].endpointRefs" options="endpoint-refs">
                  <help short="A list of endpoints that are exposed on this network."/>
                  <item nullable="True" type="object">
                    <arg nullable="True" type="string" var="$applicationResourceDescription.properties.services[].properties.networkRefs[].endpointRefs[].name" options="name">
                      <help short="Name of the endpoint."/>
                    </arg>
                  </item>
                </arg>
                <arg nullable="True" type="string" var="$applicationResourceDescription.properties.services[].properties.networkRefs[].name" options="name">
                  <help short="Name of the network"/>
                </arg>
              </item>
            </arg>
            <arg type="string" var="$applicationResourceDescription.properties.services[].properties.osType" options="os-type" group="Properties">
              <help short="The operation system required by the code in service."/>
              <enum>
                <item name="Linux" value="&quot;Linux&quot;"/>
                <item name="Windows" value="&quot;Windows&quot;"/>
              </enum>
            </arg>
            <arg nullable="True" type="integer" var="$applicationResourceDescription.properties.services[].properties.replicaCount" options="replica-count" group="Properties">
              <help short="The number of replicas of the service to create. Defaults to 1 if not specified."/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <operation operationId="Application_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}">
          <request method="get">
            <path>
              <param type="string" name="applicationResourceName" arg="$Path.applicationResourceName" required="True" skipUrlEncoding="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2018-09-01-preview&quot;"/>
                <enum>
                  <item value="&quot;2018-09-01-preview&quot;"/>
                </enum>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="ApplicationResourceDescription_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.ServiceFabricMesh/applications/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="string" name="debugParams"/>
                    <prop type="string" name="description"/>
                    <prop type="object" name="diagnostics">
                      <prop type="array<string>" name="defaultSinkRefs">
                        <item type="string"/>
                      </prop>
                      <prop type="boolean" name="enabled"/>
                      <prop type="array<object>" name="sinks">
                        <item type="object">
                          <prop type="string" name="description"/>
                          <prop type="string" name="kind" required="True">
                            <enum>
                              <item value="&quot;AzureInternalMonitoringPipeline&quot;"/>
                              <item value="&quot;Invalid&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="name"/>
                          <discriminator property="kind" value="AzureInternalMonitoringPipeline">
                            <prop type="string" name="accountName"/>
                            <prop type="string" name="autoKeyConfigUrl"/>
                            <prop type="string" name="fluentdConfigUrl"/>
                            <prop type="string" name="maConfigUrl"/>
                            <prop type="string" name="namespace"/>
                          </discriminator>
                        </item>
                      </prop>
                    </prop>
                    <prop type="string" name="healthState">
                      <enum>
                        <item value="&quot;Error&quot;"/>
                        <item value="&quot;Invalid&quot;"/>
                        <item value="&quot;Ok&quot;"/>
                        <item value="&quot;Unknown&quot;"/>
                        <item value="&quot;Warning&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop readOnly="True" type="array<string>" name="serviceNames">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="services">
                      <item type="object">
                        <prop readOnly="True" type="ResourceId" name="id">
                          <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.ServiceFabricMesh/applications/{}/services/{}"/>
                        </prop>
                        <prop type="string" name="name"/>
                        <prop type="object" name="properties" required="True" clientFlatten="True">
                          <prop type="array<object>" name="autoScalingPolicies">
                            <item type="object">
                              <prop type="object" name="mechanism" required="True">
                                <prop type="string" name="kind" required="True">
                                  <enum>
                                    <item value="&quot;AddRemoveReplica&quot;"/>
                                  </enum>
                                </prop>
                                <discriminator property="kind" value="AddRemoveReplica">
                                  <prop type="integer" name="maxCount" required="True"/>
                                  <prop type="integer" name="minCount" required="True"/>
                                  <prop type="integer" name="scaleIncrement" required="True"/>
                                </discriminator>
                              </prop>
                              <prop type="string" name="name" required="True"/>
                              <prop type="object" name="trigger" required="True">
                                <prop type="string" name="kind" required="True">
                                  <enum>
                                    <item value="&quot;AverageLoad&quot;"/>
                                  </enum>
                                </prop>
                                <discriminator property="kind" value="AverageLoad">
                                  <prop type="float64" name="lowerLoadThreshold" required="True"/>
                                  <prop type="object" name="metric" required="True">
                                    <prop type="string" name="kind" required="True">
                                      <enum>
                                        <item value="&quot;Resource&quot;"/>
                                      </enum>
                                    </prop>
                                    <discriminator property="kind" value="Resource">
                                      <prop type="string" name="name" required="True">
                                        <enum>
                                          <item value="&quot;cpu&quot;"/>
                                          <item value="&quot;memoryInGB&quot;"/>
                                        </enum>
                                      </prop>
                                    </discriminator>
                                  </prop>
                                  <prop type="integer" name="scaleIntervalInSeconds" required="True">
                                    <format minimum="60"/>
                                  </prop>
                                  <prop type="float64" name="upperLoadThreshold" required="True"/>
                                </discriminator>
                              </prop>
                            </item>
                          </prop>
                          <prop type="array<object>" name="codePackages" required="True">
                            <item type="object">
                              <prop type="array<string>" name="commands">
                                <item type="string"/>
                              </prop>
                              <prop type="object" name="diagnostics" cls="DiagnosticsRef_read">
                                <prop type="boolean" name="enabled"/>
                                <prop type="array<string>" name="sinkRefs">
                                  <item type="string"/>
                                </prop>
                              </prop>
                              <prop type="array<object>" name="endpoints">
                                <item type="object">
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="integer" name="port"/>
                                </item>
                              </prop>
                              <prop type="string" name="entrypoint"/>
                              <prop type="array<object>" name="environmentVariables">
                                <item type="object">
                                  <prop type="string" name="name"/>
                                  <prop type="string" name="value"/>
                                </item>
                              </prop>
                              <prop type="string" name="image" required="True"/>
                              <prop type="object" name="imageRegistryCredential">
                                <prop type="string" name="password"/>
                                <prop type="string" name="server" required="True"/>
                                <prop type="string" name="username" required="True"/>
                              </prop>
                              <prop type="object" name="instanceView">
                                <prop type="object" name="currentState" cls="ContainerState_read">
                                  <prop type="string" name="detailStatus"/>
                                  <prop type="string" name="exitCode"/>
                                  <prop type="dateTime" name="finishTime"/>
                                  <prop type="dateTime" name="startTime"/>
                                  <prop type="string" name="state"/>
                                </prop>
                                <prop type="array<object>" name="events">
                                  <item type="object">
                                    <prop type="integer" name="count"/>
                                    <prop type="string" name="firstTimestamp"/>
                                    <prop type="string" name="lastTimestamp"/>
                                    <prop type="string" name="message"/>
                                    <prop type="string" name="name"/>
                                    <prop type="string" name="type"/>
                                  </item>
                                </prop>
                                <prop type="@ContainerState_read" name="previousState"/>
                                <prop type="integer" name="restartCount"/>
                              </prop>
                              <prop type="array<object>" name="labels">
                                <item type="object">
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="string" name="value" required="True"/>
                                </item>
                              </prop>
                              <prop type="string" name="name" required="True"/>
                              <prop type="array<object>" name="reliableCollectionsRefs">
                                <item type="object">
                                  <prop type="boolean" name="doNotPersistState"/>
                                  <prop type="string" name="name" required="True"/>
                                </item>
                              </prop>
                              <prop type="object" name="resources" required="True">
                                <prop type="object" name="limits">
                                  <prop type="float64" name="cpu"/>
                                  <prop type="float64" name="memoryInGB"/>
                                </prop>
                                <prop type="object" name="requests" required="True">
                                  <prop type="float64" name="cpu" required="True"/>
                                  <prop type="float64" name="memoryInGB" required="True"/>
                                </prop>
                              </prop>
                              <prop type="array<object>" name="settings">
                                <item type="object">
                                  <prop type="string" name="name"/>
                                  <prop type="string" name="value"/>
                                </item>
                              </prop>
                              <prop type="array<object>" name="volumeRefs">
                                <item type="object">
                                  <prop type="string" name="destinationPath" required="True"/>
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="boolean" name="readOnly"/>
                                </item>
                              </prop>
                              <prop type="array<object>" name="volumes">
                                <item type="object">
                                  <prop type="object" name="creationParameters" required="True">
                                    <prop type="string" name="description"/>
                                    <prop type="string" name="kind" required="True">
                                      <enum>
                                        <item value="&quot;ServiceFabricVolumeDisk&quot;"/>
                                      </enum>
                                    </prop>
                                    <discriminator property="kind" value="ServiceFabricVolumeDisk">
                                      <prop type="string" name="sizeDisk" required="True">
                                        <enum>
                                          <item value="&quot;Large&quot;"/>
                                          <item value="&quot;Medium&quot;"/>
                                          <item value="&quot;Small&quot;"/>
                                        </enum>
                                      </prop>
                                    </discriminator>
                                  </prop>
                                  <prop type="string" name="destinationPath" required="True"/>
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="boolean" name="readOnly"/>
                                </item>
                              </prop>
                            </item>
                          </prop>
                          <prop type="string" name="description"/>
                          <prop type="@DiagnosticsRef_read" name="diagnostics"/>
                          <prop type="string" name="healthState">
                            <enum>
                              <item value="&quot;Error&quot;"/>
                              <item value="&quot;Invalid&quot;"/>
                              <item value="&quot;Ok&quot;"/>
                              <item value="&quot;Unknown&quot;"/>
                              <item value="&quot;Warning&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<object>" name="networkRefs">
                            <item type="object">
                              <prop type="array<object>" name="endpointRefs">
                                <item type="object">
                                  <prop type="string" name="name"/>
                                </item>
                              </prop>
                              <prop type="string" name="name"/>
                            </item>
                          </prop>
                          <prop type="string" name="osType" required="True">
                            <enum>
                              <item value="&quot;Linux&quot;"/>
                              <item value="&quot;Windows&quot;"/>
                            </enum>
                          </prop>
                          <prop readOnly="True" type="string" name="provisioningState"/>
                          <prop type="integer" name="replicaCount"/>
                          <prop type="string" name="status">
                            <enum>
                              <item value="&quot;Creating&quot;"/>
                              <item value="&quot;Deleting&quot;"/>
                              <item value="&quot;Failed&quot;"/>
                              <item value="&quot;Ready&quot;"/>
                              <item value="&quot;Unknown&quot;"/>
                              <item value="&quot;Upgrading&quot;"/>
                            </enum>
                          </prop>
                          <prop readOnly="True" type="string" name="statusDetails"/>
                          <prop readOnly="True" type="string" name="unhealthyEvaluation"/>
                        </prop>
                        <prop readOnly="True" type="string" name="type"/>
                      </item>
                    </prop>
                    <prop type="string" name="status">
                      <enum>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Ready&quot;"/>
                        <item value="&quot;Unknown&quot;"/>
                        <item value="&quot;Upgrading&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="statusDetails"/>
                    <prop readOnly="True" type="string" name="unhealthyEvaluation"/>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="applicationResourceDescription" required="True" clientFlatten="True">
              <prop type="object" name="properties" required="True" clientFlatten="True">
                <prop type="string" name="debugParams" arg="$applicationResourceDescription.properties.debugParams"/>
                <prop type="string" name="description" arg="$applicationResourceDescription.properties.description"/>
                <prop type="object" name="diagnostics" arg="$applicationResourceDescription.properties.diagnostics">
                  <prop type="array<string>" name="defaultSinkRefs" arg="$applicationResourceDescription.properties.diagnostics.defaultSinkRefs">
                    <item type="string"/>
                  </prop>
                  <prop type="boolean" name="enabled" arg="$applicationResourceDescription.properties.diagnostics.enabled"/>
                  <prop type="array<object>" name="sinks" arg="$applicationResourceDescription.properties.diagnostics.sinks">
                    <item type="object">
                      <prop type="string" name="description" arg="$applicationResourceDescription.properties.diagnostics.sinks[].description"/>
                      <prop type="string" name="kind" required="True">
                        <enum>
                          <item arg="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline" value="&quot;AzureInternalMonitoringPipeline&quot;"/>
                          <item value="&quot;Invalid&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="name" arg="$applicationResourceDescription.properties.diagnostics.sinks[].name"/>
                      <discriminator property="kind" value="AzureInternalMonitoringPipeline">
                        <prop type="string" name="accountName" arg="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.accountName"/>
                        <prop type="string" name="autoKeyConfigUrl" arg="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.autoKeyConfigUrl"/>
                        <prop type="string" name="fluentdConfigUrl" arg="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.fluentdConfigUrl"/>
                        <prop type="string" name="maConfigUrl" arg="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.maConfigUrl"/>
                        <prop type="string" name="namespace" arg="$applicationResourceDescription.properties.diagnostics.sinks[].AzureInternalMonitoringPipeline.namespace"/>
                      </discriminator>
                    </item>
                  </prop>
                </prop>
                <prop type="array<object>" name="services" arg="$applicationResourceDescription.properties.services">
                  <item type="object">
                    <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].name"/>
                    <prop type="object" name="properties" required="True" clientFlatten="True">
                      <prop type="array<object>" name="autoScalingPolicies" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies">
                        <item type="object">
                          <prop type="object" name="mechanism" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism" required="True">
                            <prop type="string" name="kind" required="True">
                              <enum>
                                <item arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica" value="&quot;AddRemoveReplica&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="kind" value="AddRemoveReplica">
                              <prop type="integer" name="maxCount" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica.maxCount" required="True"/>
                              <prop type="integer" name="minCount" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica.minCount" required="True"/>
                              <prop type="integer" name="scaleIncrement" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].mechanism.AddRemoveReplica.scaleIncrement" required="True"/>
                            </discriminator>
                          </prop>
                          <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].name" required="True"/>
                          <prop type="object" name="trigger" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger" required="True">
                            <prop type="string" name="kind" required="True">
                              <enum>
                                <item arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad" value="&quot;AverageLoad&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="kind" value="AverageLoad">
                              <prop type="float64" name="lowerLoadThreshold" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.lowerLoadThreshold" required="True"/>
                              <prop type="object" name="metric" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.metric" required="True">
                                <prop type="string" name="kind" required="True">
                                  <enum>
                                    <item arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.metric.Resource" value="&quot;Resource&quot;"/>
                                  </enum>
                                </prop>
                                <discriminator property="kind" value="Resource">
                                  <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.metric.Resource.name" required="True">
                                    <enum>
                                      <item value="&quot;cpu&quot;"/>
                                      <item value="&quot;memoryInGB&quot;"/>
                                    </enum>
                                  </prop>
                                </discriminator>
                              </prop>
                              <prop type="integer" name="scaleIntervalInSeconds" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.scaleIntervalInSeconds" required="True">
                                <format minimum="60"/>
                              </prop>
                              <prop type="float64" name="upperLoadThreshold" arg="$applicationResourceDescription.properties.services[].properties.autoScalingPolicies[].trigger.AverageLoad.upperLoadThreshold" required="True"/>
                            </discriminator>
                          </prop>
                        </item>
                      </prop>
                      <prop type="array<object>" name="codePackages" arg="$applicationResourceDescription.properties.services[].properties.codePackages" required="True">
                        <item type="object">
                          <prop type="array<string>" name="commands" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].commands">
                            <item type="string"/>
                          </prop>
                          <prop type="object" name="diagnostics" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].diagnostics" cls="DiagnosticsRef_update">
                            <prop type="boolean" name="enabled" arg="@DiagnosticsRef_update.enabled"/>
                            <prop type="array<string>" name="sinkRefs" arg="@DiagnosticsRef_update.sinkRefs">
                              <item type="string"/>
                            </prop>
                          </prop>
                          <prop type="array<object>" name="endpoints" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].endpoints">
                            <item type="object">
                              <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].endpoints[].name" required="True"/>
                              <prop type="integer" name="port" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].endpoints[].port"/>
                            </item>
                          </prop>
                          <prop type="string" name="entrypoint" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].entrypoint"/>
                          <prop type="array<object>" name="environmentVariables" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].environmentVariables">
                            <item type="object">
                              <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].environmentVariables[].name"/>
                              <prop type="string" name="value" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].environmentVariables[].value"/>
                            </item>
                          </prop>
                          <prop type="string" name="image" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].image" required="True"/>
                          <prop type="object" name="imageRegistryCredential" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential">
                            <prop type="string" name="password" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential.password"/>
                            <prop type="string" name="server" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential.server" required="True"/>
                            <prop type="string" name="username" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].imageRegistryCredential.username" required="True"/>
                          </prop>
                          <prop type="array<object>" name="labels" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].labels">
                            <item type="object">
                              <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].labels[].name" required="True"/>
                              <prop type="string" name="value" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].labels[].value" required="True"/>
                            </item>
                          </prop>
                          <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].name" required="True"/>
                          <prop type="array<object>" name="reliableCollectionsRefs" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].reliableCollectionsRefs">
                            <item type="object">
                              <prop type="boolean" name="doNotPersistState" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].reliableCollectionsRefs[].doNotPersistState"/>
                              <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].reliableCollectionsRefs[].name" required="True"/>
                            </item>
                          </prop>
                          <prop type="object" name="resources" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].resources" required="True">
                            <prop type="object" name="limits" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.limits">
                              <prop type="float64" name="cpu" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.limits.cpu"/>
                              <prop type="float64" name="memoryInGB" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.limits.memoryInGB"/>
                            </prop>
                            <prop type="object" name="requests" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.requests" required="True">
                              <prop type="float64" name="cpu" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.requests.cpu" required="True"/>
                              <prop type="float64" name="memoryInGB" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].resources.requests.memoryInGB" required="True"/>
                            </prop>
                          </prop>
                          <prop type="array<object>" name="settings" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].settings">
                            <item type="object">
                              <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].settings[].name"/>
                              <prop type="string" name="value" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].settings[].value"/>
                            </item>
                          </prop>
                          <prop type="array<object>" name="volumeRefs" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs">
                            <item type="object">
                              <prop type="string" name="destinationPath" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs[].destinationPath" required="True"/>
                              <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs[].name" required="True"/>
                              <prop type="boolean" name="readOnly" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumeRefs[].readOnly"/>
                            </item>
                          </prop>
                          <prop type="array<object>" name="volumes" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes">
                            <item type="object">
                              <prop type="object" name="creationParameters" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters" required="True">
                                <prop type="string" name="description" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters.description"/>
                                <prop type="string" name="kind" required="True">
                                  <enum>
                                    <item arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters.ServiceFabricVolumeDisk" value="&quot;ServiceFabricVolumeDisk&quot;"/>
                                  </enum>
                                </prop>
                                <discriminator property="kind" value="ServiceFabricVolumeDisk">
                                  <prop type="string" name="sizeDisk" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].creationParameters.ServiceFabricVolumeDisk.sizeDisk" required="True">
                                    <enum>
                                      <item value="&quot;Large&quot;"/>
                                      <item value="&quot;Medium&quot;"/>
                                      <item value="&quot;Small&quot;"/>
                                    </enum>
                                  </prop>
                                </discriminator>
                              </prop>
                              <prop type="string" name="destinationPath" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].destinationPath" required="True"/>
                              <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].name" required="True"/>
                              <prop type="boolean" name="readOnly" arg="$applicationResourceDescription.properties.services[].properties.codePackages[].volumes[].readOnly"/>
                            </item>
                          </prop>
                        </item>
                      </prop>
                      <prop type="string" name="description" arg="$applicationResourceDescription.properties.services[].properties.description"/>
                      <prop type="@DiagnosticsRef_update" name="diagnostics" arg="$applicationResourceDescription.properties.services[].properties.diagnostics"/>
                      <prop type="array<object>" name="networkRefs" arg="$applicationResourceDescription.properties.services[].properties.networkRefs">
                        <item type="object">
                          <prop type="array<object>" name="endpointRefs" arg="$applicationResourceDescription.properties.services[].properties.networkRefs[].endpointRefs">
                            <item type="object">
                              <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.networkRefs[].endpointRefs[].name"/>
                            </item>
                          </prop>
                          <prop type="string" name="name" arg="$applicationResourceDescription.properties.services[].properties.networkRefs[].name"/>
                        </item>
                      </prop>
                      <prop type="string" name="osType" arg="$applicationResourceDescription.properties.services[].properties.osType" required="True">
                        <enum>
                          <item value="&quot;Linux&quot;"/>
                          <item value="&quot;Windows&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer" name="replicaCount" arg="$applicationResourceDescription.properties.services[].properties.replicaCount"/>
                    </prop>
                  </item>
                </prop>
              </prop>
              <prop type="object" name="tags" arg="$applicationResourceDescription.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="Application_Create">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}">
          <request method="put">
            <path>
              <param type="string" name="applicationResourceName" arg="$Path.applicationResourceName" required="True" skipUrlEncoding="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2018-09-01-preview&quot;"/>
                <enum>
                  <item value="&quot;2018-09-01-preview&quot;"/>
                </enum>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@ApplicationResourceDescription_read"/>
              </json>
            </body>
          </response>
          <response statusCode="202"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
