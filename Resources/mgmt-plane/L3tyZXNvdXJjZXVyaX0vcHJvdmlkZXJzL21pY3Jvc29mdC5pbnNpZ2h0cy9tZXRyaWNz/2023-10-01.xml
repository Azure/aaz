<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/{resourceuri}/providers/microsoft.insights/metrics" version="2023-10-01" swagger="mgmt-plane/monitor/ResourceProviders/Microsoft.Insights/Paths/L3tyZXNvdXJjZVVyaX0vcHJvdmlkZXJzL01pY3Jvc29mdC5JbnNpZ2h0cy9tZXRyaWNz/V/MjAyMy0xMC0wMQ=="/>
  <commandGroup name="monitor metrics">
    <command name="list" version="2023-10-01" confirmation="">
      <resource id="/{resourceuri}/providers/microsoft.insights/metrics" version="2023-10-01" swagger="mgmt-plane/monitor/ResourceProviders/Microsoft.Insights/Paths/L3tyZXNvdXJjZVVyaX0vcHJvdmlkZXJzL01pY3Jvc29mdC5JbnNpZ2h0cy9tZXRyaWNz/V/MjAyMy0xMC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.resourceUri" options="resource-uri" required="True">
          <help short="The identifier of the resource."/>
        </arg>
        <arg type="boolean" var="$Query.AutoAdjustTimegrain" options="auto-adjust-timegrain">
          <help short="When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false."/>
        </arg>
        <arg type="boolean" var="$Query.ValidateDimensions" options="validate-dimensions">
          <help short="When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid filter parameters. Defaults to true."/>
        </arg>
        <arg type="string" var="$Query.aggregation" options="aggregation" group="">
          <help short="The list of aggregation types (comma separated) to retrieve."/>
        </arg>
        <arg type="string" var="$Query.filter" options="filter">
          <help short="The **$filter** is used to reduce the set of metric data returned. Example: Metric contains metadata A, B and C. - Return all time series of C where A = a1 and B = b1 or b2 **$filter=A eq 'a1' and B eq 'b1' or B eq 'b2' and C eq '*'** - Invalid variant: **$filter=A eq 'a1' and B eq 'b1' and C eq '*' or B = 'b2'** This is invalid because the logical or operator cannot separate two different metadata names. - Return all time series where A = a1, B = b1 and C = c1: **$filter=A eq 'a1' and B eq 'b1' and C eq 'c1'** - Return all time series where A = a1 **$filter=A eq 'a1' and B eq '*' and C eq '*'**. Special case: When dimension name or dimension value uses round brackets. Eg: When dimension name is **dim (test) 1** Instead of using $filter= &quot;dim (test) 1 eq '*' &quot; use **$filter= &quot;dim %2528test%2529 1 eq '*' &quot;** When dimension name is **dim (test) 3** and dimension value is **dim3 (test) val** Instead of using $filter= &quot;dim (test) 3 eq 'dim3 (test) val' &quot; use **$filter= &quot;dim %2528test%2529 3 eq 'dim3 %2528test%2529 val' &quot;**"/>
        </arg>
        <arg type="string" var="$Query.interval" options="interval">
          <help short="The interval (i.e. timegrain) of the query."/>
        </arg>
        <arg type="string" var="$Query.metricnames" options="metricnames">
          <help short="The names of the metrics (comma separated) to retrieve. Special case: If a metricname itself has a comma in it then use %2 to indicate it. Eg: 'Metric,Name1' should be **'Metric%2Name1'**"/>
        </arg>
        <arg type="string" var="$Query.metricnamespace" options="metricnamespace">
          <help short="Metric namespace to query metric definitions for."/>
        </arg>
        <arg type="string" var="$Query.orderby" options="orderby">
          <help short="The aggregation to use for sorting results and the direction of the sort. Only one order can be specified. Examples: sum asc."/>
        </arg>
        <arg type="string" var="$Query.resultType" options="result-type">
          <help short="Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details."/>
          <enum>
            <item name="Data" value="&quot;Data&quot;"/>
            <item name="Metadata" value="&quot;Metadata&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$Query.rollupby" options="rollupby">
          <help short="Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries."/>
        </arg>
        <arg type="string" var="$Query.timespan" options="timespan">
          <help short="The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'."/>
        </arg>
        <arg type="integer32" var="$Query.top" options="top" group="">
          <help short="The maximum number of records to retrieve. Valid only if $filter is specified. Defaults to 10."/>
        </arg>
      </argGroup>
      <operation operationId="Metrics_List">
        <http path="/{resourceUri}/providers/Microsoft.Insights/metrics">
          <request method="get">
            <path>
              <param type="string" name="resourceUri" arg="$Path.resourceUri" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <param type="string" name="$filter" arg="$Query.filter"/>
              <param type="boolean" name="AutoAdjustTimegrain" arg="$Query.AutoAdjustTimegrain"/>
              <param type="boolean" name="ValidateDimensions" arg="$Query.ValidateDimensions"/>
              <param type="string" name="aggregation" arg="$Query.aggregation"/>
              <param type="string" name="interval" arg="$Query.interval"/>
              <param type="string" name="metricnames" arg="$Query.metricnames"/>
              <param type="string" name="metricnamespace" arg="$Query.metricnamespace"/>
              <param type="string" name="orderby" arg="$Query.orderby"/>
              <param type="string" name="resultType" arg="$Query.resultType">
                <enum>
                  <item value="&quot;Data&quot;"/>
                  <item value="&quot;Metadata&quot;"/>
                </enum>
              </param>
              <param type="string" name="rollupby" arg="$Query.rollupby"/>
              <param type="string" name="timespan" arg="$Query.timespan"/>
              <param type="integer32" name="top" arg="$Query.top"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-10-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop type="integer32" name="cost">
                    <format minimum="0"/>
                  </prop>
                  <prop type="string" name="interval"/>
                  <prop type="string" name="namespace"/>
                  <prop type="string" name="resourceregion"/>
                  <prop type="string" name="timespan" required="True"/>
                  <prop type="array<object>" name="value" required="True">
                    <item type="object">
                      <prop type="string" name="displayDescription"/>
                      <prop type="string" name="errorCode"/>
                      <prop type="string" name="errorMessage"/>
                      <prop type="string" name="id" required="True"/>
                      <prop type="object" name="name" required="True" cls="LocalizableString_read">
                        <prop type="string" name="localizedValue"/>
                        <prop type="string" name="value" required="True"/>
                      </prop>
                      <prop type="array<object>" name="timeseries" required="True">
                        <item type="object">
                          <prop type="array<object>" name="data" identifiers="timeStamp">
                            <item type="object">
                              <prop type="float64" name="average"/>
                              <prop type="float64" name="count"/>
                              <prop type="float64" name="maximum"/>
                              <prop type="float64" name="minimum"/>
                              <prop type="dateTime" name="timeStamp" required="True"/>
                              <prop type="float64" name="total"/>
                            </item>
                          </prop>
                          <prop type="array<object>" name="metadatavalues" identifiers="name">
                            <item type="object">
                              <prop type="@LocalizableString_read" name="name"/>
                              <prop type="string" name="value"/>
                            </item>
                          </prop>
                        </item>
                      </prop>
                      <prop type="string" name="type" required="True"/>
                      <prop type="string" name="unit" required="True">
                        <enum>
                          <item value="&quot;BitsPerSecond&quot;"/>
                          <item value="&quot;ByteSeconds&quot;"/>
                          <item value="&quot;Bytes&quot;"/>
                          <item value="&quot;BytesPerSecond&quot;"/>
                          <item value="&quot;Cores&quot;"/>
                          <item value="&quot;Count&quot;"/>
                          <item value="&quot;CountPerSecond&quot;"/>
                          <item value="&quot;MilliCores&quot;"/>
                          <item value="&quot;MilliSeconds&quot;"/>
                          <item value="&quot;NanoCores&quot;"/>
                          <item value="&quot;Percent&quot;"/>
                          <item value="&quot;Seconds&quot;"/>
                          <item value="&quot;Unspecified&quot;"/>
                        </enum>
                      </prop>
                    </item>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
