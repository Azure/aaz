{"plane": "mgmt-plane", "resources": [{"id": "/{resourceuri}/providers/microsoft.insights/metrics", "version": "2023-10-01", "swagger": "mgmt-plane/monitor/ResourceProviders/Microsoft.Insights/Paths/L3tyZXNvdXJjZVVyaX0vcHJvdmlkZXJzL01pY3Jvc29mdC5JbnNpZ2h0cy9tZXRyaWNz/V/MjAyMy0xMC0wMQ=="}], "commandGroups": [{"name": "monitor metrics", "commands": [{"name": "list", "version": "2023-10-01", "resources": [{"id": "/{resourceuri}/providers/microsoft.insights/metrics", "version": "2023-10-01", "swagger": "mgmt-plane/monitor/ResourceProviders/Microsoft.Insights/Paths/L3tyZXNvdXJjZVVyaX0vcHJvdmlkZXJzL01pY3Jvc29mdC5JbnNpZ2h0cy9tZXRyaWNz/V/MjAyMy0xMC0wMQ=="}], "argGroups": [{"name": "", "args": [{"type": "string", "var": "$Path.resourceUri", "options": ["resource-uri"], "required": true, "help": {"short": "The identifier of the resource."}}, {"type": "boolean", "var": "$Query.AutoAdjustTimegrain", "options": ["auto-adjust-timegrain"], "help": {"short": "When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false."}}, {"type": "boolean", "var": "$Query.ValidateDimensions", "options": ["validate-dimensions"], "help": {"short": "When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid filter parameters. Defaults to true."}}, {"type": "string", "var": "$Query.aggregation", "options": ["aggregation"], "group": "", "help": {"short": "The list of aggregation types (comma separated) to retrieve."}}, {"type": "string", "var": "$Query.filter", "options": ["filter"], "help": {"short": "The **$filter** is used to reduce the set of metric data returned. Example: Metric contains metadata A, B and C. - Return all time series of C where A = a1 and B = b1 or b2 **$filter=A eq 'a1' and B eq 'b1' or B eq 'b2' and C eq '*'** - Invalid variant: **$filter=A eq 'a1' and B eq 'b1' and C eq '*' or B = 'b2'** This is invalid because the logical or operator cannot separate two different metadata names. - Return all time series where A = a1, B = b1 and C = c1: **$filter=A eq 'a1' and B eq 'b1' and C eq 'c1'** - Return all time series where A = a1 **$filter=A eq 'a1' and B eq '*' and C eq '*'**. Special case: When dimension name or dimension value uses round brackets. Eg: When dimension name is **dim (test) 1** Instead of using $filter= \"dim (test) 1 eq '*' \" use **$filter= \"dim %2528test%2529 1 eq '*' \"** When dimension name is **dim (test) 3** and dimension value is **dim3 (test) val** Instead of using $filter= \"dim (test) 3 eq 'dim3 (test) val' \" use **$filter= \"dim %2528test%2529 3 eq 'dim3 %2528test%2529 val' \"**"}}, {"type": "string", "var": "$Query.interval", "options": ["interval"], "help": {"short": "The interval (i.e. timegrain) of the query."}}, {"type": "string", "var": "$Query.metricnames", "options": ["metricnames"], "help": {"short": "The names of the metrics (comma separated) to retrieve. Special case: If a metricname itself has a comma in it then use %2 to indicate it. Eg: 'Metric,Name1' should be **'Metric%2Name1'**"}}, {"type": "string", "var": "$Query.metricnamespace", "options": ["metricnamespace"], "help": {"short": "Metric namespace to query metric definitions for."}}, {"type": "string", "var": "$Query.orderby", "options": ["orderby"], "help": {"short": "The aggregation to use for sorting results and the direction of the sort. Only one order can be specified. Examples: sum asc."}}, {"type": "string", "var": "$Query.resultType", "options": ["result-type"], "help": {"short": "Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details."}, "enum": {"items": [{"name": "Data", "value": "Data"}, {"name": "Metadata", "value": "Metadata"}]}}, {"type": "string", "var": "$Query.rollupby", "options": ["rollupby"], "help": {"short": "Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries."}}, {"type": "string", "var": "$Query.timespan", "options": ["timespan"], "help": {"short": "The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'."}}, {"type": "integer32", "var": "$Query.top", "options": ["top"], "group": "", "help": {"short": "The maximum number of records to retrieve. Valid only if $filter is specified. Defaults to 10."}}]}], "operations": [{"operationId": "Metrics_List", "http": {"path": "/{resourceUri}/providers/Microsoft.Insights/metrics", "request": {"method": "get", "path": {"params": [{"type": "string", "name": "resourceUri", "arg": "$Path.resourceUri", "required": true, "skipUrlEncoding": true}]}, "query": {"params": [{"type": "string", "name": "$filter", "arg": "$Query.filter"}, {"type": "boolean", "name": "AutoAdjustTimegrain", "arg": "$Query.AutoAdjustTimegrain"}, {"type": "boolean", "name": "ValidateDimensions", "arg": "$Query.ValidateDimensions"}, {"type": "string", "name": "aggregation", "arg": "$Query.aggregation"}, {"type": "string", "name": "interval", "arg": "$Query.interval"}, {"type": "string", "name": "metricnames", "arg": "$Query.metricnames"}, {"type": "string", "name": "metricnamespace", "arg": "$Query.metricnamespace"}, {"type": "string", "name": "orderby", "arg": "$Query.orderby"}, {"type": "string", "name": "resultType", "arg": "$Query.resultType", "enum": {"items": [{"value": "Data"}, {"value": "Metadata"}]}}, {"type": "string", "name": "rollupby", "arg": "$Query.rollupby"}, {"type": "string", "name": "timespan", "arg": "$Query.timespan"}, {"type": "integer32", "name": "top", "arg": "$Query.top"}], "consts": [{"readOnly": true, "const": true, "default": {"value": "2023-10-01"}, "type": "string", "name": "api-version", "required": true, "format": {"minLength": 1}}]}}, "responses": [{"statusCode": [200], "body": {"json": {"var": "$Instance", "schema": {"type": "object", "props": [{"type": "integer32", "name": "cost", "format": {"minimum": 0}}, {"type": "string", "name": "interval"}, {"type": "string", "name": "namespace"}, {"type": "string", "name": "resourceregion"}, {"type": "string", "name": "timespan", "required": true}, {"type": "array<object>", "name": "value", "required": true, "item": {"type": "object", "props": [{"type": "string", "name": "displayDescription"}, {"type": "string", "name": "errorCode"}, {"type": "string", "name": "errorMessage"}, {"type": "string", "name": "id", "required": true}, {"type": "object", "name": "name", "required": true, "props": [{"type": "string", "name": "localizedValue"}, {"type": "string", "name": "value", "required": true}], "cls": "LocalizableString_read"}, {"type": "array<object>", "name": "timeseries", "required": true, "item": {"type": "object", "props": [{"type": "array<object>", "name": "data", "item": {"type": "object", "props": [{"type": "float64", "name": "average"}, {"type": "float64", "name": "count"}, {"type": "float64", "name": "maximum"}, {"type": "float64", "name": "minimum"}, {"type": "dateTime", "name": "timeStamp", "required": true}, {"type": "float64", "name": "total"}]}, "identifiers": ["timeStamp"]}, {"type": "array<object>", "name": "metadatavalues", "item": {"type": "object", "props": [{"type": "@LocalizableString_read", "name": "name"}, {"type": "string", "name": "value"}]}, "identifiers": ["name"]}]}}, {"type": "string", "name": "type", "required": true}, {"type": "string", "name": "unit", "required": true, "enum": {"items": [{"value": "BitsPerSecond"}, {"value": "ByteSeconds"}, {"value": "Bytes"}, {"value": "BytesPerSecond"}, {"value": "Cores"}, {"value": "Count"}, {"value": "CountPerSecond"}, {"value": "MilliCores"}, {"value": "MilliSeconds"}, {"value": "NanoCores"}, {"value": "Percent"}, {"value": "Seconds"}, {"value": "Unspecified"}]}}]}}]}}}}, {"isError": true, "body": {"json": {"schema": {"type": "@MgmtErrorFormat"}}}}]}}], "outputs": [{"type": "object", "ref": "$Instance", "clientFlatten": true}], "confirmation": ""}]}]}