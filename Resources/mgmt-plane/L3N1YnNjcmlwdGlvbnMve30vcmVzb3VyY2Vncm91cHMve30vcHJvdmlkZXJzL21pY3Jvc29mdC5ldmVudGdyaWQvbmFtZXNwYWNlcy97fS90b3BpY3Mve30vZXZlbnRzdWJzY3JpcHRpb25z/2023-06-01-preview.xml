<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/topics/{}/eventsubscriptions" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L3RvcGljcy97dG9waWNOYW1lfS9ldmVudFN1YnNjcmlwdGlvbnM=/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
  <commandGroup name="eventgrid namespace topic event-subscription">
    <command name="list" version="2023-06-01-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/topics/{}/eventsubscriptions" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L3RvcGljcy97dG9waWNOYW1lfS9ldmVudFN1YnNjcmlwdGlvbnM=/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="Name of the namespace."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Path.topicName" options="topic-name" required="True" idPart="child_name_1">
          <help short="Name of the namespace topic."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="string" var="$Query.filter" options="filter">
          <help short="The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'."/>
        </arg>
        <arg type="integer32" var="$Query.top" options="top">
          <help short="The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page."/>
        </arg>
      </argGroup>
      <operation operationId="NamespaceTopicEventSubscriptions_ListByNamespaceTopic">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/topics/{topicName}/eventSubscriptions">
          <request method="get">
            <path>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              <param type="string" name="topicName" arg="$Path.topicName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
            </path>
            <query>
              <param type="string" name="$filter" arg="$Query.filter"/>
              <param type="integer32" name="$top" arg="$Query.top"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop type="string" name="nextLink"/>
                  <prop type="array<object>" name="value">
                    <item type="object">
                      <prop readOnly="True" type="ResourceId" name="id">
                        <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EventGrid/namespaces/{}/topics/{}/eventSubscriptions/{}"/>
                      </prop>
                      <prop readOnly="True" type="string" name="name"/>
                      <prop type="object" name="properties" clientFlatten="True">
                        <prop type="object" name="deliveryConfiguration">
                          <prop type="string" name="deliveryMode">
                            <enum>
                              <item value="&quot;Queue&quot;"/>
                            </enum>
                          </prop>
                          <prop type="object" name="queue">
                            <prop type="object" name="deadLetterDestinationWithResourceIdentity">
                              <prop type="object" name="deadLetterDestination">
                                <prop type="string" name="endpointType" required="True">
                                  <enum>
                                    <item value="&quot;StorageBlob&quot;"/>
                                  </enum>
                                </prop>
                                <discriminator property="endpointType" value="StorageBlob">
                                  <prop type="object" name="properties" clientFlatten="True">
                                    <prop type="string" name="blobContainerName"/>
                                    <prop type="ResourceId" name="resourceId"/>
                                  </prop>
                                </discriminator>
                              </prop>
                              <prop type="object" name="identity">
                                <prop type="string" name="type">
                                  <enum>
                                    <item value="&quot;SystemAssigned&quot;"/>
                                    <item value="&quot;UserAssigned&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="string" name="userAssignedIdentity"/>
                              </prop>
                            </prop>
                            <prop type="duration" name="eventTimeToLive"/>
                            <prop type="integer32" name="maxDeliveryCount"/>
                            <prop type="integer32" name="receiveLockDurationInSeconds"/>
                          </prop>
                        </prop>
                        <prop type="string" name="eventDeliverySchema">
                          <enum>
                            <item value="&quot;CloudEventSchemaV1_0&quot;"/>
                          </enum>
                        </prop>
                        <prop type="object" name="filtersConfiguration">
                          <prop type="array<object>" name="filters">
                            <item type="object">
                              <prop type="string" name="key"/>
                              <prop type="string" name="operatorType" required="True">
                                <enum>
                                  <item value="&quot;BoolEquals&quot;"/>
                                  <item value="&quot;IsNotNull&quot;"/>
                                  <item value="&quot;IsNullOrUndefined&quot;"/>
                                  <item value="&quot;NumberGreaterThan&quot;"/>
                                  <item value="&quot;NumberGreaterThanOrEquals&quot;"/>
                                  <item value="&quot;NumberIn&quot;"/>
                                  <item value="&quot;NumberInRange&quot;"/>
                                  <item value="&quot;NumberLessThan&quot;"/>
                                  <item value="&quot;NumberLessThanOrEquals&quot;"/>
                                  <item value="&quot;NumberNotIn&quot;"/>
                                  <item value="&quot;NumberNotInRange&quot;"/>
                                  <item value="&quot;StringBeginsWith&quot;"/>
                                  <item value="&quot;StringContains&quot;"/>
                                  <item value="&quot;StringEndsWith&quot;"/>
                                  <item value="&quot;StringIn&quot;"/>
                                  <item value="&quot;StringNotBeginsWith&quot;"/>
                                  <item value="&quot;StringNotContains&quot;"/>
                                  <item value="&quot;StringNotEndsWith&quot;"/>
                                  <item value="&quot;StringNotIn&quot;"/>
                                </enum>
                              </prop>
                              <discriminator property="operatorType" value="BoolEquals">
                                <prop type="boolean" name="value"/>
                              </discriminator>
                              <discriminator property="operatorType" value="NumberGreaterThan">
                                <prop type="float64" name="value"/>
                              </discriminator>
                              <discriminator property="operatorType" value="NumberGreaterThanOrEquals">
                                <prop type="float64" name="value"/>
                              </discriminator>
                              <discriminator property="operatorType" value="NumberIn">
                                <prop type="array<float64>" name="values">
                                  <item type="float64"/>
                                </prop>
                              </discriminator>
                              <discriminator property="operatorType" value="NumberInRange">
                                <prop type="array<array<float64>>" name="values">
                                  <item type="array<float64>">
                                    <item type="float64"/>
                                  </item>
                                </prop>
                              </discriminator>
                              <discriminator property="operatorType" value="NumberLessThan">
                                <prop type="float64" name="value"/>
                              </discriminator>
                              <discriminator property="operatorType" value="NumberLessThanOrEquals">
                                <prop type="float64" name="value"/>
                              </discriminator>
                              <discriminator property="operatorType" value="NumberNotIn">
                                <prop type="array<float64>" name="values">
                                  <item type="float64"/>
                                </prop>
                              </discriminator>
                              <discriminator property="operatorType" value="NumberNotInRange">
                                <prop type="array<array<float64>>" name="values">
                                  <item type="array<float64>">
                                    <item type="float64"/>
                                  </item>
                                </prop>
                              </discriminator>
                              <discriminator property="operatorType" value="StringBeginsWith">
                                <prop type="array<string>" name="values">
                                  <item type="string"/>
                                </prop>
                              </discriminator>
                              <discriminator property="operatorType" value="StringContains">
                                <prop type="array<string>" name="values">
                                  <item type="string"/>
                                </prop>
                              </discriminator>
                              <discriminator property="operatorType" value="StringEndsWith">
                                <prop type="array<string>" name="values">
                                  <item type="string"/>
                                </prop>
                              </discriminator>
                              <discriminator property="operatorType" value="StringIn">
                                <prop type="array<string>" name="values">
                                  <item type="string"/>
                                </prop>
                              </discriminator>
                              <discriminator property="operatorType" value="StringNotBeginsWith">
                                <prop type="array<string>" name="values">
                                  <item type="string"/>
                                </prop>
                              </discriminator>
                              <discriminator property="operatorType" value="StringNotContains">
                                <prop type="array<string>" name="values">
                                  <item type="string"/>
                                </prop>
                              </discriminator>
                              <discriminator property="operatorType" value="StringNotEndsWith">
                                <prop type="array<string>" name="values">
                                  <item type="string"/>
                                </prop>
                              </discriminator>
                              <discriminator property="operatorType" value="StringNotIn">
                                <prop type="array<string>" name="values">
                                  <item type="string"/>
                                </prop>
                              </discriminator>
                            </item>
                          </prop>
                          <prop type="array<string>" name="includedEventTypes">
                            <item type="string"/>
                          </prop>
                        </prop>
                        <prop readOnly="True" type="string" name="provisioningState">
                          <enum>
                            <item value="&quot;AwaitingManualAction&quot;"/>
                            <item value="&quot;Canceled&quot;"/>
                            <item value="&quot;CreateFailed&quot;"/>
                            <item value="&quot;Creating&quot;"/>
                            <item value="&quot;DeleteFailed&quot;"/>
                            <item value="&quot;Deleted&quot;"/>
                            <item value="&quot;Deleting&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                            <item value="&quot;UpdatedFailed&quot;"/>
                            <item value="&quot;Updating&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="object" name="systemData">
                        <prop type="dateTime" name="createdAt"/>
                        <prop type="string" name="createdBy"/>
                        <prop type="string" name="createdByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="lastModifiedAt"/>
                        <prop type="string" name="lastModifiedBy"/>
                        <prop type="string" name="lastModifiedByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="type"/>
                    </item>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="array" ref="$Instance.value" clientFlatten="True" nextLink="$Instance.nextLink"/>
    </command>
  </commandGroup>
</CodeGen>
