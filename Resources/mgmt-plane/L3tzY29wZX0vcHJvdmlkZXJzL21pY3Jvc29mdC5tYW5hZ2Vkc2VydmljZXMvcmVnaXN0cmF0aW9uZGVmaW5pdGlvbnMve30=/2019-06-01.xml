<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/{scope}/providers/microsoft.managedservices/registrationdefinitions/{}" version="2019-06-01" swagger="mgmt-plane/managedservices/ResourceProviders/Microsoft.ManagedServices/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5NYW5hZ2VkU2VydmljZXMvcmVnaXN0cmF0aW9uRGVmaW5pdGlvbnMve3JlZ2lzdHJhdGlvbkRlZmluaXRpb25JZH0=/V/MjAxOS0wNi0wMQ=="/>
  <commandGroup name="managedservices definition">
    <command name="show" version="2019-06-01" confirmation="">
      <resource id="/{scope}/providers/microsoft.managedservices/registrationdefinitions/{}" version="2019-06-01" swagger="mgmt-plane/managedservices/ResourceProviders/Microsoft.ManagedServices/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5NYW5hZ2VkU2VydmljZXMvcmVnaXN0cmF0aW9uRGVmaW5pdGlvbnMve3JlZ2lzdHJhdGlvbkRlZmluaXRpb25JZH0=/V/MjAxOS0wNi0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.registrationDefinitionId" options="definition" required="True" group="">
          <help short="Guid of the registration definition."/>
        </arg>
        <arg type="string" var="$Path.scope" options="scope" required="True">
          <help short="Scope of the resource."/>
        </arg>
      </argGroup>
      <operation operationId="RegistrationDefinitions_Get">
        <http path="/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}">
          <request method="get">
            <path>
              <param type="string" name="registrationDefinitionId" arg="$Path.registrationDefinitionId" required="True"/>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2019-06-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="plan">
                    <prop type="string" name="name" required="True"/>
                    <prop type="string" name="product" required="True"/>
                    <prop type="string" name="publisher" required="True"/>
                    <prop type="string" name="version" required="True"/>
                  </prop>
                  <prop type="object" name="properties">
                    <prop type="array<object>" name="authorizations" required="True">
                      <item type="object">
                        <prop type="array<uuid>" name="delegatedRoleDefinitionIds">
                          <item type="uuid"/>
                        </prop>
                        <prop type="string" name="principalId" required="True"/>
                        <prop type="string" name="principalIdDisplayName"/>
                        <prop type="string" name="roleDefinitionId" required="True"/>
                      </item>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop type="string" name="managedByTenantId" required="True"/>
                    <prop readOnly="True" type="string" name="managedByTenantName"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Created&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;Ready&quot;"/>
                        <item value="&quot;Running&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="registrationDefinitionName"/>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2019-06-01" confirmation="Are you sure you want to perform this operation?">
      <resource id="/{scope}/providers/microsoft.managedservices/registrationdefinitions/{}" version="2019-06-01" swagger="mgmt-plane/managedservices/ResourceProviders/Microsoft.ManagedServices/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5NYW5hZ2VkU2VydmljZXMvcmVnaXN0cmF0aW9uRGVmaW5pdGlvbnMve3JlZ2lzdHJhdGlvbkRlZmluaXRpb25JZH0=/V/MjAxOS0wNi0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.registrationDefinitionId" options="definition" required="True" group="">
          <help short="Guid of the registration definition."/>
        </arg>
        <arg type="string" var="$Path.scope" options="scope" required="True">
          <help short="Scope of the resource."/>
        </arg>
      </argGroup>
      <operation operationId="RegistrationDefinitions_Delete">
        <http path="/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}">
          <request method="delete">
            <path>
              <param type="string" name="registrationDefinitionId" arg="$Path.registrationDefinitionId" required="True"/>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2019-06-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2019-06-01">
      <resource id="/{scope}/providers/microsoft.managedservices/registrationdefinitions/{}" version="2019-06-01" swagger="mgmt-plane/managedservices/ResourceProviders/Microsoft.ManagedServices/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5NYW5hZ2VkU2VydmljZXMvcmVnaXN0cmF0aW9uRGVmaW5pdGlvbnMve3JlZ2lzdHJhdGlvbkRlZmluaXRpb25JZH0=/V/MjAxOS0wNi0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.registrationDefinitionId" options="definition-id" required="True" group="">
          <help short="Guid of the registration definition."/>
        </arg>
        <arg type="string" var="$Path.scope" options="scope" required="True">
          <help short="Scope of the resource."/>
        </arg>
        <arg type="string" var="$requestBody.plan.name" options="plan-name" group="">
          <help short="The plan name."/>
        </arg>
        <arg type="string" var="$requestBody.plan.product" options="plan-product" group="">
          <help short="The product code."/>
        </arg>
        <arg type="string" var="$requestBody.plan.publisher" options="plan-publisher" group="">
          <help short="The publisher ID."/>
        </arg>
        <arg type="string" var="$requestBody.plan.version" options="plan-version" group="">
          <help short="The plan's version."/>
        </arg>
        <arg type="string" var="$requestBody.properties.description" options="description" group="">
          <help short="Description of the registration definition."/>
        </arg>
        <arg type="string" var="$requestBody.properties.managedByTenantId" options="tenant-id" group="">
          <help short="Id of the managedBy tenant."/>
        </arg>
        <arg type="string" var="$requestBody.properties.registrationDefinitionName" options="name" group="">
          <help short="Name of the registration definition."/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="array<object>" var="$requestBody.properties.authorizations" options="authorizations" group="Properties">
          <help short="Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role."/>
          <item type="object">
            <arg type="array<uuid>" var="$requestBody.properties.authorizations[].delegatedRoleDefinitionIds" options="delegated-role-definition-ids">
              <help short="The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users."/>
              <item type="uuid"/>
            </arg>
            <arg type="string" var="$requestBody.properties.authorizations[].principalId" options="principal-id" required="True">
              <help short="Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription"/>
            </arg>
            <arg type="string" var="$requestBody.properties.authorizations[].principalIdDisplayName" options="principal-id-display-name">
              <help short="Display name of the principal Id."/>
            </arg>
            <arg type="string" var="$requestBody.properties.authorizations[].roleDefinitionId" options="role-definition-id" required="True">
              <help short="The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role."/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <operation operationId="RegistrationDefinitions_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}">
          <request method="put">
            <path>
              <param type="string" name="registrationDefinitionId" arg="$Path.registrationDefinitionId" required="True"/>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2019-06-01&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="requestBody" required="True" clientFlatten="True">
                  <prop type="object" name="plan">
                    <prop type="string" name="name" arg="$requestBody.plan.name" required="True"/>
                    <prop type="string" name="product" arg="$requestBody.plan.product" required="True"/>
                    <prop type="string" name="publisher" arg="$requestBody.plan.publisher" required="True"/>
                    <prop type="string" name="version" arg="$requestBody.plan.version" required="True"/>
                  </prop>
                  <prop type="object" name="properties">
                    <prop type="array<object>" name="authorizations" arg="$requestBody.properties.authorizations" required="True">
                      <item type="object">
                        <prop type="array<uuid>" name="delegatedRoleDefinitionIds" arg="$requestBody.properties.authorizations[].delegatedRoleDefinitionIds">
                          <item type="uuid"/>
                        </prop>
                        <prop type="string" name="principalId" arg="$requestBody.properties.authorizations[].principalId" required="True"/>
                        <prop type="string" name="principalIdDisplayName" arg="$requestBody.properties.authorizations[].principalIdDisplayName"/>
                        <prop type="string" name="roleDefinitionId" arg="$requestBody.properties.authorizations[].roleDefinitionId" required="True"/>
                      </item>
                    </prop>
                    <prop type="string" name="description" arg="$requestBody.properties.description"/>
                    <prop type="string" name="managedByTenantId" arg="$requestBody.properties.managedByTenantId" required="True"/>
                    <prop type="string" name="registrationDefinitionName" arg="$requestBody.properties.registrationDefinitionName"/>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="plan">
                    <prop type="string" name="name" required="True"/>
                    <prop type="string" name="product" required="True"/>
                    <prop type="string" name="publisher" required="True"/>
                    <prop type="string" name="version" required="True"/>
                  </prop>
                  <prop type="object" name="properties">
                    <prop type="array<object>" name="authorizations" required="True">
                      <item type="object">
                        <prop type="array<uuid>" name="delegatedRoleDefinitionIds">
                          <item type="uuid"/>
                        </prop>
                        <prop type="string" name="principalId" required="True"/>
                        <prop type="string" name="principalIdDisplayName"/>
                        <prop type="string" name="roleDefinitionId" required="True"/>
                      </item>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop type="string" name="managedByTenantId" required="True"/>
                    <prop readOnly="True" type="string" name="managedByTenantName"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Created&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;Ready&quot;"/>
                        <item value="&quot;Running&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="registrationDefinitionName"/>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2019-06-01">
      <resource id="/{scope}/providers/microsoft.managedservices/registrationdefinitions/{}" version="2019-06-01" swagger="mgmt-plane/managedservices/ResourceProviders/Microsoft.ManagedServices/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5NYW5hZ2VkU2VydmljZXMvcmVnaXN0cmF0aW9uRGVmaW5pdGlvbnMve3JlZ2lzdHJhdGlvbkRlZmluaXRpb25JZH0=/V/MjAxOS0wNi0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.registrationDefinitionId" options="definition" required="True" group="">
          <help short="Guid of the registration definition."/>
        </arg>
        <arg type="string" var="$Path.scope" options="scope" required="True">
          <help short="Scope of the resource."/>
        </arg>
        <arg nullable="True" type="string" var="$requestBody.properties.registrationDefinitionName" options="name" group="">
          <help short="Name of the registration definition."/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="array<object>" var="$requestBody.properties.authorizations" options="authorizations" group="Properties">
          <help short="Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="array<uuid>" var="$requestBody.properties.authorizations[].delegatedRoleDefinitionIds" options="delegated-role-definition-ids">
              <help short="The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users."/>
              <item nullable="True" type="uuid"/>
            </arg>
            <arg type="string" var="$requestBody.properties.authorizations[].principalId" options="principal-id">
              <help short="Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription"/>
            </arg>
            <arg nullable="True" type="string" var="$requestBody.properties.authorizations[].principalIdDisplayName" options="principal-id-display-name">
              <help short="Display name of the principal Id."/>
            </arg>
            <arg type="string" var="$requestBody.properties.authorizations[].roleDefinitionId" options="role-definition-id">
              <help short="The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="string" var="$requestBody.properties.description" options="description" group="Properties">
          <help short="Description of the registration definition."/>
        </arg>
        <arg type="string" var="$requestBody.properties.managedByTenantId" options="managed-by-tenant-id" group="Properties">
          <help short="Id of the managedBy tenant."/>
        </arg>
      </argGroup>
      <argGroup name="RequestBody">
        <arg nullable="True" type="object" var="$requestBody.plan" options="plan" group="RequestBody">
          <help short="Plan details for the managed services."/>
          <arg type="string" var="$requestBody.plan.name" options="name">
            <help short="The plan name."/>
          </arg>
          <arg type="string" var="$requestBody.plan.product" options="product">
            <help short="The product code."/>
          </arg>
          <arg type="string" var="$requestBody.plan.publisher" options="publisher">
            <help short="The publisher ID."/>
          </arg>
          <arg type="string" var="$requestBody.plan.version" options="version">
            <help short="The plan's version."/>
          </arg>
        </arg>
      </argGroup>
      <operation operationId="RegistrationDefinitions_Get">
        <http path="/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}">
          <request method="get">
            <path>
              <param type="string" name="registrationDefinitionId" arg="$Path.registrationDefinitionId" required="True"/>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2019-06-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="RegistrationDefinition_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="plan">
                    <prop type="string" name="name" required="True"/>
                    <prop type="string" name="product" required="True"/>
                    <prop type="string" name="publisher" required="True"/>
                    <prop type="string" name="version" required="True"/>
                  </prop>
                  <prop type="object" name="properties">
                    <prop type="array<object>" name="authorizations" required="True">
                      <item type="object">
                        <prop type="array<uuid>" name="delegatedRoleDefinitionIds">
                          <item type="uuid"/>
                        </prop>
                        <prop type="string" name="principalId" required="True"/>
                        <prop type="string" name="principalIdDisplayName"/>
                        <prop type="string" name="roleDefinitionId" required="True"/>
                      </item>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop type="string" name="managedByTenantId" required="True"/>
                    <prop readOnly="True" type="string" name="managedByTenantName"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Created&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;Ready&quot;"/>
                        <item value="&quot;Running&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="registrationDefinitionName"/>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="requestBody" required="True" clientFlatten="True">
              <prop type="object" name="plan" arg="$requestBody.plan">
                <prop type="string" name="name" arg="$requestBody.plan.name" required="True"/>
                <prop type="string" name="product" arg="$requestBody.plan.product" required="True"/>
                <prop type="string" name="publisher" arg="$requestBody.plan.publisher" required="True"/>
                <prop type="string" name="version" arg="$requestBody.plan.version" required="True"/>
              </prop>
              <prop type="object" name="properties">
                <prop type="array<object>" name="authorizations" arg="$requestBody.properties.authorizations" required="True">
                  <item type="object">
                    <prop type="array<uuid>" name="delegatedRoleDefinitionIds" arg="$requestBody.properties.authorizations[].delegatedRoleDefinitionIds">
                      <item type="uuid"/>
                    </prop>
                    <prop type="string" name="principalId" arg="$requestBody.properties.authorizations[].principalId" required="True"/>
                    <prop type="string" name="principalIdDisplayName" arg="$requestBody.properties.authorizations[].principalIdDisplayName"/>
                    <prop type="string" name="roleDefinitionId" arg="$requestBody.properties.authorizations[].roleDefinitionId" required="True"/>
                  </item>
                </prop>
                <prop type="string" name="description" arg="$requestBody.properties.description"/>
                <prop type="string" name="managedByTenantId" arg="$requestBody.properties.managedByTenantId" required="True"/>
                <prop type="string" name="registrationDefinitionName" arg="$requestBody.properties.registrationDefinitionName"/>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="RegistrationDefinitions_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/{scope}/providers/Microsoft.ManagedServices/registrationDefinitions/{registrationDefinitionId}">
          <request method="put">
            <path>
              <param type="string" name="registrationDefinitionId" arg="$Path.registrationDefinitionId" required="True"/>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2019-06-01&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@RegistrationDefinition_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
