<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devopsinfrastructure/pools/{}" version="2023-12-13-preview" swagger="mgmt-plane/devopsinfrastructure/ResourceProviders/Microsoft.DevOpsInfrastructure/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2T3BzSW5mcmFzdHJ1Y3R1cmUvcG9vbHMve3Bvb2xOYW1lfQ==/V/MjAyMy0xMi0xMy1wcmV2aWV3"/>
  <commandGroup name="mdp pool">
    <command name="show" version="2023-12-13-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devopsinfrastructure/pools/{}" version="2023-12-13-preview" swagger="mgmt-plane/devopsinfrastructure/ResourceProviders/Microsoft.DevOpsInfrastructure/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2T3BzSW5mcmFzdHJ1Y3R1cmUvcG9vbHMve3Bvb2xOYW1lfQ==/V/MjAyMy0xMi0xMy1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.poolName" options="pool-name name n" required="True" idPart="name">
          <help short="Name of the pool. It needs to be globally unique."/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-.]*$"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Pools_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOpsInfrastructure/pools/{poolName}">
          <request method="get">
            <path>
              <param type="string" name="poolName" arg="$Path.poolName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-.]*$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-12-13-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevOpsInfrastructure/pools/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity">
                    <prop readOnly="True" type="uuid" name="principalId"/>
                    <prop readOnly="True" type="uuid" name="tenantId"/>
                    <prop type="string" name="type" required="True">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="uuid" name="clientId"/>
                          <prop readOnly="True" type="uuid" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="agentProfile" required="True">
                      <prop type="string" name="kind" required="True">
                        <enum>
                          <item value="&quot;Stateful&quot;"/>
                          <item value="&quot;Stateless&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="resourcePredictions"/>
                      <discriminator property="kind" value="Stateful">
                        <prop type="string" name="maxAgentLifetime" required="True"/>
                      </discriminator>
                      <discriminator property="kind" value="Stateless"/>
                    </prop>
                    <prop type="string" name="devCenterProjectResourceId" required="True"/>
                    <prop type="object" name="fabricProfile" required="True">
                      <prop type="string" name="kind" required="True">
                        <enum>
                          <item value="&quot;Vmss&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="kind" value="Vmss">
                        <prop type="array<object>" name="images" required="True">
                          <item type="object">
                            <prop type="array<string>" name="aliases">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="buffer">
                              <default value="&quot;*&quot;"/>
                            </prop>
                            <prop type="string" name="resourceId" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="networkProfile">
                          <prop type="string" name="subnetId" required="True"/>
                        </prop>
                        <prop type="object" name="osProfile">
                          <prop type="string" name="logonType">
                            <enum>
                              <item value="&quot;Interactive&quot;"/>
                              <item value="&quot;Service&quot;"/>
                            </enum>
                          </prop>
                          <prop type="object" name="secretsManagementSettings">
                            <prop type="string" name="certificateStoreLocation"/>
                            <prop type="boolean" name="keyExportable" required="True"/>
                            <prop type="array<string>" name="observedCertificates" required="True">
                              <item type="string"/>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sku" required="True">
                          <prop type="string" name="name" required="True"/>
                        </prop>
                        <prop type="object" name="storageProfile">
                          <prop type="string" name="osDiskStorageAccountType">
                            <enum>
                              <item value="&quot;Premium&quot;"/>
                              <item value="&quot;Standard&quot;"/>
                              <item value="&quot;StandardSSD&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                      </discriminator>
                    </prop>
                    <prop type="integer32" name="maximumConcurrency" required="True">
                      <format maximum="10000" minimum="1"/>
                    </prop>
                    <prop type="object" name="organizationProfile" required="True">
                      <prop type="string" name="kind" required="True">
                        <enum>
                          <item value="&quot;AzureDevOps&quot;"/>
                          <item value="&quot;GitHub&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="kind" value="AzureDevOps">
                        <prop type="array<object>" name="organizations" required="True">
                          <item type="object">
                            <prop type="integer32" name="parallelism"/>
                            <prop type="array<string>" name="projects">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="url" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="permissionProfile">
                          <prop type="array<string>" name="groups">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="kind" required="True">
                            <enum>
                              <item value="&quot;CreatorOnly&quot;"/>
                              <item value="&quot;Inherit&quot;"/>
                              <item value="&quot;SpecificAccounts&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<string>" name="users">
                            <item type="string"/>
                          </prop>
                        </prop>
                      </discriminator>
                      <discriminator property="kind" value="GitHub">
                        <prop type="array<object>" name="organizations" required="True">
                          <item type="object">
                            <prop type="array<string>" name="repositories">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="url" required="True"/>
                          </item>
                        </prop>
                      </discriminator>
                    </prop>
                    <prop type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Provisioning&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2023-12-13-preview" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devopsinfrastructure/pools/{}" version="2023-12-13-preview" swagger="mgmt-plane/devopsinfrastructure/ResourceProviders/Microsoft.DevOpsInfrastructure/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2T3BzSW5mcmFzdHJ1Y3R1cmUvcG9vbHMve3Bvb2xOYW1lfQ==/V/MjAyMy0xMi0xMy1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.poolName" options="pool-name name n" required="True" idPart="name">
          <help short="Name of the pool. It needs to be globally unique."/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-.]*$"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Pools_Delete">
        <longRunning finalStateVia="location"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOpsInfrastructure/pools/{poolName}">
          <request method="delete">
            <path>
              <param type="string" name="poolName" arg="$Path.poolName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-.]*$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-12-13-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="202">
            <header>
              <item name="Location"/>
              <item name="Retry-After"/>
            </header>
          </response>
          <response statusCode="204"/>
          <response statusCode="200 201"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2023-12-13-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devopsinfrastructure/pools/{}" version="2023-12-13-preview" swagger="mgmt-plane/devopsinfrastructure/ResourceProviders/Microsoft.DevOpsInfrastructure/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2T3BzSW5mcmFzdHJ1Y3R1cmUvcG9vbHMve3Bvb2xOYW1lfQ==/V/MjAyMy0xMi0xMy1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.poolName" options="pool-name name n" required="True" idPart="name">
          <help short="Name of the pool. It needs to be globally unique."/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-.]*$"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Properties">
        <arg type="object" var="$resource.properties.agentProfile" options="agent-profile" group="Properties">
          <help short="Defines how the machine will be handled once it executed a job."/>
          <arg type="object" var="$resource.properties.agentProfile.Stateful" options="stateful">
            <arg type="string" var="$resource.properties.agentProfile.Stateful.maxAgentLifetime" options="max-agent-lifetime" required="True">
              <help short="How long should stateful machines be kept around. The maximum is one week."/>
            </arg>
          </arg>
          <arg type="object" var="$resource.properties.agentProfile.Stateless" options="stateless">
            <blank value="{}"/>
          </arg>
          <arg type="object" var="$resource.properties.agentProfile.resourcePredictions" options="resource-predictions">
            <blank value="{}"/>
            <help short="Defines pool buffer."/>
          </arg>
        </arg>
        <arg type="string" var="$resource.properties.devCenterProjectResourceId" options="dev-center-project-resource-id dev-center-project-id" group="Properties">
          <help short="The resource id of the DevCenter Project the pool belongs to."/>
        </arg>
        <arg type="object" var="$resource.properties.fabricProfile" options="fabric-profile" group="Properties">
          <help short="Defines the type of fabric the agent will run on."/>
          <arg type="object" var="$resource.properties.fabricProfile.Vmss" options="vmss">
            <arg type="array<object>" var="$resource.properties.fabricProfile.Vmss.images" options="images" required="True">
              <help short="The VM images of the machines in the pool."/>
              <item type="object">
                <arg type="array<string>" var="$resource.properties.fabricProfile.Vmss.images[].aliases" options="aliases">
                  <help short="List of aliases to reference the image by."/>
                  <item type="string"/>
                </arg>
                <arg type="string" var="$resource.properties.fabricProfile.Vmss.images[].buffer" options="buffer">
                  <help short="The percentage of the buffer to be allocated to this image."/>
                  <default value="&quot;*&quot;"/>
                </arg>
                <arg type="string" var="$resource.properties.fabricProfile.Vmss.images[].resourceId" options="resource-id" required="True">
                  <help short="The resource id of the image."/>
                </arg>
              </item>
            </arg>
            <arg type="object" var="$resource.properties.fabricProfile.Vmss.networkProfile" options="network-profile">
              <help short="The network profile of the machines in the pool."/>
              <arg type="string" var="$resource.properties.fabricProfile.Vmss.networkProfile.subnetId" options="subnet-id" required="True">
                <help short="The subnet id on which to put all machines created in the pool."/>
              </arg>
            </arg>
            <arg type="object" var="$resource.properties.fabricProfile.Vmss.osProfile" options="os-profile">
              <help short="The OS profile of the machines in the pool."/>
              <arg type="string" var="$resource.properties.fabricProfile.Vmss.osProfile.logonType" options="logon-type">
                <help short="Determines how the service should be run. By default, this will be set to Service."/>
                <enum>
                  <item name="Interactive" value="&quot;Interactive&quot;"/>
                  <item name="Service" value="&quot;Service&quot;"/>
                </enum>
              </arg>
              <arg type="object" var="$resource.properties.fabricProfile.Vmss.osProfile.secretsManagementSettings" options="secrets-management-settings">
                <help short="The secret management settings of the machines in the pool."/>
                <arg type="string" var="$resource.properties.fabricProfile.Vmss.osProfile.secretsManagementSettings.certificateStoreLocation" options="certificate-store-location">
                  <help short="Where to store certificates on the machine."/>
                </arg>
                <arg type="boolean" var="$resource.properties.fabricProfile.Vmss.osProfile.secretsManagementSettings.keyExportable" options="key-exportable" required="True">
                  <help short="Defines if the key of the certificates should be exportable."/>
                </arg>
                <arg type="array<string>" var="$resource.properties.fabricProfile.Vmss.osProfile.secretsManagementSettings.observedCertificates" options="observed-certificates" required="True">
                  <help short="The list of certificates to install on all machines in the pool."/>
                  <item type="string"/>
                </arg>
              </arg>
            </arg>
            <arg type="object" var="$resource.properties.fabricProfile.Vmss.sku" options="sku" required="True">
              <help short="The Azure SKU of the machines in the pool."/>
              <arg type="string" var="$resource.properties.fabricProfile.Vmss.sku.name" options="name" required="True">
                <help short="The Azure SKU name of the machines in the pool."/>
              </arg>
            </arg>
            <arg type="object" var="$resource.properties.fabricProfile.Vmss.storageProfile" options="storage-profile">
              <help short="The storage profile of the machines in the pool."/>
              <arg type="string" var="$resource.properties.fabricProfile.Vmss.storageProfile.osDiskStorageAccountType" options="os-disk-storage-account-type">
                <help short="The Azure SKU name of the machines in the pool."/>
                <enum>
                  <item name="Premium" value="&quot;Premium&quot;"/>
                  <item name="Standard" value="&quot;Standard&quot;"/>
                  <item name="StandardSSD" value="&quot;StandardSSD&quot;"/>
                </enum>
              </arg>
            </arg>
          </arg>
        </arg>
        <arg type="integer32" var="$resource.properties.maximumConcurrency" options="maximum-concurrency" group="Properties">
          <help short="Defines how many resources can there be created at any given time."/>
          <format maximum="10000" minimum="1"/>
        </arg>
        <arg type="object" var="$resource.properties.organizationProfile" options="organization-profile" group="Properties">
          <help short="Defines the organization in which the pool will be used."/>
          <arg type="object" var="$resource.properties.organizationProfile.AzureDevOps" options="azure-dev-ops">
            <arg type="array<object>" var="$resource.properties.organizationProfile.AzureDevOps.organizations" options="organizations" required="True">
              <help short="The list of Azure DevOps organizations the pool should be present in."/>
              <item type="object">
                <arg type="integer32" var="$resource.properties.organizationProfile.AzureDevOps.organizations[].parallelism" options="parallelism">
                  <help short="How many machines can be created at maximum in this organization out of the maximumConcurrency of the pool."/>
                </arg>
                <arg type="array<string>" var="$resource.properties.organizationProfile.AzureDevOps.organizations[].projects" options="projects">
                  <help short="Optional list of projects in which the pool should be created."/>
                  <item type="string"/>
                </arg>
                <arg type="string" var="$resource.properties.organizationProfile.AzureDevOps.organizations[].url" options="url" required="True">
                  <help short="The Azure DevOps organization URL in which the pool should be created."/>
                </arg>
              </item>
            </arg>
            <arg type="object" var="$resource.properties.organizationProfile.AzureDevOps.permissionProfile" options="permission-profile">
              <help short="The type of permission which determines which accounts are admins on the Azure DevOps pool."/>
              <arg type="array<string>" var="$resource.properties.organizationProfile.AzureDevOps.permissionProfile.groups" options="groups">
                <help short="Group email addresses"/>
                <item type="string"/>
              </arg>
              <arg type="string" var="$resource.properties.organizationProfile.AzureDevOps.permissionProfile.kind" options="kind" required="True">
                <help short="Determines who has admin permissions to the Azure DevOps pool."/>
                <enum>
                  <item name="CreatorOnly" value="&quot;CreatorOnly&quot;"/>
                  <item name="Inherit" value="&quot;Inherit&quot;"/>
                  <item name="SpecificAccounts" value="&quot;SpecificAccounts&quot;"/>
                </enum>
              </arg>
              <arg type="array<string>" var="$resource.properties.organizationProfile.AzureDevOps.permissionProfile.users" options="users">
                <help short="User email addresses"/>
                <item type="string"/>
              </arg>
            </arg>
          </arg>
          <arg type="object" var="$resource.properties.organizationProfile.GitHub" options="git-hub">
            <arg type="array<object>" var="$resource.properties.organizationProfile.GitHub.organizations" options="organizations" required="True">
              <help short="The list of GitHub organizations/repositories the pool should be present in."/>
              <item type="object">
                <arg type="array<string>" var="$resource.properties.organizationProfile.GitHub.organizations[].repositories" options="repositories">
                  <help short="Optional list of repositories in which the pool should be created."/>
                  <item type="string"/>
                </arg>
                <arg type="string" var="$resource.properties.organizationProfile.GitHub.organizations[].url" options="url" required="True">
                  <help short="The GitHub organization URL in which the pool should be created."/>
                </arg>
              </item>
            </arg>
          </arg>
        </arg>
        <arg type="string" var="$resource.properties.provisioningState" options="provisioning-state" group="Properties">
          <help short="The status of the current operation."/>
          <enum>
            <item name="Accepted" value="&quot;Accepted&quot;"/>
            <item name="Canceled" value="&quot;Canceled&quot;"/>
            <item name="Deleting" value="&quot;Deleting&quot;"/>
            <item name="Failed" value="&quot;Failed&quot;"/>
            <item name="Provisioning" value="&quot;Provisioning&quot;"/>
            <item name="Succeeded" value="&quot;Succeeded&quot;"/>
            <item name="Updating" value="&quot;Updating&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <argGroup name="Resource">
        <arg type="object" var="$resource.identity" options="identity" group="Resource">
          <help short="The managed service identities assigned to this resource."/>
          <arg type="string" var="$resource.identity.type" options="type" required="True">
            <help short="Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed)."/>
            <enum>
              <item name="None" value="&quot;None&quot;"/>
              <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
              <item name="SystemAssigned, UserAssigned" value="&quot;SystemAssigned, UserAssigned&quot;"/>
              <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
            </enum>
          </arg>
          <arg type="object" var="$resource.identity.userAssignedIdentities" options="user-assigned-identities">
            <help short="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests."/>
            <additionalProp>
              <item type="object">
                <blank value="{}"/>
              </item>
            </additionalProp>
          </arg>
        </arg>
        <arg type="ResourceLocation" var="$resource.location" options="location l" required="True" group="Resource">
          <help short="The geo-location where the resource lives"/>
        </arg>
        <arg type="object" var="$resource.tags" options="tags" group="Resource">
          <help short="Resource tags."/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <operation operationId="Pools_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOpsInfrastructure/pools/{poolName}">
          <request method="put">
            <path>
              <param type="string" name="poolName" arg="$Path.poolName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-.]*$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-12-13-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="resource" required="True" clientFlatten="True">
                  <prop type="IdentityObject" name="identity" arg="$resource.identity">
                    <prop type="string" name="type" arg="$resource.identity.type" required="True">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities" arg="$resource.identity.userAssignedIdentities">
                      <additionalProp>
                        <item type="object"/>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" arg="$resource.location" required="True"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="agentProfile" arg="$resource.properties.agentProfile" required="True">
                      <prop type="string" name="kind" required="True">
                        <enum>
                          <item arg="$resource.properties.agentProfile.Stateful" value="&quot;Stateful&quot;"/>
                          <item arg="$resource.properties.agentProfile.Stateless" value="&quot;Stateless&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="resourcePredictions" arg="$resource.properties.agentProfile.resourcePredictions"/>
                      <discriminator property="kind" value="Stateful">
                        <prop type="string" name="maxAgentLifetime" arg="$resource.properties.agentProfile.Stateful.maxAgentLifetime" required="True"/>
                      </discriminator>
                      <discriminator property="kind" value="Stateless"/>
                    </prop>
                    <prop type="string" name="devCenterProjectResourceId" arg="$resource.properties.devCenterProjectResourceId" required="True"/>
                    <prop type="object" name="fabricProfile" arg="$resource.properties.fabricProfile" required="True">
                      <prop type="string" name="kind" required="True">
                        <enum>
                          <item arg="$resource.properties.fabricProfile.Vmss" value="&quot;Vmss&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="kind" value="Vmss">
                        <prop type="array<object>" name="images" arg="$resource.properties.fabricProfile.Vmss.images" required="True">
                          <item type="object">
                            <prop type="array<string>" name="aliases" arg="$resource.properties.fabricProfile.Vmss.images[].aliases">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="buffer" arg="$resource.properties.fabricProfile.Vmss.images[].buffer">
                              <default value="&quot;*&quot;"/>
                            </prop>
                            <prop type="string" name="resourceId" arg="$resource.properties.fabricProfile.Vmss.images[].resourceId" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="networkProfile" arg="$resource.properties.fabricProfile.Vmss.networkProfile">
                          <prop type="string" name="subnetId" arg="$resource.properties.fabricProfile.Vmss.networkProfile.subnetId" required="True"/>
                        </prop>
                        <prop type="object" name="osProfile" arg="$resource.properties.fabricProfile.Vmss.osProfile">
                          <prop type="string" name="logonType" arg="$resource.properties.fabricProfile.Vmss.osProfile.logonType">
                            <enum>
                              <item value="&quot;Interactive&quot;"/>
                              <item value="&quot;Service&quot;"/>
                            </enum>
                          </prop>
                          <prop type="object" name="secretsManagementSettings" arg="$resource.properties.fabricProfile.Vmss.osProfile.secretsManagementSettings">
                            <prop type="string" name="certificateStoreLocation" arg="$resource.properties.fabricProfile.Vmss.osProfile.secretsManagementSettings.certificateStoreLocation"/>
                            <prop type="boolean" name="keyExportable" arg="$resource.properties.fabricProfile.Vmss.osProfile.secretsManagementSettings.keyExportable" required="True"/>
                            <prop type="array<string>" name="observedCertificates" arg="$resource.properties.fabricProfile.Vmss.osProfile.secretsManagementSettings.observedCertificates" required="True">
                              <item type="string"/>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sku" arg="$resource.properties.fabricProfile.Vmss.sku" required="True">
                          <prop type="string" name="name" arg="$resource.properties.fabricProfile.Vmss.sku.name" required="True"/>
                        </prop>
                        <prop type="object" name="storageProfile" arg="$resource.properties.fabricProfile.Vmss.storageProfile">
                          <prop type="string" name="osDiskStorageAccountType" arg="$resource.properties.fabricProfile.Vmss.storageProfile.osDiskStorageAccountType">
                            <enum>
                              <item value="&quot;Premium&quot;"/>
                              <item value="&quot;Standard&quot;"/>
                              <item value="&quot;StandardSSD&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                      </discriminator>
                    </prop>
                    <prop type="integer32" name="maximumConcurrency" arg="$resource.properties.maximumConcurrency" required="True">
                      <format maximum="10000" minimum="1"/>
                    </prop>
                    <prop type="object" name="organizationProfile" arg="$resource.properties.organizationProfile" required="True">
                      <prop type="string" name="kind" required="True">
                        <enum>
                          <item arg="$resource.properties.organizationProfile.AzureDevOps" value="&quot;AzureDevOps&quot;"/>
                          <item arg="$resource.properties.organizationProfile.GitHub" value="&quot;GitHub&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="kind" value="AzureDevOps">
                        <prop type="array<object>" name="organizations" arg="$resource.properties.organizationProfile.AzureDevOps.organizations" required="True">
                          <item type="object">
                            <prop type="integer32" name="parallelism" arg="$resource.properties.organizationProfile.AzureDevOps.organizations[].parallelism"/>
                            <prop type="array<string>" name="projects" arg="$resource.properties.organizationProfile.AzureDevOps.organizations[].projects">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="url" arg="$resource.properties.organizationProfile.AzureDevOps.organizations[].url" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="permissionProfile" arg="$resource.properties.organizationProfile.AzureDevOps.permissionProfile">
                          <prop type="array<string>" name="groups" arg="$resource.properties.organizationProfile.AzureDevOps.permissionProfile.groups">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="kind" arg="$resource.properties.organizationProfile.AzureDevOps.permissionProfile.kind" required="True">
                            <enum>
                              <item value="&quot;CreatorOnly&quot;"/>
                              <item value="&quot;Inherit&quot;"/>
                              <item value="&quot;SpecificAccounts&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<string>" name="users" arg="$resource.properties.organizationProfile.AzureDevOps.permissionProfile.users">
                            <item type="string"/>
                          </prop>
                        </prop>
                      </discriminator>
                      <discriminator property="kind" value="GitHub">
                        <prop type="array<object>" name="organizations" arg="$resource.properties.organizationProfile.GitHub.organizations" required="True">
                          <item type="object">
                            <prop type="array<string>" name="repositories" arg="$resource.properties.organizationProfile.GitHub.organizations[].repositories">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="url" arg="$resource.properties.organizationProfile.GitHub.organizations[].url" required="True"/>
                          </item>
                        </prop>
                      </discriminator>
                    </prop>
                    <prop type="string" name="provisioningState" arg="$resource.properties.provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Provisioning&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$resource.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevOpsInfrastructure/pools/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity">
                    <prop readOnly="True" type="uuid" name="principalId"/>
                    <prop readOnly="True" type="uuid" name="tenantId"/>
                    <prop type="string" name="type" required="True">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="uuid" name="clientId"/>
                          <prop readOnly="True" type="uuid" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="agentProfile" required="True">
                      <prop type="string" name="kind" required="True">
                        <enum>
                          <item value="&quot;Stateful&quot;"/>
                          <item value="&quot;Stateless&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="resourcePredictions"/>
                      <discriminator property="kind" value="Stateful">
                        <prop type="string" name="maxAgentLifetime" required="True"/>
                      </discriminator>
                      <discriminator property="kind" value="Stateless"/>
                    </prop>
                    <prop type="string" name="devCenterProjectResourceId" required="True"/>
                    <prop type="object" name="fabricProfile" required="True">
                      <prop type="string" name="kind" required="True">
                        <enum>
                          <item value="&quot;Vmss&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="kind" value="Vmss">
                        <prop type="array<object>" name="images" required="True">
                          <item type="object">
                            <prop type="array<string>" name="aliases">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="buffer">
                              <default value="&quot;*&quot;"/>
                            </prop>
                            <prop type="string" name="resourceId" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="networkProfile">
                          <prop type="string" name="subnetId" required="True"/>
                        </prop>
                        <prop type="object" name="osProfile">
                          <prop type="string" name="logonType">
                            <enum>
                              <item value="&quot;Interactive&quot;"/>
                              <item value="&quot;Service&quot;"/>
                            </enum>
                          </prop>
                          <prop type="object" name="secretsManagementSettings">
                            <prop type="string" name="certificateStoreLocation"/>
                            <prop type="boolean" name="keyExportable" required="True"/>
                            <prop type="array<string>" name="observedCertificates" required="True">
                              <item type="string"/>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sku" required="True">
                          <prop type="string" name="name" required="True"/>
                        </prop>
                        <prop type="object" name="storageProfile">
                          <prop type="string" name="osDiskStorageAccountType">
                            <enum>
                              <item value="&quot;Premium&quot;"/>
                              <item value="&quot;Standard&quot;"/>
                              <item value="&quot;StandardSSD&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                      </discriminator>
                    </prop>
                    <prop type="integer32" name="maximumConcurrency" required="True">
                      <format maximum="10000" minimum="1"/>
                    </prop>
                    <prop type="object" name="organizationProfile" required="True">
                      <prop type="string" name="kind" required="True">
                        <enum>
                          <item value="&quot;AzureDevOps&quot;"/>
                          <item value="&quot;GitHub&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="kind" value="AzureDevOps">
                        <prop type="array<object>" name="organizations" required="True">
                          <item type="object">
                            <prop type="integer32" name="parallelism"/>
                            <prop type="array<string>" name="projects">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="url" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="permissionProfile">
                          <prop type="array<string>" name="groups">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="kind" required="True">
                            <enum>
                              <item value="&quot;CreatorOnly&quot;"/>
                              <item value="&quot;Inherit&quot;"/>
                              <item value="&quot;SpecificAccounts&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<string>" name="users">
                            <item type="string"/>
                          </prop>
                        </prop>
                      </discriminator>
                      <discriminator property="kind" value="GitHub">
                        <prop type="array<object>" name="organizations" required="True">
                          <item type="object">
                            <prop type="array<string>" name="repositories">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="url" required="True"/>
                          </item>
                        </prop>
                      </discriminator>
                    </prop>
                    <prop type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Provisioning&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2023-12-13-preview">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devopsinfrastructure/pools/{}" version="2023-12-13-preview" swagger="mgmt-plane/devopsinfrastructure/ResourceProviders/Microsoft.DevOpsInfrastructure/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2T3BzSW5mcmFzdHJ1Y3R1cmUvcG9vbHMve3Bvb2xOYW1lfQ==/V/MjAyMy0xMi0xMy1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.poolName" options="pool-name name n" required="True" idPart="name">
          <help short="Name of the pool. It needs to be globally unique."/>
          <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-.]*$"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Resource">
        <arg nullable="True" type="object" var="$resource.identity" options="identity" group="Resource">
          <help short="The managed service identities assigned to this resource."/>
          <arg type="string" var="$resource.identity.type" options="type">
            <help short="Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed)."/>
            <enum>
              <item name="None" value="&quot;None&quot;"/>
              <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
              <item name="SystemAssigned, UserAssigned" value="&quot;SystemAssigned, UserAssigned&quot;"/>
              <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
            </enum>
          </arg>
          <arg nullable="True" type="object" var="$resource.identity.userAssignedIdentities" options="user-assigned-identities">
            <help short="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests."/>
            <additionalProp>
              <item nullable="True" type="object">
                <blank value="{}"/>
              </item>
            </additionalProp>
          </arg>
        </arg>
        <arg nullable="True" type="object" var="$resource.tags" options="tags" group="Resource">
          <help short="Resource tags."/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <operation operationId="Pools_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOpsInfrastructure/pools/{poolName}">
          <request method="get">
            <path>
              <param type="string" name="poolName" arg="$Path.poolName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-.]*$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-12-13-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="Pool_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevOpsInfrastructure/pools/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity">
                    <prop readOnly="True" type="uuid" name="principalId"/>
                    <prop readOnly="True" type="uuid" name="tenantId"/>
                    <prop type="string" name="type" required="True">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="uuid" name="clientId"/>
                          <prop readOnly="True" type="uuid" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="agentProfile" required="True">
                      <prop type="string" name="kind" required="True">
                        <enum>
                          <item value="&quot;Stateful&quot;"/>
                          <item value="&quot;Stateless&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="resourcePredictions"/>
                      <discriminator property="kind" value="Stateful">
                        <prop type="string" name="maxAgentLifetime" required="True"/>
                      </discriminator>
                      <discriminator property="kind" value="Stateless"/>
                    </prop>
                    <prop type="string" name="devCenterProjectResourceId" required="True"/>
                    <prop type="object" name="fabricProfile" required="True">
                      <prop type="string" name="kind" required="True">
                        <enum>
                          <item value="&quot;Vmss&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="kind" value="Vmss">
                        <prop type="array<object>" name="images" required="True">
                          <item type="object">
                            <prop type="array<string>" name="aliases">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="buffer">
                              <default value="&quot;*&quot;"/>
                            </prop>
                            <prop type="string" name="resourceId" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="networkProfile">
                          <prop type="string" name="subnetId" required="True"/>
                        </prop>
                        <prop type="object" name="osProfile">
                          <prop type="string" name="logonType">
                            <enum>
                              <item value="&quot;Interactive&quot;"/>
                              <item value="&quot;Service&quot;"/>
                            </enum>
                          </prop>
                          <prop type="object" name="secretsManagementSettings">
                            <prop type="string" name="certificateStoreLocation"/>
                            <prop type="boolean" name="keyExportable" required="True"/>
                            <prop type="array<string>" name="observedCertificates" required="True">
                              <item type="string"/>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="object" name="sku" required="True">
                          <prop type="string" name="name" required="True"/>
                        </prop>
                        <prop type="object" name="storageProfile">
                          <prop type="string" name="osDiskStorageAccountType">
                            <enum>
                              <item value="&quot;Premium&quot;"/>
                              <item value="&quot;Standard&quot;"/>
                              <item value="&quot;StandardSSD&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                      </discriminator>
                    </prop>
                    <prop type="integer32" name="maximumConcurrency" required="True">
                      <format maximum="10000" minimum="1"/>
                    </prop>
                    <prop type="object" name="organizationProfile" required="True">
                      <prop type="string" name="kind" required="True">
                        <enum>
                          <item value="&quot;AzureDevOps&quot;"/>
                          <item value="&quot;GitHub&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="kind" value="AzureDevOps">
                        <prop type="array<object>" name="organizations" required="True">
                          <item type="object">
                            <prop type="integer32" name="parallelism"/>
                            <prop type="array<string>" name="projects">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="url" required="True"/>
                          </item>
                        </prop>
                        <prop type="object" name="permissionProfile">
                          <prop type="array<string>" name="groups">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="kind" required="True">
                            <enum>
                              <item value="&quot;CreatorOnly&quot;"/>
                              <item value="&quot;Inherit&quot;"/>
                              <item value="&quot;SpecificAccounts&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<string>" name="users">
                            <item type="string"/>
                          </prop>
                        </prop>
                      </discriminator>
                      <discriminator property="kind" value="GitHub">
                        <prop type="array<object>" name="organizations" required="True">
                          <item type="object">
                            <prop type="array<string>" name="repositories">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="url" required="True"/>
                          </item>
                        </prop>
                      </discriminator>
                    </prop>
                    <prop type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Accepted&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Provisioning&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="resource" required="True" clientFlatten="True">
              <prop type="IdentityObject" name="identity" arg="$resource.identity">
                <prop type="string" name="type" arg="$resource.identity.type" required="True">
                  <enum>
                    <item value="&quot;None&quot;"/>
                    <item value="&quot;SystemAssigned&quot;"/>
                    <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                    <item value="&quot;UserAssigned&quot;"/>
                  </enum>
                </prop>
                <prop type="object" name="userAssignedIdentities" arg="$resource.identity.userAssignedIdentities">
                  <additionalProp>
                    <item type="object"/>
                  </additionalProp>
                </prop>
              </prop>
              <prop type="object" name="tags" arg="$resource.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="Pools_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOpsInfrastructure/pools/{poolName}">
          <request method="put">
            <path>
              <param type="string" name="poolName" arg="$Path.poolName" required="True">
                <format pattern="^[a-zA-Z0-9][a-zA-Z0-9-.]*$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-12-13-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@Pool_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
