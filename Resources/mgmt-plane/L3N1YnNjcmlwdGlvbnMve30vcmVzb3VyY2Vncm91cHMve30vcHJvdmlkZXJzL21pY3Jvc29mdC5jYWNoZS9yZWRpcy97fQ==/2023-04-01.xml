<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.cache/redis/{}" version="2023-04-01" swagger="mgmt-plane/redis/ResourceProviders/Microsoft.Cache/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ2FjaGUvcmVkaXMve25hbWV9/V/MjAyMy0wNC0wMQ=="/>
  <commandGroup name="cache redis">
    <command name="show" version="2023-04-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.cache/redis/{}" version="2023-04-01" swagger="mgmt-plane/redis/ResourceProviders/Microsoft.Cache/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ2FjaGUvcmVkaXMve25hbWV9/V/MjAyMy0wNC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.name" options="name n" required="True" idPart="name">
          <help short="The name of the Redis cache."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Redis_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}">
          <request method="get">
            <path>
              <param type="string" name="name" arg="$Path.name" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-04-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Cache/redis/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity">
                    <prop readOnly="True" type="uuid" name="principalId"/>
                    <prop readOnly="True" type="uuid" name="tenantId"/>
                    <prop type="string" name="type" required="True">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="uuid" name="clientId"/>
                          <prop readOnly="True" type="uuid" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="object" name="accessKeys">
                      <prop readOnly="True" type="string" name="primaryKey"/>
                      <prop readOnly="True" type="string" name="secondaryKey"/>
                    </prop>
                    <prop type="boolean" name="enableNonSslPort">
                      <default value="false"/>
                    </prop>
                    <prop readOnly="True" type="string" name="hostName"/>
                    <prop readOnly="True" type="array<object>" name="instances" identifiers="shardId">
                      <item type="object">
                        <prop readOnly="True" type="boolean" name="isMaster"/>
                        <prop readOnly="True" type="boolean" name="isPrimary"/>
                        <prop readOnly="True" type="integer32" name="nonSslPort"/>
                        <prop readOnly="True" type="integer32" name="shardId"/>
                        <prop readOnly="True" type="integer32" name="sslPort"/>
                        <prop readOnly="True" type="string" name="zone"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="linkedServers">
                      <item type="object">
                        <prop readOnly="True" type="string" name="id"/>
                      </item>
                    </prop>
                    <prop type="string" name="minimumTlsVersion">
                      <enum>
                        <item value="&quot;1.0&quot;"/>
                        <item value="&quot;1.1&quot;"/>
                        <item value="&quot;1.2&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="integer32" name="port"/>
                    <prop readOnly="True" type="array<object>" name="privateEndpointConnections">
                      <item type="object">
                        <prop readOnly="True" type="ResourceId" name="id">
                          <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Cache/redis/{}/privateEndpointConnections/{}"/>
                        </prop>
                        <prop readOnly="True" type="string" name="name"/>
                        <prop type="object" name="properties" clientFlatten="True">
                          <prop type="object" name="privateEndpoint">
                            <prop readOnly="True" type="string" name="id"/>
                          </prop>
                          <prop type="object" name="privateLinkServiceConnectionState" required="True">
                            <prop type="string" name="actionsRequired"/>
                            <prop type="string" name="description"/>
                            <prop type="string" name="status">
                              <enum>
                                <item value="&quot;Approved&quot;"/>
                                <item value="&quot;Pending&quot;"/>
                                <item value="&quot;Rejected&quot;"/>
                              </enum>
                            </prop>
                          </prop>
                          <prop readOnly="True" type="string" name="provisioningState">
                            <enum>
                              <item value="&quot;Creating&quot;"/>
                              <item value="&quot;Deleting&quot;"/>
                              <item value="&quot;Failed&quot;"/>
                              <item value="&quot;Succeeded&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                        <prop readOnly="True" type="string" name="type"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Linking&quot;"/>
                        <item value="&quot;Provisioning&quot;"/>
                        <item value="&quot;RecoveringScaleFailure&quot;"/>
                        <item value="&quot;Scaling&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Unlinking&quot;"/>
                        <item value="&quot;Unprovisioning&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="publicNetworkAccess">
                      <default value="&quot;Enabled&quot;"/>
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="redisConfiguration">
                      <prop type="string" name="aof-backup-enabled"/>
                      <prop type="string" name="aof-storage-connection-string-0"/>
                      <prop type="string" name="aof-storage-connection-string-1"/>
                      <prop type="string" name="authnotrequired"/>
                      <prop readOnly="True" type="string" name="maxclients"/>
                      <prop type="string" name="maxfragmentationmemory-reserved"/>
                      <prop type="string" name="maxmemory-delta"/>
                      <prop type="string" name="maxmemory-policy"/>
                      <prop type="string" name="maxmemory-reserved"/>
                      <prop readOnly="True" type="string" name="preferred-data-archive-auth-method"/>
                      <prop type="string" name="preferred-data-persistence-auth-method"/>
                      <prop type="string" name="rdb-backup-enabled"/>
                      <prop type="string" name="rdb-backup-frequency"/>
                      <prop type="string" name="rdb-backup-max-snapshot-count"/>
                      <prop type="string" name="rdb-storage-connection-string"/>
                      <prop type="string" name="storage-subscription-id"/>
                      <prop readOnly="True" type="string" name="zonal-configuration"/>
                      <additionalProp anyType="True"/>
                    </prop>
                    <prop type="string" name="redisVersion"/>
                    <prop type="integer32" name="replicasPerMaster"/>
                    <prop type="integer32" name="replicasPerPrimary"/>
                    <prop type="integer32" name="shardCount"/>
                    <prop type="object" name="sku" required="True">
                      <prop type="integer32" name="capacity" required="True"/>
                      <prop type="string" name="family" required="True">
                        <enum>
                          <item value="&quot;C&quot;"/>
                          <item value="&quot;P&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="name" required="True">
                        <enum>
                          <item value="&quot;Basic&quot;"/>
                          <item value="&quot;Premium&quot;"/>
                          <item value="&quot;Standard&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="integer32" name="sslPort"/>
                    <prop type="string" name="staticIP">
                      <format pattern="^\d+\.\d+\.\d+\.\d+$"/>
                    </prop>
                    <prop type="string" name="subnetId">
                      <format pattern="^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"/>
                    </prop>
                    <prop type="object" name="tenantSettings">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                  <prop type="array<string>" name="zones">
                    <item type="string"/>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2023-04-01" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.cache/redis/{}" version="2023-04-01" swagger="mgmt-plane/redis/ResourceProviders/Microsoft.Cache/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ2FjaGUvcmVkaXMve25hbWV9/V/MjAyMy0wNC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.name" options="name n" required="True" idPart="name">
          <help short="The name of the Redis cache."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="Redis_Delete">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}">
          <request method="delete">
            <path>
              <param type="string" name="name" arg="$Path.name" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-04-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="202"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2023-04-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.cache/redis/{}" version="2023-04-01" swagger="mgmt-plane/redis/ResourceProviders/Microsoft.Cache/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ2FjaGUvcmVkaXMve25hbWV9/V/MjAyMy0wNC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.name" options="name n" required="True" idPart="name">
          <help short="The name of the Redis cache."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="object" var="$parameters.identity" options="identity" group="Parameters">
          <help short="The identity of the resource."/>
          <arg type="string" var="$parameters.identity.type" options="type" required="True">
            <help short="Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed)."/>
            <enum>
              <item name="None" value="&quot;None&quot;"/>
              <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
              <item name="SystemAssigned, UserAssigned" value="&quot;SystemAssigned, UserAssigned&quot;"/>
              <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
            </enum>
          </arg>
          <arg type="object" var="$parameters.identity.userAssignedIdentities" options="user-assigned-identities">
            <help short="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests."/>
            <additionalProp>
              <item type="object">
                <blank value="{}"/>
              </item>
            </additionalProp>
          </arg>
        </arg>
        <arg type="string" var="$parameters.location" options="location" required="True" group="Parameters">
          <help short="The geo-location where the resource lives"/>
        </arg>
        <arg type="object" var="$parameters.tags" options="tags" group="Parameters">
          <help short="Resource tags."/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
        <arg type="array<string>" var="$parameters.zones" options="zones" group="Parameters">
          <help short="A list of availability zones denoting where the resource needs to come from."/>
          <item type="string"/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="boolean" var="$parameters.properties.enableNonSslPort" options="enable-non-ssl-port" group="Properties">
          <help short="Specifies whether the non-ssl Redis server port (6379) is enabled."/>
          <default value="false"/>
        </arg>
        <arg type="string" var="$parameters.properties.minimumTlsVersion" options="minimum-tls-version" group="Properties">
          <help short="Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')"/>
          <enum>
            <item name="1.0" value="&quot;1.0&quot;"/>
            <item name="1.1" value="&quot;1.1&quot;"/>
            <item name="1.2" value="&quot;1.2&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$parameters.properties.publicNetworkAccess" options="public-network-access" group="Properties">
          <help short="Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'"/>
          <default value="&quot;Enabled&quot;"/>
          <enum>
            <item name="Disabled" value="&quot;Disabled&quot;"/>
            <item name="Enabled" value="&quot;Enabled&quot;"/>
          </enum>
        </arg>
        <arg type="object" var="$parameters.properties.redisConfiguration" options="redis-configuration" group="Properties">
          <help short="All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc."/>
          <arg type="string" var="$parameters.properties.redisConfiguration.aof-backup-enabled" options="aof-backup-enabled">
            <help short="Specifies whether the aof backup is enabled"/>
          </arg>
          <arg type="string" var="$parameters.properties.redisConfiguration.aof-storage-connection-string-0" options="aof-storage-connection-string-0">
            <help short="First storage account connection string"/>
          </arg>
          <arg type="string" var="$parameters.properties.redisConfiguration.aof-storage-connection-string-1" options="aof-storage-connection-string-1">
            <help short="Second storage account connection string"/>
          </arg>
          <arg type="string" var="$parameters.properties.redisConfiguration.authnotrequired" options="authnotrequired">
            <help short="Specifies whether the authentication is disabled. Setting this property is highly discouraged from security point of view."/>
          </arg>
          <arg type="string" var="$parameters.properties.redisConfiguration.maxfragmentationmemory-reserved" options="maxfragmentationmemory-reserved">
            <help short="Value in megabytes reserved for fragmentation per shard"/>
          </arg>
          <arg type="string" var="$parameters.properties.redisConfiguration.maxmemory-delta" options="maxmemory-delta">
            <help short="Value in megabytes reserved for non-cache usage per shard e.g. failover."/>
          </arg>
          <arg type="string" var="$parameters.properties.redisConfiguration.maxmemory-policy" options="maxmemory-policy">
            <help short="The eviction strategy used when your data won't fit within its memory limit."/>
          </arg>
          <arg type="string" var="$parameters.properties.redisConfiguration.maxmemory-reserved" options="maxmemory-reserved">
            <help short="Value in megabytes reserved for non-cache usage per shard e.g. failover."/>
          </arg>
          <arg type="string" var="$parameters.properties.redisConfiguration.preferred-data-persistence-auth-method" options="preferred-data-persistence-auth-method">
            <help short="Preferred auth method to communicate to storage account used for data persistence, specify SAS or ManagedIdentity, default value is SAS"/>
          </arg>
          <arg type="string" var="$parameters.properties.redisConfiguration.rdb-backup-enabled" options="rdb-backup-enabled">
            <help short="Specifies whether the rdb backup is enabled"/>
          </arg>
          <arg type="string" var="$parameters.properties.redisConfiguration.rdb-backup-frequency" options="rdb-backup-frequency">
            <help short="Specifies the frequency for creating rdb backup in minutes. Valid values: (15, 30, 60, 360, 720, 1440)"/>
          </arg>
          <arg type="string" var="$parameters.properties.redisConfiguration.rdb-backup-max-snapshot-count" options="rdb-backup-max-snapshot-count">
            <help short="Specifies the maximum number of snapshots for rdb backup"/>
          </arg>
          <arg type="string" var="$parameters.properties.redisConfiguration.rdb-storage-connection-string" options="rdb-storage-connection-string">
            <help short="The storage account connection string for storing rdb file"/>
          </arg>
          <arg type="string" var="$parameters.properties.redisConfiguration.storage-subscription-id" options="storage-subscription-id">
            <help short="SubscriptionId of the storage account for persistence (aof/rdb) using ManagedIdentity."/>
          </arg>
          <additionalProp anyType="True"/>
        </arg>
        <arg type="string" var="$parameters.properties.redisVersion" options="redis-version" group="Properties">
          <help short="Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'."/>
        </arg>
        <arg type="integer32" var="$parameters.properties.replicasPerMaster" options="replicas-per-master" group="Properties">
          <help short="The number of replicas to be created per primary."/>
        </arg>
        <arg type="integer32" var="$parameters.properties.replicasPerPrimary" options="replicas-per-primary" group="Properties">
          <help short="The number of replicas to be created per primary."/>
        </arg>
        <arg type="integer32" var="$parameters.properties.shardCount" options="shard-count" group="Properties">
          <help short="The number of shards to be created on a Premium Cluster Cache."/>
        </arg>
        <arg type="object" var="$parameters.properties.sku" options="sku" required="True" group="Properties">
          <help short="The SKU of the Redis cache to deploy."/>
          <arg type="integer32" var="$parameters.properties.sku.capacity" options="capacity" required="True">
            <help short="The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4)."/>
          </arg>
          <arg type="string" var="$parameters.properties.sku.family" options="family" required="True">
            <help short="The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium)."/>
            <enum>
              <item name="C" value="&quot;C&quot;"/>
              <item name="P" value="&quot;P&quot;"/>
            </enum>
          </arg>
          <arg type="string" var="$parameters.properties.sku.name" options="name" required="True">
            <help short="The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)"/>
            <enum>
              <item name="Basic" value="&quot;Basic&quot;"/>
              <item name="Premium" value="&quot;Premium&quot;"/>
              <item name="Standard" value="&quot;Standard&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg type="string" var="$parameters.properties.staticIP" options="static-ip" group="Properties">
          <help short="Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default."/>
          <format pattern="^\d+\.\d+\.\d+\.\d+$"/>
        </arg>
        <arg type="string" var="$parameters.properties.subnetId" options="subnet-id" group="Properties">
          <help short="The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1"/>
          <format pattern="^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"/>
        </arg>
        <arg type="object" var="$parameters.properties.tenantSettings" options="tenant-settings" group="Properties">
          <help short="A dictionary of tenant settings"/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <operation operationId="Redis_Create">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}">
          <request method="put">
            <path>
              <param type="string" name="name" arg="$Path.name" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-04-01&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="IdentityObject" name="identity" arg="$parameters.identity">
                    <prop type="string" name="type" arg="$parameters.identity.type" required="True">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities" arg="$parameters.identity.userAssignedIdentities">
                      <additionalProp>
                        <item type="object"/>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="string" name="location" arg="$parameters.location" required="True"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="boolean" name="enableNonSslPort" arg="$parameters.properties.enableNonSslPort">
                      <default value="false"/>
                    </prop>
                    <prop type="string" name="minimumTlsVersion" arg="$parameters.properties.minimumTlsVersion">
                      <enum>
                        <item value="&quot;1.0&quot;"/>
                        <item value="&quot;1.1&quot;"/>
                        <item value="&quot;1.2&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="publicNetworkAccess" arg="$parameters.properties.publicNetworkAccess">
                      <default value="&quot;Enabled&quot;"/>
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="redisConfiguration" arg="$parameters.properties.redisConfiguration">
                      <prop type="string" name="aof-backup-enabled" arg="$parameters.properties.redisConfiguration.aof-backup-enabled"/>
                      <prop type="string" name="aof-storage-connection-string-0" arg="$parameters.properties.redisConfiguration.aof-storage-connection-string-0"/>
                      <prop type="string" name="aof-storage-connection-string-1" arg="$parameters.properties.redisConfiguration.aof-storage-connection-string-1"/>
                      <prop type="string" name="authnotrequired" arg="$parameters.properties.redisConfiguration.authnotrequired"/>
                      <prop type="string" name="maxfragmentationmemory-reserved" arg="$parameters.properties.redisConfiguration.maxfragmentationmemory-reserved"/>
                      <prop type="string" name="maxmemory-delta" arg="$parameters.properties.redisConfiguration.maxmemory-delta"/>
                      <prop type="string" name="maxmemory-policy" arg="$parameters.properties.redisConfiguration.maxmemory-policy"/>
                      <prop type="string" name="maxmemory-reserved" arg="$parameters.properties.redisConfiguration.maxmemory-reserved"/>
                      <prop type="string" name="preferred-data-persistence-auth-method" arg="$parameters.properties.redisConfiguration.preferred-data-persistence-auth-method"/>
                      <prop type="string" name="rdb-backup-enabled" arg="$parameters.properties.redisConfiguration.rdb-backup-enabled"/>
                      <prop type="string" name="rdb-backup-frequency" arg="$parameters.properties.redisConfiguration.rdb-backup-frequency"/>
                      <prop type="string" name="rdb-backup-max-snapshot-count" arg="$parameters.properties.redisConfiguration.rdb-backup-max-snapshot-count"/>
                      <prop type="string" name="rdb-storage-connection-string" arg="$parameters.properties.redisConfiguration.rdb-storage-connection-string"/>
                      <prop type="string" name="storage-subscription-id" arg="$parameters.properties.redisConfiguration.storage-subscription-id"/>
                      <additionalProp anyType="True"/>
                    </prop>
                    <prop type="string" name="redisVersion" arg="$parameters.properties.redisVersion"/>
                    <prop type="integer32" name="replicasPerMaster" arg="$parameters.properties.replicasPerMaster"/>
                    <prop type="integer32" name="replicasPerPrimary" arg="$parameters.properties.replicasPerPrimary"/>
                    <prop type="integer32" name="shardCount" arg="$parameters.properties.shardCount"/>
                    <prop type="object" name="sku" arg="$parameters.properties.sku" required="True">
                      <prop type="integer32" name="capacity" arg="$parameters.properties.sku.capacity" required="True"/>
                      <prop type="string" name="family" arg="$parameters.properties.sku.family" required="True">
                        <enum>
                          <item value="&quot;C&quot;"/>
                          <item value="&quot;P&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="name" arg="$parameters.properties.sku.name" required="True">
                        <enum>
                          <item value="&quot;Basic&quot;"/>
                          <item value="&quot;Premium&quot;"/>
                          <item value="&quot;Standard&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="string" name="staticIP" arg="$parameters.properties.staticIP">
                      <format pattern="^\d+\.\d+\.\d+\.\d+$"/>
                    </prop>
                    <prop type="string" name="subnetId" arg="$parameters.properties.subnetId">
                      <format pattern="^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"/>
                    </prop>
                    <prop type="object" name="tenantSettings" arg="$parameters.properties.tenantSettings">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$parameters.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop type="array<string>" name="zones" arg="$parameters.zones">
                    <item type="string"/>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Cache/redis/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity">
                    <prop readOnly="True" type="uuid" name="principalId"/>
                    <prop readOnly="True" type="uuid" name="tenantId"/>
                    <prop type="string" name="type" required="True">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="uuid" name="clientId"/>
                          <prop readOnly="True" type="uuid" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="object" name="accessKeys">
                      <prop readOnly="True" type="string" name="primaryKey"/>
                      <prop readOnly="True" type="string" name="secondaryKey"/>
                    </prop>
                    <prop type="boolean" name="enableNonSslPort">
                      <default value="false"/>
                    </prop>
                    <prop readOnly="True" type="string" name="hostName"/>
                    <prop readOnly="True" type="array<object>" name="instances" identifiers="shardId">
                      <item type="object">
                        <prop readOnly="True" type="boolean" name="isMaster"/>
                        <prop readOnly="True" type="boolean" name="isPrimary"/>
                        <prop readOnly="True" type="integer32" name="nonSslPort"/>
                        <prop readOnly="True" type="integer32" name="shardId"/>
                        <prop readOnly="True" type="integer32" name="sslPort"/>
                        <prop readOnly="True" type="string" name="zone"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="linkedServers">
                      <item type="object">
                        <prop readOnly="True" type="string" name="id"/>
                      </item>
                    </prop>
                    <prop type="string" name="minimumTlsVersion">
                      <enum>
                        <item value="&quot;1.0&quot;"/>
                        <item value="&quot;1.1&quot;"/>
                        <item value="&quot;1.2&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="integer32" name="port"/>
                    <prop readOnly="True" type="array<object>" name="privateEndpointConnections">
                      <item type="object">
                        <prop readOnly="True" type="ResourceId" name="id">
                          <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Cache/redis/{}/privateEndpointConnections/{}"/>
                        </prop>
                        <prop readOnly="True" type="string" name="name"/>
                        <prop type="object" name="properties" clientFlatten="True">
                          <prop type="object" name="privateEndpoint">
                            <prop readOnly="True" type="string" name="id"/>
                          </prop>
                          <prop type="object" name="privateLinkServiceConnectionState" required="True">
                            <prop type="string" name="actionsRequired"/>
                            <prop type="string" name="description"/>
                            <prop type="string" name="status">
                              <enum>
                                <item value="&quot;Approved&quot;"/>
                                <item value="&quot;Pending&quot;"/>
                                <item value="&quot;Rejected&quot;"/>
                              </enum>
                            </prop>
                          </prop>
                          <prop readOnly="True" type="string" name="provisioningState">
                            <enum>
                              <item value="&quot;Creating&quot;"/>
                              <item value="&quot;Deleting&quot;"/>
                              <item value="&quot;Failed&quot;"/>
                              <item value="&quot;Succeeded&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                        <prop readOnly="True" type="string" name="type"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Linking&quot;"/>
                        <item value="&quot;Provisioning&quot;"/>
                        <item value="&quot;RecoveringScaleFailure&quot;"/>
                        <item value="&quot;Scaling&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Unlinking&quot;"/>
                        <item value="&quot;Unprovisioning&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="publicNetworkAccess">
                      <default value="&quot;Enabled&quot;"/>
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="redisConfiguration">
                      <prop type="string" name="aof-backup-enabled"/>
                      <prop type="string" name="aof-storage-connection-string-0"/>
                      <prop type="string" name="aof-storage-connection-string-1"/>
                      <prop type="string" name="authnotrequired"/>
                      <prop readOnly="True" type="string" name="maxclients"/>
                      <prop type="string" name="maxfragmentationmemory-reserved"/>
                      <prop type="string" name="maxmemory-delta"/>
                      <prop type="string" name="maxmemory-policy"/>
                      <prop type="string" name="maxmemory-reserved"/>
                      <prop readOnly="True" type="string" name="preferred-data-archive-auth-method"/>
                      <prop type="string" name="preferred-data-persistence-auth-method"/>
                      <prop type="string" name="rdb-backup-enabled"/>
                      <prop type="string" name="rdb-backup-frequency"/>
                      <prop type="string" name="rdb-backup-max-snapshot-count"/>
                      <prop type="string" name="rdb-storage-connection-string"/>
                      <prop type="string" name="storage-subscription-id"/>
                      <prop readOnly="True" type="string" name="zonal-configuration"/>
                      <additionalProp anyType="True"/>
                    </prop>
                    <prop type="string" name="redisVersion"/>
                    <prop type="integer32" name="replicasPerMaster"/>
                    <prop type="integer32" name="replicasPerPrimary"/>
                    <prop type="integer32" name="shardCount"/>
                    <prop type="object" name="sku" required="True">
                      <prop type="integer32" name="capacity" required="True"/>
                      <prop type="string" name="family" required="True">
                        <enum>
                          <item value="&quot;C&quot;"/>
                          <item value="&quot;P&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="name" required="True">
                        <enum>
                          <item value="&quot;Basic&quot;"/>
                          <item value="&quot;Premium&quot;"/>
                          <item value="&quot;Standard&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="integer32" name="sslPort"/>
                    <prop type="string" name="staticIP">
                      <format pattern="^\d+\.\d+\.\d+\.\d+$"/>
                    </prop>
                    <prop type="string" name="subnetId">
                      <format pattern="^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"/>
                    </prop>
                    <prop type="object" name="tenantSettings">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                  <prop type="array<string>" name="zones">
                    <item type="string"/>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2023-04-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.cache/redis/{}" version="2023-04-01" swagger="mgmt-plane/redis/ResourceProviders/Microsoft.Cache/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ2FjaGUvcmVkaXMve25hbWV9/V/MjAyMy0wNC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.name" options="name n" required="True" idPart="name">
          <help short="The name of the Redis cache."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Parameters">
        <arg nullable="True" type="object" var="$parameters.identity" options="identity" group="Parameters">
          <help short="The identity of the resource."/>
          <arg type="string" var="$parameters.identity.type" options="type">
            <help short="Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed)."/>
            <enum>
              <item name="None" value="&quot;None&quot;"/>
              <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
              <item name="SystemAssigned, UserAssigned" value="&quot;SystemAssigned, UserAssigned&quot;"/>
              <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
            </enum>
          </arg>
          <arg nullable="True" type="object" var="$parameters.identity.userAssignedIdentities" options="user-assigned-identities">
            <help short="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests."/>
            <additionalProp>
              <item nullable="True" type="object">
                <blank value="{}"/>
              </item>
            </additionalProp>
          </arg>
        </arg>
        <arg nullable="True" type="object" var="$parameters.tags" options="tags" group="Parameters">
          <help short="Resource tags."/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
        <arg nullable="True" type="array<string>" var="$parameters.zones" options="zones" group="Parameters">
          <help short="A list of availability zones denoting where the resource needs to come from."/>
          <item nullable="True" type="string"/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="boolean" var="$parameters.properties.enableNonSslPort" options="enable-non-ssl-port" group="Properties">
          <help short="Specifies whether the non-ssl Redis server port (6379) is enabled."/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.minimumTlsVersion" options="minimum-tls-version" group="Properties">
          <help short="Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')"/>
          <enum>
            <item name="1.0" value="&quot;1.0&quot;"/>
            <item name="1.1" value="&quot;1.1&quot;"/>
            <item name="1.2" value="&quot;1.2&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.publicNetworkAccess" options="public-network-access" group="Properties">
          <help short="Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'"/>
          <enum>
            <item name="Disabled" value="&quot;Disabled&quot;"/>
            <item name="Enabled" value="&quot;Enabled&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.redisConfiguration" options="redis-configuration" group="Properties">
          <help short="All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc."/>
          <arg nullable="True" type="string" var="$parameters.properties.redisConfiguration.aof-backup-enabled" options="aof-backup-enabled">
            <help short="Specifies whether the aof backup is enabled"/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.redisConfiguration.aof-storage-connection-string-0" options="aof-storage-connection-string-0">
            <help short="First storage account connection string"/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.redisConfiguration.aof-storage-connection-string-1" options="aof-storage-connection-string-1">
            <help short="Second storage account connection string"/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.redisConfiguration.authnotrequired" options="authnotrequired">
            <help short="Specifies whether the authentication is disabled. Setting this property is highly discouraged from security point of view."/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.redisConfiguration.maxfragmentationmemory-reserved" options="maxfragmentationmemory-reserved">
            <help short="Value in megabytes reserved for fragmentation per shard"/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.redisConfiguration.maxmemory-delta" options="maxmemory-delta">
            <help short="Value in megabytes reserved for non-cache usage per shard e.g. failover."/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.redisConfiguration.maxmemory-policy" options="maxmemory-policy">
            <help short="The eviction strategy used when your data won't fit within its memory limit."/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.redisConfiguration.maxmemory-reserved" options="maxmemory-reserved">
            <help short="Value in megabytes reserved for non-cache usage per shard e.g. failover."/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.redisConfiguration.preferred-data-persistence-auth-method" options="preferred-data-persistence-auth-method">
            <help short="Preferred auth method to communicate to storage account used for data persistence, specify SAS or ManagedIdentity, default value is SAS"/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.redisConfiguration.rdb-backup-enabled" options="rdb-backup-enabled">
            <help short="Specifies whether the rdb backup is enabled"/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.redisConfiguration.rdb-backup-frequency" options="rdb-backup-frequency">
            <help short="Specifies the frequency for creating rdb backup in minutes. Valid values: (15, 30, 60, 360, 720, 1440)"/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.redisConfiguration.rdb-backup-max-snapshot-count" options="rdb-backup-max-snapshot-count">
            <help short="Specifies the maximum number of snapshots for rdb backup"/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.redisConfiguration.rdb-storage-connection-string" options="rdb-storage-connection-string">
            <help short="The storage account connection string for storing rdb file"/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.redisConfiguration.storage-subscription-id" options="storage-subscription-id">
            <help short="SubscriptionId of the storage account for persistence (aof/rdb) using ManagedIdentity."/>
          </arg>
          <additionalProp anyType="True"/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.redisVersion" options="redis-version" group="Properties">
          <help short="Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'."/>
        </arg>
        <arg nullable="True" type="integer32" var="$parameters.properties.replicasPerMaster" options="replicas-per-master" group="Properties">
          <help short="The number of replicas to be created per primary."/>
        </arg>
        <arg nullable="True" type="integer32" var="$parameters.properties.replicasPerPrimary" options="replicas-per-primary" group="Properties">
          <help short="The number of replicas to be created per primary."/>
        </arg>
        <arg nullable="True" type="integer32" var="$parameters.properties.shardCount" options="shard-count" group="Properties">
          <help short="The number of shards to be created on a Premium Cluster Cache."/>
        </arg>
        <arg type="object" var="$parameters.properties.sku" options="sku" group="Properties">
          <help short="The SKU of the Redis cache to deploy."/>
          <arg type="integer32" var="$parameters.properties.sku.capacity" options="capacity">
            <help short="The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4)."/>
          </arg>
          <arg type="string" var="$parameters.properties.sku.family" options="family">
            <help short="The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium)."/>
            <enum>
              <item name="C" value="&quot;C&quot;"/>
              <item name="P" value="&quot;P&quot;"/>
            </enum>
          </arg>
          <arg type="string" var="$parameters.properties.sku.name" options="name">
            <help short="The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)"/>
            <enum>
              <item name="Basic" value="&quot;Basic&quot;"/>
              <item name="Premium" value="&quot;Premium&quot;"/>
              <item name="Standard" value="&quot;Standard&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.subnetId" options="subnet-id" group="Properties">
          <help short="The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1"/>
          <format pattern="^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"/>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.tenantSettings" options="tenant-settings" group="Properties">
          <help short="A dictionary of tenant settings"/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <operation operationId="Redis_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}">
          <request method="get">
            <path>
              <param type="string" name="name" arg="$Path.name" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-04-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="RedisResource_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Cache/redis/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity">
                    <prop readOnly="True" type="uuid" name="principalId"/>
                    <prop readOnly="True" type="uuid" name="tenantId"/>
                    <prop type="string" name="type" required="True">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="uuid" name="clientId"/>
                          <prop readOnly="True" type="uuid" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="object" name="accessKeys">
                      <prop readOnly="True" type="string" name="primaryKey"/>
                      <prop readOnly="True" type="string" name="secondaryKey"/>
                    </prop>
                    <prop type="boolean" name="enableNonSslPort">
                      <default value="false"/>
                    </prop>
                    <prop readOnly="True" type="string" name="hostName"/>
                    <prop readOnly="True" type="array<object>" name="instances" identifiers="shardId">
                      <item type="object">
                        <prop readOnly="True" type="boolean" name="isMaster"/>
                        <prop readOnly="True" type="boolean" name="isPrimary"/>
                        <prop readOnly="True" type="integer32" name="nonSslPort"/>
                        <prop readOnly="True" type="integer32" name="shardId"/>
                        <prop readOnly="True" type="integer32" name="sslPort"/>
                        <prop readOnly="True" type="string" name="zone"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="linkedServers">
                      <item type="object">
                        <prop readOnly="True" type="string" name="id"/>
                      </item>
                    </prop>
                    <prop type="string" name="minimumTlsVersion">
                      <enum>
                        <item value="&quot;1.0&quot;"/>
                        <item value="&quot;1.1&quot;"/>
                        <item value="&quot;1.2&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="integer32" name="port"/>
                    <prop readOnly="True" type="array<object>" name="privateEndpointConnections">
                      <item type="object">
                        <prop readOnly="True" type="ResourceId" name="id">
                          <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Cache/redis/{}/privateEndpointConnections/{}"/>
                        </prop>
                        <prop readOnly="True" type="string" name="name"/>
                        <prop type="object" name="properties" clientFlatten="True">
                          <prop type="object" name="privateEndpoint">
                            <prop readOnly="True" type="string" name="id"/>
                          </prop>
                          <prop type="object" name="privateLinkServiceConnectionState" required="True">
                            <prop type="string" name="actionsRequired"/>
                            <prop type="string" name="description"/>
                            <prop type="string" name="status">
                              <enum>
                                <item value="&quot;Approved&quot;"/>
                                <item value="&quot;Pending&quot;"/>
                                <item value="&quot;Rejected&quot;"/>
                              </enum>
                            </prop>
                          </prop>
                          <prop readOnly="True" type="string" name="provisioningState">
                            <enum>
                              <item value="&quot;Creating&quot;"/>
                              <item value="&quot;Deleting&quot;"/>
                              <item value="&quot;Failed&quot;"/>
                              <item value="&quot;Succeeded&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                        <prop readOnly="True" type="string" name="type"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Linking&quot;"/>
                        <item value="&quot;Provisioning&quot;"/>
                        <item value="&quot;RecoveringScaleFailure&quot;"/>
                        <item value="&quot;Scaling&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Unlinking&quot;"/>
                        <item value="&quot;Unprovisioning&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="publicNetworkAccess">
                      <default value="&quot;Enabled&quot;"/>
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="redisConfiguration">
                      <prop type="string" name="aof-backup-enabled"/>
                      <prop type="string" name="aof-storage-connection-string-0"/>
                      <prop type="string" name="aof-storage-connection-string-1"/>
                      <prop type="string" name="authnotrequired"/>
                      <prop readOnly="True" type="string" name="maxclients"/>
                      <prop type="string" name="maxfragmentationmemory-reserved"/>
                      <prop type="string" name="maxmemory-delta"/>
                      <prop type="string" name="maxmemory-policy"/>
                      <prop type="string" name="maxmemory-reserved"/>
                      <prop readOnly="True" type="string" name="preferred-data-archive-auth-method"/>
                      <prop type="string" name="preferred-data-persistence-auth-method"/>
                      <prop type="string" name="rdb-backup-enabled"/>
                      <prop type="string" name="rdb-backup-frequency"/>
                      <prop type="string" name="rdb-backup-max-snapshot-count"/>
                      <prop type="string" name="rdb-storage-connection-string"/>
                      <prop type="string" name="storage-subscription-id"/>
                      <prop readOnly="True" type="string" name="zonal-configuration"/>
                      <additionalProp anyType="True"/>
                    </prop>
                    <prop type="string" name="redisVersion"/>
                    <prop type="integer32" name="replicasPerMaster"/>
                    <prop type="integer32" name="replicasPerPrimary"/>
                    <prop type="integer32" name="shardCount"/>
                    <prop type="object" name="sku" required="True">
                      <prop type="integer32" name="capacity" required="True"/>
                      <prop type="string" name="family" required="True">
                        <enum>
                          <item value="&quot;C&quot;"/>
                          <item value="&quot;P&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="name" required="True">
                        <enum>
                          <item value="&quot;Basic&quot;"/>
                          <item value="&quot;Premium&quot;"/>
                          <item value="&quot;Standard&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="integer32" name="sslPort"/>
                    <prop type="string" name="staticIP">
                      <format pattern="^\d+\.\d+\.\d+\.\d+$"/>
                    </prop>
                    <prop type="string" name="subnetId">
                      <format pattern="^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"/>
                    </prop>
                    <prop type="object" name="tenantSettings">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                  <prop type="array<string>" name="zones">
                    <item type="string"/>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="parameters" required="True" clientFlatten="True">
              <prop type="IdentityObject" name="identity" arg="$parameters.identity">
                <prop type="string" name="type" arg="$parameters.identity.type" required="True">
                  <enum>
                    <item value="&quot;None&quot;"/>
                    <item value="&quot;SystemAssigned&quot;"/>
                    <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                    <item value="&quot;UserAssigned&quot;"/>
                  </enum>
                </prop>
                <prop type="object" name="userAssignedIdentities" arg="$parameters.identity.userAssignedIdentities">
                  <additionalProp>
                    <item type="object"/>
                  </additionalProp>
                </prop>
              </prop>
              <prop type="object" name="properties" required="True" clientFlatten="True">
                <prop type="boolean" name="enableNonSslPort" arg="$parameters.properties.enableNonSslPort">
                  <default value="false"/>
                </prop>
                <prop type="string" name="minimumTlsVersion" arg="$parameters.properties.minimumTlsVersion">
                  <enum>
                    <item value="&quot;1.0&quot;"/>
                    <item value="&quot;1.1&quot;"/>
                    <item value="&quot;1.2&quot;"/>
                  </enum>
                </prop>
                <prop type="string" name="publicNetworkAccess" arg="$parameters.properties.publicNetworkAccess">
                  <default value="&quot;Enabled&quot;"/>
                  <enum>
                    <item value="&quot;Disabled&quot;"/>
                    <item value="&quot;Enabled&quot;"/>
                  </enum>
                </prop>
                <prop type="object" name="redisConfiguration" arg="$parameters.properties.redisConfiguration">
                  <prop type="string" name="aof-backup-enabled" arg="$parameters.properties.redisConfiguration.aof-backup-enabled"/>
                  <prop type="string" name="aof-storage-connection-string-0" arg="$parameters.properties.redisConfiguration.aof-storage-connection-string-0"/>
                  <prop type="string" name="aof-storage-connection-string-1" arg="$parameters.properties.redisConfiguration.aof-storage-connection-string-1"/>
                  <prop type="string" name="authnotrequired" arg="$parameters.properties.redisConfiguration.authnotrequired"/>
                  <prop type="string" name="maxfragmentationmemory-reserved" arg="$parameters.properties.redisConfiguration.maxfragmentationmemory-reserved"/>
                  <prop type="string" name="maxmemory-delta" arg="$parameters.properties.redisConfiguration.maxmemory-delta"/>
                  <prop type="string" name="maxmemory-policy" arg="$parameters.properties.redisConfiguration.maxmemory-policy"/>
                  <prop type="string" name="maxmemory-reserved" arg="$parameters.properties.redisConfiguration.maxmemory-reserved"/>
                  <prop type="string" name="preferred-data-persistence-auth-method" arg="$parameters.properties.redisConfiguration.preferred-data-persistence-auth-method"/>
                  <prop type="string" name="rdb-backup-enabled" arg="$parameters.properties.redisConfiguration.rdb-backup-enabled"/>
                  <prop type="string" name="rdb-backup-frequency" arg="$parameters.properties.redisConfiguration.rdb-backup-frequency"/>
                  <prop type="string" name="rdb-backup-max-snapshot-count" arg="$parameters.properties.redisConfiguration.rdb-backup-max-snapshot-count"/>
                  <prop type="string" name="rdb-storage-connection-string" arg="$parameters.properties.redisConfiguration.rdb-storage-connection-string"/>
                  <prop type="string" name="storage-subscription-id" arg="$parameters.properties.redisConfiguration.storage-subscription-id"/>
                  <additionalProp anyType="True"/>
                </prop>
                <prop type="string" name="redisVersion" arg="$parameters.properties.redisVersion"/>
                <prop type="integer32" name="replicasPerMaster" arg="$parameters.properties.replicasPerMaster"/>
                <prop type="integer32" name="replicasPerPrimary" arg="$parameters.properties.replicasPerPrimary"/>
                <prop type="integer32" name="shardCount" arg="$parameters.properties.shardCount"/>
                <prop type="object" name="sku" arg="$parameters.properties.sku" required="True">
                  <prop type="integer32" name="capacity" arg="$parameters.properties.sku.capacity" required="True"/>
                  <prop type="string" name="family" arg="$parameters.properties.sku.family" required="True">
                    <enum>
                      <item value="&quot;C&quot;"/>
                      <item value="&quot;P&quot;"/>
                    </enum>
                  </prop>
                  <prop type="string" name="name" arg="$parameters.properties.sku.name" required="True">
                    <enum>
                      <item value="&quot;Basic&quot;"/>
                      <item value="&quot;Premium&quot;"/>
                      <item value="&quot;Standard&quot;"/>
                    </enum>
                  </prop>
                </prop>
                <prop type="string" name="subnetId" arg="$parameters.properties.subnetId">
                  <format pattern="^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"/>
                </prop>
                <prop type="object" name="tenantSettings" arg="$parameters.properties.tenantSettings">
                  <additionalProp>
                    <item type="string"/>
                  </additionalProp>
                </prop>
              </prop>
              <prop type="object" name="tags" arg="$parameters.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
              <prop type="array<string>" name="zones" arg="$parameters.zones">
                <item type="string"/>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="Redis_Create">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}">
          <request method="put">
            <path>
              <param type="string" name="name" arg="$Path.name" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-04-01&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@RedisResource_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
