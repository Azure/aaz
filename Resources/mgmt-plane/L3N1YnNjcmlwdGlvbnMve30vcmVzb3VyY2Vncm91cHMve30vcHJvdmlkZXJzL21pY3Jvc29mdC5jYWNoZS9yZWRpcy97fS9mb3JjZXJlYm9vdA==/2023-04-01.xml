<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.cache/redis/{}/forcereboot" version="2023-04-01" swagger="mgmt-plane/redis/ResourceProviders/Microsoft.Cache/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ2FjaGUvcmVkaXMve25hbWV9L2ZvcmNlUmVib290/V/MjAyMy0wNC0wMQ=="/>
  <commandGroup name="cache redis">
    <command name="force-reboot" version="2023-04-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.cache/redis/{}/forcereboot" version="2023-04-01" swagger="mgmt-plane/redis/ResourceProviders/Microsoft.Cache/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ2FjaGUvcmVkaXMve25hbWV9L2ZvcmNlUmVib290/V/MjAyMy0wNC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.name" options="name" required="True" idPart="name">
          <help short="The name of the Redis cache."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="array<integer>" var="$parameters.ports" options="ports" group="Parameters">
          <help short="A list of redis instances to reboot, specified by per-instance SSL ports or non-SSL ports."/>
          <item type="integer"/>
        </arg>
        <arg type="string" var="$parameters.rebootType" options="reboot-type" group="Parameters">
          <help short="Which Redis node(s) to reboot. Depending on this value data loss is possible."/>
          <enum>
            <item name="AllNodes" value="&quot;AllNodes&quot;"/>
            <item name="PrimaryNode" value="&quot;PrimaryNode&quot;"/>
            <item name="SecondaryNode" value="&quot;SecondaryNode&quot;"/>
          </enum>
        </arg>
        <arg type="integer32" var="$parameters.shardId" options="shard-id" group="Parameters">
          <help short="If clustering is enabled, the ID of the shard to be rebooted."/>
        </arg>
      </argGroup>
      <operation operationId="Redis_ForceReboot">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/forceReboot">
          <request method="post">
            <path>
              <param type="string" name="name" arg="$Path.name" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-04-01&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="array<integer>" name="ports" arg="$parameters.ports">
                    <item type="integer"/>
                  </prop>
                  <prop type="string" name="rebootType" arg="$parameters.rebootType">
                    <enum>
                      <item value="&quot;AllNodes&quot;"/>
                      <item value="&quot;PrimaryNode&quot;"/>
                      <item value="&quot;SecondaryNode&quot;"/>
                    </enum>
                  </prop>
                  <prop type="integer32" name="shardId" arg="$parameters.shardId"/>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="string" name="message"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
