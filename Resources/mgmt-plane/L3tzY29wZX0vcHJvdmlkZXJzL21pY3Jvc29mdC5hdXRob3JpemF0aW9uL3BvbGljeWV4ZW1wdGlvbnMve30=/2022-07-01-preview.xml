<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/{scope}/providers/microsoft.authorization/policyexemptions/{}" version="2022-07-01-preview" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUV4ZW1wdGlvbnMve3BvbGljeUV4ZW1wdGlvbk5hbWV9/V/MjAyMi0wNy0wMS1wcmV2aWV3"/>
  <commandGroup name="policy exemption">
    <command name="show" version="2022-07-01-preview" confirmation="">
      <resource id="/{scope}/providers/microsoft.authorization/policyexemptions/{}" version="2022-07-01-preview" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUV4ZW1wdGlvbnMve3BvbGljeUV4ZW1wdGlvbk5hbWV9/V/MjAyMi0wNy0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.policyExemptionName" options="name n" required="True" group="">
          <help short="The name of the policy exemption."/>
        </arg>
        <arg type="string" var="$Path.scope" options="scope" required="True" group="">
          <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
        </arg>
      </argGroup>
      <operation operationId="PolicyExemptions_Get">
        <http path="/{scope}/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}">
          <request method="get">
            <path>
              <param type="string" name="policyExemptionName" arg="$Path.policyExemptionName" required="True"/>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-07-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/{scope}/providers/Microsoft.Authorization/policyExemptions/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="string" name="assignmentScopeValidation">
                      <default value="&quot;Default&quot;"/>
                      <enum>
                        <item value="&quot;Default&quot;"/>
                        <item value="&quot;DoNotValidate&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop type="string" name="displayName"/>
                    <prop type="string" name="exemptionCategory" required="True">
                      <enum>
                        <item value="&quot;Mitigated&quot;"/>
                        <item value="&quot;Waiver&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="expiresOn"/>
                    <prop type="object" name="metadata">
                      <additionalProp>
                        <item type="any"/>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="policyAssignmentId" required="True"/>
                    <prop type="array<string>" name="policyDefinitionReferenceIds">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="resourceSelectors" identifiers="name">
                      <item type="object">
                        <prop type="string" name="name"/>
                        <prop type="array<object>" name="selectors">
                          <item type="object">
                            <prop type="array<string>" name="in">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="kind">
                              <enum>
                                <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                <item value="&quot;resourceLocation&quot;"/>
                                <item value="&quot;resourceType&quot;"/>
                                <item value="&quot;resourceWithoutLocation&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<string>" name="notIn">
                              <item type="string"/>
                            </prop>
                          </item>
                        </prop>
                      </item>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2022-07-01-preview" confirmation="">
      <resource id="/{scope}/providers/microsoft.authorization/policyexemptions/{}" version="2022-07-01-preview" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUV4ZW1wdGlvbnMve3BvbGljeUV4ZW1wdGlvbk5hbWV9/V/MjAyMi0wNy0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.policyExemptionName" options="name n" required="True" group="">
          <help short="The name of the policy exemption."/>
        </arg>
        <arg type="string" var="$Path.scope" options="scope" required="True" group="">
          <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
        </arg>
      </argGroup>
      <operation operationId="PolicyExemptions_Delete">
        <http path="/{scope}/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}">
          <request method="delete">
            <path>
              <param type="string" name="policyExemptionName" arg="$Path.policyExemptionName" required="True"/>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-07-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2022-07-01-preview" confirmation="">
      <resource id="/{scope}/providers/microsoft.authorization/policyexemptions/{}" version="2022-07-01-preview" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUV4ZW1wdGlvbnMve3BvbGljeUV4ZW1wdGlvbk5hbWV9/V/MjAyMi0wNy0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.policyExemptionName" options="name n" required="True" group="">
          <help short="The name of the policy exemption."/>
        </arg>
        <arg type="string" var="$Path.scope" options="scope" required="True" group="">
          <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$parameters.properties.assignmentScopeValidation" options="assignment-scope-validation v" group="Properties">
          <help short="The assignment scope validation" lines="Indicates the type of validation to perform on the assignment scope. Valid values are Default, DoNotValidate."/>
          <default value="&quot;Default&quot;"/>
          <enum>
            <item name="Default" value="&quot;Default&quot;"/>
            <item name="DoNotValidate" value="&quot;DoNotValidate&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$parameters.properties.description" options="description" group="Properties">
          <help short="Policy exemption description." lines="Full description of the policy exemption."/>
        </arg>
        <arg type="string" var="$parameters.properties.displayName" options="display-name" group="Properties">
          <help short="The display name of the policy exemption." lines="The display name of the policy exemption is not part of its ID, allowing for longer and more flexible naming."/>
        </arg>
        <arg type="string" var="$parameters.properties.exemptionCategory" options="exemption-category e" required="True" group="Properties">
          <help short="The policy exemption category." lines="The policy exemption category. Possible values are Mitigated and Waiver."/>
          <enum>
            <item name="Mitigated" value="&quot;Mitigated&quot;"/>
            <item name="Waiver" value="&quot;Waiver&quot;"/>
          </enum>
        </arg>
        <arg type="dateTime" var="$parameters.properties.expiresOn" options="expires-on" group="Properties">
          <help short="The expiration date and time." lines="The expiration date and time of the policy exemption in UTC ISO 8601 format, e.g. yyyy-MM-ddTHH:mm:ssZ."/>
        </arg>
        <arg type="object" var="$parameters.properties.metadata" options="metadata" group="Properties">
          <help short="The policy exemption metadata." lines="The policy exemption metadata. Metadata is an open-ended object and is typically a collection of key value pairs."/>
          <additionalProp>
            <item type="any"/>
          </additionalProp>
        </arg>
        <arg type="string" var="$parameters.properties.policyAssignmentId" options="policy-assignment a" required="True" group="Properties">
          <help short="The policy assignment to exempt." lines="The resource ID of the policy assignment to exempt."/>
        </arg>
        <arg type="array<string>" var="$parameters.properties.policyDefinitionReferenceIds" options="policy-definition-reference-ids r" group="Properties">
          <help short="The policy definition reference IDs." lines="The collection of policy definition reference IDs to exempt when the policy assignment is an assignment of a policy set definition."/>
          <item type="string"/>
        </arg>
        <arg type="array<object>" var="$parameters.properties.resourceSelectors" options="resource-selectors" group="Properties">
          <help short="The resource selectors list to filter policies by resource properties." lines="The collection of resource selector expressions used to filter policy exemption applicability by certain resource property values."/>
          <item type="object">
            <arg type="string" var="$parameters.properties.resourceSelectors[].name" options="name">
              <help short="The name of the resource selector."/>
            </arg>
            <arg type="array<object>" var="$parameters.properties.resourceSelectors[].selectors" options="selectors">
              <help short="The list of the selector expressions."/>
              <item type="object">
                <arg type="array<string>" var="$parameters.properties.resourceSelectors[].selectors[].in" options="in">
                  <help short="The list of values to filter in."/>
                  <item type="string"/>
                </arg>
                <arg type="string" var="$parameters.properties.resourceSelectors[].selectors[].kind" options="kind">
                  <help short="The selector kind."/>
                  <enum>
                    <item name="policyDefinitionReferenceId" value="&quot;policyDefinitionReferenceId&quot;"/>
                    <item name="resourceLocation" value="&quot;resourceLocation&quot;"/>
                    <item name="resourceType" value="&quot;resourceType&quot;"/>
                    <item name="resourceWithoutLocation" value="&quot;resourceWithoutLocation&quot;"/>
                  </enum>
                </arg>
                <arg type="array<string>" var="$parameters.properties.resourceSelectors[].selectors[].notIn" options="not-in">
                  <help short="The list of values to filter out."/>
                  <item type="string"/>
                </arg>
              </item>
            </arg>
          </item>
        </arg>
      </argGroup>
      <operation operationId="PolicyExemptions_CreateOrUpdate">
        <http path="/{scope}/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}">
          <request method="put">
            <path>
              <param type="string" name="policyExemptionName" arg="$Path.policyExemptionName" required="True"/>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-07-01-preview&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="string" name="assignmentScopeValidation" arg="$parameters.properties.assignmentScopeValidation">
                      <default value="&quot;Default&quot;"/>
                      <enum>
                        <item value="&quot;Default&quot;"/>
                        <item value="&quot;DoNotValidate&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="description" arg="$parameters.properties.description"/>
                    <prop type="string" name="displayName" arg="$parameters.properties.displayName"/>
                    <prop type="string" name="exemptionCategory" arg="$parameters.properties.exemptionCategory" required="True">
                      <enum>
                        <item value="&quot;Mitigated&quot;"/>
                        <item value="&quot;Waiver&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="expiresOn" arg="$parameters.properties.expiresOn"/>
                    <prop type="object" name="metadata" arg="$parameters.properties.metadata">
                      <additionalProp>
                        <item type="any"/>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="policyAssignmentId" arg="$parameters.properties.policyAssignmentId" required="True"/>
                    <prop type="array<string>" name="policyDefinitionReferenceIds" arg="$parameters.properties.policyDefinitionReferenceIds">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="resourceSelectors" arg="$parameters.properties.resourceSelectors" identifiers="name">
                      <item type="object">
                        <prop type="string" name="name" arg="$parameters.properties.resourceSelectors[].name"/>
                        <prop type="array<object>" name="selectors" arg="$parameters.properties.resourceSelectors[].selectors">
                          <item type="object">
                            <prop type="array<string>" name="in" arg="$parameters.properties.resourceSelectors[].selectors[].in">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="kind" arg="$parameters.properties.resourceSelectors[].selectors[].kind">
                              <enum>
                                <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                <item value="&quot;resourceLocation&quot;"/>
                                <item value="&quot;resourceType&quot;"/>
                                <item value="&quot;resourceWithoutLocation&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<string>" name="notIn" arg="$parameters.properties.resourceSelectors[].selectors[].notIn">
                              <item type="string"/>
                            </prop>
                          </item>
                        </prop>
                      </item>
                    </prop>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/{scope}/providers/Microsoft.Authorization/policyExemptions/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="string" name="assignmentScopeValidation">
                      <default value="&quot;Default&quot;"/>
                      <enum>
                        <item value="&quot;Default&quot;"/>
                        <item value="&quot;DoNotValidate&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop type="string" name="displayName"/>
                    <prop type="string" name="exemptionCategory" required="True">
                      <enum>
                        <item value="&quot;Mitigated&quot;"/>
                        <item value="&quot;Waiver&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="expiresOn"/>
                    <prop type="object" name="metadata">
                      <additionalProp>
                        <item type="any"/>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="policyAssignmentId" required="True"/>
                    <prop type="array<string>" name="policyDefinitionReferenceIds">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="resourceSelectors" identifiers="name">
                      <item type="object">
                        <prop type="string" name="name"/>
                        <prop type="array<object>" name="selectors">
                          <item type="object">
                            <prop type="array<string>" name="in">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="kind">
                              <enum>
                                <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                <item value="&quot;resourceLocation&quot;"/>
                                <item value="&quot;resourceType&quot;"/>
                                <item value="&quot;resourceWithoutLocation&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<string>" name="notIn">
                              <item type="string"/>
                            </prop>
                          </item>
                        </prop>
                      </item>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2022-07-01-preview" confirmation="">
      <resource id="/{scope}/providers/microsoft.authorization/policyexemptions/{}" version="2022-07-01-preview" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3tzY29wZX0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUV4ZW1wdGlvbnMve3BvbGljeUV4ZW1wdGlvbk5hbWV9/V/MjAyMi0wNy0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.policyExemptionName" options="name n" required="True" group="">
          <help short="The name of the policy exemption."/>
        </arg>
        <arg type="string" var="$Path.scope" options="scope" required="True" group="">
          <help short="The scope of the policy assignment." lines="Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'. The scope of an assignment is always the part of its ID preceding '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. If scope is not provided, the scope will be the implied or specified subscription."/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="string" var="$parameters.properties.assignmentScopeValidation" options="assignment-scope-validation v" group="Properties">
          <help short="The assignment scope validation" lines="Indicates the type of validation to perform on the assignment scope. Valid values are Default, DoNotValidate."/>
          <enum>
            <item name="Default" value="&quot;Default&quot;"/>
            <item name="DoNotValidate" value="&quot;DoNotValidate&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.description" options="description" group="Properties">
          <help short="Policy exemption description." lines="Full description of the policy exemption."/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.displayName" options="display-name" group="Properties">
          <help short="The display name of the policy exemption." lines="The display name of the policy exemption is not part of its ID, allowing for longer and more flexible naming."/>
        </arg>
        <arg type="string" var="$parameters.properties.exemptionCategory" options="exemption-category e" group="Properties">
          <help short="The policy exemption category." lines="The policy exemption category. Possible values are Mitigated and Waiver."/>
          <enum>
            <item name="Mitigated" value="&quot;Mitigated&quot;"/>
            <item name="Waiver" value="&quot;Waiver&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="dateTime" var="$parameters.properties.expiresOn" options="expires-on" group="Properties">
          <help short="The expiration date and time." lines="The expiration date and time of the policy exemption in UTC ISO 8601 format, e.g. yyyy-MM-ddTHH:mm:ssZ."/>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.metadata" options="metadata" group="Properties">
          <help short="The policy exemption metadata." lines="The policy exemption metadata. Metadata is an open-ended object and is typically a collection of key value pairs."/>
          <additionalProp>
            <item nullable="True" type="any"/>
          </additionalProp>
        </arg>
        <arg type="string" var="$parameters.properties.policyAssignmentId" options="policy-assignment a" group="Properties">
          <help short="The policy assignment to exempt." lines="The resource ID of the policy assignment to exempt."/>
        </arg>
        <arg nullable="True" type="array<string>" var="$parameters.properties.policyDefinitionReferenceIds" options="policy-definition-reference-ids r" group="Properties">
          <help short="The policy definition reference IDs." lines="The collection of policy definition reference IDs to exempt when the policy assignment is an assignment of a policy set definition."/>
          <item nullable="True" type="string"/>
        </arg>
        <arg nullable="True" type="array<object>" var="$parameters.properties.resourceSelectors" options="resource-selectors" group="Properties">
          <help short="The resource selectors list to filter policies by resource properties." lines="The collection of resource selector expressions used to filter policy exemption applicability by certain resource property values."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$parameters.properties.resourceSelectors[].name" options="name">
              <help short="The name of the resource selector."/>
            </arg>
            <arg nullable="True" type="array<object>" var="$parameters.properties.resourceSelectors[].selectors" options="selectors">
              <help short="The list of the selector expressions."/>
              <item nullable="True" type="object">
                <arg nullable="True" type="array<string>" var="$parameters.properties.resourceSelectors[].selectors[].in" options="in">
                  <help short="The list of values to filter in."/>
                  <item nullable="True" type="string"/>
                </arg>
                <arg nullable="True" type="string" var="$parameters.properties.resourceSelectors[].selectors[].kind" options="kind">
                  <help short="The selector kind."/>
                  <enum>
                    <item name="policyDefinitionReferenceId" value="&quot;policyDefinitionReferenceId&quot;"/>
                    <item name="resourceLocation" value="&quot;resourceLocation&quot;"/>
                    <item name="resourceType" value="&quot;resourceType&quot;"/>
                    <item name="resourceWithoutLocation" value="&quot;resourceWithoutLocation&quot;"/>
                  </enum>
                </arg>
                <arg nullable="True" type="array<string>" var="$parameters.properties.resourceSelectors[].selectors[].notIn" options="not-in">
                  <help short="The list of values to filter out."/>
                  <item nullable="True" type="string"/>
                </arg>
              </item>
            </arg>
          </item>
        </arg>
      </argGroup>
      <operation operationId="PolicyExemptions_Get">
        <http path="/{scope}/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}">
          <request method="get">
            <path>
              <param type="string" name="policyExemptionName" arg="$Path.policyExemptionName" required="True"/>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-07-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="PolicyExemption_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/{scope}/providers/Microsoft.Authorization/policyExemptions/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="string" name="assignmentScopeValidation">
                      <default value="&quot;Default&quot;"/>
                      <enum>
                        <item value="&quot;Default&quot;"/>
                        <item value="&quot;DoNotValidate&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop type="string" name="displayName"/>
                    <prop type="string" name="exemptionCategory" required="True">
                      <enum>
                        <item value="&quot;Mitigated&quot;"/>
                        <item value="&quot;Waiver&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="expiresOn"/>
                    <prop type="object" name="metadata">
                      <additionalProp>
                        <item type="any"/>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="policyAssignmentId" required="True"/>
                    <prop type="array<string>" name="policyDefinitionReferenceIds">
                      <item type="string"/>
                    </prop>
                    <prop type="array<object>" name="resourceSelectors" identifiers="name">
                      <item type="object">
                        <prop type="string" name="name"/>
                        <prop type="array<object>" name="selectors">
                          <item type="object">
                            <prop type="array<string>" name="in">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="kind">
                              <enum>
                                <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                <item value="&quot;resourceLocation&quot;"/>
                                <item value="&quot;resourceType&quot;"/>
                                <item value="&quot;resourceWithoutLocation&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<string>" name="notIn">
                              <item type="string"/>
                            </prop>
                          </item>
                        </prop>
                      </item>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="parameters" required="True" clientFlatten="True">
              <prop type="object" name="properties" required="True" clientFlatten="True">
                <prop type="string" name="assignmentScopeValidation" arg="$parameters.properties.assignmentScopeValidation">
                  <default value="&quot;Default&quot;"/>
                  <enum>
                    <item value="&quot;Default&quot;"/>
                    <item value="&quot;DoNotValidate&quot;"/>
                  </enum>
                </prop>
                <prop type="string" name="description" arg="$parameters.properties.description"/>
                <prop type="string" name="displayName" arg="$parameters.properties.displayName"/>
                <prop type="string" name="exemptionCategory" arg="$parameters.properties.exemptionCategory" required="True">
                  <enum>
                    <item value="&quot;Mitigated&quot;"/>
                    <item value="&quot;Waiver&quot;"/>
                  </enum>
                </prop>
                <prop type="dateTime" name="expiresOn" arg="$parameters.properties.expiresOn"/>
                <prop type="object" name="metadata" arg="$parameters.properties.metadata">
                  <additionalProp>
                    <item type="any"/>
                  </additionalProp>
                </prop>
                <prop type="string" name="policyAssignmentId" arg="$parameters.properties.policyAssignmentId" required="True"/>
                <prop type="array<string>" name="policyDefinitionReferenceIds" arg="$parameters.properties.policyDefinitionReferenceIds">
                  <item type="string"/>
                </prop>
                <prop type="array<object>" name="resourceSelectors" arg="$parameters.properties.resourceSelectors" identifiers="name">
                  <item type="object">
                    <prop type="string" name="name" arg="$parameters.properties.resourceSelectors[].name"/>
                    <prop type="array<object>" name="selectors" arg="$parameters.properties.resourceSelectors[].selectors">
                      <item type="object">
                        <prop type="array<string>" name="in" arg="$parameters.properties.resourceSelectors[].selectors[].in">
                          <item type="string"/>
                        </prop>
                        <prop type="string" name="kind" arg="$parameters.properties.resourceSelectors[].selectors[].kind">
                          <enum>
                            <item value="&quot;policyDefinitionReferenceId&quot;"/>
                            <item value="&quot;resourceLocation&quot;"/>
                            <item value="&quot;resourceType&quot;"/>
                            <item value="&quot;resourceWithoutLocation&quot;"/>
                          </enum>
                        </prop>
                        <prop type="array<string>" name="notIn" arg="$parameters.properties.resourceSelectors[].selectors[].notIn">
                          <item type="string"/>
                        </prop>
                      </item>
                    </prop>
                  </item>
                </prop>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="PolicyExemptions_CreateOrUpdate">
        <http path="/{scope}/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}">
          <request method="put">
            <path>
              <param type="string" name="policyExemptionName" arg="$Path.policyExemptionName" required="True"/>
              <param type="string" name="scope" arg="$Path.scope" required="True" skipUrlEncoding="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-07-01-preview&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@PolicyExemption_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
