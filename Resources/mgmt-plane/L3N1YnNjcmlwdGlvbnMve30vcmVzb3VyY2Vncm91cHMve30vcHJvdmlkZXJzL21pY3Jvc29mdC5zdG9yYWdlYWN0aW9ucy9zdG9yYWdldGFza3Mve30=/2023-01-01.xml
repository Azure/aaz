<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.storageactions/storagetasks/{}" version="2023-01-01" swagger="mgmt-plane/storageactions/ResourceProviders/Microsoft.StorageActions/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU3RvcmFnZUFjdGlvbnMvc3RvcmFnZVRhc2tzL3tzdG9yYWdlVGFza05hbWV9/V/MjAyMy0wMS0wMQ=="/>
  <commandGroup name="storage-actions task">
    <command name="show" version="2023-01-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.storageactions/storagetasks/{}" version="2023-01-01" swagger="mgmt-plane/storageactions/ResourceProviders/Microsoft.StorageActions/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU3RvcmFnZUFjdGlvbnMvc3RvcmFnZVRhc2tzL3tzdG9yYWdlVGFza05hbWV9/V/MjAyMy0wMS0wMQ=="/>
      <argGroup name="">
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.storageTaskName" options="storage-task-name name n" required="True" idPart="name">
          <help short="The name of the storage task within the specified resource group. Storage task names must be between 3 and 18 characters in length and use numbers and lower-case letters only."/>
          <format pattern="^[a-z0-9]{3,18}$" maxLength="18" minLength="3"/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="StorageTasks_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageActions/storageTasks/{storageTaskName}">
          <request method="get">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="storageTaskName" arg="$Path.storageTaskName" required="True">
                <format pattern="^[a-z0-9]{3,18}$" maxLength="18" minLength="3"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-01-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.StorageActions/storageTasks/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity" required="True">
                    <prop readOnly="True" type="uuid" name="principalId"/>
                    <prop readOnly="True" type="uuid" name="tenantId"/>
                    <prop type="string" name="type" required="True">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned,UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item nullable="True" type="object">
                          <prop readOnly="True" type="uuid" name="clientId"/>
                          <prop readOnly="True" type="uuid" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="object" name="action" required="True">
                      <prop type="object" name="else">
                        <prop type="array<@StorageTaskOperation_read>" name="operations" required="True">
                          <item type="@StorageTaskOperation_read"/>
                        </prop>
                      </prop>
                      <prop type="object" name="if" required="True">
                        <prop type="string" name="condition" required="True"/>
                        <prop type="array<object>" name="operations" required="True">
                          <item type="object" cls="StorageTaskOperation_read">
                            <prop type="string" name="name" required="True">
                              <enum>
                                <item value="&quot;DeleteBlob&quot;"/>
                                <item value="&quot;SetBlobExpiry&quot;"/>
                                <item value="&quot;SetBlobImmutabilityPolicy&quot;"/>
                                <item value="&quot;SetBlobLegalHold&quot;"/>
                                <item value="&quot;SetBlobTags&quot;"/>
                                <item value="&quot;SetBlobTier&quot;"/>
                                <item value="&quot;UndeleteBlob&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="onFailure">
                              <enum>
                                <item value="&quot;break&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="onSuccess">
                              <enum>
                                <item value="&quot;continue&quot;"/>
                              </enum>
                            </prop>
                            <prop type="object" name="parameters">
                              <additionalProp>
                                <item type="string"/>
                              </additionalProp>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="creationTimeInUtc"/>
                    <prop type="string" name="description" required="True"/>
                    <prop type="boolean" name="enabled" required="True"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;ValidateSubscriptionQuotaBegin&quot;"/>
                        <item value="&quot;ValidateSubscriptionQuotaEnd&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="integer64" name="taskVersion">
                      <format maximum="1" minimum="1"/>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2023-01-01" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.storageactions/storagetasks/{}" version="2023-01-01" swagger="mgmt-plane/storageactions/ResourceProviders/Microsoft.StorageActions/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU3RvcmFnZUFjdGlvbnMvc3RvcmFnZVRhc2tzL3tzdG9yYWdlVGFza05hbWV9/V/MjAyMy0wMS0wMQ=="/>
      <argGroup name="">
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.storageTaskName" options="storage-task-name name n" required="True" idPart="name">
          <help short="The name of the storage task within the specified resource group. Storage task names must be between 3 and 18 characters in length and use numbers and lower-case letters only."/>
          <format pattern="^[a-z0-9]{3,18}$" maxLength="18" minLength="3"/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="StorageTasks_Delete">
        <longRunning finalStateVia="location"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageActions/storageTasks/{storageTaskName}">
          <request method="delete">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="storageTaskName" arg="$Path.storageTaskName" required="True">
                <format pattern="^[a-z0-9]{3,18}$" maxLength="18" minLength="3"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-01-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="202">
            <header>
              <item name="Location"/>
            </header>
          </response>
          <response statusCode="204"/>
          <response statusCode="200 201"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2023-01-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.storageactions/storagetasks/{}" version="2023-01-01" swagger="mgmt-plane/storageactions/ResourceProviders/Microsoft.StorageActions/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU3RvcmFnZUFjdGlvbnMvc3RvcmFnZVRhc2tzL3tzdG9yYWdlVGFza05hbWV9/V/MjAyMy0wMS0wMQ=="/>
      <argGroup name="">
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.storageTaskName" options="storage-task-name name n" required="True" idPart="name">
          <help short="The name of the storage task within the specified resource group. Storage task names must be between 3 and 18 characters in length and use numbers and lower-case letters only."/>
          <format pattern="^[a-z0-9]{3,18}$" maxLength="18" minLength="3"/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="object" var="$parameters.identity" options="identity" required="True" group="Parameters">
          <help short="The managed service identity of the resource."/>
          <arg type="string" var="$parameters.identity.type" options="type" required="True">
            <help short="Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed)."/>
            <enum>
              <item name="None" value="&quot;None&quot;"/>
              <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
              <item name="SystemAssigned,UserAssigned" value="&quot;SystemAssigned,UserAssigned&quot;"/>
              <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
            </enum>
          </arg>
          <arg type="object" var="$parameters.identity.userAssignedIdentities" options="user-assigned-identities">
            <help short="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests."/>
            <additionalProp>
              <item nullable="True" type="object">
                <blank value="{}"/>
              </item>
            </additionalProp>
          </arg>
        </arg>
        <arg type="ResourceLocation" var="$parameters.location" options="location l" required="True" group="Parameters">
          <help short="The geo-location where the resource lives"/>
        </arg>
        <arg type="object" var="$parameters.tags" options="tags" group="Parameters">
          <help short="Resource tags."/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="object" var="$parameters.properties.action" options="action" required="True" group="Properties">
          <help short="The storage task action that is executed"/>
          <arg type="object" var="$parameters.properties.action.else" options="else">
            <help short="The else block of storage task operation"/>
            <arg type="array<@StorageTaskOperation_create>" var="$parameters.properties.action.else.operations" options="operations" required="True">
              <help short="List of operations to execute in the else block"/>
              <item type="@StorageTaskOperation_create"/>
            </arg>
          </arg>
          <arg type="object" var="$parameters.properties.action.if" options="if" required="True">
            <help short="The if block of storage task operation"/>
            <arg type="string" var="$parameters.properties.action.if.condition" options="condition" required="True">
              <help short="Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators."/>
            </arg>
            <arg type="array<object>" var="$parameters.properties.action.if.operations" options="operations" required="True">
              <help short="List of operations to execute when the condition predicate satisfies."/>
              <item type="object" cls="StorageTaskOperation_create">
                <arg type="string" var="@StorageTaskOperation_create.name" options="name" required="True">
                  <help short="The operation to be performed on the object."/>
                  <enum>
                    <item name="DeleteBlob" value="&quot;DeleteBlob&quot;"/>
                    <item name="SetBlobExpiry" value="&quot;SetBlobExpiry&quot;"/>
                    <item name="SetBlobImmutabilityPolicy" value="&quot;SetBlobImmutabilityPolicy&quot;"/>
                    <item name="SetBlobLegalHold" value="&quot;SetBlobLegalHold&quot;"/>
                    <item name="SetBlobTags" value="&quot;SetBlobTags&quot;"/>
                    <item name="SetBlobTier" value="&quot;SetBlobTier&quot;"/>
                    <item name="UndeleteBlob" value="&quot;UndeleteBlob&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="@StorageTaskOperation_create.onFailure" options="on-failure">
                  <help short="Action to be taken when the operation fails for a object."/>
                  <enum>
                    <item name="break" value="&quot;break&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="@StorageTaskOperation_create.onSuccess" options="on-success">
                  <help short="Action to be taken when the operation is successful for a object."/>
                  <enum>
                    <item name="continue" value="&quot;continue&quot;"/>
                  </enum>
                </arg>
                <arg type="object" var="@StorageTaskOperation_create.parameters" options="parameters">
                  <help short="Key-value parameters for the operation."/>
                  <additionalProp>
                    <item type="string"/>
                  </additionalProp>
                </arg>
              </item>
            </arg>
          </arg>
        </arg>
        <arg type="string" var="$parameters.properties.description" options="description" required="True" group="Properties">
          <help short="Text that describes the purpose of the storage task"/>
        </arg>
        <arg type="boolean" var="$parameters.properties.enabled" options="enabled" required="True" group="Properties">
          <help short="Storage Task is enabled when set to true and disabled when set to false"/>
        </arg>
      </argGroup>
      <operation operationId="StorageTasks_Create">
        <longRunning finalStateVia="location"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageActions/storageTasks/{storageTaskName}">
          <request method="put">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="storageTaskName" arg="$Path.storageTaskName" required="True">
                <format pattern="^[a-z0-9]{3,18}$" maxLength="18" minLength="3"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-01-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="IdentityObject" name="identity" arg="$parameters.identity" required="True">
                    <prop type="string" name="type" arg="$parameters.identity.type" required="True">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned,UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities" arg="$parameters.identity.userAssignedIdentities">
                      <additionalProp>
                        <item nullable="True" type="object"/>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" arg="$parameters.location" required="True"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="object" name="action" arg="$parameters.properties.action" required="True">
                      <prop type="object" name="else" arg="$parameters.properties.action.else">
                        <prop type="array<@StorageTaskOperation_create>" name="operations" arg="$parameters.properties.action.else.operations" required="True">
                          <item type="@StorageTaskOperation_create"/>
                        </prop>
                      </prop>
                      <prop type="object" name="if" arg="$parameters.properties.action.if" required="True">
                        <prop type="string" name="condition" arg="$parameters.properties.action.if.condition" required="True"/>
                        <prop type="array<object>" name="operations" arg="$parameters.properties.action.if.operations" required="True">
                          <item type="object" cls="StorageTaskOperation_create">
                            <prop type="string" name="name" arg="@StorageTaskOperation_create.name" required="True">
                              <enum>
                                <item value="&quot;DeleteBlob&quot;"/>
                                <item value="&quot;SetBlobExpiry&quot;"/>
                                <item value="&quot;SetBlobImmutabilityPolicy&quot;"/>
                                <item value="&quot;SetBlobLegalHold&quot;"/>
                                <item value="&quot;SetBlobTags&quot;"/>
                                <item value="&quot;SetBlobTier&quot;"/>
                                <item value="&quot;UndeleteBlob&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="onFailure" arg="@StorageTaskOperation_create.onFailure">
                              <enum>
                                <item value="&quot;break&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="onSuccess" arg="@StorageTaskOperation_create.onSuccess">
                              <enum>
                                <item value="&quot;continue&quot;"/>
                              </enum>
                            </prop>
                            <prop type="object" name="parameters" arg="@StorageTaskOperation_create.parameters">
                              <additionalProp>
                                <item type="string"/>
                              </additionalProp>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="string" name="description" arg="$parameters.properties.description" required="True"/>
                    <prop type="boolean" name="enabled" arg="$parameters.properties.enabled" required="True"/>
                  </prop>
                  <prop type="object" name="tags" arg="$parameters.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.StorageActions/storageTasks/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity" required="True">
                    <prop readOnly="True" type="uuid" name="principalId"/>
                    <prop readOnly="True" type="uuid" name="tenantId"/>
                    <prop type="string" name="type" required="True">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned,UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item nullable="True" type="object">
                          <prop readOnly="True" type="uuid" name="clientId"/>
                          <prop readOnly="True" type="uuid" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="object" name="action" required="True">
                      <prop type="object" name="else">
                        <prop type="array<@StorageTaskOperation_read>" name="operations" required="True">
                          <item type="@StorageTaskOperation_read"/>
                        </prop>
                      </prop>
                      <prop type="object" name="if" required="True">
                        <prop type="string" name="condition" required="True"/>
                        <prop type="array<object>" name="operations" required="True">
                          <item type="object" cls="StorageTaskOperation_read">
                            <prop type="string" name="name" required="True">
                              <enum>
                                <item value="&quot;DeleteBlob&quot;"/>
                                <item value="&quot;SetBlobExpiry&quot;"/>
                                <item value="&quot;SetBlobImmutabilityPolicy&quot;"/>
                                <item value="&quot;SetBlobLegalHold&quot;"/>
                                <item value="&quot;SetBlobTags&quot;"/>
                                <item value="&quot;SetBlobTier&quot;"/>
                                <item value="&quot;UndeleteBlob&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="onFailure">
                              <enum>
                                <item value="&quot;break&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="onSuccess">
                              <enum>
                                <item value="&quot;continue&quot;"/>
                              </enum>
                            </prop>
                            <prop type="object" name="parameters">
                              <additionalProp>
                                <item type="string"/>
                              </additionalProp>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="creationTimeInUtc"/>
                    <prop type="string" name="description" required="True"/>
                    <prop type="boolean" name="enabled" required="True"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;ValidateSubscriptionQuotaBegin&quot;"/>
                        <item value="&quot;ValidateSubscriptionQuotaEnd&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="integer64" name="taskVersion">
                      <format maximum="1" minimum="1"/>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response statusCode="202">
            <header>
              <item name="Location"/>
            </header>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2023-01-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.storageactions/storagetasks/{}" version="2023-01-01" swagger="mgmt-plane/storageactions/ResourceProviders/Microsoft.StorageActions/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuU3RvcmFnZUFjdGlvbnMvc3RvcmFnZVRhc2tzL3tzdG9yYWdlVGFza05hbWV9/V/MjAyMy0wMS0wMQ=="/>
      <argGroup name="">
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.storageTaskName" options="storage-task-name name n" required="True" idPart="name">
          <help short="The name of the storage task within the specified resource group. Storage task names must be between 3 and 18 characters in length and use numbers and lower-case letters only."/>
          <format pattern="^[a-z0-9]{3,18}$" maxLength="18" minLength="3"/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="object" var="$parameters.identity" options="identity" group="Parameters">
          <help short="The managed service identity of the resource."/>
          <arg type="string" var="$parameters.identity.type" options="type">
            <help short="Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed)."/>
            <enum>
              <item name="None" value="&quot;None&quot;"/>
              <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
              <item name="SystemAssigned,UserAssigned" value="&quot;SystemAssigned,UserAssigned&quot;"/>
              <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
            </enum>
          </arg>
          <arg nullable="True" type="object" var="$parameters.identity.userAssignedIdentities" options="user-assigned-identities">
            <help short="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests."/>
            <additionalProp>
              <item nullable="True" type="object">
                <blank value="{}"/>
              </item>
            </additionalProp>
          </arg>
        </arg>
        <arg nullable="True" type="object" var="$parameters.tags" options="tags" group="Parameters">
          <help short="Resource tags."/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="object" var="$parameters.properties.action" options="action" group="Properties">
          <help short="The storage task action that is executed"/>
          <arg nullable="True" type="object" var="$parameters.properties.action.else" options="else">
            <help short="The else block of storage task operation"/>
            <arg type="array<@StorageTaskOperation_update>" var="$parameters.properties.action.else.operations" options="operations">
              <help short="List of operations to execute in the else block"/>
              <item nullable="True" type="@StorageTaskOperation_update"/>
            </arg>
          </arg>
          <arg type="object" var="$parameters.properties.action.if" options="if">
            <help short="The if block of storage task operation"/>
            <arg type="string" var="$parameters.properties.action.if.condition" options="condition">
              <help short="Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators."/>
            </arg>
            <arg type="array<object>" var="$parameters.properties.action.if.operations" options="operations">
              <help short="List of operations to execute when the condition predicate satisfies."/>
              <item nullable="True" type="object" cls="StorageTaskOperation_update">
                <arg type="string" var="@StorageTaskOperation_update.name" options="name">
                  <help short="The operation to be performed on the object."/>
                  <enum>
                    <item name="DeleteBlob" value="&quot;DeleteBlob&quot;"/>
                    <item name="SetBlobExpiry" value="&quot;SetBlobExpiry&quot;"/>
                    <item name="SetBlobImmutabilityPolicy" value="&quot;SetBlobImmutabilityPolicy&quot;"/>
                    <item name="SetBlobLegalHold" value="&quot;SetBlobLegalHold&quot;"/>
                    <item name="SetBlobTags" value="&quot;SetBlobTags&quot;"/>
                    <item name="SetBlobTier" value="&quot;SetBlobTier&quot;"/>
                    <item name="UndeleteBlob" value="&quot;UndeleteBlob&quot;"/>
                  </enum>
                </arg>
                <arg nullable="True" type="string" var="@StorageTaskOperation_update.onFailure" options="on-failure">
                  <help short="Action to be taken when the operation fails for a object."/>
                  <enum>
                    <item name="break" value="&quot;break&quot;"/>
                  </enum>
                </arg>
                <arg nullable="True" type="string" var="@StorageTaskOperation_update.onSuccess" options="on-success">
                  <help short="Action to be taken when the operation is successful for a object."/>
                  <enum>
                    <item name="continue" value="&quot;continue&quot;"/>
                  </enum>
                </arg>
                <arg nullable="True" type="object" var="@StorageTaskOperation_update.parameters" options="parameters">
                  <help short="Key-value parameters for the operation."/>
                  <additionalProp>
                    <item nullable="True" type="string"/>
                  </additionalProp>
                </arg>
              </item>
            </arg>
          </arg>
        </arg>
        <arg type="string" var="$parameters.properties.description" options="description" group="Properties">
          <help short="Text that describes the purpose of the storage task"/>
        </arg>
        <arg type="boolean" var="$parameters.properties.enabled" options="enabled" group="Properties">
          <help short="Storage Task is enabled when set to true and disabled when set to false"/>
        </arg>
      </argGroup>
      <operation operationId="StorageTasks_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageActions/storageTasks/{storageTaskName}">
          <request method="get">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="storageTaskName" arg="$Path.storageTaskName" required="True">
                <format pattern="^[a-z0-9]{3,18}$" maxLength="18" minLength="3"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-01-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="StorageTask_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.StorageActions/storageTasks/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity" required="True">
                    <prop readOnly="True" type="uuid" name="principalId"/>
                    <prop readOnly="True" type="uuid" name="tenantId"/>
                    <prop type="string" name="type" required="True">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned,UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item nullable="True" type="object">
                          <prop readOnly="True" type="uuid" name="clientId"/>
                          <prop readOnly="True" type="uuid" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="object" name="action" required="True">
                      <prop type="object" name="else">
                        <prop type="array<@StorageTaskOperation_read>" name="operations" required="True">
                          <item type="@StorageTaskOperation_read"/>
                        </prop>
                      </prop>
                      <prop type="object" name="if" required="True">
                        <prop type="string" name="condition" required="True"/>
                        <prop type="array<object>" name="operations" required="True">
                          <item type="object" cls="StorageTaskOperation_read">
                            <prop type="string" name="name" required="True">
                              <enum>
                                <item value="&quot;DeleteBlob&quot;"/>
                                <item value="&quot;SetBlobExpiry&quot;"/>
                                <item value="&quot;SetBlobImmutabilityPolicy&quot;"/>
                                <item value="&quot;SetBlobLegalHold&quot;"/>
                                <item value="&quot;SetBlobTags&quot;"/>
                                <item value="&quot;SetBlobTier&quot;"/>
                                <item value="&quot;UndeleteBlob&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="onFailure">
                              <enum>
                                <item value="&quot;break&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="onSuccess">
                              <enum>
                                <item value="&quot;continue&quot;"/>
                              </enum>
                            </prop>
                            <prop type="object" name="parameters">
                              <additionalProp>
                                <item type="string"/>
                              </additionalProp>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="dateTime" name="creationTimeInUtc"/>
                    <prop type="string" name="description" required="True"/>
                    <prop type="boolean" name="enabled" required="True"/>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;ValidateSubscriptionQuotaBegin&quot;"/>
                        <item value="&quot;ValidateSubscriptionQuotaEnd&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="integer64" name="taskVersion">
                      <format maximum="1" minimum="1"/>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="parameters" required="True" clientFlatten="True">
              <prop type="IdentityObject" name="identity" arg="$parameters.identity" required="True">
                <prop type="string" name="type" arg="$parameters.identity.type" required="True">
                  <enum>
                    <item value="&quot;None&quot;"/>
                    <item value="&quot;SystemAssigned&quot;"/>
                    <item value="&quot;SystemAssigned,UserAssigned&quot;"/>
                    <item value="&quot;UserAssigned&quot;"/>
                  </enum>
                </prop>
                <prop type="object" name="userAssignedIdentities" arg="$parameters.identity.userAssignedIdentities">
                  <additionalProp>
                    <item nullable="True" type="object"/>
                  </additionalProp>
                </prop>
              </prop>
              <prop type="object" name="properties" required="True" clientFlatten="True">
                <prop type="object" name="action" arg="$parameters.properties.action" required="True">
                  <prop type="object" name="else" arg="$parameters.properties.action.else">
                    <prop type="array<@StorageTaskOperation_update>" name="operations" arg="$parameters.properties.action.else.operations" required="True">
                      <item type="@StorageTaskOperation_update"/>
                    </prop>
                  </prop>
                  <prop type="object" name="if" arg="$parameters.properties.action.if" required="True">
                    <prop type="string" name="condition" arg="$parameters.properties.action.if.condition" required="True"/>
                    <prop type="array<object>" name="operations" arg="$parameters.properties.action.if.operations" required="True">
                      <item type="object" cls="StorageTaskOperation_update">
                        <prop type="string" name="name" arg="@StorageTaskOperation_update.name" required="True">
                          <enum>
                            <item value="&quot;DeleteBlob&quot;"/>
                            <item value="&quot;SetBlobExpiry&quot;"/>
                            <item value="&quot;SetBlobImmutabilityPolicy&quot;"/>
                            <item value="&quot;SetBlobLegalHold&quot;"/>
                            <item value="&quot;SetBlobTags&quot;"/>
                            <item value="&quot;SetBlobTier&quot;"/>
                            <item value="&quot;UndeleteBlob&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="onFailure" arg="@StorageTaskOperation_update.onFailure">
                          <enum>
                            <item value="&quot;break&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="onSuccess" arg="@StorageTaskOperation_update.onSuccess">
                          <enum>
                            <item value="&quot;continue&quot;"/>
                          </enum>
                        </prop>
                        <prop type="object" name="parameters" arg="@StorageTaskOperation_update.parameters">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                      </item>
                    </prop>
                  </prop>
                </prop>
                <prop type="string" name="description" arg="$parameters.properties.description" required="True"/>
                <prop type="boolean" name="enabled" arg="$parameters.properties.enabled" required="True"/>
              </prop>
              <prop type="object" name="tags" arg="$parameters.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="StorageTasks_Create">
        <longRunning finalStateVia="location"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageActions/storageTasks/{storageTaskName}">
          <request method="put">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="storageTaskName" arg="$Path.storageTaskName" required="True">
                <format pattern="^[a-z0-9]{3,18}$" maxLength="18" minLength="3"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-01-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@StorageTask_read"/>
              </json>
            </body>
          </response>
          <response statusCode="202">
            <header>
              <item name="Location"/>
            </header>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
