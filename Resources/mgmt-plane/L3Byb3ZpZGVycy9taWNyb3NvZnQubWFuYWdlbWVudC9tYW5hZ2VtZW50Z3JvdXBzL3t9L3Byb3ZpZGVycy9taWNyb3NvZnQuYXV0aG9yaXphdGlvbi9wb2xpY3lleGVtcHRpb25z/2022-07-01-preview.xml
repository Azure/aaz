<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/providers/microsoft.management/managementgroups/{}/providers/microsoft.authorization/policyexemptions" version="2022-07-01-preview" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3Byb3ZpZGVycy9NaWNyb3NvZnQuTWFuYWdlbWVudC9tYW5hZ2VtZW50R3JvdXBzL3ttYW5hZ2VtZW50R3JvdXBJZH0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUV4ZW1wdGlvbnM=/V/MjAyMi0wNy0wMS1wcmV2aWV3"/>
  <resource id="/subscriptions/{}/providers/microsoft.authorization/policyexemptions" version="2022-07-01-preview" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9wcm92aWRlcnMvTWljcm9zb2Z0LkF1dGhvcml6YXRpb24vcG9saWN5RXhlbXB0aW9ucw==/V/MjAyMi0wNy0wMS1wcmV2aWV3"/>
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.authorization/policyexemptions" version="2022-07-01-preview" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQXV0aG9yaXphdGlvbi9wb2xpY3lFeGVtcHRpb25z/V/MjAyMi0wNy0wMS1wcmV2aWV3"/>
  <commandGroup name="policy exemption">
    <command name="list" version="2022-07-01-preview" confirmation="">
      <resource id="/providers/microsoft.management/managementgroups/{}/providers/microsoft.authorization/policyexemptions" version="2022-07-01-preview" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3Byb3ZpZGVycy9NaWNyb3NvZnQuTWFuYWdlbWVudC9tYW5hZ2VtZW50R3JvdXBzL3ttYW5hZ2VtZW50R3JvdXBJZH0vcHJvdmlkZXJzL01pY3Jvc29mdC5BdXRob3JpemF0aW9uL3BvbGljeUV4ZW1wdGlvbnM=/V/MjAyMi0wNy0wMS1wcmV2aWV3"/>
      <resource id="/subscriptions/{}/providers/microsoft.authorization/policyexemptions" version="2022-07-01-preview" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9wcm92aWRlcnMvTWljcm9zb2Z0LkF1dGhvcml6YXRpb24vcG9saWN5RXhlbXB0aW9ucw==/V/MjAyMi0wNy0wMS1wcmV2aWV3"/>
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.authorization/policyexemptions" version="2022-07-01-preview" swagger="mgmt-plane/resources/ResourceProviders/Microsoft.Authorization/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQXV0aG9yaXphdGlvbi9wb2xpY3lFeGVtcHRpb25z/V/MjAyMi0wNy0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.managementGroupId" options="management-group" group="">
          <help short="The management group." lines="Indicates that policy exemptions whose scope covers the management group with the given name should be listed."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" group="" idPart="resource_group">
          <help short="The resource group." lines="Indicates that policy exemptions whose scope covers the resource group with the given name are to be listed."/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" group="" idPart="subscription">
          <help short="The subscription name or ID" lines="Indicates that policy exemptions whose scope covers the subscription with the given name or ID should be included in the list."/>
        </arg>
        <arg type="string" var="$Query.filter" options="filter" group="">
          <help short="Filter list results." lines="The filter to limit list results. Valid values are: 'atScope()', 'atExactScope()', 'atScopeAndBelow()' or 'policyDefinitionId eq '{value}''. If filter is not provided, no filtering is performed. If filter atScope() is provided, the returned list includes all policy assignments that apply to the given scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If filter atExactScope() is provided, the returned list includes all policy assignments at the given scope.  If filter atScopeAndBelow() is provided, the returned list includes all policy assignments at the given scope and those in sub scopes contained within the given scope. If filter policyDefinitionId eq '{value}' is provided, the returned list includes all policy assignments of the policy definition whose id is {value}."/>
        </arg>
      </argGroup>
      <condition var="$Condition_PolicyExemptions_ListForManagementGroup">
        <operator type="and">
          <operator type="hasValue" arg="$Path.managementGroupId"/>
        </operator>
      </condition>
      <condition var="$Condition_PolicyExemptions_List">
        <operator type="and">
          <operator type="hasValue" arg="$Path.subscriptionId"/>
          <operator type="not">
            <operator type="hasValue" arg="$Path.resourceGroupName"/>
          </operator>
        </operator>
      </condition>
      <condition var="$Condition_PolicyExemptions_ListForResourceGroup">
        <operator type="and">
          <operator type="hasValue" arg="$Path.resourceGroupName"/>
          <operator type="hasValue" arg="$Path.subscriptionId"/>
        </operator>
      </condition>
      <operation when="$Condition_PolicyExemptions_ListForManagementGroup" operationId="PolicyExemptions_ListForManagementGroup">
        <http path="/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyExemptions">
          <request method="get">
            <path>
              <param type="string" name="managementGroupId" arg="$Path.managementGroupId" required="True"/>
            </path>
            <query>
              <param type="string" name="$filter" arg="$Query.filter"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-07-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="string" name="nextLink"/>
                  <prop type="array<object>" name="value">
                    <item type="object">
                      <prop readOnly="True" type="ResourceId" name="id">
                        <format template="/{scope}/providers/Microsoft.Authorization/policyExemptions/{}"/>
                      </prop>
                      <prop readOnly="True" type="string" name="name"/>
                      <prop type="object" name="properties" required="True" clientFlatten="True">
                        <prop type="string" name="assignmentScopeValidation">
                          <default value="&quot;Default&quot;"/>
                          <enum>
                            <item value="&quot;Default&quot;"/>
                            <item value="&quot;DoNotValidate&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="description"/>
                        <prop type="string" name="displayName"/>
                        <prop type="string" name="exemptionCategory" required="True">
                          <enum>
                            <item value="&quot;Mitigated&quot;"/>
                            <item value="&quot;Waiver&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="expiresOn"/>
                        <prop type="object" name="metadata">
                          <additionalProp>
                            <item type="any"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="policyAssignmentId" required="True"/>
                        <prop type="array<string>" name="policyDefinitionReferenceIds">
                          <item type="string"/>
                        </prop>
                        <prop type="array<object>" name="resourceSelectors" identifiers="name">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="array<object>" name="selectors">
                              <item type="object">
                                <prop type="array<string>" name="in">
                                  <item type="string"/>
                                </prop>
                                <prop type="string" name="kind">
                                  <enum>
                                    <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                    <item value="&quot;resourceLocation&quot;"/>
                                    <item value="&quot;resourceType&quot;"/>
                                    <item value="&quot;resourceWithoutLocation&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="array<string>" name="notIn">
                                  <item type="string"/>
                                </prop>
                              </item>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="object" name="systemData">
                        <prop type="dateTime" name="createdAt"/>
                        <prop type="string" name="createdBy"/>
                        <prop type="string" name="createdByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="lastModifiedAt"/>
                        <prop type="string" name="lastModifiedBy"/>
                        <prop type="string" name="lastModifiedByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="type"/>
                    </item>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation when="$Condition_PolicyExemptions_List" operationId="PolicyExemptions_List">
        <http path="/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyExemptions">
          <request method="get">
            <path>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <param type="string" name="$filter" arg="$Query.filter"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-07-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="string" name="nextLink"/>
                  <prop type="array<object>" name="value">
                    <item type="object">
                      <prop readOnly="True" type="ResourceId" name="id">
                        <format template="/{scope}/providers/Microsoft.Authorization/policyExemptions/{}"/>
                      </prop>
                      <prop readOnly="True" type="string" name="name"/>
                      <prop type="object" name="properties" required="True" clientFlatten="True">
                        <prop type="string" name="assignmentScopeValidation">
                          <default value="&quot;Default&quot;"/>
                          <enum>
                            <item value="&quot;Default&quot;"/>
                            <item value="&quot;DoNotValidate&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="description"/>
                        <prop type="string" name="displayName"/>
                        <prop type="string" name="exemptionCategory" required="True">
                          <enum>
                            <item value="&quot;Mitigated&quot;"/>
                            <item value="&quot;Waiver&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="expiresOn"/>
                        <prop type="object" name="metadata">
                          <additionalProp>
                            <item type="any"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="policyAssignmentId" required="True"/>
                        <prop type="array<string>" name="policyDefinitionReferenceIds">
                          <item type="string"/>
                        </prop>
                        <prop type="array<object>" name="resourceSelectors" identifiers="name">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="array<object>" name="selectors">
                              <item type="object">
                                <prop type="array<string>" name="in">
                                  <item type="string"/>
                                </prop>
                                <prop type="string" name="kind">
                                  <enum>
                                    <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                    <item value="&quot;resourceLocation&quot;"/>
                                    <item value="&quot;resourceType&quot;"/>
                                    <item value="&quot;resourceWithoutLocation&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="array<string>" name="notIn">
                                  <item type="string"/>
                                </prop>
                              </item>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="object" name="systemData">
                        <prop type="dateTime" name="createdAt"/>
                        <prop type="string" name="createdBy"/>
                        <prop type="string" name="createdByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="lastModifiedAt"/>
                        <prop type="string" name="lastModifiedBy"/>
                        <prop type="string" name="lastModifiedByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="type"/>
                    </item>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation when="$Condition_PolicyExemptions_ListForResourceGroup" operationId="PolicyExemptions_ListForResourceGroup">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyExemptions">
          <request method="get">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <param type="string" name="$filter" arg="$Query.filter"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-07-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="string" name="nextLink"/>
                  <prop type="array<object>" name="value">
                    <item type="object">
                      <prop readOnly="True" type="ResourceId" name="id">
                        <format template="/{scope}/providers/Microsoft.Authorization/policyExemptions/{}"/>
                      </prop>
                      <prop readOnly="True" type="string" name="name"/>
                      <prop type="object" name="properties" required="True" clientFlatten="True">
                        <prop type="string" name="assignmentScopeValidation">
                          <default value="&quot;Default&quot;"/>
                          <enum>
                            <item value="&quot;Default&quot;"/>
                            <item value="&quot;DoNotValidate&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="description"/>
                        <prop type="string" name="displayName"/>
                        <prop type="string" name="exemptionCategory" required="True">
                          <enum>
                            <item value="&quot;Mitigated&quot;"/>
                            <item value="&quot;Waiver&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="expiresOn"/>
                        <prop type="object" name="metadata">
                          <additionalProp>
                            <item type="any"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="policyAssignmentId" required="True"/>
                        <prop type="array<string>" name="policyDefinitionReferenceIds">
                          <item type="string"/>
                        </prop>
                        <prop type="array<object>" name="resourceSelectors" identifiers="name">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="array<object>" name="selectors">
                              <item type="object">
                                <prop type="array<string>" name="in">
                                  <item type="string"/>
                                </prop>
                                <prop type="string" name="kind">
                                  <enum>
                                    <item value="&quot;policyDefinitionReferenceId&quot;"/>
                                    <item value="&quot;resourceLocation&quot;"/>
                                    <item value="&quot;resourceType&quot;"/>
                                    <item value="&quot;resourceWithoutLocation&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="array<string>" name="notIn">
                                  <item type="string"/>
                                </prop>
                              </item>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="object" name="systemData">
                        <prop type="dateTime" name="createdAt"/>
                        <prop type="string" name="createdBy"/>
                        <prop type="string" name="createdByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="lastModifiedAt"/>
                        <prop type="string" name="lastModifiedBy"/>
                        <prop type="string" name="lastModifiedByType">
                          <enum>
                            <item value="&quot;Application&quot;"/>
                            <item value="&quot;Key&quot;"/>
                            <item value="&quot;ManagedIdentity&quot;"/>
                            <item value="&quot;User&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop readOnly="True" type="string" name="type"/>
                    </item>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="array" ref="$Instance.value" clientFlatten="True" nextLink="$Instance.nextLink"/>
    </command>
  </commandGroup>
</CodeGen>
