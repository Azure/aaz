<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.automation/automationaccounts/{}/configurations/{}" version="2023-11-01" swagger="mgmt-plane/automation/ResourceProviders/Microsoft.Automation/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQXV0b21hdGlvbi9hdXRvbWF0aW9uQWNjb3VudHMve2F1dG9tYXRpb25BY2NvdW50TmFtZX0vY29uZmlndXJhdGlvbnMve2NvbmZpZ3VyYXRpb25OYW1lfQ==/V/MjAyMy0xMS0wMQ=="/>
  <commandGroup name="automation configuration">
    <command name="show" version="2023-11-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.automation/automationaccounts/{}/configurations/{}" version="2023-11-01" swagger="mgmt-plane/automation/ResourceProviders/Microsoft.Automation/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQXV0b21hdGlvbi9hdXRvbWF0aW9uQWNjb3VudHMve2F1dG9tYXRpb25BY2NvdW50TmFtZX0vY29uZmlndXJhdGlvbnMve2NvbmZpZ3VyYXRpb25OYW1lfQ==/V/MjAyMy0xMS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.automationAccountName" options="automation-account-name account" required="True" group="" idPart="name">
          <help short="The name of the automation account."/>
        </arg>
        <arg type="string" var="$Path.configurationName" options="configuration-name name n" required="True" idPart="child_name_1">
          <help short="The configuration name."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="DscConfiguration_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}">
          <request method="get">
            <path>
              <param type="string" name="automationAccountName" arg="$Path.automationAccountName" required="True"/>
              <param type="string" name="configurationName" arg="$Path.configurationName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-11-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop type="string" name="etag"/>
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Automation/automationAccounts/{}/configurations/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="dateTime" name="creationTime"/>
                    <prop type="string" name="description"/>
                    <prop type="integer32" name="jobCount"/>
                    <prop type="dateTime" name="lastModifiedTime"/>
                    <prop type="boolean" name="logVerbose"/>
                    <prop type="integer" name="nodeConfigurationCount"/>
                    <prop type="object" name="parameters">
                      <additionalProp>
                        <item type="object">
                          <prop type="string" name="defaultValue"/>
                          <prop type="boolean" name="isMandatory"/>
                          <prop type="integer32" name="position"/>
                          <prop type="string" name="type"/>
                        </item>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Succeeded&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="source">
                      <prop type="object" name="hash">
                        <prop type="string" name="algorithm" required="True"/>
                        <prop type="string" name="value" required="True"/>
                      </prop>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;embeddedContent&quot;"/>
                          <item value="&quot;uri&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="value"/>
                      <prop type="string" name="version"/>
                    </prop>
                    <prop type="string" name="state">
                      <enum>
                        <item value="&quot;Edit&quot;"/>
                        <item value="&quot;New&quot;"/>
                        <item value="&quot;Published&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2023-11-01" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.automation/automationaccounts/{}/configurations/{}" version="2023-11-01" swagger="mgmt-plane/automation/ResourceProviders/Microsoft.Automation/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQXV0b21hdGlvbi9hdXRvbWF0aW9uQWNjb3VudHMve2F1dG9tYXRpb25BY2NvdW50TmFtZX0vY29uZmlndXJhdGlvbnMve2NvbmZpZ3VyYXRpb25OYW1lfQ==/V/MjAyMy0xMS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.automationAccountName" options="automation-account-name account" required="True" group="" idPart="name">
          <help short="The name of the automation account."/>
        </arg>
        <arg type="string" var="$Path.configurationName" options="configuration-name name n" required="True" idPart="child_name_1">
          <help short="The configuration name."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="DscConfiguration_Delete">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}">
          <request method="delete">
            <path>
              <param type="string" name="automationAccountName" arg="$Path.automationAccountName" required="True"/>
              <param type="string" name="configurationName" arg="$Path.configurationName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-11-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2023-11-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.automation/automationaccounts/{}/configurations/{}" version="2023-11-01" swagger="mgmt-plane/automation/ResourceProviders/Microsoft.Automation/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQXV0b21hdGlvbi9hdXRvbWF0aW9uQWNjb3VudHMve2F1dG9tYXRpb25BY2NvdW50TmFtZX0vY29uZmlndXJhdGlvbnMve2NvbmZpZ3VyYXRpb25OYW1lfQ==/V/MjAyMy0xMS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.automationAccountName" options="automation-account-name account" required="True" group="" idPart="name">
          <help short="The name of the automation account."/>
        </arg>
        <arg type="string" var="$Path.configurationName" options="configuration-name name n" required="True" idPart="child_name_1">
          <help short="The create or update parameters for configuration."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="string" var="$parameters.location" options="location" group="Parameters">
          <help short="Gets or sets the location of the resource."/>
        </arg>
        <arg type="object" var="$parameters.tags" options="tags" group="Parameters">
          <help short="Gets or sets the tags attached to the resource."/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$parameters.properties.description" options="description" group="Properties">
          <help short="Gets or sets the description of the configuration."/>
        </arg>
        <arg type="boolean" var="$parameters.properties.logProgress" options="log-progress" group="Properties">
          <help short="Gets or sets progress log option."/>
        </arg>
        <arg type="boolean" var="$parameters.properties.logVerbose" options="log-verbose" group="Properties">
          <help short="Gets or sets verbose log option."/>
        </arg>
        <arg type="object" var="$parameters.properties.parameters" options="parameters" group="Properties">
          <help short="Gets or sets the configuration parameters."/>
          <additionalProp>
            <item type="object">
              <arg type="string" var="$parameters.properties.parameters{}.defaultValue" options="default-value">
                <help short="Gets or sets the default value of parameter."/>
              </arg>
              <arg type="boolean" var="$parameters.properties.parameters{}.isMandatory" options="is-mandatory">
                <help short="Gets or sets a Boolean value to indicate whether the parameter is mandatory or not."/>
              </arg>
              <arg type="integer32" var="$parameters.properties.parameters{}.position" options="position">
                <help short="Get or sets the position of the parameter."/>
              </arg>
              <arg type="string" var="$parameters.properties.parameters{}.type" options="type">
                <help short="Gets or sets the type of the parameter."/>
              </arg>
            </item>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Source">
        <arg type="object" var="$parameters.properties.source.hash" options="source-hash" group="Source">
          <help short="Gets or sets the hash."/>
          <arg type="string" var="$parameters.properties.source.hash.algorithm" options="algorithm" required="True">
            <help short="Gets or sets the content hash algorithm used to hash the content."/>
          </arg>
          <arg type="string" var="$parameters.properties.source.hash.value" options="value" required="True">
            <help short="Gets or sets expected hash value of the content."/>
          </arg>
        </arg>
        <arg type="string" var="$parameters.properties.source.type" options="source-type" group="Source">
          <help short="Gets or sets the content source type."/>
          <enum>
            <item name="embeddedContent" value="&quot;embeddedContent&quot;"/>
            <item name="uri" value="&quot;uri&quot;"/>
          </enum>
        </arg>
        <arg type="string" var="$parameters.properties.source.value" options="source" group="Source">
          <help short="Gets or sets the value of the content. This is based on the content source type."/>
        </arg>
        <arg type="string" var="$parameters.properties.source.version" options="source-version" group="Source">
          <help short="Gets or sets the version of the content."/>
        </arg>
      </argGroup>
      <operation operationId="DscConfiguration_CreateOrUpdate">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}">
          <request method="put">
            <path>
              <param type="string" name="automationAccountName" arg="$Path.automationAccountName" required="True"/>
              <param type="string" name="configurationName" arg="$Path.configurationName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-11-01&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="string" name="location" arg="$parameters.location"/>
                  <prop type="string" name="name" arg="$Path.configurationName"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="string" name="description" arg="$parameters.properties.description"/>
                    <prop type="boolean" name="logProgress" arg="$parameters.properties.logProgress"/>
                    <prop type="boolean" name="logVerbose" arg="$parameters.properties.logVerbose"/>
                    <prop type="object" name="parameters" arg="$parameters.properties.parameters">
                      <additionalProp>
                        <item type="object">
                          <prop type="string" name="defaultValue" arg="$parameters.properties.parameters{}.defaultValue"/>
                          <prop type="boolean" name="isMandatory" arg="$parameters.properties.parameters{}.isMandatory"/>
                          <prop type="integer32" name="position" arg="$parameters.properties.parameters{}.position"/>
                          <prop type="string" name="type" arg="$parameters.properties.parameters{}.type"/>
                        </item>
                      </additionalProp>
                    </prop>
                    <prop type="object" name="source" required="True">
                      <prop type="object" name="hash" arg="$parameters.properties.source.hash">
                        <prop type="string" name="algorithm" arg="$parameters.properties.source.hash.algorithm" required="True"/>
                        <prop type="string" name="value" arg="$parameters.properties.source.hash.value" required="True"/>
                      </prop>
                      <prop type="string" name="type" arg="$parameters.properties.source.type">
                        <enum>
                          <item value="&quot;embeddedContent&quot;"/>
                          <item value="&quot;uri&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="value" arg="$parameters.properties.source.value"/>
                      <prop type="string" name="version" arg="$parameters.properties.source.version"/>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$parameters.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop type="string" name="etag"/>
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Automation/automationAccounts/{}/configurations/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="dateTime" name="creationTime"/>
                    <prop type="string" name="description"/>
                    <prop type="integer32" name="jobCount"/>
                    <prop type="dateTime" name="lastModifiedTime"/>
                    <prop type="boolean" name="logVerbose"/>
                    <prop type="integer" name="nodeConfigurationCount"/>
                    <prop type="object" name="parameters">
                      <additionalProp>
                        <item type="object">
                          <prop type="string" name="defaultValue"/>
                          <prop type="boolean" name="isMandatory"/>
                          <prop type="integer32" name="position"/>
                          <prop type="string" name="type"/>
                        </item>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Succeeded&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="source">
                      <prop type="object" name="hash">
                        <prop type="string" name="algorithm" required="True"/>
                        <prop type="string" name="value" required="True"/>
                      </prop>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;embeddedContent&quot;"/>
                          <item value="&quot;uri&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="value"/>
                      <prop type="string" name="version"/>
                    </prop>
                    <prop type="string" name="state">
                      <enum>
                        <item value="&quot;Edit&quot;"/>
                        <item value="&quot;New&quot;"/>
                        <item value="&quot;Published&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2023-11-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.automation/automationaccounts/{}/configurations/{}" version="2023-11-01" swagger="mgmt-plane/automation/ResourceProviders/Microsoft.Automation/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQXV0b21hdGlvbi9hdXRvbWF0aW9uQWNjb3VudHMve2F1dG9tYXRpb25BY2NvdW50TmFtZX0vY29uZmlndXJhdGlvbnMve2NvbmZpZ3VyYXRpb25OYW1lfQ==/V/MjAyMy0xMS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.automationAccountName" options="automation-account-name account" required="True" group="" idPart="name">
          <help short="The name of the automation account."/>
        </arg>
        <arg type="string" var="$Path.configurationName" options="configuration-name name n" required="True" idPart="child_name_1">
          <help short="The configuration name."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Parameters">
        <arg nullable="True" type="string" var="$parameters.location" options="location" group="Parameters">
          <help short="Gets or sets the location of the resource."/>
        </arg>
        <arg nullable="True" type="object" var="$parameters.tags" options="tags" group="Parameters">
          <help short="Gets or sets the tags attached to the resource."/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="string" var="$parameters.properties.description" options="description" group="Properties">
          <help short="Gets or sets the description of the configuration."/>
        </arg>
        <arg nullable="True" type="boolean" var="$parameters.properties.logProgress" options="log-progress" group="Properties">
          <help short="Gets or sets progress log option."/>
        </arg>
        <arg nullable="True" type="boolean" var="$parameters.properties.logVerbose" options="log-verbose" group="Properties">
          <help short="Gets or sets verbose log option."/>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.parameters" options="parameters" group="Properties">
          <help short="Gets or sets the configuration parameters."/>
          <additionalProp>
            <item nullable="True" type="object">
              <arg nullable="True" type="string" var="$parameters.properties.parameters{}.defaultValue" options="default-value">
                <help short="Gets or sets the default value of parameter."/>
              </arg>
              <arg nullable="True" type="boolean" var="$parameters.properties.parameters{}.isMandatory" options="is-mandatory">
                <help short="Gets or sets a Boolean value to indicate whether the parameter is mandatory or not."/>
              </arg>
              <arg nullable="True" type="integer32" var="$parameters.properties.parameters{}.position" options="position">
                <help short="Get or sets the position of the parameter."/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.parameters{}.type" options="type">
                <help short="Gets or sets the type of the parameter."/>
              </arg>
            </item>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Source">
        <arg nullable="True" type="object" var="$parameters.properties.source.hash" options="source-hash" group="Source">
          <help short="Gets or sets the hash."/>
          <arg type="string" var="$parameters.properties.source.hash.algorithm" options="algorithm">
            <help short="Gets or sets the content hash algorithm used to hash the content."/>
          </arg>
          <arg type="string" var="$parameters.properties.source.hash.value" options="value">
            <help short="Gets or sets expected hash value of the content."/>
          </arg>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.source.type" options="source-type" group="Source">
          <help short="Gets or sets the content source type."/>
          <enum>
            <item name="embeddedContent" value="&quot;embeddedContent&quot;"/>
            <item name="uri" value="&quot;uri&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.source.value" options="source" group="Source">
          <help short="Gets or sets the value of the content. This is based on the content source type."/>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.source.version" options="source-version" group="Source">
          <help short="Gets or sets the version of the content."/>
        </arg>
      </argGroup>
      <operation operationId="DscConfiguration_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}">
          <request method="get">
            <path>
              <param type="string" name="automationAccountName" arg="$Path.automationAccountName" required="True"/>
              <param type="string" name="configurationName" arg="$Path.configurationName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-11-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="DscConfiguration_read">
                  <prop type="string" name="etag"/>
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Automation/automationAccounts/{}/configurations/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="dateTime" name="creationTime"/>
                    <prop type="string" name="description"/>
                    <prop type="integer32" name="jobCount"/>
                    <prop type="dateTime" name="lastModifiedTime"/>
                    <prop type="boolean" name="logVerbose"/>
                    <prop type="integer" name="nodeConfigurationCount"/>
                    <prop type="object" name="parameters">
                      <additionalProp>
                        <item type="object">
                          <prop type="string" name="defaultValue"/>
                          <prop type="boolean" name="isMandatory"/>
                          <prop type="integer32" name="position"/>
                          <prop type="string" name="type"/>
                        </item>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Succeeded&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="source">
                      <prop type="object" name="hash">
                        <prop type="string" name="algorithm" required="True"/>
                        <prop type="string" name="value" required="True"/>
                      </prop>
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;embeddedContent&quot;"/>
                          <item value="&quot;uri&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="value"/>
                      <prop type="string" name="version"/>
                    </prop>
                    <prop type="string" name="state">
                      <enum>
                        <item value="&quot;Edit&quot;"/>
                        <item value="&quot;New&quot;"/>
                        <item value="&quot;Published&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="parameters" required="True" clientFlatten="True">
              <prop type="string" name="location" arg="$parameters.location"/>
              <prop type="string" name="name" arg="$Path.configurationName"/>
              <prop type="object" name="properties" required="True" clientFlatten="True">
                <prop type="string" name="description" arg="$parameters.properties.description"/>
                <prop type="boolean" name="logProgress" arg="$parameters.properties.logProgress"/>
                <prop type="boolean" name="logVerbose" arg="$parameters.properties.logVerbose"/>
                <prop type="object" name="parameters" arg="$parameters.properties.parameters">
                  <additionalProp>
                    <item type="object">
                      <prop type="string" name="defaultValue" arg="$parameters.properties.parameters{}.defaultValue"/>
                      <prop type="boolean" name="isMandatory" arg="$parameters.properties.parameters{}.isMandatory"/>
                      <prop type="integer32" name="position" arg="$parameters.properties.parameters{}.position"/>
                      <prop type="string" name="type" arg="$parameters.properties.parameters{}.type"/>
                    </item>
                  </additionalProp>
                </prop>
                <prop type="object" name="source" required="True">
                  <prop type="object" name="hash" arg="$parameters.properties.source.hash">
                    <prop type="string" name="algorithm" arg="$parameters.properties.source.hash.algorithm" required="True"/>
                    <prop type="string" name="value" arg="$parameters.properties.source.hash.value" required="True"/>
                  </prop>
                  <prop type="string" name="type" arg="$parameters.properties.source.type">
                    <enum>
                      <item value="&quot;embeddedContent&quot;"/>
                      <item value="&quot;uri&quot;"/>
                    </enum>
                  </prop>
                  <prop type="string" name="value" arg="$parameters.properties.source.value"/>
                  <prop type="string" name="version" arg="$parameters.properties.source.version"/>
                </prop>
              </prop>
              <prop type="object" name="tags" arg="$parameters.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="DscConfiguration_CreateOrUpdate">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}">
          <request method="put">
            <path>
              <param type="string" name="automationAccountName" arg="$Path.automationAccountName" required="True"/>
              <param type="string" name="configurationName" arg="$Path.configurationName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-11-01&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@DscConfiguration_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
