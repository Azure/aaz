<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/topics/{}/eventsubscriptions/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L3RvcGljcy97dG9waWNOYW1lfS9ldmVudFN1YnNjcmlwdGlvbnMve2V2ZW50U3Vic2NyaXB0aW9uTmFtZX0=/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
  <commandGroup name="eventgrid namespace topic event-subscription">
    <command name="show" version="2023-06-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/topics/{}/eventsubscriptions/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L3RvcGljcy97dG9waWNOYW1lfS9ldmVudFN1YnNjcmlwdGlvbnMve2V2ZW50U3Vic2NyaXB0aW9uTmFtZX0=/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.eventSubscriptionName" options="event-subscription-name name n" required="True" idPart="child_name_2">
          <help short="Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="Name of the namespace."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Path.topicName" options="topic-name" required="True" idPart="child_name_1">
          <help short="Name of the namespace topic."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
      </argGroup>
      <operation operationId="NamespaceTopicEventSubscriptions_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}">
          <request method="get">
            <path>
              <param type="string" name="eventSubscriptionName" arg="$Path.eventSubscriptionName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              <param type="string" name="topicName" arg="$Path.topicName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EventGrid/namespaces/{}/topics/{}/eventSubscriptions/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="deliveryConfiguration">
                      <prop type="string" name="deliveryMode">
                        <enum>
                          <item value="&quot;Queue&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="queue">
                        <prop type="object" name="deadLetterDestinationWithResourceIdentity">
                          <prop type="object" name="deadLetterDestination">
                            <prop type="string" name="endpointType" required="True">
                              <enum>
                                <item value="&quot;StorageBlob&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="endpointType" value="StorageBlob">
                              <prop type="object" name="properties" clientFlatten="True">
                                <prop type="string" name="blobContainerName"/>
                                <prop type="ResourceId" name="resourceId"/>
                              </prop>
                            </discriminator>
                          </prop>
                          <prop type="object" name="identity">
                            <prop type="string" name="type">
                              <enum>
                                <item value="&quot;SystemAssigned&quot;"/>
                                <item value="&quot;UserAssigned&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="userAssignedIdentity"/>
                          </prop>
                        </prop>
                        <prop type="duration" name="eventTimeToLive"/>
                        <prop type="integer32" name="maxDeliveryCount"/>
                        <prop type="integer32" name="receiveLockDurationInSeconds"/>
                      </prop>
                    </prop>
                    <prop type="string" name="eventDeliverySchema">
                      <enum>
                        <item value="&quot;CloudEventSchemaV1_0&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="filtersConfiguration">
                      <prop type="array<object>" name="filters">
                        <item type="object">
                          <prop type="string" name="key"/>
                          <prop type="string" name="operatorType" required="True">
                            <enum>
                              <item value="&quot;BoolEquals&quot;"/>
                              <item value="&quot;IsNotNull&quot;"/>
                              <item value="&quot;IsNullOrUndefined&quot;"/>
                              <item value="&quot;NumberGreaterThan&quot;"/>
                              <item value="&quot;NumberGreaterThanOrEquals&quot;"/>
                              <item value="&quot;NumberIn&quot;"/>
                              <item value="&quot;NumberInRange&quot;"/>
                              <item value="&quot;NumberLessThan&quot;"/>
                              <item value="&quot;NumberLessThanOrEquals&quot;"/>
                              <item value="&quot;NumberNotIn&quot;"/>
                              <item value="&quot;NumberNotInRange&quot;"/>
                              <item value="&quot;StringBeginsWith&quot;"/>
                              <item value="&quot;StringContains&quot;"/>
                              <item value="&quot;StringEndsWith&quot;"/>
                              <item value="&quot;StringIn&quot;"/>
                              <item value="&quot;StringNotBeginsWith&quot;"/>
                              <item value="&quot;StringNotContains&quot;"/>
                              <item value="&quot;StringNotEndsWith&quot;"/>
                              <item value="&quot;StringNotIn&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="operatorType" value="BoolEquals">
                            <prop type="boolean" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberGreaterThan">
                            <prop type="float64" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberGreaterThanOrEquals">
                            <prop type="float64" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberIn">
                            <prop type="array<float64>" name="values">
                              <item type="float64"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberInRange">
                            <prop type="array<array<float64>>" name="values">
                              <item type="array<float64>">
                                <item type="float64"/>
                              </item>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberLessThan">
                            <prop type="float64" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberLessThanOrEquals">
                            <prop type="float64" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberNotIn">
                            <prop type="array<float64>" name="values">
                              <item type="float64"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberNotInRange">
                            <prop type="array<array<float64>>" name="values">
                              <item type="array<float64>">
                                <item type="float64"/>
                              </item>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringBeginsWith">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringContains">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringEndsWith">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringIn">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotBeginsWith">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotContains">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotEndsWith">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotIn">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                        </item>
                      </prop>
                      <prop type="array<string>" name="includedEventTypes">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;AwaitingManualAction&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;CreateFailed&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;DeleteFailed&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;UpdatedFailed&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2023-06-01-preview" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/topics/{}/eventsubscriptions/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L3RvcGljcy97dG9waWNOYW1lfS9ldmVudFN1YnNjcmlwdGlvbnMve2V2ZW50U3Vic2NyaXB0aW9uTmFtZX0=/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.eventSubscriptionName" options="event-subscription-name name n" required="True" idPart="child_name_2">
          <help short="Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="Name of the namespace."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Path.topicName" options="topic-name" required="True" idPart="child_name_1">
          <help short="Name of the namespace topic."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
      </argGroup>
      <operation operationId="NamespaceTopicEventSubscriptions_Delete">
        <longRunning finalStateVia="location"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}">
          <request method="delete">
            <path>
              <param type="string" name="eventSubscriptionName" arg="$Path.eventSubscriptionName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              <param type="string" name="topicName" arg="$Path.topicName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="202">
            <header>
              <item name="Location"/>
            </header>
          </response>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2023-06-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/topics/{}/eventsubscriptions/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L3RvcGljcy97dG9waWNOYW1lfS9ldmVudFN1YnNjcmlwdGlvbnMve2V2ZW50U3Vic2NyaXB0aW9uTmFtZX0=/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.eventSubscriptionName" options="event-subscription-name name n" required="True" idPart="child_name_2">
          <help short="Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="Name of the namespace."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Path.topicName" options="topic-name" required="True" idPart="child_name_1">
          <help short="Name of the namespace topic."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="object" var="$eventSubscriptionInfo.properties.deliveryConfiguration" options="delivery-configuration" group="Properties">
          <help short="Information about the delivery configuration of the event subscription."/>
          <arg type="string" var="$eventSubscriptionInfo.properties.deliveryConfiguration.deliveryMode" options="delivery-mode">
            <help short="Delivery mode of the event subscription."/>
            <enum>
              <item name="Queue" value="&quot;Queue&quot;"/>
            </enum>
          </arg>
          <arg type="object" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue" options="queue">
            <help short="This property should be populated when deliveryMode is queue and represents information about the queue subscription."/>
            <arg type="object" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity" options="dead-letter-destination-with-resource-identity" group="">
              <help short="The dead letter destination of the event subscription."/>
              <arg type="object" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination" options="dead-letter-destination" group="">
                <help short="Information about the destination where events have to be delivered for the event subscription."/>
                <arg type="object" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination.StorageBlob" options="storage-blob">
                  <arg type="string" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination.StorageBlob.properties.blobContainerName" options="blob-container-name" group="Properties">
                    <help short="The name of the Storage blob container that is the destination of the deadletter events"/>
                  </arg>
                  <arg type="ResourceId" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination.StorageBlob.properties.resourceId" options="resource-id" group="Properties">
                    <help short="The Azure Resource ID of the storage account that is the destination of the deadletter events"/>
                  </arg>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.identity" options="identity">
                <help short="The identity to use when dead-lettering events."/>
                <arg type="string" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.identity.type" options="type">
                  <help short="The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity."/>
                  <enum>
                    <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
                    <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.identity.userAssignedIdentity" options="user-assigned-identity">
                  <help short="The user identity associated with the resource."/>
                </arg>
              </arg>
            </arg>
            <arg type="duration" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.eventTimeToLive" options="event-time-to-live" group="">
              <help short="Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published."/>
            </arg>
            <arg type="integer32" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.maxDeliveryCount" options="max-delivery-count">
              <help short="The maximum delivery count of the events."/>
            </arg>
            <arg type="integer32" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.receiveLockDurationInSeconds" options="receive-lock-duration-in-seconds" group="">
              <help short="Maximum period in seconds in which once the message is in received (by the client) state and waiting to be accepted, released or rejected."/>
            </arg>
          </arg>
        </arg>
        <arg type="string" var="$eventSubscriptionInfo.properties.eventDeliverySchema" options="event-delivery-schema" group="Properties">
          <help short="The event delivery schema for the event subscription."/>
          <enum>
            <item name="CloudEventSchemaV1_0" value="&quot;CloudEventSchemaV1_0&quot;"/>
          </enum>
        </arg>
        <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration" options="filters-configuration" group="Properties">
          <help short="Information about the filter for the event subscription."/>
          <arg type="array<object>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters" options="filters">
            <help short="An array of filters that are used for filtering event subscriptions."/>
            <item type="object">
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].BoolEquals" options="bool-equals">
                <arg type="boolean" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].BoolEquals.value" options="value">
                  <help short="The boolean filter value."/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThan" options="number-greater-than">
                <arg type="float64" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThan.value" options="value">
                  <help short="The filter value."/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThanOrEquals" options="number-greater-than-or-equals">
                <arg type="float64" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThanOrEquals.value" options="value">
                  <help short="The filter value."/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberIn" options="number-in">
                <arg type="array<float64>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberIn.values" options="values">
                  <help short="The set of filter values."/>
                  <item type="float64"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberInRange" options="number-in-range">
                <arg type="array<array<float64>>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberInRange.values" options="values">
                  <help short="The set of filter values."/>
                  <item type="array<float64>">
                    <item type="float64"/>
                  </item>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThan" options="number-less-than">
                <arg type="float64" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThan.value" options="value">
                  <help short="The filter value."/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThanOrEquals" options="number-less-than-or-equals">
                <arg type="float64" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThanOrEquals.value" options="value">
                  <help short="The filter value."/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotIn" options="number-not-in">
                <arg type="array<float64>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotIn.values" options="values">
                  <help short="The set of filter values."/>
                  <item type="float64"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotInRange" options="number-not-in-range">
                <arg type="array<array<float64>>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotInRange.values" options="values">
                  <help short="The set of filter values."/>
                  <item type="array<float64>">
                    <item type="float64"/>
                  </item>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringBeginsWith" options="string-begins-with">
                <arg type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringBeginsWith.values" options="values">
                  <help short="The set of filter values."/>
                  <item type="string"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringContains" options="string-contains">
                <arg type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringContains.values" options="values">
                  <help short="The set of filter values."/>
                  <item type="string"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringEndsWith" options="string-ends-with">
                <arg type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringEndsWith.values" options="values">
                  <help short="The set of filter values."/>
                  <item type="string"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringIn" options="string-in">
                <arg type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringIn.values" options="values">
                  <help short="The set of filter values."/>
                  <item type="string"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotBeginsWith" options="string-not-begins-with">
                <arg type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotBeginsWith.values" options="values">
                  <help short="The set of filter values."/>
                  <item type="string"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotContains" options="string-not-contains">
                <arg type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotContains.values" options="values">
                  <help short="The set of filter values."/>
                  <item type="string"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotEndsWith" options="string-not-ends-with">
                <arg type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotEndsWith.values" options="values">
                  <help short="The set of filter values."/>
                  <item type="string"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotIn" options="string-not-in">
                <arg type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotIn.values" options="values">
                  <help short="The set of filter values."/>
                  <item type="string"/>
                </arg>
              </arg>
              <arg type="string" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].key" options="key">
                <help short="The field/property in the event based on which you want to filter."/>
              </arg>
            </item>
          </arg>
          <arg type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.includedEventTypes" options="included-event-types">
            <help short="A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null."/>
            <item type="string"/>
          </arg>
        </arg>
      </argGroup>
      <operation operationId="NamespaceTopicEventSubscriptions_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}">
          <request method="put">
            <path>
              <param type="string" name="eventSubscriptionName" arg="$Path.eventSubscriptionName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              <param type="string" name="topicName" arg="$Path.topicName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="eventSubscriptionInfo" required="True" clientFlatten="True">
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="deliveryConfiguration" arg="$eventSubscriptionInfo.properties.deliveryConfiguration">
                      <prop type="string" name="deliveryMode" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.deliveryMode">
                        <enum>
                          <item value="&quot;Queue&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="queue" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue">
                        <prop type="object" name="deadLetterDestinationWithResourceIdentity" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity">
                          <prop type="object" name="deadLetterDestination" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination">
                            <prop type="string" name="endpointType" required="True">
                              <enum>
                                <item arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination.StorageBlob" value="&quot;StorageBlob&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="endpointType" value="StorageBlob">
                              <prop type="object" name="properties" clientFlatten="True">
                                <prop type="string" name="blobContainerName" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination.StorageBlob.properties.blobContainerName"/>
                                <prop type="ResourceId" name="resourceId" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination.StorageBlob.properties.resourceId"/>
                              </prop>
                            </discriminator>
                          </prop>
                          <prop type="object" name="identity" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.identity">
                            <prop type="string" name="type" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.identity.type">
                              <enum>
                                <item value="&quot;SystemAssigned&quot;"/>
                                <item value="&quot;UserAssigned&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="userAssignedIdentity" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.identity.userAssignedIdentity"/>
                          </prop>
                        </prop>
                        <prop type="duration" name="eventTimeToLive" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.eventTimeToLive"/>
                        <prop type="integer32" name="maxDeliveryCount" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.maxDeliveryCount"/>
                        <prop type="integer32" name="receiveLockDurationInSeconds" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.receiveLockDurationInSeconds"/>
                      </prop>
                    </prop>
                    <prop type="string" name="eventDeliverySchema" arg="$eventSubscriptionInfo.properties.eventDeliverySchema">
                      <enum>
                        <item value="&quot;CloudEventSchemaV1_0&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="filtersConfiguration" arg="$eventSubscriptionInfo.properties.filtersConfiguration">
                      <prop type="array<object>" name="filters" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters">
                        <item type="object">
                          <prop type="string" name="key" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].key"/>
                          <prop type="string" name="operatorType" required="True">
                            <enum>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].BoolEquals" value="&quot;BoolEquals&quot;"/>
                              <item value="&quot;IsNotNull&quot;"/>
                              <item value="&quot;IsNullOrUndefined&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThan" value="&quot;NumberGreaterThan&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThanOrEquals" value="&quot;NumberGreaterThanOrEquals&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberIn" value="&quot;NumberIn&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberInRange" value="&quot;NumberInRange&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThan" value="&quot;NumberLessThan&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThanOrEquals" value="&quot;NumberLessThanOrEquals&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotIn" value="&quot;NumberNotIn&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotInRange" value="&quot;NumberNotInRange&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringBeginsWith" value="&quot;StringBeginsWith&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringContains" value="&quot;StringContains&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringEndsWith" value="&quot;StringEndsWith&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringIn" value="&quot;StringIn&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotBeginsWith" value="&quot;StringNotBeginsWith&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotContains" value="&quot;StringNotContains&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotEndsWith" value="&quot;StringNotEndsWith&quot;"/>
                              <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotIn" value="&quot;StringNotIn&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="operatorType" value="BoolEquals">
                            <prop type="boolean" name="value" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].BoolEquals.value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberGreaterThan">
                            <prop type="float64" name="value" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThan.value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberGreaterThanOrEquals">
                            <prop type="float64" name="value" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThanOrEquals.value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberIn">
                            <prop type="array<float64>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberIn.values">
                              <item type="float64"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberInRange">
                            <prop type="array<array<float64>>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberInRange.values">
                              <item type="array<float64>">
                                <item type="float64"/>
                              </item>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberLessThan">
                            <prop type="float64" name="value" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThan.value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberLessThanOrEquals">
                            <prop type="float64" name="value" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThanOrEquals.value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberNotIn">
                            <prop type="array<float64>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotIn.values">
                              <item type="float64"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberNotInRange">
                            <prop type="array<array<float64>>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotInRange.values">
                              <item type="array<float64>">
                                <item type="float64"/>
                              </item>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringBeginsWith">
                            <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringBeginsWith.values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringContains">
                            <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringContains.values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringEndsWith">
                            <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringEndsWith.values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringIn">
                            <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringIn.values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotBeginsWith">
                            <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotBeginsWith.values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotContains">
                            <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotContains.values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotEndsWith">
                            <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotEndsWith.values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotIn">
                            <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotIn.values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                        </item>
                      </prop>
                      <prop type="array<string>" name="includedEventTypes" arg="$eventSubscriptionInfo.properties.filtersConfiguration.includedEventTypes">
                        <item type="string"/>
                      </prop>
                    </prop>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EventGrid/namespaces/{}/topics/{}/eventSubscriptions/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="deliveryConfiguration">
                      <prop type="string" name="deliveryMode">
                        <enum>
                          <item value="&quot;Queue&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="queue">
                        <prop type="object" name="deadLetterDestinationWithResourceIdentity">
                          <prop type="object" name="deadLetterDestination">
                            <prop type="string" name="endpointType" required="True">
                              <enum>
                                <item value="&quot;StorageBlob&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="endpointType" value="StorageBlob">
                              <prop type="object" name="properties" clientFlatten="True">
                                <prop type="string" name="blobContainerName"/>
                                <prop type="ResourceId" name="resourceId"/>
                              </prop>
                            </discriminator>
                          </prop>
                          <prop type="object" name="identity">
                            <prop type="string" name="type">
                              <enum>
                                <item value="&quot;SystemAssigned&quot;"/>
                                <item value="&quot;UserAssigned&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="userAssignedIdentity"/>
                          </prop>
                        </prop>
                        <prop type="duration" name="eventTimeToLive"/>
                        <prop type="integer32" name="maxDeliveryCount"/>
                        <prop type="integer32" name="receiveLockDurationInSeconds"/>
                      </prop>
                    </prop>
                    <prop type="string" name="eventDeliverySchema">
                      <enum>
                        <item value="&quot;CloudEventSchemaV1_0&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="filtersConfiguration">
                      <prop type="array<object>" name="filters">
                        <item type="object">
                          <prop type="string" name="key"/>
                          <prop type="string" name="operatorType" required="True">
                            <enum>
                              <item value="&quot;BoolEquals&quot;"/>
                              <item value="&quot;IsNotNull&quot;"/>
                              <item value="&quot;IsNullOrUndefined&quot;"/>
                              <item value="&quot;NumberGreaterThan&quot;"/>
                              <item value="&quot;NumberGreaterThanOrEquals&quot;"/>
                              <item value="&quot;NumberIn&quot;"/>
                              <item value="&quot;NumberInRange&quot;"/>
                              <item value="&quot;NumberLessThan&quot;"/>
                              <item value="&quot;NumberLessThanOrEquals&quot;"/>
                              <item value="&quot;NumberNotIn&quot;"/>
                              <item value="&quot;NumberNotInRange&quot;"/>
                              <item value="&quot;StringBeginsWith&quot;"/>
                              <item value="&quot;StringContains&quot;"/>
                              <item value="&quot;StringEndsWith&quot;"/>
                              <item value="&quot;StringIn&quot;"/>
                              <item value="&quot;StringNotBeginsWith&quot;"/>
                              <item value="&quot;StringNotContains&quot;"/>
                              <item value="&quot;StringNotEndsWith&quot;"/>
                              <item value="&quot;StringNotIn&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="operatorType" value="BoolEquals">
                            <prop type="boolean" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberGreaterThan">
                            <prop type="float64" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberGreaterThanOrEquals">
                            <prop type="float64" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberIn">
                            <prop type="array<float64>" name="values">
                              <item type="float64"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberInRange">
                            <prop type="array<array<float64>>" name="values">
                              <item type="array<float64>">
                                <item type="float64"/>
                              </item>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberLessThan">
                            <prop type="float64" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberLessThanOrEquals">
                            <prop type="float64" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberNotIn">
                            <prop type="array<float64>" name="values">
                              <item type="float64"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberNotInRange">
                            <prop type="array<array<float64>>" name="values">
                              <item type="array<float64>">
                                <item type="float64"/>
                              </item>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringBeginsWith">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringContains">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringEndsWith">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringIn">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotBeginsWith">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotContains">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotEndsWith">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotIn">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                        </item>
                      </prop>
                      <prop type="array<string>" name="includedEventTypes">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;AwaitingManualAction&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;CreateFailed&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;DeleteFailed&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;UpdatedFailed&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2023-06-01-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/topics/{}/eventsubscriptions/{}" version="2023-06-01-preview" swagger="mgmt-plane/eventgrid/ResourceProviders/Microsoft.EventGrid/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRXZlbnRHcmlkL25hbWVzcGFjZXMve25hbWVzcGFjZU5hbWV9L3RvcGljcy97dG9waWNOYW1lfS9ldmVudFN1YnNjcmlwdGlvbnMve2V2ZW50U3Vic2NyaXB0aW9uTmFtZX0=/V/MjAyMy0wNi0wMS1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.eventSubscriptionName" options="event-subscription-name name n" required="True" idPart="child_name_2">
          <help short="Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="string" var="$Path.namespaceName" options="namespace-name" required="True" idPart="name">
          <help short="Name of the namespace."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Path.topicName" options="topic-name" required="True" idPart="child_name_1">
          <help short="Name of the namespace topic."/>
          <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="object" var="$eventSubscriptionInfo.properties.deliveryConfiguration" options="delivery-configuration" group="Properties">
          <help short="Information about the delivery configuration of the event subscription."/>
          <arg nullable="True" type="string" var="$eventSubscriptionInfo.properties.deliveryConfiguration.deliveryMode" options="delivery-mode">
            <help short="Delivery mode of the event subscription."/>
            <enum>
              <item name="Queue" value="&quot;Queue&quot;"/>
            </enum>
          </arg>
          <arg nullable="True" type="object" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue" options="queue">
            <help short="This property should be populated when deliveryMode is queue and represents information about the queue subscription."/>
            <arg nullable="True" type="object" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity" options="dead-letter-destination-with-resource-identity" group="">
              <help short="The dead letter destination of the event subscription."/>
              <arg nullable="True" type="object" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination" options="dead-letter-destination" group="">
                <help short="Information about the destination where events have to be delivered for the event subscription."/>
                <arg type="object" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination.StorageBlob" options="storage-blob">
                  <arg nullable="True" type="string" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination.StorageBlob.properties.blobContainerName" options="blob-container-name" group="Properties">
                    <help short="The name of the Storage blob container that is the destination of the deadletter events"/>
                  </arg>
                  <arg nullable="True" type="ResourceId" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination.StorageBlob.properties.resourceId" options="resource-id" group="Properties">
                    <help short="The Azure Resource ID of the storage account that is the destination of the deadletter events"/>
                  </arg>
                </arg>
              </arg>
              <arg nullable="True" type="object" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.identity" options="identity">
                <help short="The identity to use when dead-lettering events."/>
                <arg nullable="True" type="string" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.identity.type" options="type">
                  <help short="The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity."/>
                  <enum>
                    <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
                    <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
                  </enum>
                </arg>
                <arg nullable="True" type="string" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.identity.userAssignedIdentity" options="user-assigned-identity">
                  <help short="The user identity associated with the resource."/>
                </arg>
              </arg>
            </arg>
            <arg nullable="True" type="duration" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.eventTimeToLive" options="event-time-to-live" group="">
              <help short="Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published."/>
            </arg>
            <arg nullable="True" type="integer32" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.maxDeliveryCount" options="max-delivery-count">
              <help short="The maximum delivery count of the events."/>
            </arg>
            <arg nullable="True" type="integer32" var="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.receiveLockDurationInSeconds" options="receive-lock-duration-in-seconds" group="">
              <help short="Maximum period in seconds in which once the message is in received (by the client) state and waiting to be accepted, released or rejected."/>
            </arg>
          </arg>
        </arg>
        <arg nullable="True" type="string" var="$eventSubscriptionInfo.properties.eventDeliverySchema" options="event-delivery-schema" group="Properties">
          <help short="The event delivery schema for the event subscription."/>
          <enum>
            <item name="CloudEventSchemaV1_0" value="&quot;CloudEventSchemaV1_0&quot;"/>
          </enum>
        </arg>
        <arg nullable="True" type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration" options="filters-configuration" group="Properties">
          <help short="Information about the filter for the event subscription."/>
          <arg nullable="True" type="array<object>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters" options="filters">
            <help short="An array of filters that are used for filtering event subscriptions."/>
            <item nullable="True" type="object">
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].BoolEquals" options="bool-equals">
                <arg nullable="True" type="boolean" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].BoolEquals.value" options="value">
                  <help short="The boolean filter value."/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThan" options="number-greater-than">
                <arg nullable="True" type="float64" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThan.value" options="value">
                  <help short="The filter value."/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThanOrEquals" options="number-greater-than-or-equals">
                <arg nullable="True" type="float64" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThanOrEquals.value" options="value">
                  <help short="The filter value."/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberIn" options="number-in">
                <arg nullable="True" type="array<float64>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberIn.values" options="values">
                  <help short="The set of filter values."/>
                  <item nullable="True" type="float64"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberInRange" options="number-in-range">
                <arg nullable="True" type="array<array<float64>>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberInRange.values" options="values">
                  <help short="The set of filter values."/>
                  <item nullable="True" type="array<float64>">
                    <item nullable="True" type="float64"/>
                  </item>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThan" options="number-less-than">
                <arg nullable="True" type="float64" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThan.value" options="value">
                  <help short="The filter value."/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThanOrEquals" options="number-less-than-or-equals">
                <arg nullable="True" type="float64" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThanOrEquals.value" options="value">
                  <help short="The filter value."/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotIn" options="number-not-in">
                <arg nullable="True" type="array<float64>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotIn.values" options="values">
                  <help short="The set of filter values."/>
                  <item nullable="True" type="float64"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotInRange" options="number-not-in-range">
                <arg nullable="True" type="array<array<float64>>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotInRange.values" options="values">
                  <help short="The set of filter values."/>
                  <item nullable="True" type="array<float64>">
                    <item nullable="True" type="float64"/>
                  </item>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringBeginsWith" options="string-begins-with">
                <arg nullable="True" type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringBeginsWith.values" options="values">
                  <help short="The set of filter values."/>
                  <item nullable="True" type="string"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringContains" options="string-contains">
                <arg nullable="True" type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringContains.values" options="values">
                  <help short="The set of filter values."/>
                  <item nullable="True" type="string"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringEndsWith" options="string-ends-with">
                <arg nullable="True" type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringEndsWith.values" options="values">
                  <help short="The set of filter values."/>
                  <item nullable="True" type="string"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringIn" options="string-in">
                <arg nullable="True" type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringIn.values" options="values">
                  <help short="The set of filter values."/>
                  <item nullable="True" type="string"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotBeginsWith" options="string-not-begins-with">
                <arg nullable="True" type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotBeginsWith.values" options="values">
                  <help short="The set of filter values."/>
                  <item nullable="True" type="string"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotContains" options="string-not-contains">
                <arg nullable="True" type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotContains.values" options="values">
                  <help short="The set of filter values."/>
                  <item nullable="True" type="string"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotEndsWith" options="string-not-ends-with">
                <arg nullable="True" type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotEndsWith.values" options="values">
                  <help short="The set of filter values."/>
                  <item nullable="True" type="string"/>
                </arg>
              </arg>
              <arg type="object" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotIn" options="string-not-in">
                <arg nullable="True" type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotIn.values" options="values">
                  <help short="The set of filter values."/>
                  <item nullable="True" type="string"/>
                </arg>
              </arg>
              <arg nullable="True" type="string" var="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].key" options="key">
                <help short="The field/property in the event based on which you want to filter."/>
              </arg>
            </item>
          </arg>
          <arg nullable="True" type="array<string>" var="$eventSubscriptionInfo.properties.filtersConfiguration.includedEventTypes" options="included-event-types">
            <help short="A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null."/>
            <item nullable="True" type="string"/>
          </arg>
        </arg>
      </argGroup>
      <operation operationId="NamespaceTopicEventSubscriptions_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}">
          <request method="get">
            <path>
              <param type="string" name="eventSubscriptionName" arg="$Path.eventSubscriptionName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              <param type="string" name="topicName" arg="$Path.topicName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="Subscription_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.EventGrid/namespaces/{}/topics/{}/eventSubscriptions/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="deliveryConfiguration">
                      <prop type="string" name="deliveryMode">
                        <enum>
                          <item value="&quot;Queue&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="queue">
                        <prop type="object" name="deadLetterDestinationWithResourceIdentity">
                          <prop type="object" name="deadLetterDestination">
                            <prop type="string" name="endpointType" required="True">
                              <enum>
                                <item value="&quot;StorageBlob&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="endpointType" value="StorageBlob">
                              <prop type="object" name="properties" clientFlatten="True">
                                <prop type="string" name="blobContainerName"/>
                                <prop type="ResourceId" name="resourceId"/>
                              </prop>
                            </discriminator>
                          </prop>
                          <prop type="object" name="identity">
                            <prop type="string" name="type">
                              <enum>
                                <item value="&quot;SystemAssigned&quot;"/>
                                <item value="&quot;UserAssigned&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="userAssignedIdentity"/>
                          </prop>
                        </prop>
                        <prop type="duration" name="eventTimeToLive"/>
                        <prop type="integer32" name="maxDeliveryCount"/>
                        <prop type="integer32" name="receiveLockDurationInSeconds"/>
                      </prop>
                    </prop>
                    <prop type="string" name="eventDeliverySchema">
                      <enum>
                        <item value="&quot;CloudEventSchemaV1_0&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="filtersConfiguration">
                      <prop type="array<object>" name="filters">
                        <item type="object">
                          <prop type="string" name="key"/>
                          <prop type="string" name="operatorType" required="True">
                            <enum>
                              <item value="&quot;BoolEquals&quot;"/>
                              <item value="&quot;IsNotNull&quot;"/>
                              <item value="&quot;IsNullOrUndefined&quot;"/>
                              <item value="&quot;NumberGreaterThan&quot;"/>
                              <item value="&quot;NumberGreaterThanOrEquals&quot;"/>
                              <item value="&quot;NumberIn&quot;"/>
                              <item value="&quot;NumberInRange&quot;"/>
                              <item value="&quot;NumberLessThan&quot;"/>
                              <item value="&quot;NumberLessThanOrEquals&quot;"/>
                              <item value="&quot;NumberNotIn&quot;"/>
                              <item value="&quot;NumberNotInRange&quot;"/>
                              <item value="&quot;StringBeginsWith&quot;"/>
                              <item value="&quot;StringContains&quot;"/>
                              <item value="&quot;StringEndsWith&quot;"/>
                              <item value="&quot;StringIn&quot;"/>
                              <item value="&quot;StringNotBeginsWith&quot;"/>
                              <item value="&quot;StringNotContains&quot;"/>
                              <item value="&quot;StringNotEndsWith&quot;"/>
                              <item value="&quot;StringNotIn&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="operatorType" value="BoolEquals">
                            <prop type="boolean" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberGreaterThan">
                            <prop type="float64" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberGreaterThanOrEquals">
                            <prop type="float64" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberIn">
                            <prop type="array<float64>" name="values">
                              <item type="float64"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberInRange">
                            <prop type="array<array<float64>>" name="values">
                              <item type="array<float64>">
                                <item type="float64"/>
                              </item>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberLessThan">
                            <prop type="float64" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberLessThanOrEquals">
                            <prop type="float64" name="value"/>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberNotIn">
                            <prop type="array<float64>" name="values">
                              <item type="float64"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="NumberNotInRange">
                            <prop type="array<array<float64>>" name="values">
                              <item type="array<float64>">
                                <item type="float64"/>
                              </item>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringBeginsWith">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringContains">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringEndsWith">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringIn">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotBeginsWith">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotContains">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotEndsWith">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                          <discriminator property="operatorType" value="StringNotIn">
                            <prop type="array<string>" name="values">
                              <item type="string"/>
                            </prop>
                          </discriminator>
                        </item>
                      </prop>
                      <prop type="array<string>" name="includedEventTypes">
                        <item type="string"/>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;AwaitingManualAction&quot;"/>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;CreateFailed&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;DeleteFailed&quot;"/>
                        <item value="&quot;Deleted&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;UpdatedFailed&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="eventSubscriptionInfo" required="True" clientFlatten="True">
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="object" name="deliveryConfiguration" arg="$eventSubscriptionInfo.properties.deliveryConfiguration">
                  <prop type="string" name="deliveryMode" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.deliveryMode">
                    <enum>
                      <item value="&quot;Queue&quot;"/>
                    </enum>
                  </prop>
                  <prop type="object" name="queue" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue">
                    <prop type="object" name="deadLetterDestinationWithResourceIdentity" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity">
                      <prop type="object" name="deadLetterDestination" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination">
                        <prop type="string" name="endpointType" required="True">
                          <enum>
                            <item arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination.StorageBlob" value="&quot;StorageBlob&quot;"/>
                          </enum>
                        </prop>
                        <discriminator property="endpointType" value="StorageBlob">
                          <prop type="object" name="properties" clientFlatten="True">
                            <prop type="string" name="blobContainerName" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination.StorageBlob.properties.blobContainerName"/>
                            <prop type="ResourceId" name="resourceId" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination.StorageBlob.properties.resourceId"/>
                          </prop>
                        </discriminator>
                      </prop>
                      <prop type="object" name="identity" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.identity">
                        <prop type="string" name="type" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.identity.type">
                          <enum>
                            <item value="&quot;SystemAssigned&quot;"/>
                            <item value="&quot;UserAssigned&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="userAssignedIdentity" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.identity.userAssignedIdentity"/>
                      </prop>
                    </prop>
                    <prop type="duration" name="eventTimeToLive" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.eventTimeToLive"/>
                    <prop type="integer32" name="maxDeliveryCount" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.maxDeliveryCount"/>
                    <prop type="integer32" name="receiveLockDurationInSeconds" arg="$eventSubscriptionInfo.properties.deliveryConfiguration.queue.receiveLockDurationInSeconds"/>
                  </prop>
                </prop>
                <prop type="string" name="eventDeliverySchema" arg="$eventSubscriptionInfo.properties.eventDeliverySchema">
                  <enum>
                    <item value="&quot;CloudEventSchemaV1_0&quot;"/>
                  </enum>
                </prop>
                <prop type="object" name="filtersConfiguration" arg="$eventSubscriptionInfo.properties.filtersConfiguration">
                  <prop type="array<object>" name="filters" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters">
                    <item type="object">
                      <prop type="string" name="key" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].key"/>
                      <prop type="string" name="operatorType" required="True">
                        <enum>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].BoolEquals" value="&quot;BoolEquals&quot;"/>
                          <item value="&quot;IsNotNull&quot;"/>
                          <item value="&quot;IsNullOrUndefined&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThan" value="&quot;NumberGreaterThan&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThanOrEquals" value="&quot;NumberGreaterThanOrEquals&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberIn" value="&quot;NumberIn&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberInRange" value="&quot;NumberInRange&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThan" value="&quot;NumberLessThan&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThanOrEquals" value="&quot;NumberLessThanOrEquals&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotIn" value="&quot;NumberNotIn&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotInRange" value="&quot;NumberNotInRange&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringBeginsWith" value="&quot;StringBeginsWith&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringContains" value="&quot;StringContains&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringEndsWith" value="&quot;StringEndsWith&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringIn" value="&quot;StringIn&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotBeginsWith" value="&quot;StringNotBeginsWith&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotContains" value="&quot;StringNotContains&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotEndsWith" value="&quot;StringNotEndsWith&quot;"/>
                          <item arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotIn" value="&quot;StringNotIn&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="operatorType" value="BoolEquals">
                        <prop type="boolean" name="value" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].BoolEquals.value"/>
                      </discriminator>
                      <discriminator property="operatorType" value="NumberGreaterThan">
                        <prop type="float64" name="value" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThan.value"/>
                      </discriminator>
                      <discriminator property="operatorType" value="NumberGreaterThanOrEquals">
                        <prop type="float64" name="value" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberGreaterThanOrEquals.value"/>
                      </discriminator>
                      <discriminator property="operatorType" value="NumberIn">
                        <prop type="array<float64>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberIn.values">
                          <item type="float64"/>
                        </prop>
                      </discriminator>
                      <discriminator property="operatorType" value="NumberInRange">
                        <prop type="array<array<float64>>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberInRange.values">
                          <item type="array<float64>">
                            <item type="float64"/>
                          </item>
                        </prop>
                      </discriminator>
                      <discriminator property="operatorType" value="NumberLessThan">
                        <prop type="float64" name="value" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThan.value"/>
                      </discriminator>
                      <discriminator property="operatorType" value="NumberLessThanOrEquals">
                        <prop type="float64" name="value" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberLessThanOrEquals.value"/>
                      </discriminator>
                      <discriminator property="operatorType" value="NumberNotIn">
                        <prop type="array<float64>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotIn.values">
                          <item type="float64"/>
                        </prop>
                      </discriminator>
                      <discriminator property="operatorType" value="NumberNotInRange">
                        <prop type="array<array<float64>>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].NumberNotInRange.values">
                          <item type="array<float64>">
                            <item type="float64"/>
                          </item>
                        </prop>
                      </discriminator>
                      <discriminator property="operatorType" value="StringBeginsWith">
                        <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringBeginsWith.values">
                          <item type="string"/>
                        </prop>
                      </discriminator>
                      <discriminator property="operatorType" value="StringContains">
                        <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringContains.values">
                          <item type="string"/>
                        </prop>
                      </discriminator>
                      <discriminator property="operatorType" value="StringEndsWith">
                        <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringEndsWith.values">
                          <item type="string"/>
                        </prop>
                      </discriminator>
                      <discriminator property="operatorType" value="StringIn">
                        <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringIn.values">
                          <item type="string"/>
                        </prop>
                      </discriminator>
                      <discriminator property="operatorType" value="StringNotBeginsWith">
                        <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotBeginsWith.values">
                          <item type="string"/>
                        </prop>
                      </discriminator>
                      <discriminator property="operatorType" value="StringNotContains">
                        <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotContains.values">
                          <item type="string"/>
                        </prop>
                      </discriminator>
                      <discriminator property="operatorType" value="StringNotEndsWith">
                        <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotEndsWith.values">
                          <item type="string"/>
                        </prop>
                      </discriminator>
                      <discriminator property="operatorType" value="StringNotIn">
                        <prop type="array<string>" name="values" arg="$eventSubscriptionInfo.properties.filtersConfiguration.filters[].StringNotIn.values">
                          <item type="string"/>
                        </prop>
                      </discriminator>
                    </item>
                  </prop>
                  <prop type="array<string>" name="includedEventTypes" arg="$eventSubscriptionInfo.properties.filtersConfiguration.includedEventTypes">
                    <item type="string"/>
                  </prop>
                </prop>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="NamespaceTopicEventSubscriptions_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}">
          <request method="put">
            <path>
              <param type="string" name="eventSubscriptionName" arg="$Path.eventSubscriptionName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="namespaceName" arg="$Path.namespaceName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              <param type="string" name="topicName" arg="$Path.topicName" required="True">
                <format pattern="^[a-zA-Z0-9-]*$" maxLength="50" minLength="3"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-06-01-preview&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@Subscription_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
