<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devtestlab/labs/{}/customimages/{}" version="2018-09-15" swagger="mgmt-plane/devtestlabs/ResourceProviders/Microsoft.DevTestLab/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2VGVzdExhYi9sYWJzL3tsYWJOYW1lfS9jdXN0b21pbWFnZXMve25hbWV9/V/MjAxOC0wOS0xNQ=="/>
  <commandGroup name="lab custom-image">
    <command name="show" version="2018-09-15">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devtestlab/labs/{}/customimages/{}" version="2018-09-15" swagger="mgmt-plane/devtestlabs/ResourceProviders/Microsoft.DevTestLab/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2VGVzdExhYi9sYWJzL3tsYWJOYW1lfS9jdXN0b21pbWFnZXMve25hbWV9/V/MjAxOC0wOS0xNQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.labName" options="lab-name" required="True" idPart="name">
          <help short="The name of the lab."/>
        </arg>
        <arg type="string" var="$Path.name" options="name" required="True" group="" idPart="child_name_1">
          <help short="The name of the custom image."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Query.expand" options="expand">
          <help short="Specify the $expand query. Example: 'properties($select=vm)'"/>
        </arg>
      </argGroup>
      <operation operationId="CustomImages_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/customimages/{name}">
          <request method="get">
            <path>
              <param type="string" name="labName" arg="$Path.labName" required="True"/>
              <param type="string" name="name" arg="$Path.name" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <param type="string" name="$expand" arg="$Query.expand"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2018-09-15&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/customimages/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="string" name="author"/>
                    <prop readOnly="True" type="dateTime" name="creationDate"/>
                    <prop type="object" name="customImagePlan">
                      <prop type="string" name="id"/>
                      <prop type="string" name="offer"/>
                      <prop type="string" name="publisher"/>
                    </prop>
                    <prop type="array<object>" name="dataDiskStorageInfo">
                      <item type="object">
                        <prop type="string" name="lun"/>
                        <prop type="string" name="storageType">
                          <enum>
                            <item value="&quot;Premium&quot;"/>
                            <item value="&quot;Standard&quot;"/>
                            <item value="&quot;StandardSSD&quot;"/>
                          </enum>
                        </prop>
                      </item>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop type="boolean" name="isPlanAuthorized"/>
                    <prop type="string" name="managedImageId"/>
                    <prop type="string" name="managedSnapshotId"/>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop readOnly="True" type="string" name="uniqueIdentifier"/>
                    <prop type="object" name="vhd">
                      <prop type="string" name="imageName"/>
                      <prop type="string" name="osType" required="True">
                        <enum>
                          <item value="&quot;Linux&quot;"/>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;Windows&quot;"/>
                        </enum>
                      </prop>
                      <prop type="boolean" name="sysPrep"/>
                    </prop>
                    <prop type="object" name="vm">
                      <prop type="object" name="linuxOsInfo">
                        <prop type="string" name="linuxOsState">
                          <enum>
                            <item value="&quot;DeprovisionApplied&quot;"/>
                            <item value="&quot;DeprovisionRequested&quot;"/>
                            <item value="&quot;NonDeprovisioned&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="string" name="sourceVmId"/>
                      <prop type="object" name="windowsOsInfo">
                        <prop type="string" name="windowsOsState">
                          <enum>
                            <item value="&quot;NonSysprepped&quot;"/>
                            <item value="&quot;SysprepApplied&quot;"/>
                            <item value="&quot;SysprepRequested&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2018-09-15" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devtestlab/labs/{}/customimages/{}" version="2018-09-15" swagger="mgmt-plane/devtestlabs/ResourceProviders/Microsoft.DevTestLab/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2VGVzdExhYi9sYWJzL3tsYWJOYW1lfS9jdXN0b21pbWFnZXMve25hbWV9/V/MjAxOC0wOS0xNQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.labName" options="lab-name" required="True" idPart="name">
          <help short="The name of the lab."/>
        </arg>
        <arg type="string" var="$Path.name" options="name" required="True" group="" idPart="child_name_1">
          <help short="The name of the custom image."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="CustomImages_Delete">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/customimages/{name}">
          <request method="delete">
            <path>
              <param type="string" name="labName" arg="$Path.labName" required="True"/>
              <param type="string" name="name" arg="$Path.name" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2018-09-15&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="202"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2018-09-15">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devtestlab/labs/{}/customimages/{}" version="2018-09-15" swagger="mgmt-plane/devtestlabs/ResourceProviders/Microsoft.DevTestLab/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2VGVzdExhYi9sYWJzL3tsYWJOYW1lfS9jdXN0b21pbWFnZXMve25hbWV9/V/MjAxOC0wOS0xNQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.labName" options="lab-name" required="True" idPart="name">
          <help short="The name of the lab."/>
        </arg>
        <arg type="string" var="$Path.name" options="name n" required="True" idPart="child_name_1">
          <help short="The name of the custom image."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$customImage.properties.author" options="author" group="">
          <help short="The author of the custom image."/>
        </arg>
        <arg type="string" var="$customImage.properties.description" options="description" group="">
          <help short="The description of the custom image."/>
        </arg>
      </argGroup>
      <argGroup name="CustomImage">
        <arg type="ResourceLocation" var="$customImage.location" options="location l" hide="True" group="CustomImage">
          <help short="The location of the resource."/>
        </arg>
        <arg type="object" var="$customImage.tags" options="tags" hide="True" group="CustomImage">
          <help short="The tags of the resource."/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="object" var="$customImage.properties.customImagePlan" options="custom-image-plan" hide="True" group="Properties">
          <help short="Storage information about the plan related to this custom image"/>
          <arg type="string" var="$customImage.properties.customImagePlan.id" options="id">
            <help short="The id of the plan, equivalent to name of the plan"/>
          </arg>
          <arg type="string" var="$customImage.properties.customImagePlan.offer" options="offer">
            <help short="The offer for the plan from the marketplace image the custom image is derived from"/>
          </arg>
          <arg type="string" var="$customImage.properties.customImagePlan.publisher" options="publisher">
            <help short="The publisher for the plan from the marketplace image the custom image is derived from"/>
          </arg>
        </arg>
        <arg type="array<object>" var="$customImage.properties.dataDiskStorageInfo" options="data-disk-storage-info" hide="True" group="Properties">
          <help short="Storage information about the data disks present in the custom image"/>
          <item type="object">
            <arg type="string" var="$customImage.properties.dataDiskStorageInfo[].lun" options="lun">
              <help short="Disk Lun"/>
            </arg>
            <arg type="string" var="$customImage.properties.dataDiskStorageInfo[].storageType" options="storage-type">
              <help short="Disk Storage Type"/>
              <enum>
                <item name="Premium" value="&quot;Premium&quot;"/>
                <item name="Standard" value="&quot;Standard&quot;"/>
                <item name="StandardSSD" value="&quot;StandardSSD&quot;"/>
              </enum>
            </arg>
          </item>
        </arg>
        <arg type="boolean" var="$customImage.properties.isPlanAuthorized" options="is-plan-authorized" hide="True" group="Properties">
          <help short="Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment"/>
        </arg>
        <arg type="string" var="$customImage.properties.managedImageId" options="managed-image-id" hide="True" group="Properties">
          <help short="The Managed Image Id backing the custom image."/>
        </arg>
        <arg type="string" var="$customImage.properties.managedSnapshotId" options="managed-snapshot-id" hide="True" group="Properties">
          <help short="The Managed Snapshot Id backing the custom image."/>
        </arg>
        <arg type="object" var="$customImage.properties.vhd" options="vhd" hide="True" group="Properties">
          <help short="The VHD from which the image is to be created."/>
          <arg type="string" var="$customImage.properties.vhd.imageName" options="image-name">
            <help short="The image name."/>
          </arg>
          <arg type="string" var="$customImage.properties.vhd.osType" options="os-type" required="True">
            <help short="The OS type of the custom image (i.e. Windows, Linux)"/>
            <enum>
              <item name="Linux" value="&quot;Linux&quot;"/>
              <item name="None" value="&quot;None&quot;"/>
              <item name="Windows" value="&quot;Windows&quot;"/>
            </enum>
          </arg>
          <arg type="boolean" var="$customImage.properties.vhd.sysPrep" options="sys-prep">
            <help short="Indicates whether sysprep has been run on the VHD."/>
          </arg>
        </arg>
        <arg type="object" var="$customImage.properties.vm" options="vm" group="Properties">
          <help short="The virtual machine from which the image is to be created."/>
          <arg type="object" var="$customImage.properties.vm.linuxOsInfo" options="linux-os-info">
            <help short="The Linux OS information of the VM."/>
            <arg type="string" var="$customImage.properties.vm.linuxOsInfo.linuxOsState" options="linux-os-state">
              <help short="The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied)."/>
              <enum>
                <item name="DeprovisionApplied" value="&quot;DeprovisionApplied&quot;"/>
                <item name="DeprovisionRequested" value="&quot;DeprovisionRequested&quot;"/>
                <item name="NonDeprovisioned" value="&quot;NonDeprovisioned&quot;"/>
              </enum>
            </arg>
          </arg>
          <arg type="string" var="$customImage.properties.vm.sourceVmId" options="source-vm-id">
            <help short="The source vm identifier."/>
          </arg>
          <arg type="object" var="$customImage.properties.vm.windowsOsInfo" options="windows-os-info">
            <help short="The Windows OS information of the VM."/>
            <arg type="string" var="$customImage.properties.vm.windowsOsInfo.windowsOsState" options="windows-os-state">
              <help short="The state of the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied)."/>
              <enum>
                <item name="NonSysprepped" value="&quot;NonSysprepped&quot;"/>
                <item name="SysprepApplied" value="&quot;SysprepApplied&quot;"/>
                <item name="SysprepRequested" value="&quot;SysprepRequested&quot;"/>
              </enum>
            </arg>
          </arg>
        </arg>
      </argGroup>
      <operation operationId="CustomImages_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/customimages/{name}">
          <request method="put">
            <path>
              <param type="string" name="labName" arg="$Path.labName" required="True"/>
              <param type="string" name="name" arg="$Path.name" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2018-09-15&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="customImage" required="True" clientFlatten="True">
                  <prop type="ResourceLocation" name="location" arg="$customImage.location"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="string" name="author" arg="$customImage.properties.author"/>
                    <prop type="object" name="customImagePlan" arg="$customImage.properties.customImagePlan">
                      <prop type="string" name="id" arg="$customImage.properties.customImagePlan.id"/>
                      <prop type="string" name="offer" arg="$customImage.properties.customImagePlan.offer"/>
                      <prop type="string" name="publisher" arg="$customImage.properties.customImagePlan.publisher"/>
                    </prop>
                    <prop type="array<object>" name="dataDiskStorageInfo" arg="$customImage.properties.dataDiskStorageInfo">
                      <item type="object">
                        <prop type="string" name="lun" arg="$customImage.properties.dataDiskStorageInfo[].lun"/>
                        <prop type="string" name="storageType" arg="$customImage.properties.dataDiskStorageInfo[].storageType">
                          <enum>
                            <item value="&quot;Premium&quot;"/>
                            <item value="&quot;Standard&quot;"/>
                            <item value="&quot;StandardSSD&quot;"/>
                          </enum>
                        </prop>
                      </item>
                    </prop>
                    <prop type="string" name="description" arg="$customImage.properties.description"/>
                    <prop type="boolean" name="isPlanAuthorized" arg="$customImage.properties.isPlanAuthorized"/>
                    <prop type="string" name="managedImageId" arg="$customImage.properties.managedImageId"/>
                    <prop type="string" name="managedSnapshotId" arg="$customImage.properties.managedSnapshotId"/>
                    <prop type="object" name="vhd" arg="$customImage.properties.vhd">
                      <prop type="string" name="imageName" arg="$customImage.properties.vhd.imageName"/>
                      <prop type="string" name="osType" arg="$customImage.properties.vhd.osType" required="True">
                        <enum>
                          <item value="&quot;Linux&quot;"/>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;Windows&quot;"/>
                        </enum>
                      </prop>
                      <prop type="boolean" name="sysPrep" arg="$customImage.properties.vhd.sysPrep"/>
                    </prop>
                    <prop type="object" name="vm" arg="$customImage.properties.vm">
                      <prop type="object" name="linuxOsInfo" arg="$customImage.properties.vm.linuxOsInfo">
                        <prop type="string" name="linuxOsState" arg="$customImage.properties.vm.linuxOsInfo.linuxOsState">
                          <enum>
                            <item value="&quot;DeprovisionApplied&quot;"/>
                            <item value="&quot;DeprovisionRequested&quot;"/>
                            <item value="&quot;NonDeprovisioned&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="string" name="sourceVmId" arg="$customImage.properties.vm.sourceVmId"/>
                      <prop type="object" name="windowsOsInfo" arg="$customImage.properties.vm.windowsOsInfo">
                        <prop type="string" name="windowsOsState" arg="$customImage.properties.vm.windowsOsInfo.windowsOsState">
                          <enum>
                            <item value="&quot;NonSysprepped&quot;"/>
                            <item value="&quot;SysprepApplied&quot;"/>
                            <item value="&quot;SysprepRequested&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$customImage.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/customimages/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="string" name="author"/>
                    <prop readOnly="True" type="dateTime" name="creationDate"/>
                    <prop type="object" name="customImagePlan">
                      <prop type="string" name="id"/>
                      <prop type="string" name="offer"/>
                      <prop type="string" name="publisher"/>
                    </prop>
                    <prop type="array<object>" name="dataDiskStorageInfo">
                      <item type="object">
                        <prop type="string" name="lun"/>
                        <prop type="string" name="storageType">
                          <enum>
                            <item value="&quot;Premium&quot;"/>
                            <item value="&quot;Standard&quot;"/>
                            <item value="&quot;StandardSSD&quot;"/>
                          </enum>
                        </prop>
                      </item>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop type="boolean" name="isPlanAuthorized"/>
                    <prop type="string" name="managedImageId"/>
                    <prop type="string" name="managedSnapshotId"/>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop readOnly="True" type="string" name="uniqueIdentifier"/>
                    <prop type="object" name="vhd">
                      <prop type="string" name="imageName"/>
                      <prop type="string" name="osType" required="True">
                        <enum>
                          <item value="&quot;Linux&quot;"/>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;Windows&quot;"/>
                        </enum>
                      </prop>
                      <prop type="boolean" name="sysPrep"/>
                    </prop>
                    <prop type="object" name="vm">
                      <prop type="object" name="linuxOsInfo">
                        <prop type="string" name="linuxOsState">
                          <enum>
                            <item value="&quot;DeprovisionApplied&quot;"/>
                            <item value="&quot;DeprovisionRequested&quot;"/>
                            <item value="&quot;NonDeprovisioned&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="string" name="sourceVmId"/>
                      <prop type="object" name="windowsOsInfo">
                        <prop type="string" name="windowsOsState">
                          <enum>
                            <item value="&quot;NonSysprepped&quot;"/>
                            <item value="&quot;SysprepApplied&quot;"/>
                            <item value="&quot;SysprepRequested&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2018-09-15">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.devtestlab/labs/{}/customimages/{}" version="2018-09-15" swagger="mgmt-plane/devtestlabs/ResourceProviders/Microsoft.DevTestLab/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGV2VGVzdExhYi9sYWJzL3tsYWJOYW1lfS9jdXN0b21pbWFnZXMve25hbWV9/V/MjAxOC0wOS0xNQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.labName" options="lab-name" required="True" idPart="name">
          <help short="The name of the lab."/>
        </arg>
        <arg type="string" var="$Path.name" options="name n" required="True" idPart="child_name_1">
          <help short="The name of the custom image."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="CustomImage">
        <arg nullable="True" type="ResourceLocation" var="$customImage.location" options="location l" group="CustomImage">
          <help short="The location of the resource."/>
        </arg>
        <arg nullable="True" type="object" var="$customImage.tags" options="tags" group="CustomImage">
          <help short="The tags of the resource."/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="string" var="$customImage.properties.author" options="author" group="Properties">
          <help short="The author of the custom image."/>
        </arg>
        <arg nullable="True" type="object" var="$customImage.properties.customImagePlan" options="custom-image-plan" group="Properties">
          <help short="Storage information about the plan related to this custom image"/>
          <arg nullable="True" type="string" var="$customImage.properties.customImagePlan.id" options="id">
            <help short="The id of the plan, equivalent to name of the plan"/>
          </arg>
          <arg nullable="True" type="string" var="$customImage.properties.customImagePlan.offer" options="offer">
            <help short="The offer for the plan from the marketplace image the custom image is derived from"/>
          </arg>
          <arg nullable="True" type="string" var="$customImage.properties.customImagePlan.publisher" options="publisher">
            <help short="The publisher for the plan from the marketplace image the custom image is derived from"/>
          </arg>
        </arg>
        <arg nullable="True" type="array<object>" var="$customImage.properties.dataDiskStorageInfo" options="data-disk-storage-info" group="Properties">
          <help short="Storage information about the data disks present in the custom image"/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$customImage.properties.dataDiskStorageInfo[].lun" options="lun">
              <help short="Disk Lun"/>
            </arg>
            <arg nullable="True" type="string" var="$customImage.properties.dataDiskStorageInfo[].storageType" options="storage-type">
              <help short="Disk Storage Type"/>
              <enum>
                <item name="Premium" value="&quot;Premium&quot;"/>
                <item name="Standard" value="&quot;Standard&quot;"/>
                <item name="StandardSSD" value="&quot;StandardSSD&quot;"/>
              </enum>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="string" var="$customImage.properties.description" options="description" group="Properties">
          <help short="The description of the custom image."/>
        </arg>
        <arg nullable="True" type="boolean" var="$customImage.properties.isPlanAuthorized" options="is-plan-authorized" group="Properties">
          <help short="Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment"/>
        </arg>
        <arg nullable="True" type="string" var="$customImage.properties.managedImageId" options="managed-image-id" group="Properties">
          <help short="The Managed Image Id backing the custom image."/>
        </arg>
        <arg nullable="True" type="string" var="$customImage.properties.managedSnapshotId" options="managed-snapshot-id" group="Properties">
          <help short="The Managed Snapshot Id backing the custom image."/>
        </arg>
        <arg nullable="True" type="object" var="$customImage.properties.vhd" options="vhd" group="Properties">
          <help short="The VHD from which the image is to be created."/>
          <arg nullable="True" type="string" var="$customImage.properties.vhd.imageName" options="image-name">
            <help short="The image name."/>
          </arg>
          <arg type="string" var="$customImage.properties.vhd.osType" options="os-type">
            <help short="The OS type of the custom image (i.e. Windows, Linux)"/>
            <enum>
              <item name="Linux" value="&quot;Linux&quot;"/>
              <item name="None" value="&quot;None&quot;"/>
              <item name="Windows" value="&quot;Windows&quot;"/>
            </enum>
          </arg>
          <arg nullable="True" type="boolean" var="$customImage.properties.vhd.sysPrep" options="sys-prep">
            <help short="Indicates whether sysprep has been run on the VHD."/>
          </arg>
        </arg>
        <arg nullable="True" type="object" var="$customImage.properties.vm" options="vm" group="Properties">
          <help short="The virtual machine from which the image is to be created."/>
          <arg nullable="True" type="object" var="$customImage.properties.vm.linuxOsInfo" options="linux-os-info">
            <help short="The Linux OS information of the VM."/>
            <arg nullable="True" type="string" var="$customImage.properties.vm.linuxOsInfo.linuxOsState" options="linux-os-state">
              <help short="The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied)."/>
              <enum>
                <item name="DeprovisionApplied" value="&quot;DeprovisionApplied&quot;"/>
                <item name="DeprovisionRequested" value="&quot;DeprovisionRequested&quot;"/>
                <item name="NonDeprovisioned" value="&quot;NonDeprovisioned&quot;"/>
              </enum>
            </arg>
          </arg>
          <arg nullable="True" type="string" var="$customImage.properties.vm.sourceVmId" options="source-vm-id">
            <help short="The source vm identifier."/>
          </arg>
          <arg nullable="True" type="object" var="$customImage.properties.vm.windowsOsInfo" options="windows-os-info">
            <help short="The Windows OS information of the VM."/>
            <arg nullable="True" type="string" var="$customImage.properties.vm.windowsOsInfo.windowsOsState" options="windows-os-state">
              <help short="The state of the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied)."/>
              <enum>
                <item name="NonSysprepped" value="&quot;NonSysprepped&quot;"/>
                <item name="SysprepApplied" value="&quot;SysprepApplied&quot;"/>
                <item name="SysprepRequested" value="&quot;SysprepRequested&quot;"/>
              </enum>
            </arg>
          </arg>
        </arg>
      </argGroup>
      <operation operationId="CustomImages_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/customimages/{name}">
          <request method="get">
            <path>
              <param type="string" name="labName" arg="$Path.labName" required="True"/>
              <param type="string" name="name" arg="$Path.name" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2018-09-15&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="CustomImage_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.DevTestLab/labs/{}/customimages/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" required="True" clientFlatten="True">
                    <prop type="string" name="author"/>
                    <prop readOnly="True" type="dateTime" name="creationDate"/>
                    <prop type="object" name="customImagePlan">
                      <prop type="string" name="id"/>
                      <prop type="string" name="offer"/>
                      <prop type="string" name="publisher"/>
                    </prop>
                    <prop type="array<object>" name="dataDiskStorageInfo">
                      <item type="object">
                        <prop type="string" name="lun"/>
                        <prop type="string" name="storageType">
                          <enum>
                            <item value="&quot;Premium&quot;"/>
                            <item value="&quot;Standard&quot;"/>
                            <item value="&quot;StandardSSD&quot;"/>
                          </enum>
                        </prop>
                      </item>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop type="boolean" name="isPlanAuthorized"/>
                    <prop type="string" name="managedImageId"/>
                    <prop type="string" name="managedSnapshotId"/>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop readOnly="True" type="string" name="uniqueIdentifier"/>
                    <prop type="object" name="vhd">
                      <prop type="string" name="imageName"/>
                      <prop type="string" name="osType" required="True">
                        <enum>
                          <item value="&quot;Linux&quot;"/>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;Windows&quot;"/>
                        </enum>
                      </prop>
                      <prop type="boolean" name="sysPrep"/>
                    </prop>
                    <prop type="object" name="vm">
                      <prop type="object" name="linuxOsInfo">
                        <prop type="string" name="linuxOsState">
                          <enum>
                            <item value="&quot;DeprovisionApplied&quot;"/>
                            <item value="&quot;DeprovisionRequested&quot;"/>
                            <item value="&quot;NonDeprovisioned&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="string" name="sourceVmId"/>
                      <prop type="object" name="windowsOsInfo">
                        <prop type="string" name="windowsOsState">
                          <enum>
                            <item value="&quot;NonSysprepped&quot;"/>
                            <item value="&quot;SysprepApplied&quot;"/>
                            <item value="&quot;SysprepRequested&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="customImage" required="True" clientFlatten="True">
              <prop type="ResourceLocation" name="location" arg="$customImage.location"/>
              <prop type="object" name="properties" required="True" clientFlatten="True">
                <prop type="string" name="author" arg="$customImage.properties.author"/>
                <prop type="object" name="customImagePlan" arg="$customImage.properties.customImagePlan">
                  <prop type="string" name="id" arg="$customImage.properties.customImagePlan.id"/>
                  <prop type="string" name="offer" arg="$customImage.properties.customImagePlan.offer"/>
                  <prop type="string" name="publisher" arg="$customImage.properties.customImagePlan.publisher"/>
                </prop>
                <prop type="array<object>" name="dataDiskStorageInfo" arg="$customImage.properties.dataDiskStorageInfo">
                  <item type="object">
                    <prop type="string" name="lun" arg="$customImage.properties.dataDiskStorageInfo[].lun"/>
                    <prop type="string" name="storageType" arg="$customImage.properties.dataDiskStorageInfo[].storageType">
                      <enum>
                        <item value="&quot;Premium&quot;"/>
                        <item value="&quot;Standard&quot;"/>
                        <item value="&quot;StandardSSD&quot;"/>
                      </enum>
                    </prop>
                  </item>
                </prop>
                <prop type="string" name="description" arg="$customImage.properties.description"/>
                <prop type="boolean" name="isPlanAuthorized" arg="$customImage.properties.isPlanAuthorized"/>
                <prop type="string" name="managedImageId" arg="$customImage.properties.managedImageId"/>
                <prop type="string" name="managedSnapshotId" arg="$customImage.properties.managedSnapshotId"/>
                <prop type="object" name="vhd" arg="$customImage.properties.vhd">
                  <prop type="string" name="imageName" arg="$customImage.properties.vhd.imageName"/>
                  <prop type="string" name="osType" arg="$customImage.properties.vhd.osType" required="True">
                    <enum>
                      <item value="&quot;Linux&quot;"/>
                      <item value="&quot;None&quot;"/>
                      <item value="&quot;Windows&quot;"/>
                    </enum>
                  </prop>
                  <prop type="boolean" name="sysPrep" arg="$customImage.properties.vhd.sysPrep"/>
                </prop>
                <prop type="object" name="vm" arg="$customImage.properties.vm">
                  <prop type="object" name="linuxOsInfo" arg="$customImage.properties.vm.linuxOsInfo">
                    <prop type="string" name="linuxOsState" arg="$customImage.properties.vm.linuxOsInfo.linuxOsState">
                      <enum>
                        <item value="&quot;DeprovisionApplied&quot;"/>
                        <item value="&quot;DeprovisionRequested&quot;"/>
                        <item value="&quot;NonDeprovisioned&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="string" name="sourceVmId" arg="$customImage.properties.vm.sourceVmId"/>
                  <prop type="object" name="windowsOsInfo" arg="$customImage.properties.vm.windowsOsInfo">
                    <prop type="string" name="windowsOsState" arg="$customImage.properties.vm.windowsOsInfo.windowsOsState">
                      <enum>
                        <item value="&quot;NonSysprepped&quot;"/>
                        <item value="&quot;SysprepApplied&quot;"/>
                        <item value="&quot;SysprepRequested&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                </prop>
              </prop>
              <prop type="object" name="tags" arg="$customImage.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="CustomImages_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/customimages/{name}">
          <request method="put">
            <path>
              <param type="string" name="labName" arg="$Path.labName" required="True"/>
              <param type="string" name="name" arg="$Path.name" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2018-09-15&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@CustomImage_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
