<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.dataprotection/backupvaults/{}/validateforbackup" version="2023-11-01" swagger="mgmt-plane/dataprotection/ResourceProviders/Microsoft.DataProtection/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGF0YVByb3RlY3Rpb24vYmFja3VwVmF1bHRzL3t2YXVsdE5hbWV9L3ZhbGlkYXRlRm9yQmFja3Vw/V/MjAyMy0xMS0wMQ=="/>
  <commandGroup name="dataprotection backup-instance">
    <command name="validate-for-backup" version="2023-11-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.dataprotection/backupvaults/{}/validateforbackup" version="2023-11-01" swagger="mgmt-plane/dataprotection/ResourceProviders/Microsoft.DataProtection/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuRGF0YVByb3RlY3Rpb24vYmFja3VwVmF1bHRzL3t2YXVsdE5hbWV9L3ZhbGlkYXRlRm9yQmFja3Vw/V/MjAyMy0xMS0wMQ=="/>
      <argGroup name="">
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Path.vaultName" options="vault-name v" required="True" group="" idPart="name">
          <help short="The name of the backup vault."/>
        </arg>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="object" var="$parameters.backupInstance" options="backup-instance" required="True" group="Parameters">
          <help short="Backup Instance"/>
          <arg type="object" var="$parameters.backupInstance.dataSourceInfo" options="data-source-info" required="True">
            <help short="Gets or sets the data source information."/>
            <arg type="string" var="$parameters.backupInstance.dataSourceInfo.datasourceType" options="datasource-type">
              <help short="DatasourceType of the resource."/>
            </arg>
            <arg type="string" var="$parameters.backupInstance.dataSourceInfo.objectType" options="object-type">
              <help short="Type of Datasource object, used to initialize the right inherited type"/>
            </arg>
            <arg type="string" var="$parameters.backupInstance.dataSourceInfo.resourceID" options="resource-id" required="True">
              <help short="Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via Fabric/Vault."/>
            </arg>
            <arg type="string" var="$parameters.backupInstance.dataSourceInfo.resourceLocation" options="resource-location">
              <help short="Location of datasource."/>
            </arg>
            <arg type="string" var="$parameters.backupInstance.dataSourceInfo.resourceName" options="resource-name">
              <help short="Unique identifier of the resource in the context of parent."/>
            </arg>
            <arg type="object" var="$parameters.backupInstance.dataSourceInfo.resourceProperties" options="resource-properties" cls="BaseResourceProperties_create">
              <help short="Properties specific to data source"/>
              <arg type="string" var="@BaseResourceProperties_create.objectType" options="object-type" required="True">
                <help short="Type of the specific object - used for deserializing"/>
                <enum>
                  <item name="DefaultResourceProperties" value="&quot;DefaultResourceProperties&quot;"/>
                </enum>
              </arg>
            </arg>
            <arg type="string" var="$parameters.backupInstance.dataSourceInfo.resourceType" options="resource-type">
              <help short="Resource Type of Datasource."/>
            </arg>
            <arg type="string" var="$parameters.backupInstance.dataSourceInfo.resourceUri" options="resource-uri">
              <help short="Uri of the resource."/>
            </arg>
          </arg>
          <arg type="object" var="$parameters.backupInstance.dataSourceSetInfo" options="data-source-set-info">
            <help short="Gets or sets the data source set information."/>
            <arg type="string" var="$parameters.backupInstance.dataSourceSetInfo.datasourceType" options="datasource-type">
              <help short="DatasourceType of the resource."/>
            </arg>
            <arg type="string" var="$parameters.backupInstance.dataSourceSetInfo.objectType" options="object-type">
              <help short="Type of Datasource object, used to initialize the right inherited type"/>
            </arg>
            <arg type="string" var="$parameters.backupInstance.dataSourceSetInfo.resourceID" options="resource-id" required="True">
              <help short="Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via Fabric/Vault."/>
            </arg>
            <arg type="string" var="$parameters.backupInstance.dataSourceSetInfo.resourceLocation" options="resource-location">
              <help short="Location of datasource."/>
            </arg>
            <arg type="string" var="$parameters.backupInstance.dataSourceSetInfo.resourceName" options="resource-name">
              <help short="Unique identifier of the resource in the context of parent."/>
            </arg>
            <arg type="@BaseResourceProperties_create" var="$parameters.backupInstance.dataSourceSetInfo.resourceProperties" options="resource-properties">
              <help short="Properties specific to data source set"/>
            </arg>
            <arg type="string" var="$parameters.backupInstance.dataSourceSetInfo.resourceType" options="resource-type">
              <help short="Resource Type of Datasource."/>
            </arg>
            <arg type="string" var="$parameters.backupInstance.dataSourceSetInfo.resourceUri" options="resource-uri">
              <help short="Uri of the resource."/>
            </arg>
          </arg>
          <arg type="object" var="$parameters.backupInstance.datasourceAuthCredentials" options="datasource-auth-credentials">
            <help short="Credentials to use to authenticate with data source provider."/>
            <arg type="object" var="$parameters.backupInstance.datasourceAuthCredentials.SecretStoreBasedAuthCredentials" options="secret-store-based-auth-credentials">
              <arg type="object" var="$parameters.backupInstance.datasourceAuthCredentials.SecretStoreBasedAuthCredentials.secretStoreResource" options="secret-store-resource">
                <help short="Secret store resource"/>
                <arg type="string" var="$parameters.backupInstance.datasourceAuthCredentials.SecretStoreBasedAuthCredentials.secretStoreResource.secretStoreType" options="secret-store-type" required="True">
                  <help short="Gets or sets the type of secret store"/>
                  <enum>
                    <item name="AzureKeyVault" value="&quot;AzureKeyVault&quot;"/>
                    <item name="Invalid" value="&quot;Invalid&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="$parameters.backupInstance.datasourceAuthCredentials.SecretStoreBasedAuthCredentials.secretStoreResource.uri" options="uri">
                  <help short="Uri to get to the resource"/>
                </arg>
                <arg type="string" var="$parameters.backupInstance.datasourceAuthCredentials.SecretStoreBasedAuthCredentials.secretStoreResource.value" options="value">
                  <help short="Gets or sets value stored in secret store resource"/>
                </arg>
              </arg>
            </arg>
          </arg>
          <arg type="string" var="$parameters.backupInstance.friendlyName" options="friendly-name">
            <help short="Gets or sets the Backup Instance friendly name."/>
          </arg>
          <arg type="object" var="$parameters.backupInstance.identityDetails" options="identity-details" group="">
            <help short="Contains information of the Identity Details for the BI. If it is null, default will be considered as System Assigned."/>
            <arg type="boolean" var="$parameters.backupInstance.identityDetails.useSystemAssignedIdentity" options="use-system-assigned-identity">
              <help short="Specifies if the BI is protected by System Identity."/>
            </arg>
            <arg type="string" var="$parameters.backupInstance.identityDetails.userAssignedIdentityArmUrl" options="user-assigned-identity-arm-url">
              <help short="ARM URL for User Assigned Identity."/>
            </arg>
          </arg>
          <arg type="string" var="$parameters.backupInstance.objectType" options="object-type" required="True"/>
          <arg type="object" var="$parameters.backupInstance.policyInfo" options="policy-info" required="True">
            <help short="Gets or sets the policy information."/>
            <arg type="string" var="$parameters.backupInstance.policyInfo.policyId" options="policy-id" required="True"/>
            <arg type="object" var="$parameters.backupInstance.policyInfo.policyParameters" options="policy-parameters">
              <help short="Policy parameters for the backup instance"/>
              <arg type="array<object>" var="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList" options="backup-datasource-parameters-list">
                <help short="Gets or sets the Backup Data Source Parameters"/>
                <item type="object">
                  <arg type="object" var="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].BlobBackupDatasourceParameters" options="blob-backup-datasource-parameters">
                    <arg type="array<string>" var="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].BlobBackupDatasourceParameters.containersList" options="containers-list" required="True">
                      <help short="List of containers to be backed up during configuration of backup of blobs"/>
                      <item type="string"/>
                    </arg>
                  </arg>
                  <arg type="object" var="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters" options="kubernetes-cluster-backup-datasource-parameters">
                    <arg type="array<object>" var="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.backupHookReferences" options="backup-hook-references">
                      <help short="Gets or sets the backup hook references. This property sets the hook reference to be executed during backup."/>
                      <item type="object">
                        <arg type="string" var="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.backupHookReferences[].name" options="name">
                          <help short="Name of the resource"/>
                        </arg>
                        <arg type="string" var="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.backupHookReferences[].namespace" options="namespace">
                          <help short="Namespace in which the resource exists"/>
                        </arg>
                      </item>
                    </arg>
                    <arg type="array<string>" var="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.excludedNamespaces" options="excluded-namespaces">
                      <help short="Gets or sets the exclude namespaces property. This property sets the namespaces to be excluded during restore."/>
                      <item type="string"/>
                    </arg>
                    <arg type="array<string>" var="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.excludedResourceTypes" options="excluded-resource-types">
                      <help short="Gets or sets the exclude resource types property. This property sets the resource types to be excluded during restore."/>
                      <item type="string"/>
                    </arg>
                    <arg type="boolean" var="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.includeClusterScopeResources" options="include-cluster-scope-resources" required="True">
                      <help short="Gets or sets the include cluster resources property. This property if enabled will include cluster scope resources during restore."/>
                    </arg>
                    <arg type="array<string>" var="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.includedNamespaces" options="included-namespaces">
                      <help short="Gets or sets the include namespaces property. This property sets the namespaces to be included during restore."/>
                      <item type="string"/>
                    </arg>
                    <arg type="array<string>" var="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.includedResourceTypes" options="included-resource-types">
                      <help short="Gets or sets the include resource types property. This property sets the resource types to be included during restore."/>
                      <item type="string"/>
                    </arg>
                    <arg type="array<string>" var="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.labelSelectors" options="label-selectors">
                      <help short="Gets or sets the LabelSelectors property. This property sets the resource with such label selectors to be included during restore."/>
                      <item type="string"/>
                    </arg>
                    <arg type="boolean" var="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.snapshotVolumes" options="snapshot-volumes" required="True">
                      <help short="Gets or sets the volume snapshot property. This property if enabled will take volume snapshots during restore."/>
                    </arg>
                  </arg>
                </item>
              </arg>
              <arg type="array<object>" var="$parameters.backupInstance.policyInfo.policyParameters.dataStoreParametersList" options="data-store-parameters-list">
                <help short="Gets or sets the DataStore Parameters"/>
                <item type="object">
                  <arg type="object" var="$parameters.backupInstance.policyInfo.policyParameters.dataStoreParametersList[].AzureOperationalStoreParameters" options="azure-operational-store-parameters">
                    <arg type="string" var="$parameters.backupInstance.policyInfo.policyParameters.dataStoreParametersList[].AzureOperationalStoreParameters.resourceGroupId" options="resource-group-id">
                      <help short="Gets or sets the Snapshot Resource Group Uri."/>
                    </arg>
                  </arg>
                  <arg type="string" var="$parameters.backupInstance.policyInfo.policyParameters.dataStoreParametersList[].dataStoreType" options="data-store-type" required="True">
                    <help short="type of datastore; Operational/Vault/Archive"/>
                    <enum>
                      <item name="ArchiveStore" value="&quot;ArchiveStore&quot;"/>
                      <item name="OperationalStore" value="&quot;OperationalStore&quot;"/>
                      <item name="VaultStore" value="&quot;VaultStore&quot;"/>
                    </enum>
                  </arg>
                </item>
              </arg>
            </arg>
          </arg>
          <arg type="string" var="$parameters.backupInstance.validationType" options="validation-type">
            <help short="Specifies the type of validation. In case of DeepValidation, all validations from /validateForBackup API will run again."/>
            <enum>
              <item name="DeepValidation" value="&quot;DeepValidation&quot;"/>
              <item name="ShallowValidation" value="&quot;ShallowValidation&quot;"/>
            </enum>
          </arg>
        </arg>
      </argGroup>
      <operation operationId="BackupInstances_ValidateForBackup">
        <longRunning finalStateVia="location"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/validateForBackup">
          <request method="post">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="uuid" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              <param type="string" name="vaultName" arg="$Path.vaultName" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2023-11-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="object" name="backupInstance" arg="$parameters.backupInstance" required="True">
                    <prop type="object" name="dataSourceInfo" arg="$parameters.backupInstance.dataSourceInfo" required="True">
                      <prop type="string" name="datasourceType" arg="$parameters.backupInstance.dataSourceInfo.datasourceType"/>
                      <prop type="string" name="objectType" arg="$parameters.backupInstance.dataSourceInfo.objectType"/>
                      <prop type="string" name="resourceID" arg="$parameters.backupInstance.dataSourceInfo.resourceID" required="True"/>
                      <prop type="string" name="resourceLocation" arg="$parameters.backupInstance.dataSourceInfo.resourceLocation"/>
                      <prop type="string" name="resourceName" arg="$parameters.backupInstance.dataSourceInfo.resourceName"/>
                      <prop type="object" name="resourceProperties" arg="$parameters.backupInstance.dataSourceInfo.resourceProperties" cls="BaseResourceProperties_create">
                        <prop type="string" name="objectType" arg="@BaseResourceProperties_create.objectType" required="True">
                          <enum>
                            <item value="&quot;DefaultResourceProperties&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="string" name="resourceType" arg="$parameters.backupInstance.dataSourceInfo.resourceType"/>
                      <prop type="string" name="resourceUri" arg="$parameters.backupInstance.dataSourceInfo.resourceUri"/>
                    </prop>
                    <prop type="object" name="dataSourceSetInfo" arg="$parameters.backupInstance.dataSourceSetInfo">
                      <prop type="string" name="datasourceType" arg="$parameters.backupInstance.dataSourceSetInfo.datasourceType"/>
                      <prop type="string" name="objectType" arg="$parameters.backupInstance.dataSourceSetInfo.objectType"/>
                      <prop type="string" name="resourceID" arg="$parameters.backupInstance.dataSourceSetInfo.resourceID" required="True"/>
                      <prop type="string" name="resourceLocation" arg="$parameters.backupInstance.dataSourceSetInfo.resourceLocation"/>
                      <prop type="string" name="resourceName" arg="$parameters.backupInstance.dataSourceSetInfo.resourceName"/>
                      <prop type="@BaseResourceProperties_create" name="resourceProperties" arg="$parameters.backupInstance.dataSourceSetInfo.resourceProperties"/>
                      <prop type="string" name="resourceType" arg="$parameters.backupInstance.dataSourceSetInfo.resourceType"/>
                      <prop type="string" name="resourceUri" arg="$parameters.backupInstance.dataSourceSetInfo.resourceUri"/>
                    </prop>
                    <prop type="object" name="datasourceAuthCredentials" arg="$parameters.backupInstance.datasourceAuthCredentials">
                      <prop type="string" name="objectType" required="True">
                        <enum>
                          <item arg="$parameters.backupInstance.datasourceAuthCredentials.SecretStoreBasedAuthCredentials" value="&quot;SecretStoreBasedAuthCredentials&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="objectType" value="SecretStoreBasedAuthCredentials">
                        <prop type="object" name="secretStoreResource" arg="$parameters.backupInstance.datasourceAuthCredentials.SecretStoreBasedAuthCredentials.secretStoreResource">
                          <prop type="string" name="secretStoreType" arg="$parameters.backupInstance.datasourceAuthCredentials.SecretStoreBasedAuthCredentials.secretStoreResource.secretStoreType" required="True">
                            <enum>
                              <item value="&quot;AzureKeyVault&quot;"/>
                              <item value="&quot;Invalid&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="uri" arg="$parameters.backupInstance.datasourceAuthCredentials.SecretStoreBasedAuthCredentials.secretStoreResource.uri"/>
                          <prop type="string" name="value" arg="$parameters.backupInstance.datasourceAuthCredentials.SecretStoreBasedAuthCredentials.secretStoreResource.value"/>
                        </prop>
                      </discriminator>
                    </prop>
                    <prop type="string" name="friendlyName" arg="$parameters.backupInstance.friendlyName"/>
                    <prop type="object" name="identityDetails" arg="$parameters.backupInstance.identityDetails">
                      <prop type="boolean" name="useSystemAssignedIdentity" arg="$parameters.backupInstance.identityDetails.useSystemAssignedIdentity"/>
                      <prop type="string" name="userAssignedIdentityArmUrl" arg="$parameters.backupInstance.identityDetails.userAssignedIdentityArmUrl"/>
                    </prop>
                    <prop type="string" name="objectType" arg="$parameters.backupInstance.objectType" required="True"/>
                    <prop type="object" name="policyInfo" arg="$parameters.backupInstance.policyInfo" required="True">
                      <prop type="string" name="policyId" arg="$parameters.backupInstance.policyInfo.policyId" required="True"/>
                      <prop type="object" name="policyParameters" arg="$parameters.backupInstance.policyInfo.policyParameters">
                        <prop type="array<object>" name="backupDatasourceParametersList" arg="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList">
                          <item type="object">
                            <prop type="string" name="objectType" required="True">
                              <enum>
                                <item arg="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].BlobBackupDatasourceParameters" value="&quot;BlobBackupDatasourceParameters&quot;"/>
                                <item arg="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters" value="&quot;KubernetesClusterBackupDatasourceParameters&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="objectType" value="BlobBackupDatasourceParameters">
                              <prop type="array<string>" name="containersList" arg="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].BlobBackupDatasourceParameters.containersList" required="True">
                                <item type="string"/>
                              </prop>
                            </discriminator>
                            <discriminator property="objectType" value="KubernetesClusterBackupDatasourceParameters">
                              <prop type="array<object>" name="backupHookReferences" arg="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.backupHookReferences">
                                <item type="object">
                                  <prop type="string" name="name" arg="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.backupHookReferences[].name"/>
                                  <prop type="string" name="namespace" arg="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.backupHookReferences[].namespace"/>
                                </item>
                              </prop>
                              <prop type="array<string>" name="excludedNamespaces" arg="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.excludedNamespaces">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="excludedResourceTypes" arg="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.excludedResourceTypes">
                                <item type="string"/>
                              </prop>
                              <prop type="boolean" name="includeClusterScopeResources" arg="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.includeClusterScopeResources" required="True"/>
                              <prop type="array<string>" name="includedNamespaces" arg="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.includedNamespaces">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="includedResourceTypes" arg="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.includedResourceTypes">
                                <item type="string"/>
                              </prop>
                              <prop type="array<string>" name="labelSelectors" arg="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.labelSelectors">
                                <item type="string"/>
                              </prop>
                              <prop type="boolean" name="snapshotVolumes" arg="$parameters.backupInstance.policyInfo.policyParameters.backupDatasourceParametersList[].KubernetesClusterBackupDatasourceParameters.snapshotVolumes" required="True"/>
                            </discriminator>
                          </item>
                        </prop>
                        <prop type="array<object>" name="dataStoreParametersList" arg="$parameters.backupInstance.policyInfo.policyParameters.dataStoreParametersList">
                          <item type="object">
                            <prop type="string" name="dataStoreType" arg="$parameters.backupInstance.policyInfo.policyParameters.dataStoreParametersList[].dataStoreType" required="True">
                              <enum>
                                <item value="&quot;ArchiveStore&quot;"/>
                                <item value="&quot;OperationalStore&quot;"/>
                                <item value="&quot;VaultStore&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="objectType" required="True">
                              <enum>
                                <item arg="$parameters.backupInstance.policyInfo.policyParameters.dataStoreParametersList[].AzureOperationalStoreParameters" value="&quot;AzureOperationalStoreParameters&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="objectType" value="AzureOperationalStoreParameters">
                              <prop type="string" name="resourceGroupId" arg="$parameters.backupInstance.policyInfo.policyParameters.dataStoreParametersList[].AzureOperationalStoreParameters.resourceGroupId"/>
                            </discriminator>
                          </item>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="string" name="validationType" arg="$parameters.backupInstance.validationType">
                      <enum>
                        <item value="&quot;DeepValidation&quot;"/>
                        <item value="&quot;ShallowValidation&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop type="string" name="jobId"/>
                  <prop const="True" type="string" name="objectType" required="True">
                    <default value="&quot;OperationJobExtendedInfo&quot;"/>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response statusCode="202">
            <header>
              <item name="Azure-AsyncOperation"/>
              <item name="Location"/>
              <item name="Retry-After"/>
            </header>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
