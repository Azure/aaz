<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.insights/activitylogalerts/{}" version="2020-10-01" swagger="mgmt-plane/monitor/ResourceProviders/Microsoft.Insights/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSW5zaWdodHMvYWN0aXZpdHlMb2dBbGVydHMve2FjdGl2aXR5TG9nQWxlcnROYW1lfQ==/V/MjAyMC0xMC0wMQ=="/>
  <commandGroup name="monitor activity-log alert">
    <command name="show" version="2020-10-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.insights/activitylogalerts/{}" version="2020-10-01" swagger="mgmt-plane/monitor/ResourceProviders/Microsoft.Insights/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSW5zaWdodHMvYWN0aXZpdHlMb2dBbGVydHMve2FjdGl2aXR5TG9nQWxlcnROYW1lfQ==/V/MjAyMC0xMC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.activityLogAlertName" options="activity-log-alert-name name n" required="True" idPart="name">
          <help short="The name of the activity log alert."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="ActivityLogAlerts_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/activityLogAlerts/{activityLogAlertName}">
          <request method="get">
            <path>
              <param type="string" name="activityLogAlertName" arg="$Path.activityLogAlertName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2020-10-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Insights/activityLogAlerts/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location">
                    <default value="&quot;global&quot;"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="actions" required="True">
                      <prop type="array<object>" name="actionGroups" identifiers="actionGroupId">
                        <item type="object">
                          <prop type="string" name="actionGroupId" required="True"/>
                          <prop type="object" name="webhookProperties">
                            <additionalProp>
                              <item type="string"/>
                            </additionalProp>
                          </prop>
                        </item>
                      </prop>
                    </prop>
                    <prop type="object" name="condition" required="True">
                      <prop type="array<object>" name="allOf" required="True">
                        <item type="object">
                          <prop type="array<object>" name="anyOf">
                            <item type="object">
                              <prop type="array<string>" name="containsAny">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="equals"/>
                              <prop type="string" name="field"/>
                            </item>
                          </prop>
                          <prop type="array<string>" name="containsAny">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="equals"/>
                          <prop type="string" name="field"/>
                        </item>
                      </prop>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop type="boolean" name="enabled">
                      <default value="true"/>
                    </prop>
                    <prop type="array<string>" name="scopes" required="True">
                      <item type="string"/>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2020-10-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.insights/activitylogalerts/{}" version="2020-10-01" swagger="mgmt-plane/monitor/ResourceProviders/Microsoft.Insights/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSW5zaWdodHMvYWN0aXZpdHlMb2dBbGVydHMve2FjdGl2aXR5TG9nQWxlcnROYW1lfQ==/V/MjAyMC0xMC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.activityLogAlertName" options="activity-log-alert-name name n" required="True" idPart="name">
          <help short="The name of the activity log alert."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="ActivityLogAlerts_Delete">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/activityLogAlerts/{activityLogAlertName}">
          <request method="delete">
            <path>
              <param type="string" name="activityLogAlertName" arg="$Path.activityLogAlertName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2020-10-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2020-10-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.insights/activitylogalerts/{}" version="2020-10-01" swagger="mgmt-plane/monitor/ResourceProviders/Microsoft.Insights/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSW5zaWdodHMvYWN0aXZpdHlMb2dBbGVydHMve2FjdGl2aXR5TG9nQWxlcnROYW1lfQ==/V/MjAyMC0xMC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.activityLogAlertName" options="activity-log-alert-name name n" required="True" idPart="name">
          <help short="The name of the activity log alert."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="ResourceLocation" var="$activityLogAlertRule.location" options="location l" group="">
          <help short="The location of the resource. Since Azure Activity Log Alerts is a global service, the location of the rules should always be 'global'."/>
          <default value="&quot;global&quot;"/>
        </arg>
        <arg type="array<object>" var="$activityLogAlertRule.properties.actions.actionGroups" options="action-groups" group="">
          <help short="The list of the Action Groups."/>
          <item type="object">
            <arg type="string" var="$activityLogAlertRule.properties.actions.actionGroups[].actionGroupId" options="action-group-id" required="True">
              <help short="The resource ID of the Action Group. This cannot be null or empty."/>
            </arg>
            <arg type="object" var="$activityLogAlertRule.properties.actions.actionGroups[].webhookProperties" options="webhook-properties">
              <help short="the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload."/>
              <additionalProp>
                <item type="string"/>
              </additionalProp>
            </arg>
          </item>
        </arg>
        <arg type="array<object>" var="$activityLogAlertRule.properties.condition.allOf" options="all-of" group="">
          <help short="The list of Activity Log Alert rule conditions."/>
          <item type="object">
            <arg type="array<object>" var="$activityLogAlertRule.properties.condition.allOf[].anyOf" options="any-of">
              <help short="An Activity Log Alert rule condition that is met when at least one of its member leaf conditions are met."/>
              <item type="object">
                <arg type="array<string>" var="$activityLogAlertRule.properties.condition.allOf[].anyOf[].containsAny" options="contains-any">
                  <help short="The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met."/>
                  <item type="string"/>
                </arg>
                <arg type="string" var="$activityLogAlertRule.properties.condition.allOf[].anyOf[].equals" options="equals">
                  <help short="The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met."/>
                </arg>
                <arg type="string" var="$activityLogAlertRule.properties.condition.allOf[].anyOf[].field" options="field">
                  <help short="The name of the Activity Log event's field that this condition will examine. The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'."/>
                </arg>
              </item>
            </arg>
            <arg type="array<string>" var="$activityLogAlertRule.properties.condition.allOf[].containsAny" options="contains-any">
              <help short="The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met."/>
              <item type="string"/>
            </arg>
            <arg type="string" var="$activityLogAlertRule.properties.condition.allOf[].equals" options="equals">
              <help short="The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met."/>
            </arg>
            <arg type="string" var="$activityLogAlertRule.properties.condition.allOf[].field" options="field">
              <help short="The name of the Activity Log event's field that this condition will examine. The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'."/>
            </arg>
          </item>
        </arg>
        <arg type="string" var="$activityLogAlertRule.properties.description" options="description" group="">
          <help short="A description of this Activity Log Alert rule."/>
        </arg>
        <arg type="boolean" var="$activityLogAlertRule.properties.enabled" options="enabled" group="">
          <help short="Indicates whether this Activity Log Alert rule is enabled. If an Activity Log Alert rule is not enabled, then none of its actions will be activated."/>
          <default value="true"/>
        </arg>
        <arg type="array<string>" var="$activityLogAlertRule.properties.scopes" options="scopes" group="">
          <help short="A list of resource IDs that will be used as prefixes. The alert will only apply to Activity Log events with resource IDs that fall under one of these prefixes. This list must include at least one item."/>
          <item type="string"/>
        </arg>
        <arg type="object" var="$activityLogAlertRule.tags" options="tags" group="">
          <help short="The tags of the resource."/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <operation operationId="ActivityLogAlerts_CreateOrUpdate">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/activityLogAlerts/{activityLogAlertName}">
          <request method="put">
            <path>
              <param type="string" name="activityLogAlertName" arg="$Path.activityLogAlertName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2020-10-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="activityLogAlertRule" required="True" clientFlatten="True">
                  <prop type="ResourceLocation" name="location" arg="$activityLogAlertRule.location">
                    <default value="&quot;global&quot;"/>
                  </prop>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="actions" required="True">
                      <prop type="array<object>" name="actionGroups" arg="$activityLogAlertRule.properties.actions.actionGroups" identifiers="actionGroupId">
                        <item type="object">
                          <prop type="string" name="actionGroupId" arg="$activityLogAlertRule.properties.actions.actionGroups[].actionGroupId" required="True"/>
                          <prop type="object" name="webhookProperties" arg="$activityLogAlertRule.properties.actions.actionGroups[].webhookProperties">
                            <additionalProp>
                              <item type="string"/>
                            </additionalProp>
                          </prop>
                        </item>
                      </prop>
                    </prop>
                    <prop type="object" name="condition" required="True">
                      <prop type="array<object>" name="allOf" arg="$activityLogAlertRule.properties.condition.allOf" required="True">
                        <item type="object">
                          <prop type="array<object>" name="anyOf" arg="$activityLogAlertRule.properties.condition.allOf[].anyOf">
                            <item type="object">
                              <prop type="array<string>" name="containsAny" arg="$activityLogAlertRule.properties.condition.allOf[].anyOf[].containsAny">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="equals" arg="$activityLogAlertRule.properties.condition.allOf[].anyOf[].equals"/>
                              <prop type="string" name="field" arg="$activityLogAlertRule.properties.condition.allOf[].anyOf[].field"/>
                            </item>
                          </prop>
                          <prop type="array<string>" name="containsAny" arg="$activityLogAlertRule.properties.condition.allOf[].containsAny">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="equals" arg="$activityLogAlertRule.properties.condition.allOf[].equals"/>
                          <prop type="string" name="field" arg="$activityLogAlertRule.properties.condition.allOf[].field"/>
                        </item>
                      </prop>
                    </prop>
                    <prop type="string" name="description" arg="$activityLogAlertRule.properties.description"/>
                    <prop type="boolean" name="enabled" arg="$activityLogAlertRule.properties.enabled">
                      <default value="true"/>
                    </prop>
                    <prop type="array<string>" name="scopes" arg="$activityLogAlertRule.properties.scopes" required="True">
                      <item type="string"/>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$activityLogAlertRule.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Insights/activityLogAlerts/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location">
                    <default value="&quot;global&quot;"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="actions" required="True">
                      <prop type="array<object>" name="actionGroups" identifiers="actionGroupId">
                        <item type="object">
                          <prop type="string" name="actionGroupId" required="True"/>
                          <prop type="object" name="webhookProperties">
                            <additionalProp>
                              <item type="string"/>
                            </additionalProp>
                          </prop>
                        </item>
                      </prop>
                    </prop>
                    <prop type="object" name="condition" required="True">
                      <prop type="array<object>" name="allOf" required="True">
                        <item type="object">
                          <prop type="array<object>" name="anyOf">
                            <item type="object">
                              <prop type="array<string>" name="containsAny">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="equals"/>
                              <prop type="string" name="field"/>
                            </item>
                          </prop>
                          <prop type="array<string>" name="containsAny">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="equals"/>
                          <prop type="string" name="field"/>
                        </item>
                      </prop>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop type="boolean" name="enabled">
                      <default value="true"/>
                    </prop>
                    <prop type="array<string>" name="scopes" required="True">
                      <item type="string"/>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2020-10-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.insights/activitylogalerts/{}" version="2020-10-01" swagger="mgmt-plane/monitor/ResourceProviders/Microsoft.Insights/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSW5zaWdodHMvYWN0aXZpdHlMb2dBbGVydHMve2FjdGl2aXR5TG9nQWxlcnROYW1lfQ==/V/MjAyMC0xMC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.activityLogAlertName" options="activity-log-alert-name name n" required="True" idPart="name">
          <help short="The name of the activity log alert."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg nullable="True" type="array<object>" var="$activityLogAlertRule.properties.actions.actionGroups" options="action-groups" group="">
          <help short="The list of the Action Groups."/>
          <item nullable="True" type="object">
            <arg type="string" var="$activityLogAlertRule.properties.actions.actionGroups[].actionGroupId" options="action-group-id">
              <help short="The resource ID of the Action Group. This cannot be null or empty."/>
            </arg>
            <arg nullable="True" type="object" var="$activityLogAlertRule.properties.actions.actionGroups[].webhookProperties" options="webhook-properties">
              <help short="the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload."/>
              <additionalProp>
                <item nullable="True" type="string"/>
              </additionalProp>
            </arg>
          </item>
        </arg>
        <arg type="array<object>" var="$activityLogAlertRule.properties.condition.allOf" options="all-of" group="">
          <help short="The list of Activity Log Alert rule conditions."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="array<object>" var="$activityLogAlertRule.properties.condition.allOf[].anyOf" options="any-of">
              <help short="An Activity Log Alert rule condition that is met when at least one of its member leaf conditions are met."/>
              <item nullable="True" type="object">
                <arg nullable="True" type="array<string>" var="$activityLogAlertRule.properties.condition.allOf[].anyOf[].containsAny" options="contains-any">
                  <help short="The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met."/>
                  <item nullable="True" type="string"/>
                </arg>
                <arg nullable="True" type="string" var="$activityLogAlertRule.properties.condition.allOf[].anyOf[].equals" options="equals">
                  <help short="The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met."/>
                </arg>
                <arg nullable="True" type="string" var="$activityLogAlertRule.properties.condition.allOf[].anyOf[].field" options="field">
                  <help short="The name of the Activity Log event's field that this condition will examine. The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'."/>
                </arg>
              </item>
            </arg>
            <arg nullable="True" type="array<string>" var="$activityLogAlertRule.properties.condition.allOf[].containsAny" options="contains-any">
              <help short="The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met."/>
              <item nullable="True" type="string"/>
            </arg>
            <arg nullable="True" type="string" var="$activityLogAlertRule.properties.condition.allOf[].equals" options="equals">
              <help short="The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met."/>
            </arg>
            <arg nullable="True" type="string" var="$activityLogAlertRule.properties.condition.allOf[].field" options="field">
              <help short="The name of the Activity Log event's field that this condition will examine. The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="string" var="$activityLogAlertRule.properties.description" options="description" group="">
          <help short="A description of this Activity Log Alert rule."/>
        </arg>
        <arg nullable="True" type="boolean" var="$activityLogAlertRule.properties.enabled" options="enabled" group="">
          <help short="Indicates whether this Activity Log Alert rule is enabled. If an Activity Log Alert rule is not enabled, then none of its actions will be activated."/>
        </arg>
        <arg type="array<string>" var="$activityLogAlertRule.properties.scopes" options="scopes" group="">
          <help short="A list of resource IDs that will be used as prefixes. The alert will only apply to Activity Log events with resource IDs that fall under one of these prefixes. This list must include at least one item."/>
          <item nullable="True" type="string"/>
        </arg>
        <arg nullable="True" type="object" var="$activityLogAlertRule.tags" options="tags" group="">
          <help short="The tags of the resource."/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <operation operationId="ActivityLogAlerts_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/activityLogAlerts/{activityLogAlertName}">
          <request method="get">
            <path>
              <param type="string" name="activityLogAlertName" arg="$Path.activityLogAlertName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2020-10-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="ActivityLogAlertResource_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Insights/activityLogAlerts/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location">
                    <default value="&quot;global&quot;"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="actions" required="True">
                      <prop type="array<object>" name="actionGroups" identifiers="actionGroupId">
                        <item type="object">
                          <prop type="string" name="actionGroupId" required="True"/>
                          <prop type="object" name="webhookProperties">
                            <additionalProp>
                              <item type="string"/>
                            </additionalProp>
                          </prop>
                        </item>
                      </prop>
                    </prop>
                    <prop type="object" name="condition" required="True">
                      <prop type="array<object>" name="allOf" required="True">
                        <item type="object">
                          <prop type="array<object>" name="anyOf">
                            <item type="object">
                              <prop type="array<string>" name="containsAny">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="equals"/>
                              <prop type="string" name="field"/>
                            </item>
                          </prop>
                          <prop type="array<string>" name="containsAny">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="equals"/>
                          <prop type="string" name="field"/>
                        </item>
                      </prop>
                    </prop>
                    <prop type="string" name="description"/>
                    <prop type="boolean" name="enabled">
                      <default value="true"/>
                    </prop>
                    <prop type="array<string>" name="scopes" required="True">
                      <item type="string"/>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="activityLogAlertRule" required="True" clientFlatten="True">
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="object" name="actions" required="True">
                  <prop type="array<object>" name="actionGroups" arg="$activityLogAlertRule.properties.actions.actionGroups" identifiers="actionGroupId">
                    <item type="object">
                      <prop type="string" name="actionGroupId" arg="$activityLogAlertRule.properties.actions.actionGroups[].actionGroupId" required="True"/>
                      <prop type="object" name="webhookProperties" arg="$activityLogAlertRule.properties.actions.actionGroups[].webhookProperties">
                        <additionalProp>
                          <item type="string"/>
                        </additionalProp>
                      </prop>
                    </item>
                  </prop>
                </prop>
                <prop type="object" name="condition" required="True">
                  <prop type="array<object>" name="allOf" arg="$activityLogAlertRule.properties.condition.allOf" required="True">
                    <item type="object">
                      <prop type="array<object>" name="anyOf" arg="$activityLogAlertRule.properties.condition.allOf[].anyOf">
                        <item type="object">
                          <prop type="array<string>" name="containsAny" arg="$activityLogAlertRule.properties.condition.allOf[].anyOf[].containsAny">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="equals" arg="$activityLogAlertRule.properties.condition.allOf[].anyOf[].equals"/>
                          <prop type="string" name="field" arg="$activityLogAlertRule.properties.condition.allOf[].anyOf[].field"/>
                        </item>
                      </prop>
                      <prop type="array<string>" name="containsAny" arg="$activityLogAlertRule.properties.condition.allOf[].containsAny">
                        <item type="string"/>
                      </prop>
                      <prop type="string" name="equals" arg="$activityLogAlertRule.properties.condition.allOf[].equals"/>
                      <prop type="string" name="field" arg="$activityLogAlertRule.properties.condition.allOf[].field"/>
                    </item>
                  </prop>
                </prop>
                <prop type="string" name="description" arg="$activityLogAlertRule.properties.description"/>
                <prop type="boolean" name="enabled" arg="$activityLogAlertRule.properties.enabled">
                  <default value="true"/>
                </prop>
                <prop type="array<string>" name="scopes" arg="$activityLogAlertRule.properties.scopes" required="True">
                  <item type="string"/>
                </prop>
              </prop>
              <prop type="object" name="tags" arg="$activityLogAlertRule.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="ActivityLogAlerts_CreateOrUpdate">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/activityLogAlerts/{activityLogAlertName}">
          <request method="put">
            <path>
              <param type="string" name="activityLogAlertName" arg="$Path.activityLogAlertName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2020-10-01&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@ActivityLogAlertResource_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
