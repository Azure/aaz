<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/virtualmachinescalesets/{}" version="2017-12-01" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS92aXJ0dWFsTWFjaGluZVNjYWxlU2V0cy97dm1TY2FsZVNldE5hbWV9/V/MjAxNy0xMi0wMQ=="/>
  <commandGroup name="vmss">
    <command name="show" version="2017-12-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/virtualmachinescalesets/{}" version="2017-12-01" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS92aXJ0dWFsTWFjaGluZVNjYWxlU2V0cy97dm1TY2FsZVNldE5hbWV9/V/MjAxNy0xMi0wMQ=="/>
      <argGroup name="">
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Path.vmScaleSetName" options="vm-scale-set-name name n" required="True" idPart="name">
          <help short="The name of the VM scale set."/>
        </arg>
      </argGroup>
      <operation operationId="VirtualMachineScaleSets_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}">
          <request method="get">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              <param type="string" name="vmScaleSetName" arg="$Path.vmScaleSetName" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-12-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/virtualMachineScaleSets/{}"/>
                  </prop>
                  <prop type="object" name="identity">
                    <prop type="array<string>" name="identityIds">
                      <item type="string"/>
                    </prop>
                    <prop readOnly="True" type="string" name="principalId"/>
                    <prop readOnly="True" type="string" name="tenantId"/>
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="plan">
                    <prop type="string" name="name"/>
                    <prop type="string" name="product"/>
                    <prop type="string" name="promotionCode"/>
                    <prop type="string" name="publisher"/>
                  </prop>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="boolean" name="overprovision"/>
                    <prop type="integer32" name="platformFaultDomainCount"/>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop type="boolean" name="singlePlacementGroup"/>
                    <prop readOnly="True" type="string" name="uniqueId"/>
                    <prop type="object" name="upgradePolicy">
                      <prop type="object" name="autoOSUpgradePolicy">
                        <prop type="boolean" name="disableAutoRollback"/>
                      </prop>
                      <prop type="boolean" name="automaticOSUpgrade"/>
                      <prop type="string" name="mode">
                        <enum>
                          <item value="&quot;Automatic&quot;"/>
                          <item value="&quot;Manual&quot;"/>
                          <item value="&quot;Rolling&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="rollingUpgradePolicy">
                        <prop type="integer32" name="maxBatchInstancePercent">
                          <format maximum="100" minimum="5"/>
                        </prop>
                        <prop type="integer32" name="maxUnhealthyInstancePercent">
                          <format maximum="100" minimum="5"/>
                        </prop>
                        <prop type="integer32" name="maxUnhealthyUpgradedInstancePercent">
                          <format maximum="100" minimum="0"/>
                        </prop>
                        <prop type="string" name="pauseTimeBetweenBatches"/>
                      </prop>
                    </prop>
                    <prop type="object" name="virtualMachineProfile">
                      <prop type="object" name="diagnosticsProfile">
                        <prop type="object" name="bootDiagnostics">
                          <prop type="boolean" name="enabled"/>
                          <prop type="string" name="storageUri"/>
                        </prop>
                      </prop>
                      <prop type="string" name="evictionPolicy">
                        <enum>
                          <item value="&quot;Deallocate&quot;"/>
                          <item value="&quot;Delete&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="extensionProfile">
                        <prop type="array<object>" name="extensions">
                          <item type="object">
                            <prop readOnly="True" type="ResourceId" name="id">
                              <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/virtualMachineScaleSets/{}/extensions/{}"/>
                            </prop>
                            <prop type="string" name="name"/>
                            <prop type="object" name="properties" clientFlatten="True">
                              <prop type="boolean" name="autoUpgradeMinorVersion"/>
                              <prop type="string" name="forceUpdateTag"/>
                              <prop readOnly="True" type="string" name="provisioningState"/>
                              <prop type="string" name="publisher"/>
                              <prop type="string" name="type"/>
                              <prop type="string" name="typeHandlerVersion"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop type="string" name="licenseType"/>
                      <prop type="object" name="networkProfile">
                        <prop type="object" name="healthProbe" cls="ApiEntityReference_read">
                          <prop type="string" name="id"/>
                        </prop>
                        <prop type="array<object>" name="networkInterfaceConfigurations">
                          <item type="object">
                            <prop type="string" name="id"/>
                            <prop type="string" name="name" required="True"/>
                            <prop type="object" name="properties" clientFlatten="True">
                              <prop type="object" name="dnsSettings">
                                <prop type="array<string>" name="dnsServers">
                                  <item type="string"/>
                                </prop>
                              </prop>
                              <prop type="boolean" name="enableAcceleratedNetworking"/>
                              <prop type="boolean" name="enableIPForwarding"/>
                              <prop type="array<object>" name="ipConfigurations" required="True">
                                <item type="object">
                                  <prop type="string" name="id"/>
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="object" name="properties" clientFlatten="True">
                                    <prop type="array<@SubResource_read>" name="applicationGatewayBackendAddressPools">
                                      <item type="@SubResource_read"/>
                                    </prop>
                                    <prop type="array<@SubResource_read>" name="loadBalancerBackendAddressPools">
                                      <item type="@SubResource_read"/>
                                    </prop>
                                    <prop type="array<@SubResource_read>" name="loadBalancerInboundNatPools">
                                      <item type="@SubResource_read"/>
                                    </prop>
                                    <prop type="boolean" name="primary"/>
                                    <prop type="string" name="privateIPAddressVersion">
                                      <enum>
                                        <item value="&quot;IPv4&quot;"/>
                                        <item value="&quot;IPv6&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="object" name="publicIPAddressConfiguration">
                                      <prop type="string" name="name" required="True"/>
                                      <prop type="object" name="properties" clientFlatten="True">
                                        <prop type="object" name="dnsSettings">
                                          <prop type="string" name="domainNameLabel" required="True"/>
                                        </prop>
                                        <prop type="integer32" name="idleTimeoutInMinutes"/>
                                      </prop>
                                    </prop>
                                    <prop type="@ApiEntityReference_read" name="subnet"/>
                                  </prop>
                                </item>
                              </prop>
                              <prop type="@SubResource_read" name="networkSecurityGroup"/>
                              <prop type="boolean" name="primary"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop type="object" name="osProfile">
                        <prop type="string" name="adminPassword"/>
                        <prop type="string" name="adminUsername"/>
                        <prop type="string" name="computerNamePrefix"/>
                        <prop type="string" name="customData"/>
                        <prop type="object" name="linuxConfiguration">
                          <prop type="boolean" name="disablePasswordAuthentication"/>
                          <prop type="object" name="ssh">
                            <prop type="array<object>" name="publicKeys">
                              <item type="object">
                                <prop type="string" name="keyData"/>
                                <prop type="string" name="path"/>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="secrets">
                          <item type="object">
                            <prop type="object" name="sourceVault" cls="SubResource_read">
                              <prop type="string" name="id"/>
                            </prop>
                            <prop type="array<object>" name="vaultCertificates">
                              <item type="object">
                                <prop type="string" name="certificateStore"/>
                                <prop type="string" name="certificateUrl"/>
                              </item>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="windowsConfiguration">
                          <prop type="array<object>" name="additionalUnattendContent">
                            <item type="object">
                              <prop type="string" name="componentName">
                                <enum>
                                  <item value="&quot;Microsoft-Windows-Shell-Setup&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="content"/>
                              <prop type="string" name="passName">
                                <enum>
                                  <item value="&quot;OobeSystem&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="settingName">
                                <enum>
                                  <item value="&quot;AutoLogon&quot;"/>
                                  <item value="&quot;FirstLogonCommands&quot;"/>
                                </enum>
                              </prop>
                            </item>
                          </prop>
                          <prop type="boolean" name="enableAutomaticUpdates"/>
                          <prop type="boolean" name="provisionVMAgent"/>
                          <prop type="string" name="timeZone"/>
                          <prop type="object" name="winRM">
                            <prop type="array<object>" name="listeners">
                              <item type="object">
                                <prop type="string" name="certificateUrl"/>
                                <prop type="string" name="protocol">
                                  <enum>
                                    <item value="&quot;Http&quot;"/>
                                    <item value="&quot;Https&quot;"/>
                                  </enum>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="priority">
                        <enum>
                          <item value="&quot;Low&quot;"/>
                          <item value="&quot;Regular&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="storageProfile">
                        <prop type="array<object>" name="dataDisks">
                          <item type="object">
                            <prop type="string" name="caching">
                              <enum>
                                <item value="&quot;None&quot;"/>
                                <item value="&quot;ReadOnly&quot;"/>
                                <item value="&quot;ReadWrite&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="createOption" required="True">
                              <enum>
                                <item value="&quot;Attach&quot;"/>
                                <item value="&quot;Empty&quot;"/>
                                <item value="&quot;FromImage&quot;"/>
                              </enum>
                            </prop>
                            <prop type="integer32" name="diskSizeGB"/>
                            <prop type="integer32" name="lun" required="True"/>
                            <prop type="@VirtualMachineScaleSetManagedDiskParameters_read" name="managedDisk"/>
                            <prop type="string" name="name"/>
                            <prop type="boolean" name="writeAcceleratorEnabled"/>
                          </item>
                        </prop>
                        <prop type="object" name="imageReference">
                          <prop type="string" name="id"/>
                          <prop type="string" name="offer"/>
                          <prop type="string" name="publisher"/>
                          <prop type="string" name="sku"/>
                          <prop type="string" name="version"/>
                        </prop>
                        <prop type="object" name="osDisk">
                          <prop type="string" name="caching">
                            <enum>
                              <item value="&quot;None&quot;"/>
                              <item value="&quot;ReadOnly&quot;"/>
                              <item value="&quot;ReadWrite&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="createOption" required="True">
                            <enum>
                              <item value="&quot;Attach&quot;"/>
                              <item value="&quot;Empty&quot;"/>
                              <item value="&quot;FromImage&quot;"/>
                            </enum>
                          </prop>
                          <prop type="object" name="image">
                            <prop type="string" name="uri"/>
                          </prop>
                          <prop type="object" name="managedDisk" cls="VirtualMachineScaleSetManagedDiskParameters_read">
                            <prop type="string" name="storageAccountType">
                              <enum>
                                <item value="&quot;Premium_LRS&quot;"/>
                                <item value="&quot;Standard_LRS&quot;"/>
                              </enum>
                            </prop>
                          </prop>
                          <prop type="string" name="name"/>
                          <prop type="string" name="osType">
                            <enum>
                              <item value="&quot;Linux&quot;"/>
                              <item value="&quot;Windows&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<string>" name="vhdContainers">
                            <item type="string"/>
                          </prop>
                          <prop type="boolean" name="writeAcceleratorEnabled"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="boolean" name="zoneBalance"/>
                  </prop>
                  <prop type="object" name="sku">
                    <prop type="integer64" name="capacity"/>
                    <prop type="string" name="name"/>
                    <prop type="string" name="tier"/>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                  <prop type="array<string>" name="zones">
                    <item type="string"/>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2017-12-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/virtualmachinescalesets/{}" version="2017-12-01" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS92aXJ0dWFsTWFjaGluZVNjYWxlU2V0cy97dm1TY2FsZVNldE5hbWV9/V/MjAxNy0xMi0wMQ=="/>
      <argGroup name="">
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Path.vmScaleSetName" options="vm-scale-set-name name n" required="True" idPart="name">
          <help short="The name of the VM scale set."/>
        </arg>
      </argGroup>
      <operation operationId="VirtualMachineScaleSets_Delete">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}">
          <request method="delete">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              <param type="string" name="vmScaleSetName" arg="$Path.vmScaleSetName" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-12-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="dateTime" name="endTime"/>
                  <prop type="object" name="error">
                    <prop type="string" name="code"/>
                    <prop type="array<object>" name="details">
                      <item type="object">
                        <prop type="string" name="code"/>
                        <prop type="string" name="message"/>
                        <prop type="string" name="target"/>
                      </item>
                    </prop>
                    <prop type="object" name="innererror">
                      <prop type="string" name="errordetail"/>
                      <prop type="string" name="exceptiontype"/>
                    </prop>
                    <prop type="string" name="message"/>
                    <prop type="string" name="target"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop readOnly="True" type="dateTime" name="startTime"/>
                  <prop readOnly="True" type="string" name="status"/>
                </schema>
              </json>
            </body>
          </response>
          <response statusCode="202"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="create" version="2017-12-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/virtualmachinescalesets/{}" version="2017-12-01" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS92aXJ0dWFsTWFjaGluZVNjYWxlU2V0cy97dm1TY2FsZVNldE5hbWV9/V/MjAxNy0xMi0wMQ=="/>
      <argGroup name="">
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Path.vmScaleSetName" options="vm-scale-set-name name n" required="True" idPart="name">
          <help short="The name of the VM scale set to create or update."/>
        </arg>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="object" var="$parameters.identity" options="identity" group="Parameters">
          <help short="The identity of the virtual machine scale set, if configured."/>
          <arg type="array<string>" var="$parameters.identity.identityIds" options="identity-ids">
            <help short="The list of user identities associated with the virtual machine scale set. The user identity references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/identities/{identityName}'."/>
            <item type="string"/>
          </arg>
          <arg type="string" var="$parameters.identity.type" options="type">
            <help short="The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set."/>
            <enum>
              <item name="None" value="&quot;None&quot;"/>
              <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
              <item name="SystemAssigned, UserAssigned" value="&quot;SystemAssigned, UserAssigned&quot;"/>
              <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg type="ResourceLocation" var="$parameters.location" options="location l" required="True" group="Parameters">
          <help short="Resource location"/>
        </arg>
        <arg type="object" var="$parameters.plan" options="plan" group="Parameters">
          <help short="Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**."/>
          <arg type="string" var="$parameters.plan.name" options="name">
            <help short="The plan ID."/>
          </arg>
          <arg type="string" var="$parameters.plan.product" options="product">
            <help short="Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element."/>
          </arg>
          <arg type="string" var="$parameters.plan.promotionCode" options="promotion-code">
            <help short="The promotion code."/>
          </arg>
          <arg type="string" var="$parameters.plan.publisher" options="publisher">
            <help short="The publisher ID."/>
          </arg>
        </arg>
        <arg type="object" var="$parameters.sku" options="sku" group="Parameters">
          <help short="The virtual machine scale set sku."/>
          <arg type="integer64" var="$parameters.sku.capacity" options="capacity">
            <help short="Specifies the number of virtual machines in the scale set."/>
          </arg>
          <arg type="string" var="$parameters.sku.name" options="name">
            <help short="The sku name."/>
          </arg>
          <arg type="string" var="$parameters.sku.tier" options="tier">
            <help short="Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**"/>
          </arg>
        </arg>
        <arg type="object" var="$parameters.tags" options="tags" group="Parameters">
          <help short="Resource tags"/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
        <arg type="array<string>" var="$parameters.zones" options="zones" group="Parameters">
          <help short="The virtual machine scale set zones. NOTE: Availability zones can only be set when you create the scale set"/>
          <item type="string"/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="boolean" var="$parameters.properties.overprovision" options="overprovision" group="Properties">
          <help short="Specifies whether the Virtual Machine Scale Set should be overprovisioned."/>
        </arg>
        <arg type="integer32" var="$parameters.properties.platformFaultDomainCount" options="platform-fault-domain-count" group="Properties">
          <help short="Fault Domain count for each placement group."/>
        </arg>
        <arg type="boolean" var="$parameters.properties.singlePlacementGroup" options="single-placement-group" group="Properties">
          <help short="When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if singlePlacementGroup is false, it may not be modified to true."/>
        </arg>
        <arg type="object" var="$parameters.properties.upgradePolicy" options="upgrade-policy" group="Properties">
          <help short="The upgrade policy."/>
          <arg type="object" var="$parameters.properties.upgradePolicy.autoOSUpgradePolicy" options="auto-os-upgrade-policy">
            <help short="Configuration parameters used for performing automatic OS Upgrade."/>
            <arg type="boolean" var="$parameters.properties.upgradePolicy.autoOSUpgradePolicy.disableAutoRollback" options="disable-auto-rollback">
              <help short="Whether OS image rollback feature should be disabled. Default value is false."/>
            </arg>
          </arg>
          <arg type="boolean" var="$parameters.properties.upgradePolicy.automaticOSUpgrade" options="automatic-os-upgrade">
            <help short="Whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the image becomes available."/>
          </arg>
          <arg type="string" var="$parameters.properties.upgradePolicy.mode" options="mode">
            <help short="Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time."/>
            <enum>
              <item name="Automatic" value="&quot;Automatic&quot;"/>
              <item name="Manual" value="&quot;Manual&quot;"/>
              <item name="Rolling" value="&quot;Rolling&quot;"/>
            </enum>
          </arg>
          <arg type="object" var="$parameters.properties.upgradePolicy.rollingUpgradePolicy" options="rolling-upgrade-policy">
            <help short="The configuration parameters used while performing a rolling upgrade."/>
            <arg type="integer32" var="$parameters.properties.upgradePolicy.rollingUpgradePolicy.maxBatchInstancePercent" options="max-batch-instance-percent">
              <help short="The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%."/>
              <format maximum="100" minimum="5"/>
            </arg>
            <arg type="integer32" var="$parameters.properties.upgradePolicy.rollingUpgradePolicy.maxUnhealthyInstancePercent" options="max-unhealthy-instance-percent">
              <help short="The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%."/>
              <format maximum="100" minimum="5"/>
            </arg>
            <arg type="integer32" var="$parameters.properties.upgradePolicy.rollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent" options="max-unhealthy-upgraded-instance-percent">
              <help short="The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%."/>
              <format maximum="100" minimum="0"/>
            </arg>
            <arg type="string" var="$parameters.properties.upgradePolicy.rollingUpgradePolicy.pauseTimeBetweenBatches" options="pause-time-between-batches">
              <help short="The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S)."/>
            </arg>
          </arg>
        </arg>
        <arg type="object" var="$parameters.properties.virtualMachineProfile" options="virtual-machine-profile" group="Properties">
          <help short="The virtual machine profile."/>
          <arg type="object" var="$parameters.properties.virtualMachineProfile.diagnosticsProfile" options="diagnostics-profile">
            <help short="Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15."/>
            <arg type="object" var="$parameters.properties.virtualMachineProfile.diagnosticsProfile.bootDiagnostics" options="boot-diagnostics">
              <help short="Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. **NOTE**: If storageUri is being specified then ensure that the storage account is in the same region and subscription as the VM. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor."/>
              <arg type="boolean" var="$parameters.properties.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.enabled" options="enabled">
                <help short="Whether boot diagnostics should be enabled on the Virtual Machine."/>
              </arg>
              <arg type="string" var="$parameters.properties.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.storageUri" options="storage-uri">
                <help short="Uri of the storage account to use for placing the console output and screenshot. If storageUri is not specified while enabling boot diagnostics, managed storage will be used."/>
              </arg>
            </arg>
          </arg>
          <arg type="string" var="$parameters.properties.virtualMachineProfile.evictionPolicy" options="eviction-policy">
            <help short="Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview."/>
            <enum>
              <item name="Deallocate" value="&quot;Deallocate&quot;"/>
              <item name="Delete" value="&quot;Delete&quot;"/>
            </enum>
          </arg>
          <arg type="object" var="$parameters.properties.virtualMachineProfile.extensionProfile" options="extension-profile">
            <help short="Specifies a collection of settings for extensions installed on virtual machines in the scale set."/>
            <arg type="array<object>" var="$parameters.properties.virtualMachineProfile.extensionProfile.extensions" options="extensions">
              <help short="The virtual machine scale set child extension resources."/>
              <item type="object">
                <arg type="string" var="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].name" options="name">
                  <help short="The name of the extension."/>
                </arg>
                <arg type="boolean" var="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.autoUpgradeMinorVersion" options="auto-upgrade-minor-version" group="Properties">
                  <help short="Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."/>
                </arg>
                <arg type="string" var="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.forceUpdateTag" options="force-update-tag" group="Properties">
                  <help short="If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed."/>
                </arg>
                <arg type="string" var="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.publisher" options="publisher" group="Properties">
                  <help short="The name of the extension handler publisher."/>
                </arg>
                <arg type="string" var="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.type" options="type" group="Properties">
                  <help short="Specifies the type of the extension; an example is &quot;CustomScriptExtension&quot;."/>
                </arg>
                <arg type="string" var="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.typeHandlerVersion" options="type-handler-version" group="Properties">
                  <help short="Specifies the version of the script handler."/>
                </arg>
              </item>
            </arg>
          </arg>
          <arg type="string" var="$parameters.properties.virtualMachineProfile.licenseType" options="license-type">
            <help short="Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15"/>
          </arg>
          <arg type="object" var="$parameters.properties.virtualMachineProfile.networkProfile" options="network-profile">
            <help short="Specifies properties of the network interfaces of the virtual machines in the scale set."/>
            <arg type="object" var="$parameters.properties.virtualMachineProfile.networkProfile.healthProbe" options="health-probe" cls="ApiEntityReference_create">
              <help short="A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'."/>
              <arg type="string" var="@ApiEntityReference_create.id" options="id">
                <help short="The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/..."/>
              </arg>
            </arg>
            <arg type="array<object>" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations" options="network-interface-configurations">
              <help short="The list of network configurations."/>
              <item type="object">
                <arg type="string" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].id" options="id">
                  <help short="Resource Id"/>
                </arg>
                <arg type="string" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].name" options="name" required="True">
                  <help short="The network configuration name."/>
                </arg>
                <arg type="object" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.dnsSettings" options="dns-settings" group="Properties">
                  <help short="The dns settings to be applied on the network interfaces."/>
                  <arg type="array<string>" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.dnsSettings.dnsServers" options="dns-servers">
                    <help short="List of DNS servers IP addresses"/>
                    <item type="string"/>
                  </arg>
                </arg>
                <arg type="boolean" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.enableAcceleratedNetworking" options="enable-accelerated-networking" group="Properties">
                  <help short="Specifies whether the network interface is accelerated networking-enabled."/>
                </arg>
                <arg type="boolean" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.enableIPForwarding" options="enable-ip-forwarding" group="Properties">
                  <help short="Whether IP forwarding enabled on this NIC."/>
                </arg>
                <arg type="array<object>" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations" options="ip-configurations" group="Properties">
                  <help short="Specifies the IP configurations of the network interface."/>
                  <item type="object">
                    <arg type="string" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].id" options="id">
                      <help short="Resource Id"/>
                    </arg>
                    <arg type="string" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].name" options="name" required="True">
                      <help short="The IP configuration name."/>
                    </arg>
                    <arg type="array<@SubResource_create>" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.applicationGatewayBackendAddressPools" options="application-gateway-backend-address-pools" group="Properties">
                      <help short="Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway."/>
                      <item type="@SubResource_create"/>
                    </arg>
                    <arg type="array<@SubResource_create>" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.loadBalancerBackendAddressPools" options="load-balancer-backend-address-pools" group="Properties">
                      <help short="Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer."/>
                      <item type="@SubResource_create"/>
                    </arg>
                    <arg type="array<@SubResource_create>" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.loadBalancerInboundNatPools" options="load-balancer-inbound-nat-pools" group="Properties">
                      <help short="Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer."/>
                      <item type="@SubResource_create"/>
                    </arg>
                    <arg type="boolean" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.primary" options="primary" group="Properties">
                      <help short="Specifies the primary network interface in case the virtual machine has more than 1 network interface."/>
                    </arg>
                    <arg type="string" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.privateIPAddressVersion" options="private-ip-address-version" group="Properties">
                      <help short="Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'."/>
                      <enum>
                        <item name="IPv4" value="&quot;IPv4&quot;"/>
                        <item name="IPv6" value="&quot;IPv6&quot;"/>
                      </enum>
                    </arg>
                    <arg type="object" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration" options="public-ip-address-configuration" group="Properties">
                      <help short="The publicIPAddressConfiguration."/>
                      <arg type="string" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.name" options="name" required="True">
                        <help short="The publicIP address configuration name."/>
                      </arg>
                      <arg type="object" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.properties.dnsSettings" options="dns-settings" group="Properties">
                        <help short="The dns settings to be applied on the publicIP addresses ."/>
                        <arg type="string" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.properties.dnsSettings.domainNameLabel" options="domain-name-label" required="True">
                          <help short="The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created"/>
                        </arg>
                      </arg>
                      <arg type="integer32" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.properties.idleTimeoutInMinutes" options="idle-timeout-in-minutes" group="Properties">
                        <help short="The idle timeout of the public IP address."/>
                      </arg>
                    </arg>
                    <arg type="@ApiEntityReference_create" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.subnet" options="subnet" group="Properties">
                      <help short="Specifies the identifier of the subnet."/>
                    </arg>
                  </item>
                </arg>
                <arg type="@SubResource_create" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.networkSecurityGroup" options="network-security-group" group="Properties">
                  <help short="The network security group."/>
                </arg>
                <arg type="boolean" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.primary" options="primary" group="Properties">
                  <help short="Specifies the primary network interface in case the virtual machine has more than 1 network interface."/>
                </arg>
              </item>
            </arg>
          </arg>
          <arg type="object" var="$parameters.properties.virtualMachineProfile.osProfile" options="os-profile">
            <help short="Specifies the operating system settings for the virtual machines in the scale set."/>
            <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.adminPassword" options="admin-password">
              <help short="Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** &quot;abc@123&quot;, &quot;P@$$w0rd&quot;, &quot;P@ssw0rd&quot;, &quot;P@ssword123&quot;, &quot;Pa$$word&quot;, &quot;pass@word1&quot;, &quot;Password!&quot;, &quot;Password1&quot;, &quot;Password22&quot;, &quot;iloveyou!&quot; <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)"/>
            </arg>
            <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.adminUsername" options="admin-username">
              <help short="Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in &quot;.&quot; <br><br> **Disallowed values:** &quot;administrator&quot;, &quot;admin&quot;, &quot;user&quot;, &quot;user1&quot;, &quot;test&quot;, &quot;user2&quot;, &quot;test1&quot;, &quot;user3&quot;, &quot;admin1&quot;, &quot;1&quot;, &quot;123&quot;, &quot;a&quot;, &quot;actuser&quot;, &quot;adm&quot;, &quot;admin2&quot;, &quot;aspnet&quot;, &quot;backup&quot;, &quot;console&quot;, &quot;david&quot;, &quot;guest&quot;, &quot;john&quot;, &quot;owner&quot;, &quot;root&quot;, &quot;server&quot;, &quot;sql&quot;, &quot;support&quot;, &quot;support_388945a0&quot;, &quot;sys&quot;, &quot;test2&quot;, &quot;test3&quot;, &quot;user4&quot;, &quot;user5&quot;. <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters"/>
            </arg>
            <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.computerNamePrefix" options="computer-name-prefix">
              <help short="Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long."/>
            </arg>
            <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.customData" options="custom-data">
              <help short="Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init)"/>
            </arg>
            <arg type="object" var="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration" options="linux-configuration">
              <help short="Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros)."/>
              <arg type="boolean" var="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.disablePasswordAuthentication" options="disable-password-authentication">
                <help short="Specifies whether password authentication should be disabled."/>
              </arg>
              <arg type="object" var="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh" options="ssh">
                <help short="Specifies the ssh key configuration for a Linux OS."/>
                <arg type="array<object>" var="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys" options="public-keys">
                  <help short="The list of SSH public keys used to authenticate with linux based VMs."/>
                  <item type="object">
                    <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys[].keyData" options="key-data">
                      <help short="SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed)."/>
                    </arg>
                    <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys[].path" options="path">
                      <help short="Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys"/>
                    </arg>
                  </item>
                </arg>
              </arg>
            </arg>
            <arg type="array<object>" var="$parameters.properties.virtualMachineProfile.osProfile.secrets" options="secrets">
              <help short="Specifies set of certificates that should be installed onto the virtual machines in the scale set. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows)."/>
              <item type="object">
                <arg type="object" var="$parameters.properties.virtualMachineProfile.osProfile.secrets[].sourceVault" options="source-vault" cls="SubResource_create">
                  <help short="The relative URL of the Key Vault containing all of the certificates in VaultCertificates."/>
                  <arg type="string" var="@SubResource_create.id" options="id">
                    <help short="Resource Id"/>
                  </arg>
                </arg>
                <arg type="array<object>" var="$parameters.properties.virtualMachineProfile.osProfile.secrets[].vaultCertificates" options="vault-certificates">
                  <help short="The list of key vault references in SourceVault which contain certificates."/>
                  <item type="object">
                    <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.secrets[].vaultCertificates[].certificateStore" options="certificate-store">
                      <help short="For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted."/>
                    </arg>
                    <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.secrets[].vaultCertificates[].certificateUrl" options="certificate-url">
                      <help short="This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  &quot;data&quot;:&quot;<Base64-encoded-certificate>&quot;,<br>  &quot;dataType&quot;:&quot;pfx&quot;,<br>  &quot;password&quot;:&quot;<pfx-file-password>&quot;<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows)."/>
                    </arg>
                  </item>
                </arg>
              </item>
            </arg>
            <arg type="object" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration" options="windows-configuration">
              <help short="Specifies Windows operating system settings on the virtual machine."/>
              <arg type="array<object>" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent" options="additional-unattend-content">
                <help short="Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup."/>
                <item type="object">
                  <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].componentName" options="component-name">
                    <help short="The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup."/>
                    <enum>
                      <item name="Microsoft-Windows-Shell-Setup" value="&quot;Microsoft-Windows-Shell-Setup&quot;"/>
                    </enum>
                  </arg>
                  <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].content" options="content">
                    <help short="Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted."/>
                  </arg>
                  <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].passName" options="pass-name">
                    <help short="The pass name. Currently, the only allowable value is OobeSystem."/>
                    <enum>
                      <item name="OobeSystem" value="&quot;OobeSystem&quot;"/>
                    </enum>
                  </arg>
                  <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].settingName" options="setting-name">
                    <help short="Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon."/>
                    <enum>
                      <item name="AutoLogon" value="&quot;AutoLogon&quot;"/>
                      <item name="FirstLogonCommands" value="&quot;FirstLogonCommands&quot;"/>
                    </enum>
                  </arg>
                </item>
              </arg>
              <arg type="boolean" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.enableAutomaticUpdates" options="enable-automatic-updates">
                <help short="Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."/>
              </arg>
              <arg type="boolean" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.provisionVMAgent" options="provision-vm-agent">
                <help short="Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, it is set to true by default. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."/>
              </arg>
              <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.timeZone" options="time-zone">
                <help short="Specifies the time zone of the virtual machine. e.g. &quot;Pacific Standard Time&quot;. Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones)."/>
              </arg>
              <arg type="object" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM" options="win-rm">
                <help short="Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell."/>
                <arg type="array<object>" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners" options="listeners">
                  <help short="The list of Windows Remote Management listeners"/>
                  <item type="object">
                    <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners[].certificateUrl" options="certificate-url">
                      <help short="This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  &quot;data&quot;:&quot;<Base64-encoded-certificate>&quot;,<br>  &quot;dataType&quot;:&quot;pfx&quot;,<br>  &quot;password&quot;:&quot;<pfx-file-password>&quot;<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows)."/>
                    </arg>
                    <arg type="string" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners[].protocol" options="protocol">
                      <help short="Specifies the protocol of WinRM listener. Possible values are: **http,** **https.**"/>
                      <enum>
                        <item name="Http" value="&quot;Http&quot;"/>
                        <item name="Https" value="&quot;Https&quot;"/>
                      </enum>
                    </arg>
                  </item>
                </arg>
              </arg>
            </arg>
          </arg>
          <arg type="string" var="$parameters.properties.virtualMachineProfile.priority" options="priority">
            <help short="Specifies the priority for the virtual machines in the scale set. Minimum api-version: 2017-10-30-preview."/>
            <enum>
              <item name="Low" value="&quot;Low&quot;"/>
              <item name="Regular" value="&quot;Regular&quot;"/>
            </enum>
          </arg>
          <arg type="object" var="$parameters.properties.virtualMachineProfile.storageProfile" options="storage-profile">
            <help short="Specifies the storage settings for the virtual machine disks."/>
            <arg type="array<object>" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks" options="data-disks">
              <help short="Specifies the parameters that are used to add data disks to the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview)."/>
              <item type="object">
                <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].caching" options="caching">
                  <help short="Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**"/>
                  <enum>
                    <item name="None" value="&quot;None&quot;"/>
                    <item name="ReadOnly" value="&quot;ReadOnly&quot;"/>
                    <item name="ReadWrite" value="&quot;ReadWrite&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].createOption" options="create-option" required="True">
                  <help short="The create option."/>
                  <enum>
                    <item name="Attach" value="&quot;Attach&quot;"/>
                    <item name="Empty" value="&quot;Empty&quot;"/>
                    <item name="FromImage" value="&quot;FromImage&quot;"/>
                  </enum>
                </arg>
                <arg type="integer32" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].diskSizeGB" options="disk-size-gb">
                  <help short="Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property diskSizeGB is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023."/>
                </arg>
                <arg type="integer32" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].lun" options="lun" required="True">
                  <help short="Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM."/>
                </arg>
                <arg type="@VirtualMachineScaleSetManagedDiskParameters_create" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].managedDisk" options="managed-disk">
                  <help short="The managed disk parameters."/>
                </arg>
                <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].name" options="name">
                  <help short="The disk name."/>
                </arg>
                <arg type="boolean" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].writeAcceleratorEnabled" options="write-accelerator-enabled">
                  <help short="Specifies whether writeAccelerator should be enabled or disabled on the disk."/>
                </arg>
              </item>
            </arg>
            <arg type="object" var="$parameters.properties.virtualMachineProfile.storageProfile.imageReference" options="image-reference">
              <help short="Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations."/>
              <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.id" options="id">
                <help short="Resource Id"/>
              </arg>
              <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.offer" options="offer">
                <help short="Specifies the offer of the platform image or marketplace image used to create the virtual machine."/>
              </arg>
              <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.publisher" options="publisher">
                <help short="The image publisher."/>
              </arg>
              <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.sku" options="sku">
                <help short="The image SKU."/>
              </arg>
              <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.version" options="version">
                <help short="Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available. Please do not use field 'version' for gallery image deployment, gallery image should always use 'id' field for deployment, to use 'latest' version of gallery image, just set '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}' in the 'id' field without version input."/>
              </arg>
            </arg>
            <arg type="object" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk" options="os-disk">
              <help short="Specifies information about the operating system disk used by the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview)."/>
              <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.caching" options="caching">
                <help short="Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**"/>
                <enum>
                  <item name="None" value="&quot;None&quot;"/>
                  <item name="ReadOnly" value="&quot;ReadOnly&quot;"/>
                  <item name="ReadWrite" value="&quot;ReadWrite&quot;"/>
                </enum>
              </arg>
              <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.createOption" options="create-option" required="True">
                <help short="Specifies how the virtual machines in the scale set should be created. The only allowed value is: **FromImage.** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described."/>
                <enum>
                  <item name="Attach" value="&quot;Attach&quot;"/>
                  <item name="Empty" value="&quot;Empty&quot;"/>
                  <item name="FromImage" value="&quot;FromImage&quot;"/>
                </enum>
              </arg>
              <arg type="object" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.image" options="image">
                <help short="Specifies information about the unmanaged user image to base the scale set on."/>
                <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.image.uri" options="uri">
                  <help short="Specifies the virtual hard disk's uri."/>
                </arg>
              </arg>
              <arg type="object" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.managedDisk" options="managed-disk" cls="VirtualMachineScaleSetManagedDiskParameters_create">
                <help short="The managed disk parameters."/>
                <arg type="string" var="@VirtualMachineScaleSetManagedDiskParameters_create.storageAccountType" options="storage-account-type">
                  <help short="Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk."/>
                  <enum>
                    <item name="Premium_LRS" value="&quot;Premium_LRS&quot;"/>
                    <item name="Standard_LRS" value="&quot;Standard_LRS&quot;"/>
                  </enum>
                </arg>
              </arg>
              <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.name" options="name">
                <help short="The disk name."/>
              </arg>
              <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.osType" options="os-type">
                <help short="This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**"/>
                <enum>
                  <item name="Linux" value="&quot;Linux&quot;"/>
                  <item name="Windows" value="&quot;Windows&quot;"/>
                </enum>
              </arg>
              <arg type="array<string>" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.vhdContainers" options="vhd-containers">
                <help short="Specifies the container urls that are used to store operating system disks for the scale set."/>
                <item type="string"/>
              </arg>
              <arg type="boolean" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.writeAcceleratorEnabled" options="write-accelerator-enabled">
                <help short="Specifies whether writeAccelerator should be enabled or disabled on the disk."/>
              </arg>
            </arg>
          </arg>
        </arg>
        <arg type="boolean" var="$parameters.properties.zoneBalance" options="zone-balance" group="Properties">
          <help short="Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage. zoneBalance property can only be set if the zones property of the scale set contains more than one zone. If there are no zones or only one zone specified, then zoneBalance property should not be set."/>
        </arg>
      </argGroup>
      <operation operationId="VirtualMachineScaleSets_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}">
          <request method="put">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              <param type="string" name="vmScaleSetName" arg="$Path.vmScaleSetName" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-12-01&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="object" name="identity" arg="$parameters.identity">
                    <prop type="array<string>" name="identityIds" arg="$parameters.identity.identityIds">
                      <item type="string"/>
                    </prop>
                    <prop type="string" name="type" arg="$parameters.identity.type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" arg="$parameters.location" required="True"/>
                  <prop type="object" name="plan" arg="$parameters.plan">
                    <prop type="string" name="name" arg="$parameters.plan.name"/>
                    <prop type="string" name="product" arg="$parameters.plan.product"/>
                    <prop type="string" name="promotionCode" arg="$parameters.plan.promotionCode"/>
                    <prop type="string" name="publisher" arg="$parameters.plan.publisher"/>
                  </prop>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="boolean" name="overprovision" arg="$parameters.properties.overprovision"/>
                    <prop type="integer32" name="platformFaultDomainCount" arg="$parameters.properties.platformFaultDomainCount"/>
                    <prop type="boolean" name="singlePlacementGroup" arg="$parameters.properties.singlePlacementGroup"/>
                    <prop type="object" name="upgradePolicy" arg="$parameters.properties.upgradePolicy">
                      <prop type="object" name="autoOSUpgradePolicy" arg="$parameters.properties.upgradePolicy.autoOSUpgradePolicy">
                        <prop type="boolean" name="disableAutoRollback" arg="$parameters.properties.upgradePolicy.autoOSUpgradePolicy.disableAutoRollback"/>
                      </prop>
                      <prop type="boolean" name="automaticOSUpgrade" arg="$parameters.properties.upgradePolicy.automaticOSUpgrade"/>
                      <prop type="string" name="mode" arg="$parameters.properties.upgradePolicy.mode">
                        <enum>
                          <item value="&quot;Automatic&quot;"/>
                          <item value="&quot;Manual&quot;"/>
                          <item value="&quot;Rolling&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="rollingUpgradePolicy" arg="$parameters.properties.upgradePolicy.rollingUpgradePolicy">
                        <prop type="integer32" name="maxBatchInstancePercent" arg="$parameters.properties.upgradePolicy.rollingUpgradePolicy.maxBatchInstancePercent">
                          <format maximum="100" minimum="5"/>
                        </prop>
                        <prop type="integer32" name="maxUnhealthyInstancePercent" arg="$parameters.properties.upgradePolicy.rollingUpgradePolicy.maxUnhealthyInstancePercent">
                          <format maximum="100" minimum="5"/>
                        </prop>
                        <prop type="integer32" name="maxUnhealthyUpgradedInstancePercent" arg="$parameters.properties.upgradePolicy.rollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent">
                          <format maximum="100" minimum="0"/>
                        </prop>
                        <prop type="string" name="pauseTimeBetweenBatches" arg="$parameters.properties.upgradePolicy.rollingUpgradePolicy.pauseTimeBetweenBatches"/>
                      </prop>
                    </prop>
                    <prop type="object" name="virtualMachineProfile" arg="$parameters.properties.virtualMachineProfile">
                      <prop type="object" name="diagnosticsProfile" arg="$parameters.properties.virtualMachineProfile.diagnosticsProfile">
                        <prop type="object" name="bootDiagnostics" arg="$parameters.properties.virtualMachineProfile.diagnosticsProfile.bootDiagnostics">
                          <prop type="boolean" name="enabled" arg="$parameters.properties.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.enabled"/>
                          <prop type="string" name="storageUri" arg="$parameters.properties.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.storageUri"/>
                        </prop>
                      </prop>
                      <prop type="string" name="evictionPolicy" arg="$parameters.properties.virtualMachineProfile.evictionPolicy">
                        <enum>
                          <item value="&quot;Deallocate&quot;"/>
                          <item value="&quot;Delete&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="extensionProfile" arg="$parameters.properties.virtualMachineProfile.extensionProfile">
                        <prop type="array<object>" name="extensions" arg="$parameters.properties.virtualMachineProfile.extensionProfile.extensions">
                          <item type="object">
                            <prop type="string" name="name" arg="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].name"/>
                            <prop type="object" name="properties" clientFlatten="True">
                              <prop type="boolean" name="autoUpgradeMinorVersion" arg="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.autoUpgradeMinorVersion"/>
                              <prop type="string" name="forceUpdateTag" arg="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.forceUpdateTag"/>
                              <prop type="string" name="publisher" arg="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.publisher"/>
                              <prop type="string" name="type" arg="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.type"/>
                              <prop type="string" name="typeHandlerVersion" arg="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.typeHandlerVersion"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop type="string" name="licenseType" arg="$parameters.properties.virtualMachineProfile.licenseType"/>
                      <prop type="object" name="networkProfile" arg="$parameters.properties.virtualMachineProfile.networkProfile">
                        <prop type="object" name="healthProbe" arg="$parameters.properties.virtualMachineProfile.networkProfile.healthProbe" cls="ApiEntityReference_create">
                          <prop type="string" name="id" arg="@ApiEntityReference_create.id"/>
                        </prop>
                        <prop type="array<object>" name="networkInterfaceConfigurations" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations">
                          <item type="object">
                            <prop type="string" name="id" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].id"/>
                            <prop type="string" name="name" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].name" required="True"/>
                            <prop type="object" name="properties" clientFlatten="True">
                              <prop type="object" name="dnsSettings" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.dnsSettings">
                                <prop type="array<string>" name="dnsServers" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.dnsSettings.dnsServers">
                                  <item type="string"/>
                                </prop>
                              </prop>
                              <prop type="boolean" name="enableAcceleratedNetworking" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.enableAcceleratedNetworking"/>
                              <prop type="boolean" name="enableIPForwarding" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.enableIPForwarding"/>
                              <prop type="array<object>" name="ipConfigurations" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations" required="True">
                                <item type="object">
                                  <prop type="string" name="id" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].id"/>
                                  <prop type="string" name="name" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].name" required="True"/>
                                  <prop type="object" name="properties" clientFlatten="True">
                                    <prop type="array<@SubResource_create>" name="applicationGatewayBackendAddressPools" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.applicationGatewayBackendAddressPools">
                                      <item type="@SubResource_create"/>
                                    </prop>
                                    <prop type="array<@SubResource_create>" name="loadBalancerBackendAddressPools" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.loadBalancerBackendAddressPools">
                                      <item type="@SubResource_create"/>
                                    </prop>
                                    <prop type="array<@SubResource_create>" name="loadBalancerInboundNatPools" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.loadBalancerInboundNatPools">
                                      <item type="@SubResource_create"/>
                                    </prop>
                                    <prop type="boolean" name="primary" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.primary"/>
                                    <prop type="string" name="privateIPAddressVersion" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.privateIPAddressVersion">
                                      <enum>
                                        <item value="&quot;IPv4&quot;"/>
                                        <item value="&quot;IPv6&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="object" name="publicIPAddressConfiguration" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration">
                                      <prop type="string" name="name" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.name" required="True"/>
                                      <prop type="object" name="properties" clientFlatten="True">
                                        <prop type="object" name="dnsSettings" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.properties.dnsSettings">
                                          <prop type="string" name="domainNameLabel" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.properties.dnsSettings.domainNameLabel" required="True"/>
                                        </prop>
                                        <prop type="integer32" name="idleTimeoutInMinutes" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.properties.idleTimeoutInMinutes"/>
                                      </prop>
                                    </prop>
                                    <prop type="@ApiEntityReference_create" name="subnet" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.subnet"/>
                                  </prop>
                                </item>
                              </prop>
                              <prop type="@SubResource_create" name="networkSecurityGroup" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.networkSecurityGroup"/>
                              <prop type="boolean" name="primary" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.primary"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop type="object" name="osProfile" arg="$parameters.properties.virtualMachineProfile.osProfile">
                        <prop type="string" name="adminPassword" arg="$parameters.properties.virtualMachineProfile.osProfile.adminPassword"/>
                        <prop type="string" name="adminUsername" arg="$parameters.properties.virtualMachineProfile.osProfile.adminUsername"/>
                        <prop type="string" name="computerNamePrefix" arg="$parameters.properties.virtualMachineProfile.osProfile.computerNamePrefix"/>
                        <prop type="string" name="customData" arg="$parameters.properties.virtualMachineProfile.osProfile.customData"/>
                        <prop type="object" name="linuxConfiguration" arg="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration">
                          <prop type="boolean" name="disablePasswordAuthentication" arg="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.disablePasswordAuthentication"/>
                          <prop type="object" name="ssh" arg="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh">
                            <prop type="array<object>" name="publicKeys" arg="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys">
                              <item type="object">
                                <prop type="string" name="keyData" arg="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys[].keyData"/>
                                <prop type="string" name="path" arg="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys[].path"/>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="secrets" arg="$parameters.properties.virtualMachineProfile.osProfile.secrets">
                          <item type="object">
                            <prop type="object" name="sourceVault" arg="$parameters.properties.virtualMachineProfile.osProfile.secrets[].sourceVault" cls="SubResource_create">
                              <prop type="string" name="id" arg="@SubResource_create.id"/>
                            </prop>
                            <prop type="array<object>" name="vaultCertificates" arg="$parameters.properties.virtualMachineProfile.osProfile.secrets[].vaultCertificates">
                              <item type="object">
                                <prop type="string" name="certificateStore" arg="$parameters.properties.virtualMachineProfile.osProfile.secrets[].vaultCertificates[].certificateStore"/>
                                <prop type="string" name="certificateUrl" arg="$parameters.properties.virtualMachineProfile.osProfile.secrets[].vaultCertificates[].certificateUrl"/>
                              </item>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="windowsConfiguration" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration">
                          <prop type="array<object>" name="additionalUnattendContent" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent">
                            <item type="object">
                              <prop type="string" name="componentName" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].componentName">
                                <enum>
                                  <item value="&quot;Microsoft-Windows-Shell-Setup&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="content" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].content"/>
                              <prop type="string" name="passName" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].passName">
                                <enum>
                                  <item value="&quot;OobeSystem&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="settingName" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].settingName">
                                <enum>
                                  <item value="&quot;AutoLogon&quot;"/>
                                  <item value="&quot;FirstLogonCommands&quot;"/>
                                </enum>
                              </prop>
                            </item>
                          </prop>
                          <prop type="boolean" name="enableAutomaticUpdates" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.enableAutomaticUpdates"/>
                          <prop type="boolean" name="provisionVMAgent" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.provisionVMAgent"/>
                          <prop type="string" name="timeZone" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.timeZone"/>
                          <prop type="object" name="winRM" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM">
                            <prop type="array<object>" name="listeners" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners">
                              <item type="object">
                                <prop type="string" name="certificateUrl" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners[].certificateUrl"/>
                                <prop type="string" name="protocol" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners[].protocol">
                                  <enum>
                                    <item value="&quot;Http&quot;"/>
                                    <item value="&quot;Https&quot;"/>
                                  </enum>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="priority" arg="$parameters.properties.virtualMachineProfile.priority">
                        <enum>
                          <item value="&quot;Low&quot;"/>
                          <item value="&quot;Regular&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="storageProfile" arg="$parameters.properties.virtualMachineProfile.storageProfile">
                        <prop type="array<object>" name="dataDisks" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks">
                          <item type="object">
                            <prop type="string" name="caching" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].caching">
                              <enum>
                                <item value="&quot;None&quot;"/>
                                <item value="&quot;ReadOnly&quot;"/>
                                <item value="&quot;ReadWrite&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="createOption" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].createOption" required="True">
                              <enum>
                                <item value="&quot;Attach&quot;"/>
                                <item value="&quot;Empty&quot;"/>
                                <item value="&quot;FromImage&quot;"/>
                              </enum>
                            </prop>
                            <prop type="integer32" name="diskSizeGB" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].diskSizeGB"/>
                            <prop type="integer32" name="lun" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].lun" required="True"/>
                            <prop type="@VirtualMachineScaleSetManagedDiskParameters_create" name="managedDisk" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].managedDisk"/>
                            <prop type="string" name="name" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].name"/>
                            <prop type="boolean" name="writeAcceleratorEnabled" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].writeAcceleratorEnabled"/>
                          </item>
                        </prop>
                        <prop type="object" name="imageReference" arg="$parameters.properties.virtualMachineProfile.storageProfile.imageReference">
                          <prop type="string" name="id" arg="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.id"/>
                          <prop type="string" name="offer" arg="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.offer"/>
                          <prop type="string" name="publisher" arg="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.publisher"/>
                          <prop type="string" name="sku" arg="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.sku"/>
                          <prop type="string" name="version" arg="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.version"/>
                        </prop>
                        <prop type="object" name="osDisk" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk">
                          <prop type="string" name="caching" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.caching">
                            <enum>
                              <item value="&quot;None&quot;"/>
                              <item value="&quot;ReadOnly&quot;"/>
                              <item value="&quot;ReadWrite&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="createOption" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.createOption" required="True">
                            <enum>
                              <item value="&quot;Attach&quot;"/>
                              <item value="&quot;Empty&quot;"/>
                              <item value="&quot;FromImage&quot;"/>
                            </enum>
                          </prop>
                          <prop type="object" name="image" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.image">
                            <prop type="string" name="uri" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.image.uri"/>
                          </prop>
                          <prop type="object" name="managedDisk" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.managedDisk" cls="VirtualMachineScaleSetManagedDiskParameters_create">
                            <prop type="string" name="storageAccountType" arg="@VirtualMachineScaleSetManagedDiskParameters_create.storageAccountType">
                              <enum>
                                <item value="&quot;Premium_LRS&quot;"/>
                                <item value="&quot;Standard_LRS&quot;"/>
                              </enum>
                            </prop>
                          </prop>
                          <prop type="string" name="name" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.name"/>
                          <prop type="string" name="osType" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.osType">
                            <enum>
                              <item value="&quot;Linux&quot;"/>
                              <item value="&quot;Windows&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<string>" name="vhdContainers" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.vhdContainers">
                            <item type="string"/>
                          </prop>
                          <prop type="boolean" name="writeAcceleratorEnabled" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.writeAcceleratorEnabled"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="boolean" name="zoneBalance" arg="$parameters.properties.zoneBalance"/>
                  </prop>
                  <prop type="object" name="sku" arg="$parameters.sku">
                    <prop type="integer64" name="capacity" arg="$parameters.sku.capacity"/>
                    <prop type="string" name="name" arg="$parameters.sku.name"/>
                    <prop type="string" name="tier" arg="$parameters.sku.tier"/>
                  </prop>
                  <prop type="object" name="tags" arg="$parameters.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop type="array<string>" name="zones" arg="$parameters.zones">
                    <item type="string"/>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/virtualMachineScaleSets/{}"/>
                  </prop>
                  <prop type="object" name="identity">
                    <prop type="array<string>" name="identityIds">
                      <item type="string"/>
                    </prop>
                    <prop readOnly="True" type="string" name="principalId"/>
                    <prop readOnly="True" type="string" name="tenantId"/>
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="plan">
                    <prop type="string" name="name"/>
                    <prop type="string" name="product"/>
                    <prop type="string" name="promotionCode"/>
                    <prop type="string" name="publisher"/>
                  </prop>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="boolean" name="overprovision"/>
                    <prop type="integer32" name="platformFaultDomainCount"/>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop type="boolean" name="singlePlacementGroup"/>
                    <prop readOnly="True" type="string" name="uniqueId"/>
                    <prop type="object" name="upgradePolicy">
                      <prop type="object" name="autoOSUpgradePolicy">
                        <prop type="boolean" name="disableAutoRollback"/>
                      </prop>
                      <prop type="boolean" name="automaticOSUpgrade"/>
                      <prop type="string" name="mode">
                        <enum>
                          <item value="&quot;Automatic&quot;"/>
                          <item value="&quot;Manual&quot;"/>
                          <item value="&quot;Rolling&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="rollingUpgradePolicy">
                        <prop type="integer32" name="maxBatchInstancePercent">
                          <format maximum="100" minimum="5"/>
                        </prop>
                        <prop type="integer32" name="maxUnhealthyInstancePercent">
                          <format maximum="100" minimum="5"/>
                        </prop>
                        <prop type="integer32" name="maxUnhealthyUpgradedInstancePercent">
                          <format maximum="100" minimum="0"/>
                        </prop>
                        <prop type="string" name="pauseTimeBetweenBatches"/>
                      </prop>
                    </prop>
                    <prop type="object" name="virtualMachineProfile">
                      <prop type="object" name="diagnosticsProfile">
                        <prop type="object" name="bootDiagnostics">
                          <prop type="boolean" name="enabled"/>
                          <prop type="string" name="storageUri"/>
                        </prop>
                      </prop>
                      <prop type="string" name="evictionPolicy">
                        <enum>
                          <item value="&quot;Deallocate&quot;"/>
                          <item value="&quot;Delete&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="extensionProfile">
                        <prop type="array<object>" name="extensions">
                          <item type="object">
                            <prop readOnly="True" type="ResourceId" name="id">
                              <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/virtualMachineScaleSets/{}/extensions/{}"/>
                            </prop>
                            <prop type="string" name="name"/>
                            <prop type="object" name="properties" clientFlatten="True">
                              <prop type="boolean" name="autoUpgradeMinorVersion"/>
                              <prop type="string" name="forceUpdateTag"/>
                              <prop readOnly="True" type="string" name="provisioningState"/>
                              <prop type="string" name="publisher"/>
                              <prop type="string" name="type"/>
                              <prop type="string" name="typeHandlerVersion"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop type="string" name="licenseType"/>
                      <prop type="object" name="networkProfile">
                        <prop type="object" name="healthProbe" cls="ApiEntityReference_read">
                          <prop type="string" name="id"/>
                        </prop>
                        <prop type="array<object>" name="networkInterfaceConfigurations">
                          <item type="object">
                            <prop type="string" name="id"/>
                            <prop type="string" name="name" required="True"/>
                            <prop type="object" name="properties" clientFlatten="True">
                              <prop type="object" name="dnsSettings">
                                <prop type="array<string>" name="dnsServers">
                                  <item type="string"/>
                                </prop>
                              </prop>
                              <prop type="boolean" name="enableAcceleratedNetworking"/>
                              <prop type="boolean" name="enableIPForwarding"/>
                              <prop type="array<object>" name="ipConfigurations" required="True">
                                <item type="object">
                                  <prop type="string" name="id"/>
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="object" name="properties" clientFlatten="True">
                                    <prop type="array<@SubResource_read>" name="applicationGatewayBackendAddressPools">
                                      <item type="@SubResource_read"/>
                                    </prop>
                                    <prop type="array<@SubResource_read>" name="loadBalancerBackendAddressPools">
                                      <item type="@SubResource_read"/>
                                    </prop>
                                    <prop type="array<@SubResource_read>" name="loadBalancerInboundNatPools">
                                      <item type="@SubResource_read"/>
                                    </prop>
                                    <prop type="boolean" name="primary"/>
                                    <prop type="string" name="privateIPAddressVersion">
                                      <enum>
                                        <item value="&quot;IPv4&quot;"/>
                                        <item value="&quot;IPv6&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="object" name="publicIPAddressConfiguration">
                                      <prop type="string" name="name" required="True"/>
                                      <prop type="object" name="properties" clientFlatten="True">
                                        <prop type="object" name="dnsSettings">
                                          <prop type="string" name="domainNameLabel" required="True"/>
                                        </prop>
                                        <prop type="integer32" name="idleTimeoutInMinutes"/>
                                      </prop>
                                    </prop>
                                    <prop type="@ApiEntityReference_read" name="subnet"/>
                                  </prop>
                                </item>
                              </prop>
                              <prop type="@SubResource_read" name="networkSecurityGroup"/>
                              <prop type="boolean" name="primary"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop type="object" name="osProfile">
                        <prop type="string" name="adminPassword"/>
                        <prop type="string" name="adminUsername"/>
                        <prop type="string" name="computerNamePrefix"/>
                        <prop type="string" name="customData"/>
                        <prop type="object" name="linuxConfiguration">
                          <prop type="boolean" name="disablePasswordAuthentication"/>
                          <prop type="object" name="ssh">
                            <prop type="array<object>" name="publicKeys">
                              <item type="object">
                                <prop type="string" name="keyData"/>
                                <prop type="string" name="path"/>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="secrets">
                          <item type="object">
                            <prop type="object" name="sourceVault" cls="SubResource_read">
                              <prop type="string" name="id"/>
                            </prop>
                            <prop type="array<object>" name="vaultCertificates">
                              <item type="object">
                                <prop type="string" name="certificateStore"/>
                                <prop type="string" name="certificateUrl"/>
                              </item>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="windowsConfiguration">
                          <prop type="array<object>" name="additionalUnattendContent">
                            <item type="object">
                              <prop type="string" name="componentName">
                                <enum>
                                  <item value="&quot;Microsoft-Windows-Shell-Setup&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="content"/>
                              <prop type="string" name="passName">
                                <enum>
                                  <item value="&quot;OobeSystem&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="settingName">
                                <enum>
                                  <item value="&quot;AutoLogon&quot;"/>
                                  <item value="&quot;FirstLogonCommands&quot;"/>
                                </enum>
                              </prop>
                            </item>
                          </prop>
                          <prop type="boolean" name="enableAutomaticUpdates"/>
                          <prop type="boolean" name="provisionVMAgent"/>
                          <prop type="string" name="timeZone"/>
                          <prop type="object" name="winRM">
                            <prop type="array<object>" name="listeners">
                              <item type="object">
                                <prop type="string" name="certificateUrl"/>
                                <prop type="string" name="protocol">
                                  <enum>
                                    <item value="&quot;Http&quot;"/>
                                    <item value="&quot;Https&quot;"/>
                                  </enum>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="priority">
                        <enum>
                          <item value="&quot;Low&quot;"/>
                          <item value="&quot;Regular&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="storageProfile">
                        <prop type="array<object>" name="dataDisks">
                          <item type="object">
                            <prop type="string" name="caching">
                              <enum>
                                <item value="&quot;None&quot;"/>
                                <item value="&quot;ReadOnly&quot;"/>
                                <item value="&quot;ReadWrite&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="createOption" required="True">
                              <enum>
                                <item value="&quot;Attach&quot;"/>
                                <item value="&quot;Empty&quot;"/>
                                <item value="&quot;FromImage&quot;"/>
                              </enum>
                            </prop>
                            <prop type="integer32" name="diskSizeGB"/>
                            <prop type="integer32" name="lun" required="True"/>
                            <prop type="@VirtualMachineScaleSetManagedDiskParameters_read" name="managedDisk"/>
                            <prop type="string" name="name"/>
                            <prop type="boolean" name="writeAcceleratorEnabled"/>
                          </item>
                        </prop>
                        <prop type="object" name="imageReference">
                          <prop type="string" name="id"/>
                          <prop type="string" name="offer"/>
                          <prop type="string" name="publisher"/>
                          <prop type="string" name="sku"/>
                          <prop type="string" name="version"/>
                        </prop>
                        <prop type="object" name="osDisk">
                          <prop type="string" name="caching">
                            <enum>
                              <item value="&quot;None&quot;"/>
                              <item value="&quot;ReadOnly&quot;"/>
                              <item value="&quot;ReadWrite&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="createOption" required="True">
                            <enum>
                              <item value="&quot;Attach&quot;"/>
                              <item value="&quot;Empty&quot;"/>
                              <item value="&quot;FromImage&quot;"/>
                            </enum>
                          </prop>
                          <prop type="object" name="image">
                            <prop type="string" name="uri"/>
                          </prop>
                          <prop type="object" name="managedDisk" cls="VirtualMachineScaleSetManagedDiskParameters_read">
                            <prop type="string" name="storageAccountType">
                              <enum>
                                <item value="&quot;Premium_LRS&quot;"/>
                                <item value="&quot;Standard_LRS&quot;"/>
                              </enum>
                            </prop>
                          </prop>
                          <prop type="string" name="name"/>
                          <prop type="string" name="osType">
                            <enum>
                              <item value="&quot;Linux&quot;"/>
                              <item value="&quot;Windows&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<string>" name="vhdContainers">
                            <item type="string"/>
                          </prop>
                          <prop type="boolean" name="writeAcceleratorEnabled"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="boolean" name="zoneBalance"/>
                  </prop>
                  <prop type="object" name="sku">
                    <prop type="integer64" name="capacity"/>
                    <prop type="string" name="name"/>
                    <prop type="string" name="tier"/>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                  <prop type="array<string>" name="zones">
                    <item type="string"/>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2017-12-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/virtualmachinescalesets/{}" version="2017-12-01" swagger="mgmt-plane/compute/ResourceProviders/Microsoft.Compute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ29tcHV0ZS92aXJ0dWFsTWFjaGluZVNjYWxlU2V0cy97dm1TY2FsZVNldE5hbWV9/V/MjAxNy0xMi0wMQ=="/>
      <argGroup name="">
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Path.vmScaleSetName" options="vm-scale-set-name name n" required="True" idPart="name">
          <help short="The name of the VM scale set."/>
        </arg>
      </argGroup>
      <argGroup name="Parameters">
        <arg nullable="True" type="object" var="$parameters.identity" options="identity" group="Parameters">
          <help short="The identity of the virtual machine scale set, if configured."/>
          <arg nullable="True" type="array<string>" var="$parameters.identity.identityIds" options="identity-ids">
            <help short="The list of user identities associated with the virtual machine scale set. The user identity references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/identities/{identityName}'."/>
            <item nullable="True" type="string"/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.identity.type" options="type">
            <help short="The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set."/>
            <enum>
              <item name="None" value="&quot;None&quot;"/>
              <item name="SystemAssigned" value="&quot;SystemAssigned&quot;"/>
              <item name="SystemAssigned, UserAssigned" value="&quot;SystemAssigned, UserAssigned&quot;"/>
              <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg type="ResourceLocation" var="$parameters.location" options="location l" group="Parameters">
          <help short="Resource location"/>
        </arg>
        <arg nullable="True" type="object" var="$parameters.plan" options="plan" group="Parameters">
          <help short="Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**."/>
          <arg nullable="True" type="string" var="$parameters.plan.name" options="name">
            <help short="The plan ID."/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.plan.product" options="product">
            <help short="Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element."/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.plan.promotionCode" options="promotion-code">
            <help short="The promotion code."/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.plan.publisher" options="publisher">
            <help short="The publisher ID."/>
          </arg>
        </arg>
        <arg nullable="True" type="object" var="$parameters.sku" options="sku" group="Parameters">
          <help short="The virtual machine scale set sku."/>
          <arg nullable="True" type="integer64" var="$parameters.sku.capacity" options="capacity">
            <help short="Specifies the number of virtual machines in the scale set."/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.sku.name" options="name">
            <help short="The sku name."/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.sku.tier" options="tier">
            <help short="Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**"/>
          </arg>
        </arg>
        <arg nullable="True" type="object" var="$parameters.tags" options="tags" group="Parameters">
          <help short="Resource tags"/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
        <arg nullable="True" type="array<string>" var="$parameters.zones" options="zones" group="Parameters">
          <help short="The virtual machine scale set zones. NOTE: Availability zones can only be set when you create the scale set"/>
          <item nullable="True" type="string"/>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="boolean" var="$parameters.properties.overprovision" options="overprovision" group="Properties">
          <help short="Specifies whether the Virtual Machine Scale Set should be overprovisioned."/>
        </arg>
        <arg nullable="True" type="integer32" var="$parameters.properties.platformFaultDomainCount" options="platform-fault-domain-count" group="Properties">
          <help short="Fault Domain count for each placement group."/>
        </arg>
        <arg nullable="True" type="boolean" var="$parameters.properties.singlePlacementGroup" options="single-placement-group" group="Properties">
          <help short="When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if singlePlacementGroup is false, it may not be modified to true."/>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.upgradePolicy" options="upgrade-policy" group="Properties">
          <help short="The upgrade policy."/>
          <arg nullable="True" type="object" var="$parameters.properties.upgradePolicy.autoOSUpgradePolicy" options="auto-os-upgrade-policy">
            <help short="Configuration parameters used for performing automatic OS Upgrade."/>
            <arg nullable="True" type="boolean" var="$parameters.properties.upgradePolicy.autoOSUpgradePolicy.disableAutoRollback" options="disable-auto-rollback">
              <help short="Whether OS image rollback feature should be disabled. Default value is false."/>
            </arg>
          </arg>
          <arg nullable="True" type="boolean" var="$parameters.properties.upgradePolicy.automaticOSUpgrade" options="automatic-os-upgrade">
            <help short="Whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the image becomes available."/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.upgradePolicy.mode" options="mode">
            <help short="Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time."/>
            <enum>
              <item name="Automatic" value="&quot;Automatic&quot;"/>
              <item name="Manual" value="&quot;Manual&quot;"/>
              <item name="Rolling" value="&quot;Rolling&quot;"/>
            </enum>
          </arg>
          <arg nullable="True" type="object" var="$parameters.properties.upgradePolicy.rollingUpgradePolicy" options="rolling-upgrade-policy">
            <help short="The configuration parameters used while performing a rolling upgrade."/>
            <arg nullable="True" type="integer32" var="$parameters.properties.upgradePolicy.rollingUpgradePolicy.maxBatchInstancePercent" options="max-batch-instance-percent">
              <help short="The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%."/>
              <format maximum="100" minimum="5"/>
            </arg>
            <arg nullable="True" type="integer32" var="$parameters.properties.upgradePolicy.rollingUpgradePolicy.maxUnhealthyInstancePercent" options="max-unhealthy-instance-percent">
              <help short="The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%."/>
              <format maximum="100" minimum="5"/>
            </arg>
            <arg nullable="True" type="integer32" var="$parameters.properties.upgradePolicy.rollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent" options="max-unhealthy-upgraded-instance-percent">
              <help short="The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%."/>
              <format maximum="100" minimum="0"/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.upgradePolicy.rollingUpgradePolicy.pauseTimeBetweenBatches" options="pause-time-between-batches">
              <help short="The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S)."/>
            </arg>
          </arg>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile" options="virtual-machine-profile" group="Properties">
          <help short="The virtual machine profile."/>
          <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.diagnosticsProfile" options="diagnostics-profile">
            <help short="Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15."/>
            <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.diagnosticsProfile.bootDiagnostics" options="boot-diagnostics">
              <help short="Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. **NOTE**: If storageUri is being specified then ensure that the storage account is in the same region and subscription as the VM. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor."/>
              <arg nullable="True" type="boolean" var="$parameters.properties.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.enabled" options="enabled">
                <help short="Whether boot diagnostics should be enabled on the Virtual Machine."/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.storageUri" options="storage-uri">
                <help short="Uri of the storage account to use for placing the console output and screenshot. If storageUri is not specified while enabling boot diagnostics, managed storage will be used."/>
              </arg>
            </arg>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.evictionPolicy" options="eviction-policy">
            <help short="Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview."/>
            <enum>
              <item name="Deallocate" value="&quot;Deallocate&quot;"/>
              <item name="Delete" value="&quot;Delete&quot;"/>
            </enum>
          </arg>
          <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.extensionProfile" options="extension-profile">
            <help short="Specifies a collection of settings for extensions installed on virtual machines in the scale set."/>
            <arg nullable="True" type="array<object>" var="$parameters.properties.virtualMachineProfile.extensionProfile.extensions" options="extensions">
              <help short="The virtual machine scale set child extension resources."/>
              <item nullable="True" type="object">
                <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].name" options="name">
                  <help short="The name of the extension."/>
                </arg>
                <arg nullable="True" type="boolean" var="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.autoUpgradeMinorVersion" options="auto-upgrade-minor-version" group="Properties">
                  <help short="Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."/>
                </arg>
                <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.forceUpdateTag" options="force-update-tag" group="Properties">
                  <help short="If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed."/>
                </arg>
                <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.publisher" options="publisher" group="Properties">
                  <help short="The name of the extension handler publisher."/>
                </arg>
                <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.type" options="type" group="Properties">
                  <help short="Specifies the type of the extension; an example is &quot;CustomScriptExtension&quot;."/>
                </arg>
                <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.typeHandlerVersion" options="type-handler-version" group="Properties">
                  <help short="Specifies the version of the script handler."/>
                </arg>
              </item>
            </arg>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.licenseType" options="license-type">
            <help short="Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15"/>
          </arg>
          <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.networkProfile" options="network-profile">
            <help short="Specifies properties of the network interfaces of the virtual machines in the scale set."/>
            <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.networkProfile.healthProbe" options="health-probe" cls="ApiEntityReference_update">
              <help short="A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'."/>
              <arg nullable="True" type="string" var="@ApiEntityReference_update.id" options="id">
                <help short="The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/..."/>
              </arg>
            </arg>
            <arg nullable="True" type="array<object>" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations" options="network-interface-configurations">
              <help short="The list of network configurations."/>
              <item nullable="True" type="object">
                <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].id" options="id">
                  <help short="Resource Id"/>
                </arg>
                <arg type="string" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].name" options="name">
                  <help short="The network configuration name."/>
                </arg>
                <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.dnsSettings" options="dns-settings" group="Properties">
                  <help short="The dns settings to be applied on the network interfaces."/>
                  <arg nullable="True" type="array<string>" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.dnsSettings.dnsServers" options="dns-servers">
                    <help short="List of DNS servers IP addresses"/>
                    <item nullable="True" type="string"/>
                  </arg>
                </arg>
                <arg nullable="True" type="boolean" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.enableAcceleratedNetworking" options="enable-accelerated-networking" group="Properties">
                  <help short="Specifies whether the network interface is accelerated networking-enabled."/>
                </arg>
                <arg nullable="True" type="boolean" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.enableIPForwarding" options="enable-ip-forwarding" group="Properties">
                  <help short="Whether IP forwarding enabled on this NIC."/>
                </arg>
                <arg type="array<object>" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations" options="ip-configurations" group="Properties">
                  <help short="Specifies the IP configurations of the network interface."/>
                  <item nullable="True" type="object">
                    <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].id" options="id">
                      <help short="Resource Id"/>
                    </arg>
                    <arg type="string" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].name" options="name">
                      <help short="The IP configuration name."/>
                    </arg>
                    <arg nullable="True" type="array<@SubResource_update>" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.applicationGatewayBackendAddressPools" options="application-gateway-backend-address-pools" group="Properties">
                      <help short="Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway."/>
                      <item nullable="True" type="@SubResource_update"/>
                    </arg>
                    <arg nullable="True" type="array<@SubResource_update>" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.loadBalancerBackendAddressPools" options="load-balancer-backend-address-pools" group="Properties">
                      <help short="Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer."/>
                      <item nullable="True" type="@SubResource_update"/>
                    </arg>
                    <arg nullable="True" type="array<@SubResource_update>" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.loadBalancerInboundNatPools" options="load-balancer-inbound-nat-pools" group="Properties">
                      <help short="Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer."/>
                      <item nullable="True" type="@SubResource_update"/>
                    </arg>
                    <arg nullable="True" type="boolean" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.primary" options="primary" group="Properties">
                      <help short="Specifies the primary network interface in case the virtual machine has more than 1 network interface."/>
                    </arg>
                    <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.privateIPAddressVersion" options="private-ip-address-version" group="Properties">
                      <help short="Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'."/>
                      <enum>
                        <item name="IPv4" value="&quot;IPv4&quot;"/>
                        <item name="IPv6" value="&quot;IPv6&quot;"/>
                      </enum>
                    </arg>
                    <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration" options="public-ip-address-configuration" group="Properties">
                      <help short="The publicIPAddressConfiguration."/>
                      <arg type="string" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.name" options="name">
                        <help short="The publicIP address configuration name."/>
                      </arg>
                      <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.properties.dnsSettings" options="dns-settings" group="Properties">
                        <help short="The dns settings to be applied on the publicIP addresses ."/>
                        <arg type="string" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.properties.dnsSettings.domainNameLabel" options="domain-name-label">
                          <help short="The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created"/>
                        </arg>
                      </arg>
                      <arg nullable="True" type="integer32" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.properties.idleTimeoutInMinutes" options="idle-timeout-in-minutes" group="Properties">
                        <help short="The idle timeout of the public IP address."/>
                      </arg>
                    </arg>
                    <arg nullable="True" type="@ApiEntityReference_update" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.subnet" options="subnet" group="Properties">
                      <help short="Specifies the identifier of the subnet."/>
                    </arg>
                  </item>
                </arg>
                <arg nullable="True" type="@SubResource_update" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.networkSecurityGroup" options="network-security-group" group="Properties">
                  <help short="The network security group."/>
                </arg>
                <arg nullable="True" type="boolean" var="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.primary" options="primary" group="Properties">
                  <help short="Specifies the primary network interface in case the virtual machine has more than 1 network interface."/>
                </arg>
              </item>
            </arg>
          </arg>
          <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.osProfile" options="os-profile">
            <help short="Specifies the operating system settings for the virtual machines in the scale set."/>
            <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.adminPassword" options="admin-password">
              <help short="Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** &quot;abc@123&quot;, &quot;P@$$w0rd&quot;, &quot;P@ssw0rd&quot;, &quot;P@ssword123&quot;, &quot;Pa$$word&quot;, &quot;pass@word1&quot;, &quot;Password!&quot;, &quot;Password1&quot;, &quot;Password22&quot;, &quot;iloveyou!&quot; <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)"/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.adminUsername" options="admin-username">
              <help short="Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in &quot;.&quot; <br><br> **Disallowed values:** &quot;administrator&quot;, &quot;admin&quot;, &quot;user&quot;, &quot;user1&quot;, &quot;test&quot;, &quot;user2&quot;, &quot;test1&quot;, &quot;user3&quot;, &quot;admin1&quot;, &quot;1&quot;, &quot;123&quot;, &quot;a&quot;, &quot;actuser&quot;, &quot;adm&quot;, &quot;admin2&quot;, &quot;aspnet&quot;, &quot;backup&quot;, &quot;console&quot;, &quot;david&quot;, &quot;guest&quot;, &quot;john&quot;, &quot;owner&quot;, &quot;root&quot;, &quot;server&quot;, &quot;sql&quot;, &quot;support&quot;, &quot;support_388945a0&quot;, &quot;sys&quot;, &quot;test2&quot;, &quot;test3&quot;, &quot;user4&quot;, &quot;user5&quot;. <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters"/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.computerNamePrefix" options="computer-name-prefix">
              <help short="Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long."/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.customData" options="custom-data">
              <help short="Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init)"/>
            </arg>
            <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration" options="linux-configuration">
              <help short="Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros)."/>
              <arg nullable="True" type="boolean" var="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.disablePasswordAuthentication" options="disable-password-authentication">
                <help short="Specifies whether password authentication should be disabled."/>
              </arg>
              <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh" options="ssh">
                <help short="Specifies the ssh key configuration for a Linux OS."/>
                <arg nullable="True" type="array<object>" var="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys" options="public-keys">
                  <help short="The list of SSH public keys used to authenticate with linux based VMs."/>
                  <item nullable="True" type="object">
                    <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys[].keyData" options="key-data">
                      <help short="SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed)."/>
                    </arg>
                    <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys[].path" options="path">
                      <help short="Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys"/>
                    </arg>
                  </item>
                </arg>
              </arg>
            </arg>
            <arg nullable="True" type="array<object>" var="$parameters.properties.virtualMachineProfile.osProfile.secrets" options="secrets">
              <help short="Specifies set of certificates that should be installed onto the virtual machines in the scale set. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows)."/>
              <item nullable="True" type="object">
                <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.osProfile.secrets[].sourceVault" options="source-vault" cls="SubResource_update">
                  <help short="The relative URL of the Key Vault containing all of the certificates in VaultCertificates."/>
                  <arg nullable="True" type="string" var="@SubResource_update.id" options="id">
                    <help short="Resource Id"/>
                  </arg>
                </arg>
                <arg nullable="True" type="array<object>" var="$parameters.properties.virtualMachineProfile.osProfile.secrets[].vaultCertificates" options="vault-certificates">
                  <help short="The list of key vault references in SourceVault which contain certificates."/>
                  <item nullable="True" type="object">
                    <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.secrets[].vaultCertificates[].certificateStore" options="certificate-store">
                      <help short="For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted."/>
                    </arg>
                    <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.secrets[].vaultCertificates[].certificateUrl" options="certificate-url">
                      <help short="This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  &quot;data&quot;:&quot;<Base64-encoded-certificate>&quot;,<br>  &quot;dataType&quot;:&quot;pfx&quot;,<br>  &quot;password&quot;:&quot;<pfx-file-password>&quot;<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows)."/>
                    </arg>
                  </item>
                </arg>
              </item>
            </arg>
            <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration" options="windows-configuration">
              <help short="Specifies Windows operating system settings on the virtual machine."/>
              <arg nullable="True" type="array<object>" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent" options="additional-unattend-content">
                <help short="Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup."/>
                <item nullable="True" type="object">
                  <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].componentName" options="component-name">
                    <help short="The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup."/>
                    <enum>
                      <item name="Microsoft-Windows-Shell-Setup" value="&quot;Microsoft-Windows-Shell-Setup&quot;"/>
                    </enum>
                  </arg>
                  <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].content" options="content">
                    <help short="Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted."/>
                  </arg>
                  <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].passName" options="pass-name">
                    <help short="The pass name. Currently, the only allowable value is OobeSystem."/>
                    <enum>
                      <item name="OobeSystem" value="&quot;OobeSystem&quot;"/>
                    </enum>
                  </arg>
                  <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].settingName" options="setting-name">
                    <help short="Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon."/>
                    <enum>
                      <item name="AutoLogon" value="&quot;AutoLogon&quot;"/>
                      <item name="FirstLogonCommands" value="&quot;FirstLogonCommands&quot;"/>
                    </enum>
                  </arg>
                </item>
              </arg>
              <arg nullable="True" type="boolean" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.enableAutomaticUpdates" options="enable-automatic-updates">
                <help short="Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."/>
              </arg>
              <arg nullable="True" type="boolean" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.provisionVMAgent" options="provision-vm-agent">
                <help short="Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, it is set to true by default. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.timeZone" options="time-zone">
                <help short="Specifies the time zone of the virtual machine. e.g. &quot;Pacific Standard Time&quot;. Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones)."/>
              </arg>
              <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM" options="win-rm">
                <help short="Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell."/>
                <arg nullable="True" type="array<object>" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners" options="listeners">
                  <help short="The list of Windows Remote Management listeners"/>
                  <item nullable="True" type="object">
                    <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners[].certificateUrl" options="certificate-url">
                      <help short="This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  &quot;data&quot;:&quot;<Base64-encoded-certificate>&quot;,<br>  &quot;dataType&quot;:&quot;pfx&quot;,<br>  &quot;password&quot;:&quot;<pfx-file-password>&quot;<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows)."/>
                    </arg>
                    <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners[].protocol" options="protocol">
                      <help short="Specifies the protocol of WinRM listener. Possible values are: **http,** **https.**"/>
                      <enum>
                        <item name="Http" value="&quot;Http&quot;"/>
                        <item name="Https" value="&quot;Https&quot;"/>
                      </enum>
                    </arg>
                  </item>
                </arg>
              </arg>
            </arg>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.priority" options="priority">
            <help short="Specifies the priority for the virtual machines in the scale set. Minimum api-version: 2017-10-30-preview."/>
            <enum>
              <item name="Low" value="&quot;Low&quot;"/>
              <item name="Regular" value="&quot;Regular&quot;"/>
            </enum>
          </arg>
          <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.storageProfile" options="storage-profile">
            <help short="Specifies the storage settings for the virtual machine disks."/>
            <arg nullable="True" type="array<object>" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks" options="data-disks">
              <help short="Specifies the parameters that are used to add data disks to the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview)."/>
              <item nullable="True" type="object">
                <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].caching" options="caching">
                  <help short="Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**"/>
                  <enum>
                    <item name="None" value="&quot;None&quot;"/>
                    <item name="ReadOnly" value="&quot;ReadOnly&quot;"/>
                    <item name="ReadWrite" value="&quot;ReadWrite&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].createOption" options="create-option">
                  <help short="The create option."/>
                  <enum>
                    <item name="Attach" value="&quot;Attach&quot;"/>
                    <item name="Empty" value="&quot;Empty&quot;"/>
                    <item name="FromImage" value="&quot;FromImage&quot;"/>
                  </enum>
                </arg>
                <arg nullable="True" type="integer32" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].diskSizeGB" options="disk-size-gb">
                  <help short="Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property diskSizeGB is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023."/>
                </arg>
                <arg type="integer32" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].lun" options="lun">
                  <help short="Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM."/>
                </arg>
                <arg nullable="True" type="@VirtualMachineScaleSetManagedDiskParameters_update" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].managedDisk" options="managed-disk">
                  <help short="The managed disk parameters."/>
                </arg>
                <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].name" options="name">
                  <help short="The disk name."/>
                </arg>
                <arg nullable="True" type="boolean" var="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].writeAcceleratorEnabled" options="write-accelerator-enabled">
                  <help short="Specifies whether writeAccelerator should be enabled or disabled on the disk."/>
                </arg>
              </item>
            </arg>
            <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.storageProfile.imageReference" options="image-reference">
              <help short="Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations."/>
              <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.id" options="id">
                <help short="Resource Id"/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.offer" options="offer">
                <help short="Specifies the offer of the platform image or marketplace image used to create the virtual machine."/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.publisher" options="publisher">
                <help short="The image publisher."/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.sku" options="sku">
                <help short="The image SKU."/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.version" options="version">
                <help short="Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available. Please do not use field 'version' for gallery image deployment, gallery image should always use 'id' field for deployment, to use 'latest' version of gallery image, just set '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}' in the 'id' field without version input."/>
              </arg>
            </arg>
            <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk" options="os-disk">
              <help short="Specifies information about the operating system disk used by the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview)."/>
              <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.caching" options="caching">
                <help short="Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**"/>
                <enum>
                  <item name="None" value="&quot;None&quot;"/>
                  <item name="ReadOnly" value="&quot;ReadOnly&quot;"/>
                  <item name="ReadWrite" value="&quot;ReadWrite&quot;"/>
                </enum>
              </arg>
              <arg type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.createOption" options="create-option">
                <help short="Specifies how the virtual machines in the scale set should be created. The only allowed value is: **FromImage.** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described."/>
                <enum>
                  <item name="Attach" value="&quot;Attach&quot;"/>
                  <item name="Empty" value="&quot;Empty&quot;"/>
                  <item name="FromImage" value="&quot;FromImage&quot;"/>
                </enum>
              </arg>
              <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.image" options="image">
                <help short="Specifies information about the unmanaged user image to base the scale set on."/>
                <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.image.uri" options="uri">
                  <help short="Specifies the virtual hard disk's uri."/>
                </arg>
              </arg>
              <arg nullable="True" type="object" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.managedDisk" options="managed-disk" cls="VirtualMachineScaleSetManagedDiskParameters_update">
                <help short="The managed disk parameters."/>
                <arg nullable="True" type="string" var="@VirtualMachineScaleSetManagedDiskParameters_update.storageAccountType" options="storage-account-type">
                  <help short="Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk."/>
                  <enum>
                    <item name="Premium_LRS" value="&quot;Premium_LRS&quot;"/>
                    <item name="Standard_LRS" value="&quot;Standard_LRS&quot;"/>
                  </enum>
                </arg>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.name" options="name">
                <help short="The disk name."/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.osType" options="os-type">
                <help short="This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**"/>
                <enum>
                  <item name="Linux" value="&quot;Linux&quot;"/>
                  <item name="Windows" value="&quot;Windows&quot;"/>
                </enum>
              </arg>
              <arg nullable="True" type="array<string>" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.vhdContainers" options="vhd-containers">
                <help short="Specifies the container urls that are used to store operating system disks for the scale set."/>
                <item nullable="True" type="string"/>
              </arg>
              <arg nullable="True" type="boolean" var="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.writeAcceleratorEnabled" options="write-accelerator-enabled">
                <help short="Specifies whether writeAccelerator should be enabled or disabled on the disk."/>
              </arg>
            </arg>
          </arg>
        </arg>
        <arg nullable="True" type="boolean" var="$parameters.properties.zoneBalance" options="zone-balance" group="Properties">
          <help short="Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage. zoneBalance property can only be set if the zones property of the scale set contains more than one zone. If there are no zones or only one zone specified, then zoneBalance property should not be set."/>
        </arg>
      </argGroup>
      <operation operationId="VirtualMachineScaleSets_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}">
          <request method="get">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              <param type="string" name="vmScaleSetName" arg="$Path.vmScaleSetName" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-12-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="VirtualMachineScaleSet_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/virtualMachineScaleSets/{}"/>
                  </prop>
                  <prop type="object" name="identity">
                    <prop type="array<string>" name="identityIds">
                      <item type="string"/>
                    </prop>
                    <prop readOnly="True" type="string" name="principalId"/>
                    <prop readOnly="True" type="string" name="tenantId"/>
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;SystemAssigned&quot;"/>
                        <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="plan">
                    <prop type="string" name="name"/>
                    <prop type="string" name="product"/>
                    <prop type="string" name="promotionCode"/>
                    <prop type="string" name="publisher"/>
                  </prop>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="boolean" name="overprovision"/>
                    <prop type="integer32" name="platformFaultDomainCount"/>
                    <prop readOnly="True" type="string" name="provisioningState"/>
                    <prop type="boolean" name="singlePlacementGroup"/>
                    <prop readOnly="True" type="string" name="uniqueId"/>
                    <prop type="object" name="upgradePolicy">
                      <prop type="object" name="autoOSUpgradePolicy">
                        <prop type="boolean" name="disableAutoRollback"/>
                      </prop>
                      <prop type="boolean" name="automaticOSUpgrade"/>
                      <prop type="string" name="mode">
                        <enum>
                          <item value="&quot;Automatic&quot;"/>
                          <item value="&quot;Manual&quot;"/>
                          <item value="&quot;Rolling&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="rollingUpgradePolicy">
                        <prop type="integer32" name="maxBatchInstancePercent">
                          <format maximum="100" minimum="5"/>
                        </prop>
                        <prop type="integer32" name="maxUnhealthyInstancePercent">
                          <format maximum="100" minimum="5"/>
                        </prop>
                        <prop type="integer32" name="maxUnhealthyUpgradedInstancePercent">
                          <format maximum="100" minimum="0"/>
                        </prop>
                        <prop type="string" name="pauseTimeBetweenBatches"/>
                      </prop>
                    </prop>
                    <prop type="object" name="virtualMachineProfile">
                      <prop type="object" name="diagnosticsProfile">
                        <prop type="object" name="bootDiagnostics">
                          <prop type="boolean" name="enabled"/>
                          <prop type="string" name="storageUri"/>
                        </prop>
                      </prop>
                      <prop type="string" name="evictionPolicy">
                        <enum>
                          <item value="&quot;Deallocate&quot;"/>
                          <item value="&quot;Delete&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="extensionProfile">
                        <prop type="array<object>" name="extensions">
                          <item type="object">
                            <prop readOnly="True" type="ResourceId" name="id">
                              <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Compute/virtualMachineScaleSets/{}/extensions/{}"/>
                            </prop>
                            <prop type="string" name="name"/>
                            <prop type="object" name="properties" clientFlatten="True">
                              <prop type="boolean" name="autoUpgradeMinorVersion"/>
                              <prop type="string" name="forceUpdateTag"/>
                              <prop readOnly="True" type="string" name="provisioningState"/>
                              <prop type="string" name="publisher"/>
                              <prop type="string" name="type"/>
                              <prop type="string" name="typeHandlerVersion"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop type="string" name="licenseType"/>
                      <prop type="object" name="networkProfile">
                        <prop type="object" name="healthProbe" cls="ApiEntityReference_read">
                          <prop type="string" name="id"/>
                        </prop>
                        <prop type="array<object>" name="networkInterfaceConfigurations">
                          <item type="object">
                            <prop type="string" name="id"/>
                            <prop type="string" name="name" required="True"/>
                            <prop type="object" name="properties" clientFlatten="True">
                              <prop type="object" name="dnsSettings">
                                <prop type="array<string>" name="dnsServers">
                                  <item type="string"/>
                                </prop>
                              </prop>
                              <prop type="boolean" name="enableAcceleratedNetworking"/>
                              <prop type="boolean" name="enableIPForwarding"/>
                              <prop type="array<object>" name="ipConfigurations" required="True">
                                <item type="object">
                                  <prop type="string" name="id"/>
                                  <prop type="string" name="name" required="True"/>
                                  <prop type="object" name="properties" clientFlatten="True">
                                    <prop type="array<@SubResource_read>" name="applicationGatewayBackendAddressPools">
                                      <item type="@SubResource_read"/>
                                    </prop>
                                    <prop type="array<@SubResource_read>" name="loadBalancerBackendAddressPools">
                                      <item type="@SubResource_read"/>
                                    </prop>
                                    <prop type="array<@SubResource_read>" name="loadBalancerInboundNatPools">
                                      <item type="@SubResource_read"/>
                                    </prop>
                                    <prop type="boolean" name="primary"/>
                                    <prop type="string" name="privateIPAddressVersion">
                                      <enum>
                                        <item value="&quot;IPv4&quot;"/>
                                        <item value="&quot;IPv6&quot;"/>
                                      </enum>
                                    </prop>
                                    <prop type="object" name="publicIPAddressConfiguration">
                                      <prop type="string" name="name" required="True"/>
                                      <prop type="object" name="properties" clientFlatten="True">
                                        <prop type="object" name="dnsSettings">
                                          <prop type="string" name="domainNameLabel" required="True"/>
                                        </prop>
                                        <prop type="integer32" name="idleTimeoutInMinutes"/>
                                      </prop>
                                    </prop>
                                    <prop type="@ApiEntityReference_read" name="subnet"/>
                                  </prop>
                                </item>
                              </prop>
                              <prop type="@SubResource_read" name="networkSecurityGroup"/>
                              <prop type="boolean" name="primary"/>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                      <prop type="object" name="osProfile">
                        <prop type="string" name="adminPassword"/>
                        <prop type="string" name="adminUsername"/>
                        <prop type="string" name="computerNamePrefix"/>
                        <prop type="string" name="customData"/>
                        <prop type="object" name="linuxConfiguration">
                          <prop type="boolean" name="disablePasswordAuthentication"/>
                          <prop type="object" name="ssh">
                            <prop type="array<object>" name="publicKeys">
                              <item type="object">
                                <prop type="string" name="keyData"/>
                                <prop type="string" name="path"/>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                        <prop type="array<object>" name="secrets">
                          <item type="object">
                            <prop type="object" name="sourceVault" cls="SubResource_read">
                              <prop type="string" name="id"/>
                            </prop>
                            <prop type="array<object>" name="vaultCertificates">
                              <item type="object">
                                <prop type="string" name="certificateStore"/>
                                <prop type="string" name="certificateUrl"/>
                              </item>
                            </prop>
                          </item>
                        </prop>
                        <prop type="object" name="windowsConfiguration">
                          <prop type="array<object>" name="additionalUnattendContent">
                            <item type="object">
                              <prop type="string" name="componentName">
                                <enum>
                                  <item value="&quot;Microsoft-Windows-Shell-Setup&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="content"/>
                              <prop type="string" name="passName">
                                <enum>
                                  <item value="&quot;OobeSystem&quot;"/>
                                </enum>
                              </prop>
                              <prop type="string" name="settingName">
                                <enum>
                                  <item value="&quot;AutoLogon&quot;"/>
                                  <item value="&quot;FirstLogonCommands&quot;"/>
                                </enum>
                              </prop>
                            </item>
                          </prop>
                          <prop type="boolean" name="enableAutomaticUpdates"/>
                          <prop type="boolean" name="provisionVMAgent"/>
                          <prop type="string" name="timeZone"/>
                          <prop type="object" name="winRM">
                            <prop type="array<object>" name="listeners">
                              <item type="object">
                                <prop type="string" name="certificateUrl"/>
                                <prop type="string" name="protocol">
                                  <enum>
                                    <item value="&quot;Http&quot;"/>
                                    <item value="&quot;Https&quot;"/>
                                  </enum>
                                </prop>
                              </item>
                            </prop>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="string" name="priority">
                        <enum>
                          <item value="&quot;Low&quot;"/>
                          <item value="&quot;Regular&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="storageProfile">
                        <prop type="array<object>" name="dataDisks">
                          <item type="object">
                            <prop type="string" name="caching">
                              <enum>
                                <item value="&quot;None&quot;"/>
                                <item value="&quot;ReadOnly&quot;"/>
                                <item value="&quot;ReadWrite&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="createOption" required="True">
                              <enum>
                                <item value="&quot;Attach&quot;"/>
                                <item value="&quot;Empty&quot;"/>
                                <item value="&quot;FromImage&quot;"/>
                              </enum>
                            </prop>
                            <prop type="integer32" name="diskSizeGB"/>
                            <prop type="integer32" name="lun" required="True"/>
                            <prop type="@VirtualMachineScaleSetManagedDiskParameters_read" name="managedDisk"/>
                            <prop type="string" name="name"/>
                            <prop type="boolean" name="writeAcceleratorEnabled"/>
                          </item>
                        </prop>
                        <prop type="object" name="imageReference">
                          <prop type="string" name="id"/>
                          <prop type="string" name="offer"/>
                          <prop type="string" name="publisher"/>
                          <prop type="string" name="sku"/>
                          <prop type="string" name="version"/>
                        </prop>
                        <prop type="object" name="osDisk">
                          <prop type="string" name="caching">
                            <enum>
                              <item value="&quot;None&quot;"/>
                              <item value="&quot;ReadOnly&quot;"/>
                              <item value="&quot;ReadWrite&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="createOption" required="True">
                            <enum>
                              <item value="&quot;Attach&quot;"/>
                              <item value="&quot;Empty&quot;"/>
                              <item value="&quot;FromImage&quot;"/>
                            </enum>
                          </prop>
                          <prop type="object" name="image">
                            <prop type="string" name="uri"/>
                          </prop>
                          <prop type="object" name="managedDisk" cls="VirtualMachineScaleSetManagedDiskParameters_read">
                            <prop type="string" name="storageAccountType">
                              <enum>
                                <item value="&quot;Premium_LRS&quot;"/>
                                <item value="&quot;Standard_LRS&quot;"/>
                              </enum>
                            </prop>
                          </prop>
                          <prop type="string" name="name"/>
                          <prop type="string" name="osType">
                            <enum>
                              <item value="&quot;Linux&quot;"/>
                              <item value="&quot;Windows&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<string>" name="vhdContainers">
                            <item type="string"/>
                          </prop>
                          <prop type="boolean" name="writeAcceleratorEnabled"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="boolean" name="zoneBalance"/>
                  </prop>
                  <prop type="object" name="sku">
                    <prop type="integer64" name="capacity"/>
                    <prop type="string" name="name"/>
                    <prop type="string" name="tier"/>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                  <prop type="array<string>" name="zones">
                    <item type="string"/>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="parameters" required="True" clientFlatten="True">
              <prop type="object" name="identity" arg="$parameters.identity">
                <prop type="array<string>" name="identityIds" arg="$parameters.identity.identityIds">
                  <item type="string"/>
                </prop>
                <prop type="string" name="type" arg="$parameters.identity.type">
                  <enum>
                    <item value="&quot;None&quot;"/>
                    <item value="&quot;SystemAssigned&quot;"/>
                    <item value="&quot;SystemAssigned, UserAssigned&quot;"/>
                    <item value="&quot;UserAssigned&quot;"/>
                  </enum>
                </prop>
              </prop>
              <prop type="ResourceLocation" name="location" arg="$parameters.location" required="True"/>
              <prop type="object" name="plan" arg="$parameters.plan">
                <prop type="string" name="name" arg="$parameters.plan.name"/>
                <prop type="string" name="product" arg="$parameters.plan.product"/>
                <prop type="string" name="promotionCode" arg="$parameters.plan.promotionCode"/>
                <prop type="string" name="publisher" arg="$parameters.plan.publisher"/>
              </prop>
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="boolean" name="overprovision" arg="$parameters.properties.overprovision"/>
                <prop type="integer32" name="platformFaultDomainCount" arg="$parameters.properties.platformFaultDomainCount"/>
                <prop type="boolean" name="singlePlacementGroup" arg="$parameters.properties.singlePlacementGroup"/>
                <prop type="object" name="upgradePolicy" arg="$parameters.properties.upgradePolicy">
                  <prop type="object" name="autoOSUpgradePolicy" arg="$parameters.properties.upgradePolicy.autoOSUpgradePolicy">
                    <prop type="boolean" name="disableAutoRollback" arg="$parameters.properties.upgradePolicy.autoOSUpgradePolicy.disableAutoRollback"/>
                  </prop>
                  <prop type="boolean" name="automaticOSUpgrade" arg="$parameters.properties.upgradePolicy.automaticOSUpgrade"/>
                  <prop type="string" name="mode" arg="$parameters.properties.upgradePolicy.mode">
                    <enum>
                      <item value="&quot;Automatic&quot;"/>
                      <item value="&quot;Manual&quot;"/>
                      <item value="&quot;Rolling&quot;"/>
                    </enum>
                  </prop>
                  <prop type="object" name="rollingUpgradePolicy" arg="$parameters.properties.upgradePolicy.rollingUpgradePolicy">
                    <prop type="integer32" name="maxBatchInstancePercent" arg="$parameters.properties.upgradePolicy.rollingUpgradePolicy.maxBatchInstancePercent">
                      <format maximum="100" minimum="5"/>
                    </prop>
                    <prop type="integer32" name="maxUnhealthyInstancePercent" arg="$parameters.properties.upgradePolicy.rollingUpgradePolicy.maxUnhealthyInstancePercent">
                      <format maximum="100" minimum="5"/>
                    </prop>
                    <prop type="integer32" name="maxUnhealthyUpgradedInstancePercent" arg="$parameters.properties.upgradePolicy.rollingUpgradePolicy.maxUnhealthyUpgradedInstancePercent">
                      <format maximum="100" minimum="0"/>
                    </prop>
                    <prop type="string" name="pauseTimeBetweenBatches" arg="$parameters.properties.upgradePolicy.rollingUpgradePolicy.pauseTimeBetweenBatches"/>
                  </prop>
                </prop>
                <prop type="object" name="virtualMachineProfile" arg="$parameters.properties.virtualMachineProfile">
                  <prop type="object" name="diagnosticsProfile" arg="$parameters.properties.virtualMachineProfile.diagnosticsProfile">
                    <prop type="object" name="bootDiagnostics" arg="$parameters.properties.virtualMachineProfile.diagnosticsProfile.bootDiagnostics">
                      <prop type="boolean" name="enabled" arg="$parameters.properties.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.enabled"/>
                      <prop type="string" name="storageUri" arg="$parameters.properties.virtualMachineProfile.diagnosticsProfile.bootDiagnostics.storageUri"/>
                    </prop>
                  </prop>
                  <prop type="string" name="evictionPolicy" arg="$parameters.properties.virtualMachineProfile.evictionPolicy">
                    <enum>
                      <item value="&quot;Deallocate&quot;"/>
                      <item value="&quot;Delete&quot;"/>
                    </enum>
                  </prop>
                  <prop type="object" name="extensionProfile" arg="$parameters.properties.virtualMachineProfile.extensionProfile">
                    <prop type="array<object>" name="extensions" arg="$parameters.properties.virtualMachineProfile.extensionProfile.extensions">
                      <item type="object">
                        <prop type="string" name="name" arg="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].name"/>
                        <prop type="object" name="properties" clientFlatten="True">
                          <prop type="boolean" name="autoUpgradeMinorVersion" arg="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.autoUpgradeMinorVersion"/>
                          <prop type="string" name="forceUpdateTag" arg="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.forceUpdateTag"/>
                          <prop type="string" name="publisher" arg="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.publisher"/>
                          <prop type="string" name="type" arg="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.type"/>
                          <prop type="string" name="typeHandlerVersion" arg="$parameters.properties.virtualMachineProfile.extensionProfile.extensions[].properties.typeHandlerVersion"/>
                        </prop>
                      </item>
                    </prop>
                  </prop>
                  <prop type="string" name="licenseType" arg="$parameters.properties.virtualMachineProfile.licenseType"/>
                  <prop type="object" name="networkProfile" arg="$parameters.properties.virtualMachineProfile.networkProfile">
                    <prop type="object" name="healthProbe" arg="$parameters.properties.virtualMachineProfile.networkProfile.healthProbe" cls="ApiEntityReference_update">
                      <prop type="string" name="id" arg="@ApiEntityReference_update.id"/>
                    </prop>
                    <prop type="array<object>" name="networkInterfaceConfigurations" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations">
                      <item type="object">
                        <prop type="string" name="id" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].id"/>
                        <prop type="string" name="name" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].name" required="True"/>
                        <prop type="object" name="properties" clientFlatten="True">
                          <prop type="object" name="dnsSettings" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.dnsSettings">
                            <prop type="array<string>" name="dnsServers" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.dnsSettings.dnsServers">
                              <item type="string"/>
                            </prop>
                          </prop>
                          <prop type="boolean" name="enableAcceleratedNetworking" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.enableAcceleratedNetworking"/>
                          <prop type="boolean" name="enableIPForwarding" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.enableIPForwarding"/>
                          <prop type="array<object>" name="ipConfigurations" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations" required="True">
                            <item type="object">
                              <prop type="string" name="id" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].id"/>
                              <prop type="string" name="name" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].name" required="True"/>
                              <prop type="object" name="properties" clientFlatten="True">
                                <prop type="array<@SubResource_update>" name="applicationGatewayBackendAddressPools" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.applicationGatewayBackendAddressPools">
                                  <item type="@SubResource_update"/>
                                </prop>
                                <prop type="array<@SubResource_update>" name="loadBalancerBackendAddressPools" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.loadBalancerBackendAddressPools">
                                  <item type="@SubResource_update"/>
                                </prop>
                                <prop type="array<@SubResource_update>" name="loadBalancerInboundNatPools" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.loadBalancerInboundNatPools">
                                  <item type="@SubResource_update"/>
                                </prop>
                                <prop type="boolean" name="primary" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.primary"/>
                                <prop type="string" name="privateIPAddressVersion" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.privateIPAddressVersion">
                                  <enum>
                                    <item value="&quot;IPv4&quot;"/>
                                    <item value="&quot;IPv6&quot;"/>
                                  </enum>
                                </prop>
                                <prop type="object" name="publicIPAddressConfiguration" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration">
                                  <prop type="string" name="name" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.name" required="True"/>
                                  <prop type="object" name="properties" clientFlatten="True">
                                    <prop type="object" name="dnsSettings" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.properties.dnsSettings">
                                      <prop type="string" name="domainNameLabel" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.properties.dnsSettings.domainNameLabel" required="True"/>
                                    </prop>
                                    <prop type="integer32" name="idleTimeoutInMinutes" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.publicIPAddressConfiguration.properties.idleTimeoutInMinutes"/>
                                  </prop>
                                </prop>
                                <prop type="@ApiEntityReference_update" name="subnet" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.ipConfigurations[].properties.subnet"/>
                              </prop>
                            </item>
                          </prop>
                          <prop type="@SubResource_update" name="networkSecurityGroup" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.networkSecurityGroup"/>
                          <prop type="boolean" name="primary" arg="$parameters.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].properties.primary"/>
                        </prop>
                      </item>
                    </prop>
                  </prop>
                  <prop type="object" name="osProfile" arg="$parameters.properties.virtualMachineProfile.osProfile">
                    <prop type="string" name="adminPassword" arg="$parameters.properties.virtualMachineProfile.osProfile.adminPassword"/>
                    <prop type="string" name="adminUsername" arg="$parameters.properties.virtualMachineProfile.osProfile.adminUsername"/>
                    <prop type="string" name="computerNamePrefix" arg="$parameters.properties.virtualMachineProfile.osProfile.computerNamePrefix"/>
                    <prop type="string" name="customData" arg="$parameters.properties.virtualMachineProfile.osProfile.customData"/>
                    <prop type="object" name="linuxConfiguration" arg="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration">
                      <prop type="boolean" name="disablePasswordAuthentication" arg="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.disablePasswordAuthentication"/>
                      <prop type="object" name="ssh" arg="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh">
                        <prop type="array<object>" name="publicKeys" arg="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys">
                          <item type="object">
                            <prop type="string" name="keyData" arg="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys[].keyData"/>
                            <prop type="string" name="path" arg="$parameters.properties.virtualMachineProfile.osProfile.linuxConfiguration.ssh.publicKeys[].path"/>
                          </item>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="array<object>" name="secrets" arg="$parameters.properties.virtualMachineProfile.osProfile.secrets">
                      <item type="object">
                        <prop type="object" name="sourceVault" arg="$parameters.properties.virtualMachineProfile.osProfile.secrets[].sourceVault" cls="SubResource_update">
                          <prop type="string" name="id" arg="@SubResource_update.id"/>
                        </prop>
                        <prop type="array<object>" name="vaultCertificates" arg="$parameters.properties.virtualMachineProfile.osProfile.secrets[].vaultCertificates">
                          <item type="object">
                            <prop type="string" name="certificateStore" arg="$parameters.properties.virtualMachineProfile.osProfile.secrets[].vaultCertificates[].certificateStore"/>
                            <prop type="string" name="certificateUrl" arg="$parameters.properties.virtualMachineProfile.osProfile.secrets[].vaultCertificates[].certificateUrl"/>
                          </item>
                        </prop>
                      </item>
                    </prop>
                    <prop type="object" name="windowsConfiguration" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration">
                      <prop type="array<object>" name="additionalUnattendContent" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent">
                        <item type="object">
                          <prop type="string" name="componentName" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].componentName">
                            <enum>
                              <item value="&quot;Microsoft-Windows-Shell-Setup&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="content" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].content"/>
                          <prop type="string" name="passName" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].passName">
                            <enum>
                              <item value="&quot;OobeSystem&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="settingName" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.additionalUnattendContent[].settingName">
                            <enum>
                              <item value="&quot;AutoLogon&quot;"/>
                              <item value="&quot;FirstLogonCommands&quot;"/>
                            </enum>
                          </prop>
                        </item>
                      </prop>
                      <prop type="boolean" name="enableAutomaticUpdates" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.enableAutomaticUpdates"/>
                      <prop type="boolean" name="provisionVMAgent" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.provisionVMAgent"/>
                      <prop type="string" name="timeZone" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.timeZone"/>
                      <prop type="object" name="winRM" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM">
                        <prop type="array<object>" name="listeners" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners">
                          <item type="object">
                            <prop type="string" name="certificateUrl" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners[].certificateUrl"/>
                            <prop type="string" name="protocol" arg="$parameters.properties.virtualMachineProfile.osProfile.windowsConfiguration.winRM.listeners[].protocol">
                              <enum>
                                <item value="&quot;Http&quot;"/>
                                <item value="&quot;Https&quot;"/>
                              </enum>
                            </prop>
                          </item>
                        </prop>
                      </prop>
                    </prop>
                  </prop>
                  <prop type="string" name="priority" arg="$parameters.properties.virtualMachineProfile.priority">
                    <enum>
                      <item value="&quot;Low&quot;"/>
                      <item value="&quot;Regular&quot;"/>
                    </enum>
                  </prop>
                  <prop type="object" name="storageProfile" arg="$parameters.properties.virtualMachineProfile.storageProfile">
                    <prop type="array<object>" name="dataDisks" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks">
                      <item type="object">
                        <prop type="string" name="caching" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].caching">
                          <enum>
                            <item value="&quot;None&quot;"/>
                            <item value="&quot;ReadOnly&quot;"/>
                            <item value="&quot;ReadWrite&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="createOption" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].createOption" required="True">
                          <enum>
                            <item value="&quot;Attach&quot;"/>
                            <item value="&quot;Empty&quot;"/>
                            <item value="&quot;FromImage&quot;"/>
                          </enum>
                        </prop>
                        <prop type="integer32" name="diskSizeGB" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].diskSizeGB"/>
                        <prop type="integer32" name="lun" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].lun" required="True"/>
                        <prop type="@VirtualMachineScaleSetManagedDiskParameters_update" name="managedDisk" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].managedDisk"/>
                        <prop type="string" name="name" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].name"/>
                        <prop type="boolean" name="writeAcceleratorEnabled" arg="$parameters.properties.virtualMachineProfile.storageProfile.dataDisks[].writeAcceleratorEnabled"/>
                      </item>
                    </prop>
                    <prop type="object" name="imageReference" arg="$parameters.properties.virtualMachineProfile.storageProfile.imageReference">
                      <prop type="string" name="id" arg="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.id"/>
                      <prop type="string" name="offer" arg="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.offer"/>
                      <prop type="string" name="publisher" arg="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.publisher"/>
                      <prop type="string" name="sku" arg="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.sku"/>
                      <prop type="string" name="version" arg="$parameters.properties.virtualMachineProfile.storageProfile.imageReference.version"/>
                    </prop>
                    <prop type="object" name="osDisk" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk">
                      <prop type="string" name="caching" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.caching">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;ReadOnly&quot;"/>
                          <item value="&quot;ReadWrite&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="createOption" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.createOption" required="True">
                        <enum>
                          <item value="&quot;Attach&quot;"/>
                          <item value="&quot;Empty&quot;"/>
                          <item value="&quot;FromImage&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="image" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.image">
                        <prop type="string" name="uri" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.image.uri"/>
                      </prop>
                      <prop type="object" name="managedDisk" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.managedDisk" cls="VirtualMachineScaleSetManagedDiskParameters_update">
                        <prop type="string" name="storageAccountType" arg="@VirtualMachineScaleSetManagedDiskParameters_update.storageAccountType">
                          <enum>
                            <item value="&quot;Premium_LRS&quot;"/>
                            <item value="&quot;Standard_LRS&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="string" name="name" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.name"/>
                      <prop type="string" name="osType" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.osType">
                        <enum>
                          <item value="&quot;Linux&quot;"/>
                          <item value="&quot;Windows&quot;"/>
                        </enum>
                      </prop>
                      <prop type="array<string>" name="vhdContainers" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.vhdContainers">
                        <item type="string"/>
                      </prop>
                      <prop type="boolean" name="writeAcceleratorEnabled" arg="$parameters.properties.virtualMachineProfile.storageProfile.osDisk.writeAcceleratorEnabled"/>
                    </prop>
                  </prop>
                </prop>
                <prop type="boolean" name="zoneBalance" arg="$parameters.properties.zoneBalance"/>
              </prop>
              <prop type="object" name="sku" arg="$parameters.sku">
                <prop type="integer64" name="capacity" arg="$parameters.sku.capacity"/>
                <prop type="string" name="name" arg="$parameters.sku.name"/>
                <prop type="string" name="tier" arg="$parameters.sku.tier"/>
              </prop>
              <prop type="object" name="tags" arg="$parameters.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
              <prop type="array<string>" name="zones" arg="$parameters.zones">
                <item type="string"/>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="VirtualMachineScaleSets_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}">
          <request method="put">
            <path>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              <param type="string" name="vmScaleSetName" arg="$Path.vmScaleSetName" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2017-12-01&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@VirtualMachineScaleSet_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
