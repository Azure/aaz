<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkwatchers/{}/networkconfigurationdiagnostic" version="2022-01-01" swagger="mgmt-plane/network/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9uZXR3b3JrV2F0Y2hlcnMve25ldHdvcmtXYXRjaGVyTmFtZX0vbmV0d29ya0NvbmZpZ3VyYXRpb25EaWFnbm9zdGlj/V/MjAyMi0wMS0wMQ=="/>
  <commandGroup name="network watcher">
    <command name="run-configuration-diagnostic" version="2022-01-01" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkwatchers/{}/networkconfigurationdiagnostic" version="2022-01-01" swagger="mgmt-plane/network/ResourceProviders/Microsoft.Network/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuTmV0d29yay9uZXR3b3JrV2F0Y2hlcnMve25ldHdvcmtXYXRjaGVyTmFtZX0vbmV0d29ya0NvbmZpZ3VyYXRpb25EaWFnbm9zdGlj/V/MjAyMi0wMS0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.networkWatcherName" options="watcher-name" required="True" group="" idPart="name">
          <help short="Name of the network watcher."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="watcher-rg" required="True" group="" idPart="resource_group">
          <help short="Name of the resource group the watcher is in."/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="string" var="$parameters.verbosityLevel" options="verbosity-level" hide="True" group="Parameters">
          <help short="Verbosity level."/>
          <enum>
            <item name="Full" value="&quot;Full&quot;"/>
            <item name="Minimum" value="&quot;Minimum&quot;"/>
            <item name="Normal" value="&quot;Normal&quot;"/>
          </enum>
        </arg>
      </argGroup>
      <argGroup name="Query">
        <arg type="array<object>" var="$parameters.profiles" options="queries" required="True" group="Query">
          <help short="JSON list of queries to use. Use `@{path}` to load from a file."/>
          <item type="object">
            <arg type="string" var="$parameters.profiles[].destination" options="destination" required="True">
              <help short="Traffic destination. Accepted values are: '*', IP Address/CIDR, Service Tag."/>
            </arg>
            <arg type="string" var="$parameters.profiles[].destinationPort" options="destination-port" required="True">
              <help short="Traffic destination port. Accepted values are '*' and a single port in the range (0 - 65535)."/>
            </arg>
            <arg type="string" var="$parameters.profiles[].direction" options="direction" required="True">
              <help short="The direction of the traffic."/>
              <enum>
                <item name="Inbound" value="&quot;Inbound&quot;"/>
                <item name="Outbound" value="&quot;Outbound&quot;"/>
              </enum>
            </arg>
            <arg type="string" var="$parameters.profiles[].protocol" options="protocol" required="True">
              <help short="Protocol to be verified on. Accepted values are '*', TCP, UDP."/>
            </arg>
            <arg type="string" var="$parameters.profiles[].source" options="source" required="True">
              <help short="Traffic source. Accepted values are '*', IP Address/CIDR, Service Tag."/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <argGroup name="Target">
        <arg type="string" var="$parameters.targetResourceId" options="resource" required="True" group="Target">
          <help short="Name or ID of the target resource to diagnose. If an ID is given, other resource arguments should not be given."/>
        </arg>
      </argGroup>
      <operation operationId="NetworkWatchers_GetNetworkConfigurationDiagnostic">
        <longRunning finalStateVia="location"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/networkConfigurationDiagnostic">
          <request method="post">
            <path>
              <param type="string" name="networkWatcherName" arg="$Path.networkWatcherName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-01-01&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="array<object>" name="profiles" arg="$parameters.profiles" required="True">
                    <item type="object">
                      <prop type="string" name="destination" arg="$parameters.profiles[].destination" required="True"/>
                      <prop type="string" name="destinationPort" arg="$parameters.profiles[].destinationPort" required="True"/>
                      <prop type="string" name="direction" arg="$parameters.profiles[].direction" required="True">
                        <enum>
                          <item value="&quot;Inbound&quot;"/>
                          <item value="&quot;Outbound&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="protocol" arg="$parameters.profiles[].protocol" required="True"/>
                      <prop type="string" name="source" arg="$parameters.profiles[].source" required="True"/>
                    </item>
                  </prop>
                  <prop type="string" name="targetResourceId" arg="$parameters.targetResourceId" required="True"/>
                  <prop type="string" name="verbosityLevel" arg="$parameters.verbosityLevel">
                    <enum>
                      <item value="&quot;Full&quot;"/>
                      <item value="&quot;Minimum&quot;"/>
                      <item value="&quot;Normal&quot;"/>
                    </enum>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="NetworkConfigurationDiagnosticResponse_read">
                  <prop readOnly="True" type="array<object>" name="results">
                    <item type="object">
                      <prop type="object" name="networkSecurityGroupResult">
                        <prop readOnly="True" type="array<object>" name="evaluatedNetworkSecurityGroups">
                          <item type="object">
                            <prop type="string" name="appliedTo"/>
                            <prop type="object" name="matchedRule">
                              <prop type="string" name="action"/>
                              <prop type="string" name="ruleName"/>
                            </prop>
                            <prop type="string" name="networkSecurityGroupId"/>
                            <prop readOnly="True" type="array<object>" name="rulesEvaluationResult">
                              <item type="object">
                                <prop type="boolean" name="destinationMatched"/>
                                <prop type="boolean" name="destinationPortMatched"/>
                                <prop type="string" name="name"/>
                                <prop type="boolean" name="protocolMatched"/>
                                <prop type="boolean" name="sourceMatched"/>
                                <prop type="boolean" name="sourcePortMatched"/>
                              </item>
                            </prop>
                          </item>
                        </prop>
                        <prop type="string" name="securityRuleAccessResult">
                          <enum>
                            <item value="&quot;Allow&quot;"/>
                            <item value="&quot;Deny&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="object" name="profile">
                        <prop type="string" name="destination" required="True"/>
                        <prop type="string" name="destinationPort" required="True"/>
                        <prop type="string" name="direction" required="True">
                          <enum>
                            <item value="&quot;Inbound&quot;"/>
                            <item value="&quot;Outbound&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="protocol" required="True"/>
                        <prop type="string" name="source" required="True"/>
                      </prop>
                    </item>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response statusCode="202">
            <body>
              <json var="$Instance">
                <schema type="@NetworkConfigurationDiagnosticResponse_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
