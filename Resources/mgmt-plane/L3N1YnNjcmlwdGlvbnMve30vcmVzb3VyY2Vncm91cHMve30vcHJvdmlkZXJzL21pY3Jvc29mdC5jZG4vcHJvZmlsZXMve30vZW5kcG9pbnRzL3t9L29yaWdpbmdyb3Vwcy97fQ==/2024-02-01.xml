<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.cdn/profiles/{}/endpoints/{}/origingroups/{}" version="2024-02-01" swagger="mgmt-plane/cdn/ResourceProviders/Microsoft.Cdn/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ2RuL3Byb2ZpbGVzL3twcm9maWxlTmFtZX0vZW5kcG9pbnRzL3tlbmRwb2ludE5hbWV9L29yaWdpbkdyb3Vwcy97b3JpZ2luR3JvdXBOYW1lfQ==/V/MjAyNC0wMi0wMQ=="/>
  <commandGroup name="cdn origin-group">
    <command name="show" version="2024-02-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.cdn/profiles/{}/endpoints/{}/origingroups/{}" version="2024-02-01" swagger="mgmt-plane/cdn/ResourceProviders/Microsoft.Cdn/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ2RuL3Byb2ZpbGVzL3twcm9maWxlTmFtZX0vZW5kcG9pbnRzL3tlbmRwb2ludE5hbWV9L29yaWdpbkdyb3Vwcy97b3JpZ2luR3JvdXBOYW1lfQ==/V/MjAyNC0wMi0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.endpointName" options="endpoint-name" required="True" idPart="child_name_1">
          <help short="Name of the endpoint under the profile which is unique globally."/>
        </arg>
        <arg type="string" var="$Path.originGroupName" options="origin-group-name name n" required="True" idPart="child_name_2">
          <help short="Name of the origin group which is unique within the endpoint."/>
        </arg>
        <arg type="string" var="$Path.profileName" options="profile-name" required="True" idPart="name">
          <help short="Name of the CDN profile which is unique within the resource group."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="OriginGroups_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/originGroups/{originGroupName}">
          <request method="get">
            <path>
              <param type="string" name="endpointName" arg="$Path.endpointName" required="True"/>
              <param type="string" name="originGroupName" arg="$Path.originGroupName" required="True"/>
              <param type="string" name="profileName" arg="$Path.profileName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-02-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Cdn/profiles/{}/endpoints/{}/originGroups/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="healthProbeSettings">
                      <prop type="integer32" name="probeIntervalInSeconds">
                        <format maximum="255" minimum="1"/>
                      </prop>
                      <prop type="string" name="probePath"/>
                      <prop type="string" name="probeProtocol">
                        <enum>
                          <item value="&quot;Http&quot;"/>
                          <item value="&quot;Https&quot;"/>
                          <item value="&quot;NotSet&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="probeRequestType">
                        <enum>
                          <item value="&quot;GET&quot;"/>
                          <item value="&quot;HEAD&quot;"/>
                          <item value="&quot;NotSet&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="array<object>" name="origins" required="True">
                      <item type="object">
                        <prop type="string" name="id"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="resourceState">
                      <enum>
                        <item value="&quot;Active&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="responseBasedOriginErrorDetectionSettings">
                      <prop type="array<object>" name="httpErrorRanges">
                        <item type="object">
                          <prop type="integer32" name="begin">
                            <format maximum="999" minimum="100"/>
                          </prop>
                          <prop type="integer32" name="end">
                            <format maximum="999" minimum="100"/>
                          </prop>
                        </item>
                      </prop>
                      <prop type="string" name="responseBasedDetectedErrorTypes">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;TcpAndHttpErrors&quot;"/>
                          <item value="&quot;TcpErrorsOnly&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer32" name="responseBasedFailoverThresholdPercentage">
                        <format maximum="100" minimum="0"/>
                      </prop>
                    </prop>
                    <prop type="integer32" name="trafficRestorationTimeToHealedOrNewEndpointsInMinutes">
                      <format maximum="50" minimum="0"/>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;application&quot;"/>
                        <item value="&quot;key&quot;"/>
                        <item value="&quot;managedIdentity&quot;"/>
                        <item value="&quot;user&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;application&quot;"/>
                        <item value="&quot;key&quot;"/>
                        <item value="&quot;managedIdentity&quot;"/>
                        <item value="&quot;user&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2024-02-01" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.cdn/profiles/{}/endpoints/{}/origingroups/{}" version="2024-02-01" swagger="mgmt-plane/cdn/ResourceProviders/Microsoft.Cdn/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ2RuL3Byb2ZpbGVzL3twcm9maWxlTmFtZX0vZW5kcG9pbnRzL3tlbmRwb2ludE5hbWV9L29yaWdpbkdyb3Vwcy97b3JpZ2luR3JvdXBOYW1lfQ==/V/MjAyNC0wMi0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.endpointName" options="endpoint-name" required="True" idPart="child_name_1">
          <help short="Name of the endpoint under the profile which is unique globally."/>
        </arg>
        <arg type="string" var="$Path.originGroupName" options="origin-group-name name n" required="True" idPart="child_name_2">
          <help short="Name of the origin group which is unique within the endpoint."/>
        </arg>
        <arg type="string" var="$Path.profileName" options="profile-name" required="True" idPart="name">
          <help short="Name of the CDN profile which is unique within the resource group."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="OriginGroups_Delete">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/originGroups/{originGroupName}">
          <request method="delete">
            <path>
              <param type="string" name="endpointName" arg="$Path.endpointName" required="True"/>
              <param type="string" name="originGroupName" arg="$Path.originGroupName" required="True"/>
              <param type="string" name="profileName" arg="$Path.profileName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-02-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="202">
            <header>
              <item name="location"/>
            </header>
          </response>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2024-02-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.cdn/profiles/{}/endpoints/{}/origingroups/{}" version="2024-02-01" swagger="mgmt-plane/cdn/ResourceProviders/Microsoft.Cdn/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ2RuL3Byb2ZpbGVzL3twcm9maWxlTmFtZX0vZW5kcG9pbnRzL3tlbmRwb2ludE5hbWV9L29yaWdpbkdyb3Vwcy97b3JpZ2luR3JvdXBOYW1lfQ==/V/MjAyNC0wMi0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.endpointName" options="endpoint-name" required="True" idPart="child_name_1">
          <help short="Name of the endpoint under the profile which is unique globally."/>
        </arg>
        <arg type="string" var="$Path.originGroupName" options="origin-group-name name n" required="True" idPart="child_name_2">
          <help short="Name of the origin group which is unique within the endpoint."/>
        </arg>
        <arg type="string" var="$Path.profileName" options="profile-name" required="True" idPart="name">
          <help short="Name of the CDN profile which is unique within the resource group."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Properties">
        <arg type="object" var="$originGroup.properties.healthProbeSettings" options="health-probe-settings" group="Properties">
          <help short="Health probe settings to the origin that is used to determine the health of the origin."/>
          <arg type="integer32" var="$originGroup.properties.healthProbeSettings.probeIntervalInSeconds" options="probe-interval-in-seconds">
            <help short="The number of seconds between health probes.Default is 240sec."/>
            <format maximum="255" minimum="1"/>
          </arg>
          <arg type="string" var="$originGroup.properties.healthProbeSettings.probePath" options="probe-path">
            <help short="The path relative to the origin that is used to determine the health of the origin."/>
          </arg>
          <arg type="string" var="$originGroup.properties.healthProbeSettings.probeProtocol" options="probe-protocol">
            <help short="Protocol to use for health probe."/>
            <enum>
              <item name="Http" value="&quot;Http&quot;"/>
              <item name="Https" value="&quot;Https&quot;"/>
              <item name="NotSet" value="&quot;NotSet&quot;"/>
            </enum>
          </arg>
          <arg type="string" var="$originGroup.properties.healthProbeSettings.probeRequestType" options="probe-request-type">
            <help short="The type of health probe request that is made."/>
            <enum>
              <item name="GET" value="&quot;GET&quot;"/>
              <item name="HEAD" value="&quot;HEAD&quot;"/>
              <item name="NotSet" value="&quot;NotSet&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg type="array<object>" var="$originGroup.properties.origins" options="formatted-origins" group="Properties">
          <help short="The source of the content being delivered via CDN within given origin group."/>
          <item type="object">
            <arg type="string" var="$originGroup.properties.origins[].id" options="id">
              <help short="Resource ID."/>
            </arg>
          </item>
        </arg>
        <arg type="object" var="$originGroup.properties.responseBasedOriginErrorDetectionSettings" options="response-based-origin-error-detection-settings" group="Properties">
          <help short="The JSON object that contains the properties to determine origin health using real requests/responses. This property is currently not supported."/>
          <arg type="array<object>" var="$originGroup.properties.responseBasedOriginErrorDetectionSettings.httpErrorRanges" options="http-error-ranges">
            <help short="The list of Http status code ranges that are considered as server errors for origin and it is marked as unhealthy."/>
            <item type="object">
              <arg type="integer32" var="$originGroup.properties.responseBasedOriginErrorDetectionSettings.httpErrorRanges[].begin" options="begin">
                <help short="The inclusive start of the http status code range."/>
                <format maximum="999" minimum="100"/>
              </arg>
              <arg type="integer32" var="$originGroup.properties.responseBasedOriginErrorDetectionSettings.httpErrorRanges[].end" options="end">
                <help short="The inclusive end of the http status code range."/>
                <format maximum="999" minimum="100"/>
              </arg>
            </item>
          </arg>
          <arg type="string" var="$originGroup.properties.responseBasedOriginErrorDetectionSettings.responseBasedDetectedErrorTypes" options="response-based-detected-error-types">
            <help short="Type of response errors for real user requests for which origin will be deemed unhealthy"/>
            <enum>
              <item name="None" value="&quot;None&quot;"/>
              <item name="TcpAndHttpErrors" value="&quot;TcpAndHttpErrors&quot;"/>
              <item name="TcpErrorsOnly" value="&quot;TcpErrorsOnly&quot;"/>
            </enum>
          </arg>
          <arg type="integer32" var="$originGroup.properties.responseBasedOriginErrorDetectionSettings.responseBasedFailoverThresholdPercentage" options="response-based-failover-threshold-percentage">
            <help short="The percentage of failed requests in the sample where failover should trigger."/>
            <format maximum="100" minimum="0"/>
          </arg>
        </arg>
        <arg type="integer32" var="$originGroup.properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes" options="traffic-restoration-time-to-healed-or-new-endpoints-in-minutes" group="Properties">
          <help short="Time in minutes to shift the traffic to the endpoint gradually when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins. This property is currently not supported."/>
          <format maximum="50" minimum="0"/>
        </arg>
      </argGroup>
      <operation operationId="OriginGroups_Create">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/originGroups/{originGroupName}">
          <request method="put">
            <path>
              <param type="string" name="endpointName" arg="$Path.endpointName" required="True"/>
              <param type="string" name="originGroupName" arg="$Path.originGroupName" required="True"/>
              <param type="string" name="profileName" arg="$Path.profileName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-02-01&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="originGroup" required="True" clientFlatten="True">
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="healthProbeSettings" arg="$originGroup.properties.healthProbeSettings">
                      <prop type="integer32" name="probeIntervalInSeconds" arg="$originGroup.properties.healthProbeSettings.probeIntervalInSeconds">
                        <format maximum="255" minimum="1"/>
                      </prop>
                      <prop type="string" name="probePath" arg="$originGroup.properties.healthProbeSettings.probePath"/>
                      <prop type="string" name="probeProtocol" arg="$originGroup.properties.healthProbeSettings.probeProtocol">
                        <enum>
                          <item value="&quot;Http&quot;"/>
                          <item value="&quot;Https&quot;"/>
                          <item value="&quot;NotSet&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="probeRequestType" arg="$originGroup.properties.healthProbeSettings.probeRequestType">
                        <enum>
                          <item value="&quot;GET&quot;"/>
                          <item value="&quot;HEAD&quot;"/>
                          <item value="&quot;NotSet&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="array<object>" name="origins" arg="$originGroup.properties.origins" required="True">
                      <item type="object">
                        <prop type="string" name="id" arg="$originGroup.properties.origins[].id"/>
                      </item>
                    </prop>
                    <prop type="object" name="responseBasedOriginErrorDetectionSettings" arg="$originGroup.properties.responseBasedOriginErrorDetectionSettings">
                      <prop type="array<object>" name="httpErrorRanges" arg="$originGroup.properties.responseBasedOriginErrorDetectionSettings.httpErrorRanges">
                        <item type="object">
                          <prop type="integer32" name="begin" arg="$originGroup.properties.responseBasedOriginErrorDetectionSettings.httpErrorRanges[].begin">
                            <format maximum="999" minimum="100"/>
                          </prop>
                          <prop type="integer32" name="end" arg="$originGroup.properties.responseBasedOriginErrorDetectionSettings.httpErrorRanges[].end">
                            <format maximum="999" minimum="100"/>
                          </prop>
                        </item>
                      </prop>
                      <prop type="string" name="responseBasedDetectedErrorTypes" arg="$originGroup.properties.responseBasedOriginErrorDetectionSettings.responseBasedDetectedErrorTypes">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;TcpAndHttpErrors&quot;"/>
                          <item value="&quot;TcpErrorsOnly&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer32" name="responseBasedFailoverThresholdPercentage" arg="$originGroup.properties.responseBasedOriginErrorDetectionSettings.responseBasedFailoverThresholdPercentage">
                        <format maximum="100" minimum="0"/>
                      </prop>
                    </prop>
                    <prop type="integer32" name="trafficRestorationTimeToHealedOrNewEndpointsInMinutes" arg="$originGroup.properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes">
                      <format maximum="50" minimum="0"/>
                    </prop>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object" cls="OriginGroup_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Cdn/profiles/{}/endpoints/{}/originGroups/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="healthProbeSettings">
                      <prop type="integer32" name="probeIntervalInSeconds">
                        <format maximum="255" minimum="1"/>
                      </prop>
                      <prop type="string" name="probePath"/>
                      <prop type="string" name="probeProtocol">
                        <enum>
                          <item value="&quot;Http&quot;"/>
                          <item value="&quot;Https&quot;"/>
                          <item value="&quot;NotSet&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="probeRequestType">
                        <enum>
                          <item value="&quot;GET&quot;"/>
                          <item value="&quot;HEAD&quot;"/>
                          <item value="&quot;NotSet&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="array<object>" name="origins" required="True">
                      <item type="object">
                        <prop type="string" name="id"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="resourceState">
                      <enum>
                        <item value="&quot;Active&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="responseBasedOriginErrorDetectionSettings">
                      <prop type="array<object>" name="httpErrorRanges">
                        <item type="object">
                          <prop type="integer32" name="begin">
                            <format maximum="999" minimum="100"/>
                          </prop>
                          <prop type="integer32" name="end">
                            <format maximum="999" minimum="100"/>
                          </prop>
                        </item>
                      </prop>
                      <prop type="string" name="responseBasedDetectedErrorTypes">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;TcpAndHttpErrors&quot;"/>
                          <item value="&quot;TcpErrorsOnly&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer32" name="responseBasedFailoverThresholdPercentage">
                        <format maximum="100" minimum="0"/>
                      </prop>
                    </prop>
                    <prop type="integer32" name="trafficRestorationTimeToHealedOrNewEndpointsInMinutes">
                      <format maximum="50" minimum="0"/>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;application&quot;"/>
                        <item value="&quot;key&quot;"/>
                        <item value="&quot;managedIdentity&quot;"/>
                        <item value="&quot;user&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;application&quot;"/>
                        <item value="&quot;key&quot;"/>
                        <item value="&quot;managedIdentity&quot;"/>
                        <item value="&quot;user&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response statusCode="202">
            <header>
              <item name="location"/>
            </header>
            <body>
              <json var="$Instance">
                <schema type="@OriginGroup_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2024-02-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.cdn/profiles/{}/endpoints/{}/origingroups/{}" version="2024-02-01" swagger="mgmt-plane/cdn/ResourceProviders/Microsoft.Cdn/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuQ2RuL3Byb2ZpbGVzL3twcm9maWxlTmFtZX0vZW5kcG9pbnRzL3tlbmRwb2ludE5hbWV9L29yaWdpbkdyb3Vwcy97b3JpZ2luR3JvdXBOYW1lfQ==/V/MjAyNC0wMi0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.endpointName" options="endpoint-name" required="True" idPart="child_name_1">
          <help short="Name of the endpoint under the profile which is unique globally."/>
        </arg>
        <arg type="string" var="$Path.originGroupName" options="origin-group-name name n" required="True" idPart="child_name_2">
          <help short="Name of the origin group which is unique within the endpoint."/>
        </arg>
        <arg type="string" var="$Path.profileName" options="profile-name" required="True" idPart="name">
          <help short="Name of the CDN profile which is unique within the resource group."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="object" var="$originGroup.properties.healthProbeSettings" options="health-probe-settings" group="Properties">
          <help short="Health probe settings to the origin that is used to determine the health of the origin."/>
          <arg nullable="True" type="integer32" var="$originGroup.properties.healthProbeSettings.probeIntervalInSeconds" options="probe-interval-in-seconds">
            <help short="The number of seconds between health probes.Default is 240sec."/>
            <format maximum="255" minimum="1"/>
          </arg>
          <arg nullable="True" type="string" var="$originGroup.properties.healthProbeSettings.probePath" options="probe-path">
            <help short="The path relative to the origin that is used to determine the health of the origin."/>
          </arg>
          <arg nullable="True" type="string" var="$originGroup.properties.healthProbeSettings.probeProtocol" options="probe-protocol">
            <help short="Protocol to use for health probe."/>
            <enum>
              <item name="Http" value="&quot;Http&quot;"/>
              <item name="Https" value="&quot;Https&quot;"/>
              <item name="NotSet" value="&quot;NotSet&quot;"/>
            </enum>
          </arg>
          <arg nullable="True" type="string" var="$originGroup.properties.healthProbeSettings.probeRequestType" options="probe-request-type">
            <help short="The type of health probe request that is made."/>
            <enum>
              <item name="GET" value="&quot;GET&quot;"/>
              <item name="HEAD" value="&quot;HEAD&quot;"/>
              <item name="NotSet" value="&quot;NotSet&quot;"/>
            </enum>
          </arg>
        </arg>
        <arg type="array<object>" var="$originGroup.properties.origins" options="formatted-origins" group="Properties">
          <help short="The source of the content being delivered via CDN within given origin group."/>
          <item nullable="True" type="object">
            <arg nullable="True" type="string" var="$originGroup.properties.origins[].id" options="id">
              <help short="Resource ID."/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="object" var="$originGroup.properties.responseBasedOriginErrorDetectionSettings" options="response-based-origin-error-detection-settings" group="Properties">
          <help short="The JSON object that contains the properties to determine origin health using real requests/responses. This property is currently not supported."/>
          <arg nullable="True" type="array<object>" var="$originGroup.properties.responseBasedOriginErrorDetectionSettings.httpErrorRanges" options="http-error-ranges">
            <help short="The list of Http status code ranges that are considered as server errors for origin and it is marked as unhealthy."/>
            <item nullable="True" type="object">
              <arg nullable="True" type="integer32" var="$originGroup.properties.responseBasedOriginErrorDetectionSettings.httpErrorRanges[].begin" options="begin">
                <help short="The inclusive start of the http status code range."/>
                <format maximum="999" minimum="100"/>
              </arg>
              <arg nullable="True" type="integer32" var="$originGroup.properties.responseBasedOriginErrorDetectionSettings.httpErrorRanges[].end" options="end">
                <help short="The inclusive end of the http status code range."/>
                <format maximum="999" minimum="100"/>
              </arg>
            </item>
          </arg>
          <arg nullable="True" type="string" var="$originGroup.properties.responseBasedOriginErrorDetectionSettings.responseBasedDetectedErrorTypes" options="response-based-detected-error-types">
            <help short="Type of response errors for real user requests for which origin will be deemed unhealthy"/>
            <enum>
              <item name="None" value="&quot;None&quot;"/>
              <item name="TcpAndHttpErrors" value="&quot;TcpAndHttpErrors&quot;"/>
              <item name="TcpErrorsOnly" value="&quot;TcpErrorsOnly&quot;"/>
            </enum>
          </arg>
          <arg nullable="True" type="integer32" var="$originGroup.properties.responseBasedOriginErrorDetectionSettings.responseBasedFailoverThresholdPercentage" options="response-based-failover-threshold-percentage">
            <help short="The percentage of failed requests in the sample where failover should trigger."/>
            <format maximum="100" minimum="0"/>
          </arg>
        </arg>
        <arg nullable="True" type="integer32" var="$originGroup.properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes" options="traffic-restoration-time-to-healed-or-new-endpoints-in-minutes" group="Properties">
          <help short="Time in minutes to shift the traffic to the endpoint gradually when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins. This property is currently not supported."/>
          <format maximum="50" minimum="0"/>
        </arg>
      </argGroup>
      <operation operationId="OriginGroups_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/originGroups/{originGroupName}">
          <request method="get">
            <path>
              <param type="string" name="endpointName" arg="$Path.endpointName" required="True"/>
              <param type="string" name="originGroupName" arg="$Path.originGroupName" required="True"/>
              <param type="string" name="profileName" arg="$Path.profileName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-02-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="OriginGroup_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Cdn/profiles/{}/endpoints/{}/originGroups/{}"/>
                  </prop>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="object" name="healthProbeSettings">
                      <prop type="integer32" name="probeIntervalInSeconds">
                        <format maximum="255" minimum="1"/>
                      </prop>
                      <prop type="string" name="probePath"/>
                      <prop type="string" name="probeProtocol">
                        <enum>
                          <item value="&quot;Http&quot;"/>
                          <item value="&quot;Https&quot;"/>
                          <item value="&quot;NotSet&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="probeRequestType">
                        <enum>
                          <item value="&quot;GET&quot;"/>
                          <item value="&quot;HEAD&quot;"/>
                          <item value="&quot;NotSet&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="array<object>" name="origins" required="True">
                      <item type="object">
                        <prop type="string" name="id"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="resourceState">
                      <enum>
                        <item value="&quot;Active&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="responseBasedOriginErrorDetectionSettings">
                      <prop type="array<object>" name="httpErrorRanges">
                        <item type="object">
                          <prop type="integer32" name="begin">
                            <format maximum="999" minimum="100"/>
                          </prop>
                          <prop type="integer32" name="end">
                            <format maximum="999" minimum="100"/>
                          </prop>
                        </item>
                      </prop>
                      <prop type="string" name="responseBasedDetectedErrorTypes">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;TcpAndHttpErrors&quot;"/>
                          <item value="&quot;TcpErrorsOnly&quot;"/>
                        </enum>
                      </prop>
                      <prop type="integer32" name="responseBasedFailoverThresholdPercentage">
                        <format maximum="100" minimum="0"/>
                      </prop>
                    </prop>
                    <prop type="integer32" name="trafficRestorationTimeToHealedOrNewEndpointsInMinutes">
                      <format maximum="50" minimum="0"/>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;application&quot;"/>
                        <item value="&quot;key&quot;"/>
                        <item value="&quot;managedIdentity&quot;"/>
                        <item value="&quot;user&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;application&quot;"/>
                        <item value="&quot;key&quot;"/>
                        <item value="&quot;managedIdentity&quot;"/>
                        <item value="&quot;user&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="originGroup" required="True" clientFlatten="True">
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="object" name="healthProbeSettings" arg="$originGroup.properties.healthProbeSettings">
                  <prop type="integer32" name="probeIntervalInSeconds" arg="$originGroup.properties.healthProbeSettings.probeIntervalInSeconds">
                    <format maximum="255" minimum="1"/>
                  </prop>
                  <prop type="string" name="probePath" arg="$originGroup.properties.healthProbeSettings.probePath"/>
                  <prop type="string" name="probeProtocol" arg="$originGroup.properties.healthProbeSettings.probeProtocol">
                    <enum>
                      <item value="&quot;Http&quot;"/>
                      <item value="&quot;Https&quot;"/>
                      <item value="&quot;NotSet&quot;"/>
                    </enum>
                  </prop>
                  <prop type="string" name="probeRequestType" arg="$originGroup.properties.healthProbeSettings.probeRequestType">
                    <enum>
                      <item value="&quot;GET&quot;"/>
                      <item value="&quot;HEAD&quot;"/>
                      <item value="&quot;NotSet&quot;"/>
                    </enum>
                  </prop>
                </prop>
                <prop type="array<object>" name="origins" arg="$originGroup.properties.origins" required="True">
                  <item type="object">
                    <prop type="string" name="id" arg="$originGroup.properties.origins[].id"/>
                  </item>
                </prop>
                <prop type="object" name="responseBasedOriginErrorDetectionSettings" arg="$originGroup.properties.responseBasedOriginErrorDetectionSettings">
                  <prop type="array<object>" name="httpErrorRanges" arg="$originGroup.properties.responseBasedOriginErrorDetectionSettings.httpErrorRanges">
                    <item type="object">
                      <prop type="integer32" name="begin" arg="$originGroup.properties.responseBasedOriginErrorDetectionSettings.httpErrorRanges[].begin">
                        <format maximum="999" minimum="100"/>
                      </prop>
                      <prop type="integer32" name="end" arg="$originGroup.properties.responseBasedOriginErrorDetectionSettings.httpErrorRanges[].end">
                        <format maximum="999" minimum="100"/>
                      </prop>
                    </item>
                  </prop>
                  <prop type="string" name="responseBasedDetectedErrorTypes" arg="$originGroup.properties.responseBasedOriginErrorDetectionSettings.responseBasedDetectedErrorTypes">
                    <enum>
                      <item value="&quot;None&quot;"/>
                      <item value="&quot;TcpAndHttpErrors&quot;"/>
                      <item value="&quot;TcpErrorsOnly&quot;"/>
                    </enum>
                  </prop>
                  <prop type="integer32" name="responseBasedFailoverThresholdPercentage" arg="$originGroup.properties.responseBasedOriginErrorDetectionSettings.responseBasedFailoverThresholdPercentage">
                    <format maximum="100" minimum="0"/>
                  </prop>
                </prop>
                <prop type="integer32" name="trafficRestorationTimeToHealedOrNewEndpointsInMinutes" arg="$originGroup.properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes">
                  <format maximum="50" minimum="0"/>
                </prop>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="OriginGroups_Create">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/originGroups/{originGroupName}">
          <request method="put">
            <path>
              <param type="string" name="endpointName" arg="$Path.endpointName" required="True"/>
              <param type="string" name="originGroupName" arg="$Path.originGroupName" required="True"/>
              <param type="string" name="profileName" arg="$Path.profileName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format pattern="^[-\w\._\(\)]+$" maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-02-01&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@OriginGroup_read"/>
              </json>
            </body>
          </response>
          <response statusCode="202">
            <header>
              <item name="location"/>
            </header>
            <body>
              <json var="$Instance">
                <schema type="@OriginGroup_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
